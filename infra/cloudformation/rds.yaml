AWSTemplateFormatVersion: '2010-09-09'
Description: 'RDS PostgreSQL database for Terraria application'

Parameters:
  Environment:
    Type: String
    Default: production
    Description: Environment name
    AllowedValues:
      - development
      - staging
      - production

  VpcStackName:
    Type: String
    Description: Name of the VPC stack to import values from
    Default: terraria-vpc

  DBName:
    Type: String
    Default: terraria
    Description: Database name
    MinLength: 1
    MaxLength: 64
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$

  DBUsername:
    Type: String
    Default: postgres
    Description: Database master username
    MinLength: 1
    MaxLength: 16
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9]*$

  DBPassword:
    Type: String
    NoEcho: true
    Description: Database master password (min 8 characters)
    MinLength: 8
    MaxLength: 41
    AllowedPattern: ^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{}|;:,.<>?]*$

  DBInstanceClass:
    Type: String
    Default: db.t3.micro
    Description: Database instance type
    AllowedValues:
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t4g.micro
      - db.t4g.small

  DBAllocatedStorage:
    Type: Number
    Default: 20
    Description: Allocated storage in GB
    MinValue: 20
    MaxValue: 100

  DBBackupRetentionPeriod:
    Type: Number
    Default: 7
    Description: Number of days to retain backups
    MinValue: 0
    MaxValue: 35

  EnablePerformanceInsights:
    Type: String
    Default: 'true'
    Description: Enable Performance Insights
    AllowedValues:
      - 'true'
      - 'false'

  MultiAZ:
    Type: String
    Default: 'false'
    Description: Enable Multi-AZ deployment
    AllowedValues:
      - 'true'
      - 'false'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Environment Configuration
        Parameters:
          - Environment
          - VpcStackName
      - Label:
          default: Database Configuration
        Parameters:
          - DBName
          - DBUsername
          - DBPassword
      - Label:
          default: Instance Configuration
        Parameters:
          - DBInstanceClass
          - DBAllocatedStorage
          - MultiAZ
      - Label:
          default: Backup and Monitoring
        Parameters:
          - DBBackupRetentionPeriod
          - EnablePerformanceInsights

Conditions:
  EnablePI: !Equals [!Ref EnablePerformanceInsights, 'true']
  EnableMultiAZ: !Equals [!Ref MultiAZ, 'true']

Resources:
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${Environment}-terraria-db-subnet-group
      DBSubnetGroupDescription: Subnet group for Terraria RDS
      SubnetIds:
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnet1
        - Fn::ImportValue: !Sub ${VpcStackName}-PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-terraria-db-subnet-group
        - Key: Environment
          Value: !Ref Environment

  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-terraria-db-sg
      GroupDescription: Security group for Terraria RDS instance
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppSecurityGroup
          Description: PostgreSQL access from application
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-terraria-db-sg
        - Key: Environment
          Value: !Ref Environment

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${Environment}-terraria-app-sg
      GroupDescription: Security group for Terraria application servers
      VpcId:
        Fn::ImportValue: !Sub ${VpcStackName}-VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          DestinationSecurityGroupId: !Ref DBSecurityGroup
          Description: PostgreSQL access to database
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-terraria-app-sg
        - Key: Environment
          Value: !Ref Environment

  DBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      DBParameterGroupName: !Sub ${Environment}-terraria-pg15
      Description: Custom parameter group for PostgreSQL 15
      Family: postgres15
      Parameters:
        shared_preload_libraries: pg_stat_statements
        log_statement: all
        log_min_duration_statement: 1000
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-terraria-pg15
        - Key: Environment
          Value: !Ref Environment

  DBInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub ${Environment}-terraria-db
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: '15.4'
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: gp3
      StorageEncrypted: true
      Iops: 3000
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DBSecurityGroup
      DBParameterGroupName: !Ref DBParameterGroup
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      MultiAZ: !If [EnableMultiAZ, true, false]
      AutoMinorVersionUpgrade: true
      PubliclyAccessible: false
      EnablePerformanceInsights: !If [EnablePI, true, false]
      PerformanceInsightsRetentionPeriod: !If [EnablePI, 7, !Ref AWS::NoValue]
      EnableCloudwatchLogsExports:
        - postgresql
        - upgrade
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-terraria-db
        - Key: Environment
          Value: !Ref Environment
        - Key: ManagedBy
          Value: CloudFormation

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${Environment}/terraria/database
      Description: Database credentials for Terraria application
      SecretString: !Sub |
        {
          "username": "${DBUsername}",
          "password": "${DBPassword}",
          "engine": "postgres",
          "host": "${DBInstance.Endpoint.Address}",
          "port": ${DBInstance.Endpoint.Port},
          "dbname": "${DBName}",
          "url": "postgresql://${DBUsername}:${DBPassword}@${DBInstance.Endpoint.Address}:${DBInstance.Endpoint.Port}/${DBName}"
        }
      Tags:
        - Key: Name
          Value: !Sub ${Environment}-terraria-db-secret
        - Key: Environment
          Value: !Ref Environment

Outputs:
  DBInstanceIdentifier:
    Description: RDS instance identifier
    Value: !Ref DBInstance
    Export:
      Name: !Sub ${AWS::StackName}-DBInstanceId

  DBEndpoint:
    Description: Database endpoint
    Value: !GetAtt DBInstance.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DBEndpoint

  DBPort:
    Description: Database port
    Value: !GetAtt DBInstance.Endpoint.Port
    Export:
      Name: !Sub ${AWS::StackName}-DBPort

  DatabaseURL:
    Description: Full database connection URL
    Value: !Sub postgresql://${DBUsername}:${DBPassword}@${DBInstance.Endpoint.Address}:${DBInstance.Endpoint.Port}/${DBName}
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseURL

  DBSecurityGroupId:
    Description: Database security group ID
    Value: !Ref DBSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-DBSecurityGroup

  AppSecurityGroupId:
    Description: Application security group ID
    Value: !Ref AppSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-AppSecurityGroup

  DBSecretArn:
    Description: ARN of the Secrets Manager secret containing database credentials
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AWS::StackName}-DBSecretArn

  DBName:
    Description: Database name
    Value: !Ref DBName
    Export:
      Name: !Sub ${AWS::StackName}-DBName
