'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var middlewareSdkEc2 = require('@aws-sdk/middleware-sdk-ec2');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "ec2",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class EC2Client extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultEC2HttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class EC2ServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, EC2ServiceException.prototype);
    }
}

const se_AcceptAddressTransferCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptAddressTransferRequest(input),
        [_A]: _AAT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptCapacityReservationBillingOwnershipCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptCapacityReservationBillingOwnershipRequest(input),
        [_A]: _ACRBO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptReservedInstancesExchangeQuoteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptReservedInstancesExchangeQuoteRequest(input),
        [_A]: _ARIEQ,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptTransitGatewayMulticastDomainAssociationsRequest(input),
        [_A]: _ATGMDA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptTransitGatewayPeeringAttachmentRequest(input),
        [_A]: _ATGPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptTransitGatewayVpcAttachmentRequest(input),
        [_A]: _ATGVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptVpcEndpointConnectionsRequest(input),
        [_A]: _AVEC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AcceptVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AcceptVpcPeeringConnectionRequest(input),
        [_A]: _AVPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AdvertiseByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AdvertiseByoipCidrRequest(input),
        [_A]: _ABC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AllocateAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AllocateAddressRequest(input),
        [_A]: _AA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AllocateHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AllocateHostsRequest(input),
        [_A]: _AH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AllocateIpamPoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AllocateIpamPoolCidrRequest(input),
        [_A]: _AIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ApplySecurityGroupsToClientVpnTargetNetworkRequest(input),
        [_A]: _ASGTCVTN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssignIpv6AddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssignIpv6AddressesRequest(input),
        [_A]: _AIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssignPrivateIpAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssignPrivateIpAddressesRequest(input),
        [_A]: _APIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssignPrivateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssignPrivateNatGatewayAddressRequest(input),
        [_A]: _APNGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateAddressRequest(input),
        [_A]: _AAs,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateCapacityReservationBillingOwnerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateCapacityReservationBillingOwnerRequest(input),
        [_A]: _ACRBOs,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateClientVpnTargetNetworkRequest(input),
        [_A]: _ACVTN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateDhcpOptionsRequest(input),
        [_A]: _ADO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateEnclaveCertificateIamRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateEnclaveCertificateIamRoleRequest(input),
        [_A]: _AECIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateIamInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateIamInstanceProfileRequest(input),
        [_A]: _AIIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateInstanceEventWindowRequest(input),
        [_A]: _AIEW,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateIpamByoasnCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateIpamByoasnRequest(input),
        [_A]: _AIB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateIpamResourceDiscoveryRequest(input),
        [_A]: _AIRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateNatGatewayAddressRequest(input),
        [_A]: _ANGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateRouteServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateRouteServerRequest(input),
        [_A]: _ARS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateRouteTableRequest(input),
        [_A]: _ART,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateSecurityGroupVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateSecurityGroupVpcRequest(input),
        [_A]: _ASGV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateSubnetCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateSubnetCidrBlockRequest(input),
        [_A]: _ASCB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTransitGatewayMulticastDomainRequest(input),
        [_A]: _ATGMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTransitGatewayPolicyTableRequest(input),
        [_A]: _ATGPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTransitGatewayRouteTableRequest(input),
        [_A]: _ATGRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateTrunkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateTrunkInterfaceRequest(input),
        [_A]: _ATI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateVpcCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AssociateVpcCidrBlockRequest(input),
        [_A]: _AVCB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachClassicLinkVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachClassicLinkVpcRequest(input),
        [_A]: _ACLV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachInternetGatewayRequest(input),
        [_A]: _AIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachNetworkInterfaceRequest(input),
        [_A]: _ANI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachVerifiedAccessTrustProviderRequest(input),
        [_A]: _AVATP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachVolumeRequest(input),
        [_A]: _AV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AttachVpnGatewayRequest(input),
        [_A]: _AVG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AuthorizeClientVpnIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeClientVpnIngressRequest(input),
        [_A]: _ACVI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AuthorizeSecurityGroupEgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeSecurityGroupEgressRequest(input),
        [_A]: _ASGE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AuthorizeSecurityGroupIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_AuthorizeSecurityGroupIngressRequest(input),
        [_A]: _ASGI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BundleInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_BundleInstanceRequest(input, context),
        [_A]: _BI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelBundleTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelBundleTaskRequest(input),
        [_A]: _CBT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelCapacityReservationRequest(input),
        [_A]: _CCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelCapacityReservationFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelCapacityReservationFleetsRequest(input),
        [_A]: _CCRF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelConversionTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelConversionRequest(input),
        [_A]: _CCT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelDeclarativePoliciesReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelDeclarativePoliciesReportRequest(input),
        [_A]: _CDPR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelExportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelExportTaskRequest(input),
        [_A]: _CET,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelImageLaunchPermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelImageLaunchPermissionRequest(input),
        [_A]: _CILP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelImportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelImportTaskRequest(input),
        [_A]: _CIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelReservedInstancesListingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelReservedInstancesListingRequest(input),
        [_A]: _CRIL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelSpotFleetRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelSpotFleetRequestsRequest(input),
        [_A]: _CSFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CancelSpotInstanceRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CancelSpotInstanceRequestsRequest(input),
        [_A]: _CSIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ConfirmProductInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ConfirmProductInstanceRequest(input),
        [_A]: _CPI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CopyFpgaImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyFpgaImageRequest(input),
        [_A]: _CFI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CopyImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopyImageRequest(input),
        [_A]: _CI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CopySnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CopySnapshotRequest(input),
        [_A]: _CS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCapacityReservationRequest(input),
        [_A]: _CCRr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCapacityReservationBySplittingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCapacityReservationBySplittingRequest(input),
        [_A]: _CCRBS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCapacityReservationFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCapacityReservationFleetRequest(input),
        [_A]: _CCRFr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCarrierGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCarrierGatewayRequest(input),
        [_A]: _CCG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateClientVpnEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateClientVpnEndpointRequest(input),
        [_A]: _CCVE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateClientVpnRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateClientVpnRouteRequest(input),
        [_A]: _CCVR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCoipCidrRequest(input),
        [_A]: _CCC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCoipPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCoipPoolRequest(input),
        [_A]: _CCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCustomerGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateCustomerGatewayRequest(input),
        [_A]: _CCGr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDefaultSubnetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDefaultSubnetRequest(input),
        [_A]: _CDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDefaultVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDefaultVpcRequest(input),
        [_A]: _CDV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDelegateMacVolumeOwnershipTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDelegateMacVolumeOwnershipTaskRequest(input),
        [_A]: _CDMVOT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateDhcpOptionsRequest(input),
        [_A]: _CDO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEgressOnlyInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateEgressOnlyInternetGatewayRequest(input),
        [_A]: _CEOIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateFleetRequest(input),
        [_A]: _CF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFlowLogsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateFlowLogsRequest(input),
        [_A]: _CFL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFpgaImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateFpgaImageRequest(input),
        [_A]: _CFIr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateImageRequest(input),
        [_A]: _CIr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateImageUsageReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateImageUsageReportRequest(input),
        [_A]: _CIUR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInstanceConnectEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInstanceConnectEndpointRequest(input),
        [_A]: _CICE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInstanceEventWindowRequest(input),
        [_A]: _CIEW,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInstanceExportTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInstanceExportTaskRequest(input),
        [_A]: _CIET,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateInternetGatewayRequest(input),
        [_A]: _CIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamRequest(input),
        [_A]: _CIre,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIpamExternalResourceVerificationTokenCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamExternalResourceVerificationTokenRequest(input),
        [_A]: _CIERVT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIpamPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamPoolRequest(input),
        [_A]: _CIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamResourceDiscoveryRequest(input),
        [_A]: _CIRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateIpamScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateIpamScopeRequest(input),
        [_A]: _CIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateKeyPairCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateKeyPairRequest(input),
        [_A]: _CKP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLaunchTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLaunchTemplateRequest(input),
        [_A]: _CLT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLaunchTemplateVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLaunchTemplateVersionRequest(input),
        [_A]: _CLTV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLocalGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteRequest(input),
        [_A]: _CLGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLocalGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteTableRequest(input),
        [_A]: _CLGRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input),
        [_A]: _CLGRTVIGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayRouteTableVpcAssociationRequest(input),
        [_A]: _CLGRTVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLocalGatewayVirtualInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayVirtualInterfaceRequest(input),
        [_A]: _CLGVI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLocalGatewayVirtualInterfaceGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateLocalGatewayVirtualInterfaceGroupRequest(input),
        [_A]: _CLGVIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateMacSystemIntegrityProtectionModificationTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateMacSystemIntegrityProtectionModificationTaskRequest(input),
        [_A]: _CMSIPMT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateManagedPrefixListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateManagedPrefixListRequest(input),
        [_A]: _CMPL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNatGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNatGatewayRequest(input),
        [_A]: _CNG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNetworkAclCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkAclRequest(input),
        [_A]: _CNA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNetworkAclEntryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkAclEntryRequest(input),
        [_A]: _CNAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNetworkInsightsAccessScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInsightsAccessScopeRequest(input),
        [_A]: _CNIAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNetworkInsightsPathCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInsightsPathRequest(input),
        [_A]: _CNIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInterfaceRequest(input),
        [_A]: _CNI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNetworkInterfacePermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateNetworkInterfacePermissionRequest(input),
        [_A]: _CNIPr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePlacementGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePlacementGroupRequest(input),
        [_A]: _CPG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePublicIpv4PoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreatePublicIpv4PoolRequest(input),
        [_A]: _CPIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateReplaceRootVolumeTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateReplaceRootVolumeTaskRequest(input),
        [_A]: _CRRVT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateReservedInstancesListingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateReservedInstancesListingRequest(input),
        [_A]: _CRILr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRestoreImageTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRestoreImageTaskRequest(input),
        [_A]: _CRIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteRequest(input),
        [_A]: _CR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRouteServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteServerRequest(input),
        [_A]: _CRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRouteServerEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteServerEndpointRequest(input),
        [_A]: _CRSE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRouteServerPeerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteServerPeerRequest(input),
        [_A]: _CRSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateRouteTableRequest(input),
        [_A]: _CRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSecurityGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSecurityGroupRequest(input),
        [_A]: _CSG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSnapshotRequest(input),
        [_A]: _CSr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSnapshotsRequest(input),
        [_A]: _CSre,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSpotDatafeedSubscriptionRequest(input),
        [_A]: _CSDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStoreImageTaskCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateStoreImageTaskRequest(input),
        [_A]: _CSIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSubnetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSubnetRequest(input),
        [_A]: _CSrea,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSubnetCidrReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateSubnetCidrReservationRequest(input),
        [_A]: _CSCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTagsRequest(input),
        [_A]: _CT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrafficMirrorFilterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorFilterRequest(input),
        [_A]: _CTMF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorFilterRuleRequest(input),
        [_A]: _CTMFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrafficMirrorSessionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorSessionRequest(input),
        [_A]: _CTMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrafficMirrorTargetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTrafficMirrorTargetRequest(input),
        [_A]: _CTMT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRequest(input),
        [_A]: _CTG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayConnectCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayConnectRequest(input),
        [_A]: _CTGC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayConnectPeerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayConnectPeerRequest(input),
        [_A]: _CTGCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayMulticastDomainRequest(input),
        [_A]: _CTGMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayPeeringAttachmentRequest(input),
        [_A]: _CTGPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayPolicyTableRequest(input),
        [_A]: _CTGPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayPrefixListReferenceRequest(input),
        [_A]: _CTGPLR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRouteRequest(input),
        [_A]: _CTGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRouteTableRequest(input),
        [_A]: _CTGRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayRouteTableAnnouncementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayRouteTableAnnouncementRequest(input),
        [_A]: _CTGRTA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateTransitGatewayVpcAttachmentRequest(input),
        [_A]: _CTGVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVerifiedAccessEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessEndpointRequest(input),
        [_A]: _CVAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVerifiedAccessGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessGroupRequest(input),
        [_A]: _CVAG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVerifiedAccessInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessInstanceRequest(input),
        [_A]: _CVAI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVerifiedAccessTrustProviderRequest(input),
        [_A]: _CVATP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVolumeRequest(input),
        [_A]: _CV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcRequest(input),
        [_A]: _CVr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpcBlockPublicAccessExclusionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcBlockPublicAccessExclusionRequest(input),
        [_A]: _CVBPAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpcEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcEndpointRequest(input),
        [_A]: _CVE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpcEndpointConnectionNotificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcEndpointConnectionNotificationRequest(input),
        [_A]: _CVECN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpcEndpointServiceConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcEndpointServiceConfigurationRequest(input),
        [_A]: _CVESC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpcPeeringConnectionRequest(input),
        [_A]: _CVPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpnConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpnConnectionRequest(input),
        [_A]: _CVC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpnConnectionRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpnConnectionRouteRequest(input),
        [_A]: _CVCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_CreateVpnGatewayRequest(input),
        [_A]: _CVG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCarrierGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCarrierGatewayRequest(input),
        [_A]: _DCG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteClientVpnEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteClientVpnEndpointRequest(input),
        [_A]: _DCVE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteClientVpnRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteClientVpnRouteRequest(input),
        [_A]: _DCVR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCoipCidrRequest(input),
        [_A]: _DCC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCoipPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCoipPoolRequest(input),
        [_A]: _DCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCustomerGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteCustomerGatewayRequest(input),
        [_A]: _DCGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteDhcpOptionsRequest(input),
        [_A]: _DDO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEgressOnlyInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteEgressOnlyInternetGatewayRequest(input),
        [_A]: _DEOIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteFleetsRequest(input),
        [_A]: _DF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFlowLogsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteFlowLogsRequest(input),
        [_A]: _DFL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFpgaImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteFpgaImageRequest(input),
        [_A]: _DFI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteImageUsageReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteImageUsageReportRequest(input),
        [_A]: _DIUR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInstanceConnectEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInstanceConnectEndpointRequest(input),
        [_A]: _DICE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInstanceEventWindowRequest(input),
        [_A]: _DIEW,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteInternetGatewayRequest(input),
        [_A]: _DIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamRequest(input),
        [_A]: _DI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIpamExternalResourceVerificationTokenCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamExternalResourceVerificationTokenRequest(input),
        [_A]: _DIERVT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIpamPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamPoolRequest(input),
        [_A]: _DIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamResourceDiscoveryRequest(input),
        [_A]: _DIRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteIpamScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteIpamScopeRequest(input),
        [_A]: _DIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteKeyPairCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteKeyPairRequest(input),
        [_A]: _DKP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLaunchTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLaunchTemplateRequest(input),
        [_A]: _DLT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLaunchTemplateVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLaunchTemplateVersionsRequest(input),
        [_A]: _DLTV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLocalGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteRequest(input),
        [_A]: _DLGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLocalGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteTableRequest(input),
        [_A]: _DLGRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest(input),
        [_A]: _DLGRTVIGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayRouteTableVpcAssociationRequest(input),
        [_A]: _DLGRTVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLocalGatewayVirtualInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayVirtualInterfaceRequest(input),
        [_A]: _DLGVI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteLocalGatewayVirtualInterfaceGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteLocalGatewayVirtualInterfaceGroupRequest(input),
        [_A]: _DLGVIG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteManagedPrefixListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteManagedPrefixListRequest(input),
        [_A]: _DMPL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNatGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNatGatewayRequest(input),
        [_A]: _DNG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkAclCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkAclRequest(input),
        [_A]: _DNA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkAclEntryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkAclEntryRequest(input),
        [_A]: _DNAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkInsightsAccessScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsAccessScopeRequest(input),
        [_A]: _DNIAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsAccessScopeAnalysisRequest(input),
        [_A]: _DNIASA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkInsightsAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsAnalysisRequest(input),
        [_A]: _DNIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkInsightsPathCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInsightsPathRequest(input),
        [_A]: _DNIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInterfaceRequest(input),
        [_A]: _DNI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNetworkInterfacePermissionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteNetworkInterfacePermissionRequest(input),
        [_A]: _DNIPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePlacementGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePlacementGroupRequest(input),
        [_A]: _DPG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePublicIpv4PoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeletePublicIpv4PoolRequest(input),
        [_A]: _DPIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteQueuedReservedInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteQueuedReservedInstancesRequest(input),
        [_A]: _DQRI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteRequest(input),
        [_A]: _DR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRouteServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteServerRequest(input),
        [_A]: _DRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRouteServerEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteServerEndpointRequest(input),
        [_A]: _DRSE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRouteServerPeerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteServerPeerRequest(input),
        [_A]: _DRSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteRouteTableRequest(input),
        [_A]: _DRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSecurityGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSecurityGroupRequest(input),
        [_A]: _DSG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSnapshotRequest(input),
        [_A]: _DS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSpotDatafeedSubscriptionRequest(input),
        [_A]: _DSDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSubnetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSubnetRequest(input),
        [_A]: _DSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSubnetCidrReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteSubnetCidrReservationRequest(input),
        [_A]: _DSCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTagsRequest(input),
        [_A]: _DT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTrafficMirrorFilterCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorFilterRequest(input),
        [_A]: _DTMF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorFilterRuleRequest(input),
        [_A]: _DTMFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTrafficMirrorSessionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorSessionRequest(input),
        [_A]: _DTMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTrafficMirrorTargetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTrafficMirrorTargetRequest(input),
        [_A]: _DTMT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRequest(input),
        [_A]: _DTG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayConnectCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayConnectRequest(input),
        [_A]: _DTGC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayConnectPeerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayConnectPeerRequest(input),
        [_A]: _DTGCP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayMulticastDomainRequest(input),
        [_A]: _DTGMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayPeeringAttachmentRequest(input),
        [_A]: _DTGPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayPolicyTableRequest(input),
        [_A]: _DTGPT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayPrefixListReferenceRequest(input),
        [_A]: _DTGPLR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRouteRequest(input),
        [_A]: _DTGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRouteTableRequest(input),
        [_A]: _DTGRT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayRouteTableAnnouncementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayRouteTableAnnouncementRequest(input),
        [_A]: _DTGRTA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteTransitGatewayVpcAttachmentRequest(input),
        [_A]: _DTGVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVerifiedAccessEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessEndpointRequest(input),
        [_A]: _DVAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVerifiedAccessGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessGroupRequest(input),
        [_A]: _DVAG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVerifiedAccessInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessInstanceRequest(input),
        [_A]: _DVAI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVerifiedAccessTrustProviderRequest(input),
        [_A]: _DVATP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVolumeRequest(input),
        [_A]: _DV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcRequest(input),
        [_A]: _DVe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpcBlockPublicAccessExclusionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcBlockPublicAccessExclusionRequest(input),
        [_A]: _DVBPAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpcEndpointConnectionNotificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcEndpointConnectionNotificationsRequest(input),
        [_A]: _DVECN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpcEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcEndpointsRequest(input),
        [_A]: _DVE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpcEndpointServiceConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcEndpointServiceConfigurationsRequest(input),
        [_A]: _DVESC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpcPeeringConnectionRequest(input),
        [_A]: _DVPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpnConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpnConnectionRequest(input),
        [_A]: _DVC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpnConnectionRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpnConnectionRouteRequest(input),
        [_A]: _DVCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeleteVpnGatewayRequest(input),
        [_A]: _DVG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeprovisionByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionByoipCidrRequest(input),
        [_A]: _DBC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeprovisionIpamByoasnCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionIpamByoasnRequest(input),
        [_A]: _DIB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeprovisionIpamPoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionIpamPoolCidrRequest(input),
        [_A]: _DIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeprovisionPublicIpv4PoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeprovisionPublicIpv4PoolCidrRequest(input),
        [_A]: _DPIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterImageRequest(input),
        [_A]: _DIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterInstanceEventNotificationAttributesRequest(input),
        [_A]: _DIENA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterTransitGatewayMulticastGroupMembersRequest(input),
        [_A]: _DTGMGM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DeregisterTransitGatewayMulticastGroupSourcesRequest(input),
        [_A]: _DTGMGS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAccountAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAccountAttributesRequest(input),
        [_A]: _DAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAddressesRequest(input),
        [_A]: _DA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAddressesAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAddressesAttributeRequest(input),
        [_A]: _DAAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAddressTransfersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAddressTransfersRequest(input),
        [_A]: _DAT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAggregateIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAggregateIdFormatRequest(input),
        [_A]: _DAIF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAvailabilityZonesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAvailabilityZonesRequest(input),
        [_A]: _DAZ,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest(input),
        [_A]: _DANPMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeBundleTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeBundleTasksRequest(input),
        [_A]: _DBT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeByoipCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeByoipCidrsRequest(input),
        [_A]: _DBCe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityBlockExtensionHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityBlockExtensionHistoryRequest(input),
        [_A]: _DCBEH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityBlockExtensionOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityBlockExtensionOfferingsRequest(input),
        [_A]: _DCBEO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityBlockOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityBlockOfferingsRequest(input),
        [_A]: _DCBO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityBlocksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityBlocksRequest(input),
        [_A]: _DCB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityBlockStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityBlockStatusRequest(input),
        [_A]: _DCBS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityReservationBillingRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityReservationBillingRequestsRequest(input),
        [_A]: _DCRBR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityReservationFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityReservationFleetsRequest(input),
        [_A]: _DCRF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCapacityReservationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCapacityReservationsRequest(input),
        [_A]: _DCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCarrierGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCarrierGatewaysRequest(input),
        [_A]: _DCGes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClassicLinkInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClassicLinkInstancesRequest(input),
        [_A]: _DCLI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClientVpnAuthorizationRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnAuthorizationRulesRequest(input),
        [_A]: _DCVAR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClientVpnConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnConnectionsRequest(input),
        [_A]: _DCVC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClientVpnEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnEndpointsRequest(input),
        [_A]: _DCVEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClientVpnRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnRoutesRequest(input),
        [_A]: _DCVRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClientVpnTargetNetworksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeClientVpnTargetNetworksRequest(input),
        [_A]: _DCVTN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCoipPoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCoipPoolsRequest(input),
        [_A]: _DCPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeConversionTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeConversionTasksRequest(input),
        [_A]: _DCT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCustomerGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeCustomerGatewaysRequest(input),
        [_A]: _DCGesc,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeclarativePoliciesReportsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDeclarativePoliciesReportsRequest(input),
        [_A]: _DDPR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDhcpOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeDhcpOptionsRequest(input),
        [_A]: _DDOe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEgressOnlyInternetGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeEgressOnlyInternetGatewaysRequest(input),
        [_A]: _DEOIGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeElasticGpusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeElasticGpusRequest(input),
        [_A]: _DEG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExportImageTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeExportImageTasksRequest(input),
        [_A]: _DEIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExportTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeExportTasksRequest(input),
        [_A]: _DET,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFastLaunchImagesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFastLaunchImagesRequest(input),
        [_A]: _DFLI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFastSnapshotRestoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFastSnapshotRestoresRequest(input),
        [_A]: _DFSR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFleetHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFleetHistoryRequest(input),
        [_A]: _DFH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFleetInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFleetInstancesRequest(input),
        [_A]: _DFIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFleetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFleetsRequest(input),
        [_A]: _DFe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFlowLogsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFlowLogsRequest(input),
        [_A]: _DFLe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFpgaImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFpgaImageAttributeRequest(input),
        [_A]: _DFIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFpgaImagesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeFpgaImagesRequest(input),
        [_A]: _DFIes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHostReservationOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeHostReservationOfferingsRequest(input),
        [_A]: _DHRO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHostReservationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeHostReservationsRequest(input),
        [_A]: _DHR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeHostsRequest(input),
        [_A]: _DH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIamInstanceProfileAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIamInstanceProfileAssociationsRequest(input),
        [_A]: _DIIPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIdentityIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIdentityIdFormatRequest(input),
        [_A]: _DIIF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIdFormatRequest(input),
        [_A]: _DIF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImageAttributeRequest(input),
        [_A]: _DIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageReferencesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImageReferencesRequest(input),
        [_A]: _DIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImagesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImagesRequest(input),
        [_A]: _DIes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageUsageReportEntriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImageUsageReportEntriesRequest(input),
        [_A]: _DIURE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageUsageReportsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImageUsageReportsRequest(input),
        [_A]: _DIURe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImportImageTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImportImageTasksRequest(input),
        [_A]: _DIIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImportSnapshotTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeImportSnapshotTasksRequest(input),
        [_A]: _DIST,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceAttributeRequest(input),
        [_A]: _DIAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceConnectEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceConnectEndpointsRequest(input),
        [_A]: _DICEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceCreditSpecificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceCreditSpecificationsRequest(input),
        [_A]: _DICS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceEventNotificationAttributesRequest(input),
        [_A]: _DIENAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceEventWindowsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceEventWindowsRequest(input),
        [_A]: _DIEWe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceImageMetadataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceImageMetadataRequest(input),
        [_A]: _DIIM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstancesRequest(input),
        [_A]: _DIesc,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceStatusRequest(input),
        [_A]: _DISe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceTopologyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceTopologyRequest(input),
        [_A]: _DIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceTypeOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceTypeOfferingsRequest(input),
        [_A]: _DITO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInstanceTypesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInstanceTypesRequest(input),
        [_A]: _DITe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInternetGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeInternetGatewaysRequest(input),
        [_A]: _DIGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamByoasnCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamByoasnRequest(input),
        [_A]: _DIBe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamExternalResourceVerificationTokensCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamExternalResourceVerificationTokensRequest(input),
        [_A]: _DIERVTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamPoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamPoolsRequest(input),
        [_A]: _DIPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamResourceDiscoveriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamResourceDiscoveriesRequest(input),
        [_A]: _DIRDe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamResourceDiscoveryAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamResourceDiscoveryAssociationsRequest(input),
        [_A]: _DIRDA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamsRequest(input),
        [_A]: _DIescr,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpamScopesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpamScopesRequest(input),
        [_A]: _DISes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeIpv6PoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeIpv6PoolsRequest(input),
        [_A]: _DIPes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeKeyPairsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeKeyPairsRequest(input),
        [_A]: _DKPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLaunchTemplatesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLaunchTemplatesRequest(input),
        [_A]: _DLTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLaunchTemplateVersionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLaunchTemplateVersionsRequest(input),
        [_A]: _DLTVe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLocalGatewayRouteTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayRouteTablesRequest(input),
        [_A]: _DLGRTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest(input),
        [_A]: _DLGRTVIGAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayRouteTableVpcAssociationsRequest(input),
        [_A]: _DLGRTVAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLocalGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewaysRequest(input),
        [_A]: _DLG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayVirtualInterfaceGroupsRequest(input),
        [_A]: _DLGVIGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLocalGatewayVirtualInterfacesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLocalGatewayVirtualInterfacesRequest(input),
        [_A]: _DLGVIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLockedSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeLockedSnapshotsRequest(input),
        [_A]: _DLS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMacHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeMacHostsRequest(input),
        [_A]: _DMH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMacModificationTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeMacModificationTasksRequest(input),
        [_A]: _DMMT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeManagedPrefixListsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeManagedPrefixListsRequest(input),
        [_A]: _DMPLe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMovingAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeMovingAddressesRequest(input),
        [_A]: _DMA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNatGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNatGatewaysRequest(input),
        [_A]: _DNGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkAclsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkAclsRequest(input),
        [_A]: _DNAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsAccessScopeAnalysesRequest(input),
        [_A]: _DNIASAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInsightsAccessScopesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsAccessScopesRequest(input),
        [_A]: _DNIASe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInsightsAnalysesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsAnalysesRequest(input),
        [_A]: _DNIAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInsightsPathsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInsightsPathsRequest(input),
        [_A]: _DNIPes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInterfaceAttributeRequest(input),
        [_A]: _DNIAes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInterfacePermissionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInterfacePermissionsRequest(input),
        [_A]: _DNIPesc,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNetworkInterfacesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeNetworkInterfacesRequest(input),
        [_A]: _DNIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeOutpostLagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeOutpostLagsRequest(input),
        [_A]: _DOL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePlacementGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePlacementGroupsRequest(input),
        [_A]: _DPGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePrefixListsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePrefixListsRequest(input),
        [_A]: _DPL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePrincipalIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePrincipalIdFormatRequest(input),
        [_A]: _DPIF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePublicIpv4PoolsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribePublicIpv4PoolsRequest(input),
        [_A]: _DPIPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRegionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRegionsRequest(input),
        [_A]: _DRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReplaceRootVolumeTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReplaceRootVolumeTasksRequest(input),
        [_A]: _DRRVT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReservedInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesRequest(input),
        [_A]: _DRI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReservedInstancesListingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesListingsRequest(input),
        [_A]: _DRIL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReservedInstancesModificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesModificationsRequest(input),
        [_A]: _DRIM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReservedInstancesOfferingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeReservedInstancesOfferingsRequest(input),
        [_A]: _DRIO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRouteServerEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRouteServerEndpointsRequest(input),
        [_A]: _DRSEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRouteServerPeersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRouteServerPeersRequest(input),
        [_A]: _DRSPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRouteServersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRouteServersRequest(input),
        [_A]: _DRSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeRouteTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeRouteTablesRequest(input),
        [_A]: _DRTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeScheduledInstanceAvailabilityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeScheduledInstanceAvailabilityRequest(input),
        [_A]: _DSIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeScheduledInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeScheduledInstancesRequest(input),
        [_A]: _DSI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSecurityGroupReferencesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupReferencesRequest(input),
        [_A]: _DSGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSecurityGroupRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupRulesRequest(input),
        [_A]: _DSGRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSecurityGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupsRequest(input),
        [_A]: _DSGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSecurityGroupVpcAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSecurityGroupVpcAssociationsRequest(input),
        [_A]: _DSGVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeServiceLinkVirtualInterfacesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeServiceLinkVirtualInterfacesRequest(input),
        [_A]: _DSLVI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSnapshotAttributeRequest(input),
        [_A]: _DSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSnapshotsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSnapshotsRequest(input),
        [_A]: _DSes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSnapshotTierStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSnapshotTierStatusRequest(input),
        [_A]: _DSTS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpotDatafeedSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotDatafeedSubscriptionRequest(input),
        [_A]: _DSDSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpotFleetInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotFleetInstancesRequest(input),
        [_A]: _DSFI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpotFleetRequestHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotFleetRequestHistoryRequest(input),
        [_A]: _DSFRH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpotFleetRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotFleetRequestsRequest(input),
        [_A]: _DSFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpotInstanceRequestsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotInstanceRequestsRequest(input),
        [_A]: _DSIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpotPriceHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSpotPriceHistoryRequest(input),
        [_A]: _DSPH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStaleSecurityGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStaleSecurityGroupsRequest(input),
        [_A]: _DSSG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStoreImageTasksCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeStoreImageTasksRequest(input),
        [_A]: _DSIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSubnetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeSubnetsRequest(input),
        [_A]: _DSesc,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTagsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTagsRequest(input),
        [_A]: _DTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrafficMirrorFilterRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorFilterRulesRequest(input),
        [_A]: _DTMFRe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrafficMirrorFiltersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorFiltersRequest(input),
        [_A]: _DTMFe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrafficMirrorSessionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorSessionsRequest(input),
        [_A]: _DTMSe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrafficMirrorTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrafficMirrorTargetsRequest(input),
        [_A]: _DTMTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayAttachmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayAttachmentsRequest(input),
        [_A]: _DTGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayConnectPeersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayConnectPeersRequest(input),
        [_A]: _DTGCPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayConnectsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayConnectsRequest(input),
        [_A]: _DTGCe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayMulticastDomainsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayMulticastDomainsRequest(input),
        [_A]: _DTGMDe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayPeeringAttachmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayPeeringAttachmentsRequest(input),
        [_A]: _DTGPAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayPolicyTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayPolicyTablesRequest(input),
        [_A]: _DTGPTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayRouteTableAnnouncementsRequest(input),
        [_A]: _DTGRTAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayRouteTablesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayRouteTablesRequest(input),
        [_A]: _DTGRTe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewaysRequest(input),
        [_A]: _DTGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransitGatewayVpcAttachmentsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTransitGatewayVpcAttachmentsRequest(input),
        [_A]: _DTGVAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrunkInterfaceAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeTrunkInterfaceAssociationsRequest(input),
        [_A]: _DTIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVerifiedAccessEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessEndpointsRequest(input),
        [_A]: _DVAEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVerifiedAccessGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessGroupsRequest(input),
        [_A]: _DVAGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest(input),
        [_A]: _DVAILC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVerifiedAccessInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessInstancesRequest(input),
        [_A]: _DVAIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVerifiedAccessTrustProvidersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVerifiedAccessTrustProvidersRequest(input),
        [_A]: _DVATPe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVolumeAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumeAttributeRequest(input),
        [_A]: _DVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVolumesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumesRequest(input),
        [_A]: _DVes,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVolumesModificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumesModificationsRequest(input),
        [_A]: _DVM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVolumeStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVolumeStatusRequest(input),
        [_A]: _DVS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcAttributeRequest(input),
        [_A]: _DVAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcBlockPublicAccessExclusionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcBlockPublicAccessExclusionsRequest(input),
        [_A]: _DVBPAEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcBlockPublicAccessOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcBlockPublicAccessOptionsRequest(input),
        [_A]: _DVBPAO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcClassicLinkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcClassicLinkRequest(input),
        [_A]: _DVCL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcClassicLinkDnsSupportRequest(input),
        [_A]: _DVCLDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointAssociationsRequest(input),
        [_A]: _DVEA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointConnectionNotificationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointConnectionNotificationsRequest(input),
        [_A]: _DVECNe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointConnectionsRequest(input),
        [_A]: _DVEC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointsRequest(input),
        [_A]: _DVEe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointServiceConfigurationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointServiceConfigurationsRequest(input),
        [_A]: _DVESCe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointServicePermissionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointServicePermissionsRequest(input),
        [_A]: _DVESP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcEndpointServicesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcEndpointServicesRequest(input),
        [_A]: _DVES,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcPeeringConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcPeeringConnectionsRequest(input),
        [_A]: _DVPCe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpcsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpcsRequest(input),
        [_A]: _DVesc,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpnConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpnConnectionsRequest(input),
        [_A]: _DVCe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeVpnGatewaysCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DescribeVpnGatewaysRequest(input),
        [_A]: _DVGe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachClassicLinkVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachClassicLinkVpcRequest(input),
        [_A]: _DCLV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachInternetGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachInternetGatewayRequest(input),
        [_A]: _DIGet,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachNetworkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachNetworkInterfaceRequest(input),
        [_A]: _DNIet,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachVerifiedAccessTrustProviderRequest(input),
        [_A]: _DVATPet,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachVolumeRequest(input),
        [_A]: _DVet,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachVpnGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DetachVpnGatewayRequest(input),
        [_A]: _DVGet,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableAddressTransferCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAddressTransferRequest(input),
        [_A]: _DATi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableAllowedImagesSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAllowedImagesSettingsRequest(input),
        [_A]: _DAIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableAwsNetworkPerformanceMetricSubscriptionRequest(input),
        [_A]: _DANPMSi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableEbsEncryptionByDefaultRequest(input),
        [_A]: _DEEBD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableFastLaunchCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableFastLaunchRequest(input),
        [_A]: _DFLi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableFastSnapshotRestoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableFastSnapshotRestoresRequest(input),
        [_A]: _DFSRi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableImageRequest(input),
        [_A]: _DIi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableImageBlockPublicAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableImageBlockPublicAccessRequest(input),
        [_A]: _DIBPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableImageDeprecationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableImageDeprecationRequest(input),
        [_A]: _DID,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableImageDeregistrationProtectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableImageDeregistrationProtectionRequest(input),
        [_A]: _DIDP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableIpamOrganizationAdminAccountCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableIpamOrganizationAdminAccountRequest(input),
        [_A]: _DIOAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableRouteServerPropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableRouteServerPropagationRequest(input),
        [_A]: _DRSPi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableSerialConsoleAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableSerialConsoleAccessRequest(input),
        [_A]: _DSCA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableSnapshotBlockPublicAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableSnapshotBlockPublicAccessRequest(input),
        [_A]: _DSBPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableTransitGatewayRouteTablePropagationRequest(input),
        [_A]: _DTGRTP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableVgwRoutePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableVgwRoutePropagationRequest(input),
        [_A]: _DVRP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableVpcClassicLinkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableVpcClassicLinkRequest(input),
        [_A]: _DVCLi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisableVpcClassicLinkDnsSupportRequest(input),
        [_A]: _DVCLDSi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateAddressRequest(input),
        [_A]: _DAi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateCapacityReservationBillingOwnerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateCapacityReservationBillingOwnerRequest(input),
        [_A]: _DCRBO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateClientVpnTargetNetworkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateClientVpnTargetNetworkRequest(input),
        [_A]: _DCVTNi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateEnclaveCertificateIamRoleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateEnclaveCertificateIamRoleRequest(input),
        [_A]: _DECIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateIamInstanceProfileCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateIamInstanceProfileRequest(input),
        [_A]: _DIIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateInstanceEventWindowRequest(input),
        [_A]: _DIEWi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateIpamByoasnCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateIpamByoasnRequest(input),
        [_A]: _DIBi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateIpamResourceDiscoveryRequest(input),
        [_A]: _DIRDi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateNatGatewayAddressRequest(input),
        [_A]: _DNGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateRouteServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateRouteServerRequest(input),
        [_A]: _DRSi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateRouteTableRequest(input),
        [_A]: _DRTi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateSecurityGroupVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateSecurityGroupVpcRequest(input),
        [_A]: _DSGV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateSubnetCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateSubnetCidrBlockRequest(input),
        [_A]: _DSCB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateTransitGatewayMulticastDomainCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTransitGatewayMulticastDomainRequest(input),
        [_A]: _DTGMDi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateTransitGatewayPolicyTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTransitGatewayPolicyTableRequest(input),
        [_A]: _DTGPTi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateTransitGatewayRouteTableCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTransitGatewayRouteTableRequest(input),
        [_A]: _DTGRTi,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateTrunkInterfaceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateTrunkInterfaceRequest(input),
        [_A]: _DTI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateVpcCidrBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_DisassociateVpcCidrBlockRequest(input),
        [_A]: _DVCB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableAddressTransferCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAddressTransferRequest(input),
        [_A]: _EAT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableAllowedImagesSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAllowedImagesSettingsRequest(input),
        [_A]: _EAIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableAwsNetworkPerformanceMetricSubscriptionRequest(input),
        [_A]: _EANPMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableEbsEncryptionByDefaultRequest(input),
        [_A]: _EEEBD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableFastLaunchCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableFastLaunchRequest(input),
        [_A]: _EFL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableFastSnapshotRestoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableFastSnapshotRestoresRequest(input),
        [_A]: _EFSR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableImageRequest(input),
        [_A]: _EI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableImageBlockPublicAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableImageBlockPublicAccessRequest(input),
        [_A]: _EIBPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableImageDeprecationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableImageDeprecationRequest(input),
        [_A]: _EID,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableImageDeregistrationProtectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableImageDeregistrationProtectionRequest(input),
        [_A]: _EIDP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableIpamOrganizationAdminAccountCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableIpamOrganizationAdminAccountRequest(input),
        [_A]: _EIOAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableReachabilityAnalyzerOrganizationSharingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableReachabilityAnalyzerOrganizationSharingRequest(input),
        [_A]: _ERAOS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableRouteServerPropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableRouteServerPropagationRequest(input),
        [_A]: _ERSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableSerialConsoleAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableSerialConsoleAccessRequest(input),
        [_A]: _ESCA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableSnapshotBlockPublicAccessCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableSnapshotBlockPublicAccessRequest(input),
        [_A]: _ESBPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableTransitGatewayRouteTablePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableTransitGatewayRouteTablePropagationRequest(input),
        [_A]: _ETGRTP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableVgwRoutePropagationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVgwRoutePropagationRequest(input),
        [_A]: _EVRP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableVolumeIOCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVolumeIORequest(input),
        [_A]: _EVIO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableVpcClassicLinkCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVpcClassicLinkRequest(input),
        [_A]: _EVCL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableVpcClassicLinkDnsSupportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_EnableVpcClassicLinkDnsSupportRequest(input),
        [_A]: _EVCLDS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportClientVpnClientCertificateRevocationListRequest(input),
        [_A]: _ECVCCRL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExportClientVpnClientConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportClientVpnClientConfigurationRequest(input),
        [_A]: _ECVCC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExportImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportImageRequest(input),
        [_A]: _EIx,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExportTransitGatewayRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportTransitGatewayRoutesRequest(input),
        [_A]: _ETGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ExportVerifiedAccessInstanceClientConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ExportVerifiedAccessInstanceClientConfigurationRequest(input),
        [_A]: _EVAICC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetActiveVpnTunnelStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetActiveVpnTunnelStatusRequest(input),
        [_A]: _GAVTS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAllowedImagesSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAllowedImagesSettingsRequest(input),
        [_A]: _GAIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAssociatedEnclaveCertificateIamRolesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAssociatedEnclaveCertificateIamRolesRequest(input),
        [_A]: _GAECIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAssociatedIpv6PoolCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAssociatedIpv6PoolCidrsRequest(input),
        [_A]: _GAIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetAwsNetworkPerformanceDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetAwsNetworkPerformanceDataRequest(input),
        [_A]: _GANPD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCapacityReservationUsageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetCapacityReservationUsageRequest(input),
        [_A]: _GCRU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetCoipPoolUsageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetCoipPoolUsageRequest(input),
        [_A]: _GCPU,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetConsoleOutputCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetConsoleOutputRequest(input),
        [_A]: _GCO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetConsoleScreenshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetConsoleScreenshotRequest(input),
        [_A]: _GCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeclarativePoliciesReportSummaryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetDeclarativePoliciesReportSummaryRequest(input),
        [_A]: _GDPRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDefaultCreditSpecificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetDefaultCreditSpecificationRequest(input),
        [_A]: _GDCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetEbsDefaultKmsKeyIdRequest(input),
        [_A]: _GEDKKI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetEbsEncryptionByDefaultCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetEbsEncryptionByDefaultRequest(input),
        [_A]: _GEEBD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetFlowLogsIntegrationTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetFlowLogsIntegrationTemplateRequest(input),
        [_A]: _GFLIT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetGroupsForCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetGroupsForCapacityReservationRequest(input),
        [_A]: _GGFCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetHostReservationPurchasePreviewCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetHostReservationPurchasePreviewRequest(input),
        [_A]: _GHRPP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetImageBlockPublicAccessStateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetImageBlockPublicAccessStateRequest(input),
        [_A]: _GIBPAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInstanceMetadataDefaultsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceMetadataDefaultsRequest(input),
        [_A]: _GIMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInstanceTpmEkPubCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceTpmEkPubRequest(input),
        [_A]: _GITEP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInstanceTypesFromInstanceRequirementsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceTypesFromInstanceRequirementsRequest(input),
        [_A]: _GITFIR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetInstanceUefiDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetInstanceUefiDataRequest(input),
        [_A]: _GIUD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamAddressHistoryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamAddressHistoryRequest(input),
        [_A]: _GIAH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamDiscoveredAccountsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamDiscoveredAccountsRequest(input),
        [_A]: _GIDA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamDiscoveredPublicAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamDiscoveredPublicAddressesRequest(input),
        [_A]: _GIDPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamDiscoveredResourceCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamDiscoveredResourceCidrsRequest(input),
        [_A]: _GIDRC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamPoolAllocationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamPoolAllocationsRequest(input),
        [_A]: _GIPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamPoolCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamPoolCidrsRequest(input),
        [_A]: _GIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetIpamResourceCidrsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetIpamResourceCidrsRequest(input),
        [_A]: _GIRC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLaunchTemplateDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetLaunchTemplateDataRequest(input),
        [_A]: _GLTD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetManagedPrefixListAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetManagedPrefixListAssociationsRequest(input),
        [_A]: _GMPLA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetManagedPrefixListEntriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetManagedPrefixListEntriesRequest(input),
        [_A]: _GMPLE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest(input),
        [_A]: _GNIASAF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetNetworkInsightsAccessScopeContentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetNetworkInsightsAccessScopeContentRequest(input),
        [_A]: _GNIASC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetPasswordDataCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetPasswordDataRequest(input),
        [_A]: _GPD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetReservedInstancesExchangeQuoteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetReservedInstancesExchangeQuoteRequest(input),
        [_A]: _GRIEQ,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRouteServerAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetRouteServerAssociationsRequest(input),
        [_A]: _GRSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRouteServerPropagationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetRouteServerPropagationsRequest(input),
        [_A]: _GRSP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetRouteServerRoutingDatabaseCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetRouteServerRoutingDatabaseRequest(input),
        [_A]: _GRSRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSecurityGroupsForVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSecurityGroupsForVpcRequest(input),
        [_A]: _GSGFV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSerialConsoleAccessStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSerialConsoleAccessStatusRequest(input),
        [_A]: _GSCAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSnapshotBlockPublicAccessStateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSnapshotBlockPublicAccessStateRequest(input),
        [_A]: _GSBPAS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSpotPlacementScoresCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSpotPlacementScoresRequest(input),
        [_A]: _GSPS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSubnetCidrReservationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetSubnetCidrReservationsRequest(input),
        [_A]: _GSCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayAttachmentPropagationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayAttachmentPropagationsRequest(input),
        [_A]: _GTGAP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayMulticastDomainAssociationsRequest(input),
        [_A]: _GTGMDA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayPolicyTableAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayPolicyTableAssociationsRequest(input),
        [_A]: _GTGPTA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayPolicyTableEntriesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayPolicyTableEntriesRequest(input),
        [_A]: _GTGPTE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayPrefixListReferencesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayPrefixListReferencesRequest(input),
        [_A]: _GTGPLR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayRouteTableAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayRouteTableAssociationsRequest(input),
        [_A]: _GTGRTA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetTransitGatewayRouteTablePropagationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetTransitGatewayRouteTablePropagationsRequest(input),
        [_A]: _GTGRTP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetVerifiedAccessEndpointPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVerifiedAccessEndpointPolicyRequest(input),
        [_A]: _GVAEP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetVerifiedAccessEndpointTargetsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVerifiedAccessEndpointTargetsRequest(input),
        [_A]: _GVAET,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetVerifiedAccessGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVerifiedAccessGroupPolicyRequest(input),
        [_A]: _GVAGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetVpnConnectionDeviceSampleConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVpnConnectionDeviceSampleConfigurationRequest(input),
        [_A]: _GVCDSC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetVpnConnectionDeviceTypesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVpnConnectionDeviceTypesRequest(input),
        [_A]: _GVCDT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetVpnTunnelReplacementStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_GetVpnTunnelReplacementStatusRequest(input),
        [_A]: _GVTRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportClientVpnClientCertificateRevocationListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportClientVpnClientCertificateRevocationListRequest(input),
        [_A]: _ICVCCRL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportImageRequest(input),
        [_A]: _II,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportInstanceRequest(input),
        [_A]: _IIm,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportKeyPairCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportKeyPairRequest(input, context),
        [_A]: _IKP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportSnapshotRequest(input),
        [_A]: _IS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ImportVolumeRequest(input),
        [_A]: _IV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListImagesInRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListImagesInRecycleBinRequest(input),
        [_A]: _LIIRB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSnapshotsInRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ListSnapshotsInRecycleBinRequest(input),
        [_A]: _LSIRB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_LockSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_LockSnapshotRequest(input),
        [_A]: _LS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyAddressAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyAddressAttributeRequest(input),
        [_A]: _MAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyAvailabilityZoneGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyAvailabilityZoneGroupRequest(input),
        [_A]: _MAZG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyCapacityReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCapacityReservationRequest(input),
        [_A]: _MCR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyCapacityReservationFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyCapacityReservationFleetRequest(input),
        [_A]: _MCRF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyClientVpnEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyClientVpnEndpointRequest(input),
        [_A]: _MCVE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyDefaultCreditSpecificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyDefaultCreditSpecificationRequest(input),
        [_A]: _MDCS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyEbsDefaultKmsKeyIdRequest(input),
        [_A]: _MEDKKI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyFleetRequest(input),
        [_A]: _MF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyFpgaImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyFpgaImageAttributeRequest(input),
        [_A]: _MFIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyHostsRequest(input),
        [_A]: _MH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIdentityIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIdentityIdFormatRequest(input),
        [_A]: _MIIF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIdFormatCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIdFormatRequest(input),
        [_A]: _MIF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyImageAttributeRequest(input),
        [_A]: _MIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceAttributeRequest(input, context),
        [_A]: _MIAo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceCapacityReservationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceCapacityReservationAttributesRequest(input),
        [_A]: _MICRA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceConnectEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceConnectEndpointRequest(input),
        [_A]: _MICE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceCpuOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceCpuOptionsRequest(input),
        [_A]: _MICO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceCreditSpecificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceCreditSpecificationRequest(input),
        [_A]: _MICS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceEventStartTimeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceEventStartTimeRequest(input),
        [_A]: _MIEST,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceEventWindowCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceEventWindowRequest(input),
        [_A]: _MIEW,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceMaintenanceOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceMaintenanceOptionsRequest(input),
        [_A]: _MIMO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceMetadataDefaultsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceMetadataDefaultsRequest(input),
        [_A]: _MIMD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceMetadataOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceMetadataOptionsRequest(input),
        [_A]: _MIMOo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstanceNetworkPerformanceOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstanceNetworkPerformanceRequest(input),
        [_A]: _MINPO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyInstancePlacementCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyInstancePlacementRequest(input),
        [_A]: _MIP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamRequest(input),
        [_A]: _MI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIpamPoolCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamPoolRequest(input),
        [_A]: _MIPo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIpamResourceCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamResourceCidrRequest(input),
        [_A]: _MIRC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIpamResourceDiscoveryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamResourceDiscoveryRequest(input),
        [_A]: _MIRD,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyIpamScopeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyIpamScopeRequest(input),
        [_A]: _MIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyLaunchTemplateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyLaunchTemplateRequest(input),
        [_A]: _MLT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyLocalGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyLocalGatewayRouteRequest(input),
        [_A]: _MLGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyManagedPrefixListCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyManagedPrefixListRequest(input),
        [_A]: _MMPL,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyNetworkInterfaceAttributeRequest(input),
        [_A]: _MNIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyPrivateDnsNameOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyPrivateDnsNameOptionsRequest(input),
        [_A]: _MPDNO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyPublicIpDnsNameOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyPublicIpDnsNameOptionsRequest(input),
        [_A]: _MPIDNO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyReservedInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyReservedInstancesRequest(input),
        [_A]: _MRI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyRouteServerCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyRouteServerRequest(input),
        [_A]: _MRS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifySecurityGroupRulesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySecurityGroupRulesRequest(input),
        [_A]: _MSGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifySnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySnapshotAttributeRequest(input),
        [_A]: _MSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifySnapshotTierCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySnapshotTierRequest(input),
        [_A]: _MST,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifySpotFleetRequestCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySpotFleetRequestRequest(input),
        [_A]: _MSFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifySubnetAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifySubnetAttributeRequest(input),
        [_A]: _MSAo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyTrafficMirrorFilterNetworkServicesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTrafficMirrorFilterNetworkServicesRequest(input),
        [_A]: _MTMFNS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyTrafficMirrorFilterRuleCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTrafficMirrorFilterRuleRequest(input),
        [_A]: _MTMFR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyTrafficMirrorSessionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTrafficMirrorSessionRequest(input),
        [_A]: _MTMS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyTransitGatewayCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTransitGatewayRequest(input),
        [_A]: _MTG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyTransitGatewayPrefixListReferenceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTransitGatewayPrefixListReferenceRequest(input),
        [_A]: _MTGPLR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyTransitGatewayVpcAttachmentRequest(input),
        [_A]: _MTGVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessEndpointRequest(input),
        [_A]: _MVAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessEndpointPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessEndpointPolicyRequest(input),
        [_A]: _MVAEP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessGroupCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessGroupRequest(input),
        [_A]: _MVAG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessGroupPolicyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessGroupPolicyRequest(input),
        [_A]: _MVAGP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessInstanceCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessInstanceRequest(input),
        [_A]: _MVAI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest(input),
        [_A]: _MVAILC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVerifiedAccessTrustProviderCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVerifiedAccessTrustProviderRequest(input),
        [_A]: _MVATP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVolumeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVolumeRequest(input),
        [_A]: _MV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVolumeAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVolumeAttributeRequest(input),
        [_A]: _MVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcAttributeRequest(input),
        [_A]: _MVAo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcBlockPublicAccessExclusionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcBlockPublicAccessExclusionRequest(input),
        [_A]: _MVBPAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcBlockPublicAccessOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcBlockPublicAccessOptionsRequest(input),
        [_A]: _MVBPAO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcEndpointCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointRequest(input),
        [_A]: _MVE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcEndpointConnectionNotificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointConnectionNotificationRequest(input),
        [_A]: _MVECN,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcEndpointServiceConfigurationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointServiceConfigurationRequest(input),
        [_A]: _MVESC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcEndpointServicePayerResponsibilityCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointServicePayerResponsibilityRequest(input),
        [_A]: _MVESPR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcEndpointServicePermissionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcEndpointServicePermissionsRequest(input),
        [_A]: _MVESP,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcPeeringConnectionOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcPeeringConnectionOptionsRequest(input),
        [_A]: _MVPCO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpcTenancyCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpcTenancyRequest(input),
        [_A]: _MVT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpnConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnConnectionRequest(input),
        [_A]: _MVC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpnConnectionOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnConnectionOptionsRequest(input),
        [_A]: _MVCO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpnTunnelCertificateCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnTunnelCertificateRequest(input),
        [_A]: _MVTC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ModifyVpnTunnelOptionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ModifyVpnTunnelOptionsRequest(input),
        [_A]: _MVTO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_MonitorInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MonitorInstancesRequest(input),
        [_A]: _MIo,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_MoveAddressToVpcCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MoveAddressToVpcRequest(input),
        [_A]: _MATV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_MoveByoipCidrToIpamCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MoveByoipCidrToIpamRequest(input),
        [_A]: _MBCTI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_MoveCapacityReservationInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_MoveCapacityReservationInstancesRequest(input),
        [_A]: _MCRI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ProvisionByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionByoipCidrRequest(input),
        [_A]: _PBC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ProvisionIpamByoasnCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionIpamByoasnRequest(input),
        [_A]: _PIB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ProvisionIpamPoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionIpamPoolCidrRequest(input),
        [_A]: _PIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ProvisionPublicIpv4PoolCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ProvisionPublicIpv4PoolCidrRequest(input),
        [_A]: _PPIPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PurchaseCapacityBlockCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseCapacityBlockRequest(input),
        [_A]: _PCB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PurchaseCapacityBlockExtensionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseCapacityBlockExtensionRequest(input),
        [_A]: _PCBE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PurchaseHostReservationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseHostReservationRequest(input),
        [_A]: _PHR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PurchaseReservedInstancesOfferingCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseReservedInstancesOfferingRequest(input),
        [_A]: _PRIO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PurchaseScheduledInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_PurchaseScheduledInstancesRequest(input),
        [_A]: _PSI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RebootInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RebootInstancesRequest(input),
        [_A]: _RI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterImageCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterImageRequest(input),
        [_A]: _RIe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterInstanceEventNotificationAttributesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterInstanceEventNotificationAttributesRequest(input),
        [_A]: _RIENA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterTransitGatewayMulticastGroupMembersCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterTransitGatewayMulticastGroupMembersRequest(input),
        [_A]: _RTGMGM,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterTransitGatewayMulticastGroupSourcesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RegisterTransitGatewayMulticastGroupSourcesRequest(input),
        [_A]: _RTGMGS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RejectCapacityReservationBillingOwnershipCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectCapacityReservationBillingOwnershipRequest(input),
        [_A]: _RCRBO,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RejectTransitGatewayMulticastDomainAssociationsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectTransitGatewayMulticastDomainAssociationsRequest(input),
        [_A]: _RTGMDA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RejectTransitGatewayPeeringAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectTransitGatewayPeeringAttachmentRequest(input),
        [_A]: _RTGPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RejectTransitGatewayVpcAttachmentCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectTransitGatewayVpcAttachmentRequest(input),
        [_A]: _RTGVA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RejectVpcEndpointConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectVpcEndpointConnectionsRequest(input),
        [_A]: _RVEC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RejectVpcPeeringConnectionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RejectVpcPeeringConnectionRequest(input),
        [_A]: _RVPC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReleaseAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReleaseAddressRequest(input),
        [_A]: _RA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReleaseHostsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReleaseHostsRequest(input),
        [_A]: _RH,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReleaseIpamPoolAllocationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReleaseIpamPoolAllocationRequest(input),
        [_A]: _RIPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceIamInstanceProfileAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceIamInstanceProfileAssociationRequest(input),
        [_A]: _RIIPA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceImageCriteriaInAllowedImagesSettingsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceImageCriteriaInAllowedImagesSettingsRequest(input),
        [_A]: _RICIAIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceNetworkAclAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceNetworkAclAssociationRequest(input),
        [_A]: _RNAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceNetworkAclEntryCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceNetworkAclEntryRequest(input),
        [_A]: _RNAE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceRouteRequest(input),
        [_A]: _RR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceRouteTableAssociationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceRouteTableAssociationRequest(input),
        [_A]: _RRTA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceTransitGatewayRouteCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceTransitGatewayRouteRequest(input),
        [_A]: _RTGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReplaceVpnTunnelCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReplaceVpnTunnelRequest(input),
        [_A]: _RVT,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ReportInstanceStatusCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ReportInstanceStatusRequest(input),
        [_A]: _RIS,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RequestSpotFleetCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RequestSpotFleetRequest(input),
        [_A]: _RSF,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RequestSpotInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RequestSpotInstancesRequest(input),
        [_A]: _RSI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetAddressAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetAddressAttributeRequest(input),
        [_A]: _RAA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetEbsDefaultKmsKeyIdCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetEbsDefaultKmsKeyIdRequest(input),
        [_A]: _REDKKI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetFpgaImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetFpgaImageAttributeRequest(input),
        [_A]: _RFIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetImageAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetImageAttributeRequest(input),
        [_A]: _RIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetInstanceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetInstanceAttributeRequest(input),
        [_A]: _RIAe,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetNetworkInterfaceAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetNetworkInterfaceAttributeRequest(input),
        [_A]: _RNIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ResetSnapshotAttributeCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_ResetSnapshotAttributeRequest(input),
        [_A]: _RSA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreAddressToClassicCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreAddressToClassicRequest(input),
        [_A]: _RATC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreImageFromRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreImageFromRecycleBinRequest(input),
        [_A]: _RIFRB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreManagedPrefixListVersionCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreManagedPrefixListVersionRequest(input),
        [_A]: _RMPLV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreSnapshotFromRecycleBinCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreSnapshotFromRecycleBinRequest(input),
        [_A]: _RSFRB,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RestoreSnapshotTierCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RestoreSnapshotTierRequest(input),
        [_A]: _RST,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RevokeClientVpnIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeClientVpnIngressRequest(input),
        [_A]: _RCVI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RevokeSecurityGroupEgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeSecurityGroupEgressRequest(input),
        [_A]: _RSGE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RevokeSecurityGroupIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RevokeSecurityGroupIngressRequest(input),
        [_A]: _RSGI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RunInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RunInstancesRequest(input),
        [_A]: _RIu,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RunScheduledInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_RunScheduledInstancesRequest(input),
        [_A]: _RSIu,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchLocalGatewayRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SearchLocalGatewayRoutesRequest(input),
        [_A]: _SLGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchTransitGatewayMulticastGroupsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SearchTransitGatewayMulticastGroupsRequest(input),
        [_A]: _STGMG,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchTransitGatewayRoutesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SearchTransitGatewayRoutesRequest(input),
        [_A]: _STGR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendDiagnosticInterruptCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_SendDiagnosticInterruptRequest(input),
        [_A]: _SDI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartDeclarativePoliciesReportCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartDeclarativePoliciesReportRequest(input),
        [_A]: _SDPR,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartInstancesRequest(input),
        [_A]: _SI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartNetworkInsightsAccessScopeAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartNetworkInsightsAccessScopeAnalysisRequest(input),
        [_A]: _SNIASA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartNetworkInsightsAnalysisCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartNetworkInsightsAnalysisRequest(input),
        [_A]: _SNIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartVpcEndpointServicePrivateDnsVerificationCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StartVpcEndpointServicePrivateDnsVerificationRequest(input),
        [_A]: _SVESPDV,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_StopInstancesRequest(input),
        [_A]: _SIt,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TerminateClientVpnConnectionsCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TerminateClientVpnConnectionsRequest(input),
        [_A]: _TCVC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_TerminateInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_TerminateInstancesRequest(input),
        [_A]: _TI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnassignIpv6AddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnassignIpv6AddressesRequest(input),
        [_A]: _UIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnassignPrivateIpAddressesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnassignPrivateIpAddressesRequest(input),
        [_A]: _UPIA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnassignPrivateNatGatewayAddressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnassignPrivateNatGatewayAddressRequest(input),
        [_A]: _UPNGA,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnlockSnapshotCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnlockSnapshotRequest(input),
        [_A]: _US,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UnmonitorInstancesCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UnmonitorInstancesRequest(input),
        [_A]: _UI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSecurityGroupRuleDescriptionsEgressRequest(input),
        [_A]: _USGRDE,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_UpdateSecurityGroupRuleDescriptionsIngressRequest(input),
        [_A]: _USGRDI,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_WithdrawByoipCidrCommand = async (input, context) => {
    const headers = SHARED_HEADERS;
    let body;
    body = buildFormUrlencodedString({
        ...se_WithdrawByoipCidrRequest(input),
        [_A]: _WBC,
        [_V]: _,
    });
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AcceptAddressTransferCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptAddressTransferResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptCapacityReservationBillingOwnershipCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptCapacityReservationBillingOwnershipResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptReservedInstancesExchangeQuoteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptReservedInstancesExchangeQuoteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptTransitGatewayMulticastDomainAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptTransitGatewayPeeringAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptTransitGatewayVpcAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptVpcEndpointConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AcceptVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AcceptVpcPeeringConnectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AdvertiseByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AdvertiseByoipCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AllocateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AllocateAddressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AllocateHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AllocateHostsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AllocateIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AllocateIpamPoolCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ApplySecurityGroupsToClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ApplySecurityGroupsToClientVpnTargetNetworkResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssignIpv6AddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssignIpv6AddressesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssignPrivateIpAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssignPrivateIpAddressesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssignPrivateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssignPrivateNatGatewayAddressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateAddressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateCapacityReservationBillingOwnerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateCapacityReservationBillingOwnerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateClientVpnTargetNetworkResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AssociateEnclaveCertificateIamRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateEnclaveCertificateIamRoleResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateIamInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateIamInstanceProfileResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateInstanceEventWindowResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateIpamByoasnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateIpamByoasnResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateIpamResourceDiscoveryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateNatGatewayAddressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateRouteServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateRouteServerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateSecurityGroupVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateSecurityGroupVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateSubnetCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateSubnetCidrBlockResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateTransitGatewayMulticastDomainResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateTransitGatewayPolicyTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateTransitGatewayRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTrunkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateTrunkInterfaceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateVpcCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AssociateVpcCidrBlockResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachClassicLinkVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AttachClassicLinkVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_AttachNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AttachNetworkInterfaceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AttachVerifiedAccessTrustProviderResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_VolumeAttachment(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AttachVpnGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AuthorizeClientVpnIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeClientVpnIngressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AuthorizeSecurityGroupEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeSecurityGroupEgressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AuthorizeSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_AuthorizeSecurityGroupIngressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BundleInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_BundleInstanceResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelBundleTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelBundleTaskResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelCapacityReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelCapacityReservationFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelCapacityReservationFleetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelConversionTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CancelDeclarativePoliciesReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelDeclarativePoliciesReportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CancelImageLaunchPermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelImageLaunchPermissionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelImportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelImportTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelReservedInstancesListingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelReservedInstancesListingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelSpotFleetRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelSpotFleetRequestsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CancelSpotInstanceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CancelSpotInstanceRequestsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ConfirmProductInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ConfirmProductInstanceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopyFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CopyFpgaImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopyImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CopyImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CopySnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CopySnapshotResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCapacityReservationBySplittingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityReservationBySplittingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCapacityReservationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCapacityReservationFleetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCarrierGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCarrierGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateClientVpnEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClientVpnRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateClientVpnRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCoipCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCoipPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCoipPoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateCustomerGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDefaultSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateDefaultSubnetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDefaultVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateDefaultVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDelegateMacVolumeOwnershipTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateDelegateMacVolumeOwnershipTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateDhcpOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEgressOnlyInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateEgressOnlyInternetGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateFleetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateFlowLogsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateFpgaImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageUsageReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateImageUsageReportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInstanceConnectEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceConnectEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceEventWindowResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInstanceExportTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateInstanceExportTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateInternetGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamExternalResourceVerificationTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamExternalResourceVerificationTokenResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamPoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamResourceDiscoveryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateIpamScopeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_KeyPair(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLaunchTemplateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLaunchTemplateVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLaunchTemplateVersionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayRouteTableVpcAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayVirtualInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayVirtualInterfaceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLocalGatewayVirtualInterfaceGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateLocalGatewayVirtualInterfaceGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateMacSystemIntegrityProtectionModificationTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateMacSystemIntegrityProtectionModificationTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateManagedPrefixListResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNatGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateNatGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkAclCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkAclResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateNetworkInsightsAccessScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInsightsAccessScopeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInsightsPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInsightsPathResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInterfaceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNetworkInterfacePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateNetworkInterfacePermissionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePlacementGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreatePlacementGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePublicIpv4PoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreatePublicIpv4PoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateReplaceRootVolumeTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateReplaceRootVolumeTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateReservedInstancesListingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateReservedInstancesListingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRestoreImageTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRestoreImageTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteServerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteServerEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteServerEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteServerPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteServerPeerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSecurityGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_Snapshot(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSnapshotsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSpotDatafeedSubscriptionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStoreImageTaskCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateStoreImageTaskResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSubnetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSubnetCidrReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateSubnetCidrReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateTrafficMirrorFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorFilterResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorFilterRuleResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorSessionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrafficMirrorTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTrafficMirrorTargetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayConnectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayConnectResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayConnectPeerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayMulticastDomainResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayPeeringAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayPolicyTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayPrefixListReferenceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayRouteTableAnnouncementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayRouteTableAnnouncementResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateTransitGatewayVpcAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessInstanceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVerifiedAccessTrustProviderResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_Volume(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcBlockPublicAccessExclusionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcBlockPublicAccessExclusionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcEndpointConnectionNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcEndpointConnectionNotificationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcEndpointServiceConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcEndpointServiceConfigurationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpcPeeringConnectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpnConnectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateVpnConnectionRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_CreateVpnGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCarrierGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteCarrierGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteClientVpnEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClientVpnRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteClientVpnRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteCoipCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCoipPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteCoipPoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteCustomerGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEgressOnlyInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteEgressOnlyInternetGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteFleetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteFlowLogsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFpgaImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteFpgaImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteImageUsageReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteImageUsageReportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInstanceConnectEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceConnectEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteInstanceEventWindowResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamExternalResourceVerificationTokenCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamExternalResourceVerificationTokenResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamPoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamResourceDiscoveryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteIpamScopeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteKeyPairResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLaunchTemplateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLaunchTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLaunchTemplateVersionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayRouteTableVpcAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayRouteTableVpcAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayVirtualInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayVirtualInterfaceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteLocalGatewayVirtualInterfaceGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteLocalGatewayVirtualInterfaceGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteManagedPrefixListResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNatGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteNatGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkAclCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNetworkInsightsAccessScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsAccessScopeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsAccessScopeAnalysisResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsAnalysisResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInsightsPathCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInsightsPathResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNetworkInterfacePermissionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteNetworkInterfacePermissionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePlacementGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePublicIpv4PoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeletePublicIpv4PoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteQueuedReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteQueuedReservedInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteRouteServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteRouteServerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRouteServerEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteRouteServerEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRouteServerPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteRouteServerPeerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSecurityGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteSecurityGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSubnetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSubnetCidrReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteSubnetCidrReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteTrafficMirrorFilterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorFilterResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorFilterRuleResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorSessionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrafficMirrorTargetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrafficMirrorTargetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayConnectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayConnectResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayConnectPeerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayConnectPeerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayMulticastDomainResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayPeeringAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayPolicyTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayPrefixListReferenceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayRouteTableAnnouncementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayRouteTableAnnouncementResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteTransitGatewayVpcAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessInstanceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVerifiedAccessTrustProviderResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpcBlockPublicAccessExclusionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcBlockPublicAccessExclusionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcEndpointConnectionNotificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcEndpointConnectionNotificationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcEndpointsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcEndpointServiceConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcEndpointServiceConfigurationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeleteVpcPeeringConnectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpnConnectionRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeprovisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionByoipCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeprovisionIpamByoasnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionIpamByoasnResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeprovisionIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionIpamPoolCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeprovisionPublicIpv4PoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeprovisionPublicIpv4PoolCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeregisterImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeregisterInstanceEventNotificationAttributesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTransitGatewayMulticastGroupMembersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DeregisterTransitGatewayMulticastGroupSourcesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAccountAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAccountAttributesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAddressesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAddressesAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAddressesAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAddressTransfersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAddressTransfersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAggregateIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAggregateIdFormatResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAvailabilityZonesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAvailabilityZonesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeBundleTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeBundleTasksResult(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeByoipCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeByoipCidrsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityBlockExtensionHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityBlockExtensionHistoryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityBlockExtensionOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityBlockExtensionOfferingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityBlockOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityBlockOfferingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityBlocksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityBlocksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityBlockStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityBlockStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityReservationBillingRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityReservationBillingRequestsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityReservationFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityReservationFleetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCapacityReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCapacityReservationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCarrierGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCarrierGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClassicLinkInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeClassicLinkInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnAuthorizationRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnAuthorizationRulesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnEndpointsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnRoutesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClientVpnTargetNetworksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeClientVpnTargetNetworksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCoipPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCoipPoolsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeConversionTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeConversionTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCustomerGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeCustomerGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeclarativePoliciesReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeclarativePoliciesReportsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDhcpOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeDhcpOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEgressOnlyInternetGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeEgressOnlyInternetGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeElasticGpusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeElasticGpusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExportImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeExportImageTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExportTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeExportTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFastLaunchImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFastLaunchImagesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFastSnapshotRestoresResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFleetHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetHistoryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFleetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFleetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFlowLogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFlowLogsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFpgaImageAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFpgaImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeFpgaImagesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHostReservationOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeHostReservationOfferingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHostReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeHostReservationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeHostsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIamInstanceProfileAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIamInstanceProfileAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIdentityIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIdentityIdFormatResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIdFormatResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImageAttribute(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageReferencesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeImagesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageUsageReportEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageUsageReportEntriesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageUsageReportsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageUsageReportsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImportImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeImportImageTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImportSnapshotTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeImportSnapshotTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_InstanceAttribute(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceConnectEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceConnectEndpointsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceCreditSpecificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceCreditSpecificationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceEventNotificationAttributesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceEventWindowsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceEventWindowsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceImageMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceImageMetadataResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceTopologyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceTopologyResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceTypeOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceTypeOfferingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInstanceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInstanceTypesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInternetGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeInternetGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamByoasnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamByoasnResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamExternalResourceVerificationTokensCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamExternalResourceVerificationTokensResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamPoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamPoolsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamResourceDiscoveriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamResourceDiscoveriesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamResourceDiscoveryAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamResourceDiscoveryAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpamScopesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpamScopesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeIpv6PoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeIpv6PoolsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeKeyPairsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeKeyPairsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLaunchTemplatesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLaunchTemplatesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLaunchTemplateVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLaunchTemplateVersionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayRouteTablesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayRouteTableVpcAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayRouteTableVpcAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayVirtualInterfaceGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayVirtualInterfaceGroupsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLocalGatewayVirtualInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLocalGatewayVirtualInterfacesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLockedSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeLockedSnapshotsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMacHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeMacHostsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMacModificationTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeMacModificationTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeManagedPrefixListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeManagedPrefixListsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMovingAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeMovingAddressesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNatGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNatGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkAclsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkAclsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsAccessScopeAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsAccessScopeAnalysesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsAccessScopesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsAccessScopesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsAnalysesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsAnalysesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInsightsPathsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInsightsPathsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInterfaceAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInterfacePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInterfacePermissionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNetworkInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeNetworkInterfacesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeOutpostLagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeOutpostLagsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePlacementGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribePlacementGroupsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePrefixListsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribePrefixListsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePrincipalIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribePrincipalIdFormatResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePublicIpv4PoolsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribePublicIpv4PoolsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRegionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeRegionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReplaceRootVolumeTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeReplaceRootVolumeTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesListingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesListingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesModificationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedInstancesOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedInstancesOfferingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRouteServerEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeRouteServerEndpointsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRouteServerPeersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeRouteServerPeersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRouteServersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeRouteServersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeRouteTablesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeScheduledInstanceAvailabilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeScheduledInstanceAvailabilityResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeScheduledInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupReferencesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupRulesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSecurityGroupVpcAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSecurityGroupVpcAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeServiceLinkVirtualInterfacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeServiceLinkVirtualInterfacesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSnapshotAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSnapshotsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSnapshotsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSnapshotTierStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSnapshotTierStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotDatafeedSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotDatafeedSubscriptionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotFleetInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotFleetInstancesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotFleetRequestHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotFleetRequestHistoryResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotFleetRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotFleetRequestsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotInstanceRequestsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotInstanceRequestsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpotPriceHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpotPriceHistoryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStaleSecurityGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStaleSecurityGroupsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStoreImageTasksCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeStoreImageTasksResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSubnetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeSubnetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTagsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorFilterRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorFilterRulesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorFiltersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorFiltersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorSessionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorSessionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrafficMirrorTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrafficMirrorTargetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayAttachmentsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayConnectPeersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayConnectPeersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayConnectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayConnectsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayMulticastDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayMulticastDomainsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayPeeringAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayPeeringAttachmentsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayPolicyTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayPolicyTablesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayRouteTableAnnouncementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayRouteTableAnnouncementsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayRouteTablesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayRouteTablesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransitGatewayVpcAttachmentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransitGatewayVpcAttachmentsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrunkInterfaceAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrunkInterfaceAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessEndpointsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessGroupsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVerifiedAccessTrustProvidersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVerifiedAccessTrustProvidersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumeAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumeAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumesModificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumesModificationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVolumeStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVolumeStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcBlockPublicAccessExclusionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcBlockPublicAccessExclusionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcBlockPublicAccessOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcBlockPublicAccessOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcClassicLinkResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcClassicLinkDnsSupportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointConnectionNotificationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointConnectionNotificationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointServiceConfigurationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointServiceConfigurationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointServicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointServicePermissionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcEndpointServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcEndpointServicesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcPeeringConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcPeeringConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpcsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpcsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpnConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeVpnGatewaysCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DescribeVpnGatewaysResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachClassicLinkVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DetachClassicLinkVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachInternetGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachNetworkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DetachVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DetachVerifiedAccessTrustProviderResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_VolumeAttachment(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachVpnGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisableAddressTransferCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableAddressTransferResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableAllowedImagesSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableAllowedImagesSettingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableAwsNetworkPerformanceMetricSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableAwsNetworkPerformanceMetricSubscriptionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableEbsEncryptionByDefaultResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableFastLaunchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableFastLaunchResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableFastSnapshotRestoresResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableImageBlockPublicAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableImageBlockPublicAccessResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableImageDeprecationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableImageDeprecationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableImageDeregistrationProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableImageDeregistrationProtectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableIpamOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableIpamOrganizationAdminAccountResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableRouteServerPropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableRouteServerPropagationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableSerialConsoleAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableSerialConsoleAccessResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableSnapshotBlockPublicAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableSnapshotBlockPublicAccessResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableTransitGatewayRouteTablePropagationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableVgwRoutePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisableVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableVpcClassicLinkResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisableVpcClassicLinkDnsSupportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisassociateCapacityReservationBillingOwnerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateCapacityReservationBillingOwnerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateClientVpnTargetNetworkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateClientVpnTargetNetworkResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateEnclaveCertificateIamRoleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateEnclaveCertificateIamRoleResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateIamInstanceProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateIamInstanceProfileResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateInstanceEventWindowResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateIpamByoasnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateIpamByoasnResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateIpamResourceDiscoveryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateNatGatewayAddressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateRouteServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateRouteServerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DisassociateSecurityGroupVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateSecurityGroupVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateSubnetCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateSubnetCidrBlockResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTransitGatewayMulticastDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTransitGatewayMulticastDomainResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTransitGatewayPolicyTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTransitGatewayPolicyTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTransitGatewayRouteTableCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTransitGatewayRouteTableResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTrunkInterfaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTrunkInterfaceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateVpcCidrBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_DisassociateVpcCidrBlockResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableAddressTransferCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableAddressTransferResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableAllowedImagesSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableAllowedImagesSettingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableAwsNetworkPerformanceMetricSubscriptionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableAwsNetworkPerformanceMetricSubscriptionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableEbsEncryptionByDefaultResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableFastLaunchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableFastLaunchResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableFastSnapshotRestoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableFastSnapshotRestoresResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableImageBlockPublicAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableImageBlockPublicAccessResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableImageDeprecationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableImageDeprecationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableImageDeregistrationProtectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableImageDeregistrationProtectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableIpamOrganizationAdminAccountCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableIpamOrganizationAdminAccountResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableReachabilityAnalyzerOrganizationSharingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableReachabilityAnalyzerOrganizationSharingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableRouteServerPropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableRouteServerPropagationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableSerialConsoleAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableSerialConsoleAccessResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableSnapshotBlockPublicAccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableSnapshotBlockPublicAccessResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableTransitGatewayRouteTablePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableTransitGatewayRouteTablePropagationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableVgwRoutePropagationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableVolumeIOCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_EnableVpcClassicLinkCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableVpcClassicLinkResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableVpcClassicLinkDnsSupportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_EnableVpcClassicLinkDnsSupportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ExportClientVpnClientCertificateRevocationListResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportClientVpnClientConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ExportClientVpnClientConfigurationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ExportImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportTransitGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ExportTransitGatewayRoutesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ExportVerifiedAccessInstanceClientConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ExportVerifiedAccessInstanceClientConfigurationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetActiveVpnTunnelStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetActiveVpnTunnelStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAllowedImagesSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAllowedImagesSettingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAssociatedEnclaveCertificateIamRolesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAssociatedEnclaveCertificateIamRolesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAssociatedIpv6PoolCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAssociatedIpv6PoolCidrsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetAwsNetworkPerformanceDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetAwsNetworkPerformanceDataResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCapacityReservationUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetCapacityReservationUsageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetCoipPoolUsageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetCoipPoolUsageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetConsoleOutputCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetConsoleOutputResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetConsoleScreenshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetConsoleScreenshotResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeclarativePoliciesReportSummaryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetDeclarativePoliciesReportSummaryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDefaultCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetDefaultCreditSpecificationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetEbsDefaultKmsKeyIdResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetEbsEncryptionByDefaultCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetEbsEncryptionByDefaultResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetFlowLogsIntegrationTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetFlowLogsIntegrationTemplateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetGroupsForCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetGroupsForCapacityReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetHostReservationPurchasePreviewCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetHostReservationPurchasePreviewResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetImageBlockPublicAccessStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetImageBlockPublicAccessStateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceMetadataDefaultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceMetadataDefaultsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceTpmEkPubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceTpmEkPubResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceTypesFromInstanceRequirementsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceTypesFromInstanceRequirementsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetInstanceUefiDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetInstanceUefiDataResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamAddressHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamAddressHistoryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamDiscoveredAccountsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamDiscoveredAccountsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamDiscoveredPublicAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamDiscoveredPublicAddressesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamDiscoveredResourceCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamDiscoveredResourceCidrsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamPoolAllocationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamPoolAllocationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamPoolCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamPoolCidrsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetIpamResourceCidrsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetIpamResourceCidrsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLaunchTemplateDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetLaunchTemplateDataResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetManagedPrefixListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetManagedPrefixListAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetManagedPrefixListEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetManagedPrefixListEntriesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetNetworkInsightsAccessScopeAnalysisFindingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetNetworkInsightsAccessScopeContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetNetworkInsightsAccessScopeContentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetPasswordDataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetPasswordDataResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetReservedInstancesExchangeQuoteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetReservedInstancesExchangeQuoteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRouteServerAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetRouteServerAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRouteServerPropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetRouteServerPropagationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetRouteServerRoutingDatabaseCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetRouteServerRoutingDatabaseResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSecurityGroupsForVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSecurityGroupsForVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSerialConsoleAccessStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSerialConsoleAccessStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSnapshotBlockPublicAccessStateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSnapshotBlockPublicAccessStateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSpotPlacementScoresCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSpotPlacementScoresResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSubnetCidrReservationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetSubnetCidrReservationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayAttachmentPropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayAttachmentPropagationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayMulticastDomainAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayPolicyTableAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayPolicyTableAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayPolicyTableEntriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayPolicyTableEntriesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayPrefixListReferencesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayPrefixListReferencesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayRouteTableAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayRouteTableAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetTransitGatewayRouteTablePropagationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetTransitGatewayRouteTablePropagationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVerifiedAccessEndpointPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetVerifiedAccessEndpointPolicyResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVerifiedAccessEndpointTargetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetVerifiedAccessEndpointTargetsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVerifiedAccessGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetVerifiedAccessGroupPolicyResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVpnConnectionDeviceSampleConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetVpnConnectionDeviceSampleConfigurationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVpnConnectionDeviceTypesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetVpnConnectionDeviceTypesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetVpnTunnelReplacementStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_GetVpnTunnelReplacementStatusResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportClientVpnClientCertificateRevocationListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportClientVpnClientCertificateRevocationListResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportInstanceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportKeyPairCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportKeyPairResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportSnapshotResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ImportVolumeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImagesInRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListImagesInRecycleBinResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSnapshotsInRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ListSnapshotsInRecycleBinResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_LockSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_LockSnapshotResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyAddressAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyAddressAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyAvailabilityZoneGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyAvailabilityZoneGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyCapacityReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyCapacityReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyCapacityReservationFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyCapacityReservationFleetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyClientVpnEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyClientVpnEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyDefaultCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyDefaultCreditSpecificationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyEbsDefaultKmsKeyIdResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyFleetResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyFpgaImageAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyHostsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIdentityIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyIdFormatCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyInstanceCapacityReservationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceCapacityReservationAttributesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceConnectEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceConnectEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceCpuOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceCpuOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceCreditSpecificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceCreditSpecificationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceEventStartTimeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceEventStartTimeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceEventWindowCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceEventWindowResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceMaintenanceOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceMaintenanceOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceMetadataDefaultsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceMetadataDefaultsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceMetadataOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceMetadataOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstanceNetworkPerformanceOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstanceNetworkPerformanceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyInstancePlacementCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyInstancePlacementResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamPoolCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamPoolResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamResourceCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamResourceCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamResourceDiscoveryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamResourceDiscoveryResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyIpamScopeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyIpamScopeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyLaunchTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyLaunchTemplateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyLocalGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyLocalGatewayRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyManagedPrefixListCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyManagedPrefixListResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyPrivateDnsNameOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyPrivateDnsNameOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyPublicIpDnsNameOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyPublicIpDnsNameOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyReservedInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyReservedInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyRouteServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyRouteServerResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySecurityGroupRulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifySecurityGroupRulesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifySnapshotTierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifySnapshotTierResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySpotFleetRequestCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifySpotFleetRequestResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifySubnetAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyTrafficMirrorFilterNetworkServicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyTrafficMirrorFilterNetworkServicesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTrafficMirrorFilterRuleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyTrafficMirrorFilterRuleResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTrafficMirrorSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyTrafficMirrorSessionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTransitGatewayCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyTransitGatewayResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTransitGatewayPrefixListReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyTransitGatewayPrefixListReferenceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyTransitGatewayVpcAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessEndpointPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessEndpointPolicyResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessGroupResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessGroupPolicyResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessInstanceResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessInstanceLoggingConfigurationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVerifiedAccessTrustProviderCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVerifiedAccessTrustProviderResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVolumeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVolumeAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyVpcAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ModifyVpcBlockPublicAccessExclusionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcBlockPublicAccessExclusionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcBlockPublicAccessOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcBlockPublicAccessOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointConnectionNotificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointConnectionNotificationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointServiceConfigurationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointServiceConfigurationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointServicePayerResponsibilityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointServicePayerResponsibilityResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcEndpointServicePermissionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcEndpointServicePermissionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcPeeringConnectionOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcPeeringConnectionOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpcTenancyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpcTenancyResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnConnectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnConnectionOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnConnectionOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnTunnelCertificateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnTunnelCertificateResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ModifyVpnTunnelOptionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ModifyVpnTunnelOptionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MonitorInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_MonitorInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MoveAddressToVpcCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_MoveAddressToVpcResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MoveByoipCidrToIpamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_MoveByoipCidrToIpamResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_MoveCapacityReservationInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_MoveCapacityReservationInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ProvisionByoipCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionIpamByoasnCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ProvisionIpamByoasnResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionIpamPoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ProvisionIpamPoolCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ProvisionPublicIpv4PoolCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ProvisionPublicIpv4PoolCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseCapacityBlockCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PurchaseCapacityBlockResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseCapacityBlockExtensionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PurchaseCapacityBlockExtensionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseHostReservationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PurchaseHostReservationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseReservedInstancesOfferingCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PurchaseReservedInstancesOfferingResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PurchaseScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_PurchaseScheduledInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RebootInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RegisterImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RegisterImageResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterInstanceEventNotificationAttributesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RegisterInstanceEventNotificationAttributesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTransitGatewayMulticastGroupMembersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RegisterTransitGatewayMulticastGroupMembersResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterTransitGatewayMulticastGroupSourcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RegisterTransitGatewayMulticastGroupSourcesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectCapacityReservationBillingOwnershipCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RejectCapacityReservationBillingOwnershipResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectTransitGatewayMulticastDomainAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RejectTransitGatewayMulticastDomainAssociationsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectTransitGatewayPeeringAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RejectTransitGatewayPeeringAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectTransitGatewayVpcAttachmentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RejectTransitGatewayVpcAttachmentResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectVpcEndpointConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RejectVpcEndpointConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RejectVpcPeeringConnectionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RejectVpcPeeringConnectionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReleaseAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReleaseHostsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReleaseHostsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReleaseIpamPoolAllocationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReleaseIpamPoolAllocationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceIamInstanceProfileAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReplaceIamInstanceProfileAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceImageCriteriaInAllowedImagesSettingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReplaceImageCriteriaInAllowedImagesSettingsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceNetworkAclAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReplaceNetworkAclAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceNetworkAclEntryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReplaceRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ReplaceRouteTableAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReplaceRouteTableAssociationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceTransitGatewayRouteCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReplaceTransitGatewayRouteResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReplaceVpnTunnelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ReplaceVpnTunnelResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ReportInstanceStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RequestSpotFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RequestSpotFleetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RequestSpotInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RequestSpotInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetAddressAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ResetAddressAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetEbsDefaultKmsKeyIdCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ResetEbsDefaultKmsKeyIdResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetFpgaImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_ResetFpgaImageAttributeResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ResetImageAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetInstanceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetNetworkInterfaceAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_ResetSnapshotAttributeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RestoreAddressToClassicCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RestoreAddressToClassicResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreImageFromRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RestoreImageFromRecycleBinResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreManagedPrefixListVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RestoreManagedPrefixListVersionResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreSnapshotFromRecycleBinCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RestoreSnapshotFromRecycleBinResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RestoreSnapshotTierCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RestoreSnapshotTierResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeClientVpnIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RevokeClientVpnIngressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeSecurityGroupEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RevokeSecurityGroupEgressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RevokeSecurityGroupIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RevokeSecurityGroupIngressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RunInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_Reservation(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RunScheduledInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_RunScheduledInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchLocalGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SearchLocalGatewayRoutesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchTransitGatewayMulticastGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SearchTransitGatewayMulticastGroupsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchTransitGatewayRoutesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_SearchTransitGatewayRoutesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendDiagnosticInterruptCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartDeclarativePoliciesReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartDeclarativePoliciesReportResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartNetworkInsightsAccessScopeAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartNetworkInsightsAccessScopeAnalysisResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartNetworkInsightsAnalysisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartNetworkInsightsAnalysisResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartVpcEndpointServicePrivateDnsVerificationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StartVpcEndpointServicePrivateDnsVerificationResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_StopInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TerminateClientVpnConnectionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_TerminateClientVpnConnectionsResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_TerminateInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_TerminateInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnassignIpv6AddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UnassignIpv6AddressesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnassignPrivateIpAddressesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UnassignPrivateNatGatewayAddressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UnassignPrivateNatGatewayAddressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnlockSnapshotCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UnlockSnapshotResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UnmonitorInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UnmonitorInstancesResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSecurityGroupRuleDescriptionsEgressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecurityGroupRuleDescriptionsEgressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSecurityGroupRuleDescriptionsIngressCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_UpdateSecurityGroupRuleDescriptionsIngressResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_WithdrawByoipCidrCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseXmlBody(output.body, context);
    let contents = {};
    contents = de_WithdrawByoipCidrResult(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseXmlErrorBody(output.body, context),
    };
    const errorCode = loadEc2ErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    return throwDefaultError({
        output,
        parsedBody: parsedBody.Errors.Error,
        errorCode,
    });
};
const se_AcceleratorCount = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_AcceleratorCountRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_AcceleratorManufacturerSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AcceleratorNameSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AcceleratorTotalMemoryMiB = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_AcceleratorTotalMemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_AcceleratorTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AcceptAddressTransferRequest = (input, context) => {
    const entries = {};
    if (input[_Ad] != null) {
        entries[_Ad] = input[_Ad];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AcceptCapacityReservationBillingOwnershipRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    return entries;
};
const se_AcceptReservedInstancesExchangeQuoteRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RII] != null) {
        const memberEntries = se_ReservedInstanceIdSet(input[_RII]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TC] != null) {
        const memberEntries = se_TargetConfigurationRequestSet(input[_TC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AcceptTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_ValueStringList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AcceptTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AcceptTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AcceptVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_VEI] != null) {
        const memberEntries = se_VpcEndpointIdList(input[_VEI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AcceptVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    return entries;
};
const se_AccessScopePathListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AccessScopePathRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AccessScopePathRequest = (input, context) => {
    const entries = {};
    if (input[_S] != null) {
        const memberEntries = se_PathStatementRequest(input[_S]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Source.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_D] != null) {
        const memberEntries = se_PathStatementRequest(input[_D]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Destination.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TR] != null) {
        const memberEntries = se_ThroughResourcesStatementRequestList(input[_TR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ThroughResource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AccountAttributeNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AttributeName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AddIpamOperatingRegion = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_AddIpamOperatingRegionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AddIpamOperatingRegion(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AddIpamOrganizationalUnitExclusion = (input, context) => {
    const entries = {};
    if (input[_OEP] != null) {
        entries[_OEP] = input[_OEP];
    }
    return entries;
};
const se_AddIpamOrganizationalUnitExclusionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AddIpamOrganizationalUnitExclusion(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AddPrefixListEntries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AddPrefixListEntry(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AddPrefixListEntry = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    return entries;
};
const se_AdvertiseByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_As] != null) {
        entries[_As] = input[_As];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    return entries;
};
const se_AllocateAddressRequest = (input, context) => {
    const entries = {};
    if (input[_Do] != null) {
        entries[_Do] = input[_Do];
    }
    if (input[_Ad] != null) {
        entries[_Ad] = input[_Ad];
    }
    if (input[_PIP] != null) {
        entries[_PIP] = input[_PIP];
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    if (input[_COIP] != null) {
        entries[_COIP] = input[_COIP];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AllocateHostsRequest = (input, context) => {
    const entries = {};
    if (input[_IF] != null) {
        entries[_IF] = input[_IF];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_HR] != null) {
        entries[_HR] = input[_HR];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_HM] != null) {
        entries[_HM] = input[_HM];
    }
    if (input[_AI] != null) {
        const memberEntries = se_AssetIdList(input[_AI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_AP] != null) {
        entries[_AP] = input[_AP];
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_Q] != null) {
        entries[_Q] = input[_Q];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    return entries;
};
const se_AllocateIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_NL] != null) {
        entries[_NL] = input[_NL];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_PNC] != null) {
        entries[_PNC] = input[_PNC];
    }
    if (input[_AC] != null) {
        const memberEntries = se_IpamPoolAllocationAllowedCidrs(input[_AC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllowedCidr.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DC] != null) {
        const memberEntries = se_IpamPoolAllocationDisallowedCidrs(input[_DC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisallowedCidr.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AllocationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AllocationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AllocationIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AllowedInstanceTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ApplySecurityGroupsToClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ArchitectureTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ArnList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AsnAuthorizationContext = (input, context) => {
    const entries = {};
    if (input[_Me] != null) {
        entries[_Me] = input[_Me];
    }
    if (input[_Si] != null) {
        entries[_Si] = input[_Si];
    }
    return entries;
};
const se_AssetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AssignIpv6AddressesRequest = (input, context) => {
    const entries = {};
    if (input[_IPC] != null) {
        entries[_IPC] = input[_IPC];
    }
    if (input[_IP] != null) {
        const memberEntries = se_IpPrefixList(input[_IP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_IA] != null) {
        const memberEntries = se_Ipv6AddressList(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAC] != null) {
        entries[_IAC] = input[_IAC];
    }
    return entries;
};
const se_AssignPrivateIpAddressesRequest = (input, context) => {
    const entries = {};
    if (input[_IPp] != null) {
        const memberEntries = se_IpPrefixList(input[_IPp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPCp] != null) {
        entries[_IPCp] = input[_IPCp];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_PIA] != null) {
        const memberEntries = se_PrivateIpAddressStringList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIAC] != null) {
        entries[_SPIAC] = input[_SPIAC];
    }
    if (input[_AR] != null) {
        entries[_AR] = input[_AR];
    }
    return entries;
};
const se_AssignPrivateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    if (input[_PIA] != null) {
        const memberEntries = se_IpList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIAC] != null) {
        entries[_PIAC] = input[_PIAC];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateAddressRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_ARl] != null) {
        entries[_ARl] = input[_ARl];
    }
    return entries;
};
const se_AssociateCapacityReservationBillingOwnerRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_URBOI] != null) {
        entries[_URBOI] = input[_URBOI];
    }
    return entries;
};
const se_AssociateClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DOI] != null) {
        entries[_DOI] = input[_DOI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateEnclaveCertificateIamRoleRequest = (input, context) => {
    const entries = {};
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_RAo] != null) {
        entries[_RAo] = input[_RAo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateIamInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_IIP] != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    return entries;
};
const se_AssociateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IEWI] != null) {
        entries[_IEWI] = input[_IEWI];
    }
    if (input[_AT] != null) {
        const memberEntries = se_InstanceEventWindowAssociationRequest(input[_AT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AssociateIpamByoasnRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_As] != null) {
        entries[_As] = input[_As];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    return entries;
};
const se_AssociateIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_IRDI] != null) {
        entries[_IRDI] = input[_IRDI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_AssociateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    if (input[_AIll] != null) {
        const memberEntries = se_AllocationIdList(input[_AIll]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIA] != null) {
        const memberEntries = se_IpList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateRouteServerRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_GI] != null) {
        entries[_GI] = input[_GI];
    }
    if (input[_PIP] != null) {
        entries[_PIP] = input[_PIP];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    return entries;
};
const se_AssociateSecurityGroupVpcRequest = (input, context) => {
    const entries = {};
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateSubnetCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input[_IIPI] != null) {
        entries[_IIPI] = input[_IIPI];
    }
    if (input[_INL] != null) {
        entries[_INL] = input[_INL];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_ICB] != null) {
        entries[_ICB] = input[_ICB];
    }
    return entries;
};
const se_AssociateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGPTI] != null) {
        entries[_TGPTI] = input[_TGPTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateTrunkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_BII] != null) {
        entries[_BII] = input[_BII];
    }
    if (input[_TII] != null) {
        entries[_TII] = input[_TII];
    }
    if (input[_VIl] != null) {
        entries[_VIl] = input[_VIl];
    }
    if (input[_GK] != null) {
        entries[_GK] = input[_GK];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AssociateVpcCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    if (input[_ICBNBG] != null) {
        entries[_ICBNBG] = input[_ICBNBG];
    }
    if (input[_IPpv] != null) {
        entries[_IPpv] = input[_IPpv];
    }
    if (input[_ICB] != null) {
        entries[_ICB] = input[_ICB];
    }
    if (input[_IIPIp] != null) {
        entries[_IIPIp] = input[_IIPIp];
    }
    if (input[_INLp] != null) {
        entries[_INLp] = input[_INLp];
    }
    if (input[_IIPI] != null) {
        entries[_IIPI] = input[_IIPI];
    }
    if (input[_INL] != null) {
        entries[_INL] = input[_INL];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_APICB] != null) {
        entries[_APICB] = input[_APICB];
    }
    return entries;
};
const se_AssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AssociationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_AthenaIntegration = (input, context) => {
    const entries = {};
    if (input[_IRSDA] != null) {
        entries[_IRSDA] = input[_IRSDA];
    }
    if (input[_PLF] != null) {
        entries[_PLF] = input[_PLF];
    }
    if (input[_PSD] != null) {
        entries[_PSD] = smithyClient.serializeDateTime(input[_PSD]);
    }
    if (input[_PED] != null) {
        entries[_PED] = smithyClient.serializeDateTime(input[_PED]);
    }
    return entries;
};
const se_AthenaIntegrationsSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_AthenaIntegration(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_AttachClassicLinkVpcRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_G] != null) {
        const memberEntries = se_GroupIdStringList(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AttachInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IGI] != null) {
        entries[_IGI] = input[_IGI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_AttachNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_NCI] != null) {
        entries[_NCI] = input[_NCI];
    }
    if (input[_ESS] != null) {
        const memberEntries = se_EnaSrdSpecification(input[_ESS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EQC] != null) {
        entries[_EQC] = input[_EQC];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_DIev] != null) {
        entries[_DIev] = input[_DIev];
    }
    return entries;
};
const se_AttachVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_VATPI] != null) {
        entries[_VATPI] = input[_VATPI];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AttachVolumeRequest = (input, context) => {
    const entries = {};
    if (input[_Dev] != null) {
        entries[_Dev] = input[_Dev];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AttachVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_VGI] != null) {
        entries[_VGI] = input[_VGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AttributeBooleanValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_AttributeValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_AuthorizeClientVpnIngressRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_TNC] != null) {
        entries[_TNC] = input[_TNC];
    }
    if (input[_AGI] != null) {
        entries[_AGI] = input[_AGI];
    }
    if (input[_AAG] != null) {
        entries[_AAG] = input[_AAG];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AuthorizeSecurityGroupEgressRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_SSGN] != null) {
        entries[_SSGN] = input[_SSGN];
    }
    if (input[_SSGOI] != null) {
        entries[_SSGOI] = input[_SSGOI];
    }
    if (input[_IPpr] != null) {
        entries[_IPpr] = input[_IPpr];
    }
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    if (input[_CIi] != null) {
        entries[_CIi] = input[_CIi];
    }
    if (input[_IPpe] != null) {
        const memberEntries = se_IpPermissionList(input[_IPpe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_AuthorizeSecurityGroupIngressRequest = (input, context) => {
    const entries = {};
    if (input[_CIi] != null) {
        entries[_CIi] = input[_CIi];
    }
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_IPpe] != null) {
        const memberEntries = se_IpPermissionList(input[_IPpe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPpr] != null) {
        entries[_IPpr] = input[_IPpr];
    }
    if (input[_SSGN] != null) {
        entries[_SSGN] = input[_SSGN];
    }
    if (input[_SSGOI] != null) {
        entries[_SSGOI] = input[_SSGOI];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_AvailabilityZoneStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AvailabilityZone.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BaselineEbsBandwidthMbps = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_BaselineEbsBandwidthMbpsRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_BaselinePerformanceFactors = (input, context) => {
    const entries = {};
    if (input[_Cp] != null) {
        const memberEntries = se_CpuPerformanceFactor(input[_Cp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Cpu.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_BaselinePerformanceFactorsRequest = (input, context) => {
    const entries = {};
    if (input[_Cp] != null) {
        const memberEntries = se_CpuPerformanceFactorRequest(input[_Cp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Cpu.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_BillingProductList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BlobAttributeValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = context.base64Encoder(input[_Va]);
    }
    return entries;
};
const se_BlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input[_E] != null) {
        const memberEntries = se_EbsBlockDevice(input[_E]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ND] != null) {
        entries[_ND] = input[_ND];
    }
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_VN] != null) {
        entries[_VN] = input[_VN];
    }
    return entries;
};
const se_BlockDeviceMappingList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_BlockDeviceMapping(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_BlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_BlockDeviceMapping(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_BundleIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`BundleId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_BundleInstanceRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_St] != null) {
        const memberEntries = se_Storage(input[_St], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Storage.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CancelBundleTaskRequest = (input, context) => {
    const entries = {};
    if (input[_BIu] != null) {
        entries[_BIu] = input[_BIu];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CancelCapacityReservationFleetsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CRFI] != null) {
        const memberEntries = se_CapacityReservationFleetIdSet(input[_CRFI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CancelCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CancelConversionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTI] != null) {
        entries[_CTI] = input[_CTI];
    }
    if (input[_RM] != null) {
        entries[_RM] = input[_RM];
    }
    return entries;
};
const se_CancelDeclarativePoliciesReportRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RIep] != null) {
        entries[_RIep] = input[_RIep];
    }
    return entries;
};
const se_CancelExportTaskRequest = (input, context) => {
    const entries = {};
    if (input[_ETI] != null) {
        entries[_ETI] = input[_ETI];
    }
    return entries;
};
const se_CancelImageLaunchPermissionRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CancelImportTaskRequest = (input, context) => {
    const entries = {};
    if (input[_CRa] != null) {
        entries[_CRa] = input[_CRa];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ITI] != null) {
        entries[_ITI] = input[_ITI];
    }
    return entries;
};
const se_CancelReservedInstancesListingRequest = (input, context) => {
    const entries = {};
    if (input[_RILI] != null) {
        entries[_RILI] = input[_RILI];
    }
    return entries;
};
const se_CancelSpotFleetRequestsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SFRI] != null) {
        const memberEntries = se_SpotFleetRequestIdList(input[_SFRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TI] != null) {
        entries[_TI] = input[_TI];
    }
    return entries;
};
const se_CancelSpotInstanceRequestsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIRI] != null) {
        const memberEntries = se_SpotInstanceRequestIdList(input[_SIRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CapacityBlockIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CapacityReservationFleetIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CapacityReservationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CapacityReservationOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_USs] != null) {
        entries[_USs] = input[_USs];
    }
    return entries;
};
const se_CapacityReservationSpecification = (input, context) => {
    const entries = {};
    if (input[_CRP] != null) {
        entries[_CRP] = input[_CRP];
    }
    if (input[_CRTa] != null) {
        const memberEntries = se_CapacityReservationTarget(input[_CRTa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CapacityReservationTarget = (input, context) => {
    const entries = {};
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_CRRGA] != null) {
        entries[_CRRGA] = input[_CRRGA];
    }
    return entries;
};
const se_CarrierGatewayIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CertificateAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input[_CRCCA] != null) {
        entries[_CRCCA] = input[_CRCCA];
    }
    return entries;
};
const se_CidrAuthorizationContext = (input, context) => {
    const entries = {};
    if (input[_Me] != null) {
        entries[_Me] = input[_Me];
    }
    if (input[_Si] != null) {
        entries[_Si] = input[_Si];
    }
    return entries;
};
const se_ClassicLoadBalancer = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    return entries;
};
const se_ClassicLoadBalancers = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ClassicLoadBalancer(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ClassicLoadBalancersConfig = (input, context) => {
    const entries = {};
    if (input[_CLB] != null) {
        const memberEntries = se_ClassicLoadBalancers(input[_CLB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLoadBalancers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ClientConnectOptions = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    if (input[_LFA] != null) {
        entries[_LFA] = input[_LFA];
    }
    return entries;
};
const se_ClientData = (input, context) => {
    const entries = {};
    if (input[_Co] != null) {
        entries[_Co] = input[_Co];
    }
    if (input[_UE] != null) {
        entries[_UE] = smithyClient.serializeDateTime(input[_UE]);
    }
    if (input[_USp] != null) {
        entries[_USp] = smithyClient.serializeFloat(input[_USp]);
    }
    if (input[_USpl] != null) {
        entries[_USpl] = smithyClient.serializeDateTime(input[_USpl]);
    }
    return entries;
};
const se_ClientLoginBannerOptions = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    if (input[_BT] != null) {
        entries[_BT] = input[_BT];
    }
    return entries;
};
const se_ClientRouteEnforcementOptions = (input, context) => {
    const entries = {};
    if (input[_Enf] != null) {
        entries[_Enf] = input[_Enf];
    }
    return entries;
};
const se_ClientVpnAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_AD] != null) {
        const memberEntries = se_DirectoryServiceAuthenticationRequest(input[_AD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ActiveDirectory.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MA] != null) {
        const memberEntries = se_CertificateAuthenticationRequest(input[_MA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MutualAuthentication.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_FA] != null) {
        const memberEntries = se_FederatedAuthenticationRequest(input[_FA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FederatedAuthentication.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ClientVpnAuthenticationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ClientVpnAuthenticationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ClientVpnEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ClientVpnSecurityGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CloudWatchLogOptionsSpecification = (input, context) => {
    const entries = {};
    if (input[_LE] != null) {
        entries[_LE] = input[_LE];
    }
    if (input[_LGA] != null) {
        entries[_LGA] = input[_LGA];
    }
    if (input[_LOF] != null) {
        entries[_LOF] = input[_LOF];
    }
    return entries;
};
const se_CoipPoolIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ConfirmProductInstanceRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_PC] != null) {
        entries[_PC] = input[_PC];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ConnectionLogOptions = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    if (input[_CLG] != null) {
        entries[_CLG] = input[_CLG];
    }
    if (input[_CLS] != null) {
        entries[_CLS] = input[_CLS];
    }
    return entries;
};
const se_ConnectionNotificationIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ConnectionTrackingSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_TET] != null) {
        entries[_TET] = input[_TET];
    }
    if (input[_UST] != null) {
        entries[_UST] = input[_UST];
    }
    if (input[_UT] != null) {
        entries[_UT] = input[_UT];
    }
    return entries;
};
const se_ConversionIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CopyFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SFII] != null) {
        entries[_SFII] = input[_SFII];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_SR] != null) {
        entries[_SR] = input[_SR];
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CopyImageRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_SII] != null) {
        entries[_SII] = input[_SII];
    }
    if (input[_SR] != null) {
        entries[_SR] = input[_SR];
    }
    if (input[_DOA] != null) {
        entries[_DOA] = input[_DOA];
    }
    if (input[_CITo] != null) {
        entries[_CITo] = input[_CITo];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SCCDM] != null) {
        entries[_SCCDM] = input[_SCCDM];
    }
    if (input[_DAZe] != null) {
        entries[_DAZe] = input[_DAZe];
    }
    if (input[_DAZI] != null) {
        entries[_DAZI] = input[_DAZI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CopySnapshotRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DOA] != null) {
        entries[_DOA] = input[_DOA];
    }
    if (input[_DRes] != null) {
        entries[_DRes] = input[_DRes];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_PU] != null) {
        entries[_PU] = input[_PU];
    }
    if (input[_SR] != null) {
        entries[_SR] = input[_SR];
    }
    if (input[_SSI] != null) {
        entries[_SSI] = input[_SSI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CDM] != null) {
        entries[_CDM] = input[_CDM];
    }
    if (input[_DAZe] != null) {
        entries[_DAZe] = input[_DAZe];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CpuManufacturerSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_CC] != null) {
        entries[_CC] = input[_CC];
    }
    if (input[_TPC] != null) {
        entries[_TPC] = input[_TPC];
    }
    if (input[_ASS] != null) {
        entries[_ASS] = input[_ASS];
    }
    return entries;
};
const se_CpuPerformanceFactor = (input, context) => {
    const entries = {};
    if (input[_R] != null) {
        const memberEntries = se_PerformanceFactorReferenceSet(input[_R]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReferenceSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CpuPerformanceFactorRequest = (input, context) => {
    const entries = {};
    if (input[_R] != null) {
        const memberEntries = se_PerformanceFactorReferenceSetRequest(input[_R]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Reference.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateCapacityReservationBySplittingRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_SCRI] != null) {
        entries[_SCRI] = input[_SCRI];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateCapacityReservationFleetRequest = (input, context) => {
    const entries = {};
    if (input[_AS] != null) {
        entries[_AS] = input[_AS];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_ITS] != null) {
        const memberEntries = se_ReservationFleetInstanceSpecificationList(input[_ITS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTypeSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Te] != null) {
        entries[_Te] = input[_Te];
    }
    if (input[_TTC] != null) {
        entries[_TTC] = input[_TTC];
    }
    if (input[_ED] != null) {
        entries[_ED] = smithyClient.serializeDateTime(input[_ED]);
    }
    if (input[_IMC] != null) {
        entries[_IMC] = input[_IMC];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_IPn] != null) {
        entries[_IPn] = input[_IPn];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_Te] != null) {
        entries[_Te] = input[_Te];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    if (input[_ES] != null) {
        entries[_ES] = input[_ES];
    }
    if (input[_ED] != null) {
        entries[_ED] = smithyClient.serializeDateTime(input[_ED]);
    }
    if (input[_EDT] != null) {
        entries[_EDT] = input[_EDT];
    }
    if (input[_IMC] != null) {
        entries[_IMC] = input[_IMC];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_PGA] != null) {
        entries[_PGA] = input[_PGA];
    }
    if (input[_SD] != null) {
        entries[_SD] = smithyClient.serializeDateTime(input[_SD]);
    }
    if (input[_CD] != null) {
        entries[_CD] = input[_CD];
    }
    if (input[_DP] != null) {
        entries[_DP] = input[_DP];
    }
    return entries;
};
const se_CreateCarrierGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_CCB] != null) {
        entries[_CCB] = input[_CCB];
    }
    if (input[_SCA] != null) {
        entries[_SCA] = input[_SCA];
    }
    if (input[_AO] != null) {
        const memberEntries = se_ClientVpnAuthenticationRequestList(input[_AO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Authentication.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CLO] != null) {
        const memberEntries = se_ConnectionLogOptions(input[_CLO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DSn] != null) {
        const memberEntries = se_ValueStringList(input[_DSn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsServers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TPr] != null) {
        entries[_TPr] = input[_TPr];
    }
    if (input[_VP] != null) {
        entries[_VP] = input[_VP];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_ST] != null) {
        entries[_ST] = input[_ST];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SGI] != null) {
        const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_SSP] != null) {
        entries[_SSP] = input[_SSP];
    }
    if (input[_CCO] != null) {
        const memberEntries = se_ClientConnectOptions(input[_CCO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientConnectOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_STH] != null) {
        entries[_STH] = input[_STH];
    }
    if (input[_CLBO] != null) {
        const memberEntries = se_ClientLoginBannerOptions(input[_CLBO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientLoginBannerOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CREO] != null) {
        const memberEntries = se_ClientRouteEnforcementOptions(input[_CREO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientRouteEnforcementOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DOST] != null) {
        entries[_DOST] = input[_DOST];
    }
    if (input[_EIAT] != null) {
        entries[_EIAT] = input[_EIAT];
    }
    if (input[_TIAT] != null) {
        entries[_TIAT] = input[_TIAT];
    }
    return entries;
};
const se_CreateClientVpnRouteRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_TVSI] != null) {
        entries[_TVSI] = input[_TVSI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateCoipCidrRequest = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_CPIo] != null) {
        entries[_CPIo] = input[_CPIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateCoipPoolRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateCustomerGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_BA] != null) {
        entries[_BA] = input[_BA];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_IAp] != null) {
        entries[_IAp] = input[_IAp];
    }
    if (input[_BAE] != null) {
        entries[_BAE] = input[_BAE];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateDefaultSubnetRequest = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IN] != null) {
        entries[_IN] = input[_IN];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    return entries;
};
const se_CreateDefaultVpcRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateDelegateMacVolumeOwnershipTaskRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_MC] != null) {
        entries[_MC] = input[_MC];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DCh] != null) {
        const memberEntries = se_NewDhcpConfigurationList(input[_DCh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DhcpConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateEgressOnlyInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateFleetRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_SO] != null) {
        const memberEntries = se_SpotOptionsRequest(input[_SO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ODO] != null) {
        const memberEntries = se_OnDemandOptionsRequest(input[_ODO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OnDemandOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ECTP] != null) {
        entries[_ECTP] = input[_ECTP];
    }
    if (input[_LTC] != null) {
        const memberEntries = se_FleetLaunchTemplateConfigListRequest(input[_LTC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TCS] != null) {
        const memberEntries = se_TargetCapacitySpecificationRequest(input[_TCS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetCapacitySpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TIWE] != null) {
        entries[_TIWE] = input[_TIWE];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_VF] != null) {
        entries[_VF] = smithyClient.serializeDateTime(input[_VF]);
    }
    if (input[_VU] != null) {
        entries[_VU] = smithyClient.serializeDateTime(input[_VU]);
    }
    if (input[_RUI] != null) {
        entries[_RUI] = input[_RUI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Con] != null) {
        entries[_Con] = input[_Con];
    }
    return entries;
};
const se_CreateFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DLPA] != null) {
        entries[_DLPA] = input[_DLPA];
    }
    if (input[_DCAR] != null) {
        entries[_DCAR] = input[_DCAR];
    }
    if (input[_LGN] != null) {
        entries[_LGN] = input[_LGN];
    }
    if (input[_RIes] != null) {
        const memberEntries = se_FlowLogResourceIds(input[_RIes]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_TT] != null) {
        entries[_TT] = input[_TT];
    }
    if (input[_LDT] != null) {
        entries[_LDT] = input[_LDT];
    }
    if (input[_LD] != null) {
        entries[_LD] = input[_LD];
    }
    if (input[_LF] != null) {
        entries[_LF] = input[_LF];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MAI] != null) {
        entries[_MAI] = input[_MAI];
    }
    if (input[_DO] != null) {
        const memberEntries = se_DestinationOptionsRequest(input[_DO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ISL] != null) {
        const memberEntries = se_StorageLocation(input[_ISL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InputStorageLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LSL] != null) {
        const memberEntries = se_StorageLocation(input[_LSL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogsStorageLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateImageRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SL] != null) {
        entries[_SL] = input[_SL];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_NR] != null) {
        entries[_NR] = input[_NR];
    }
    if (input[_BDM] != null) {
        const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateImageUsageReportRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RTe] != null) {
        const memberEntries = se_ImageUsageResourceTypeRequestList(input[_RTe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AIc] != null) {
        const memberEntries = se_ImageUsageReportUserIdStringList(input[_AIc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AccountId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateInstanceConnectEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_SecurityGroupIdStringListRequest(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PCI] != null) {
        entries[_PCI] = input[_PCI];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAT] != null) {
        entries[_IAT] = input[_IAT];
    }
    return entries;
};
const se_CreateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_TRi] != null) {
        const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input[_TRi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CE] != null) {
        entries[_CE] = input[_CE];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateInstanceExportTaskRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_TE] != null) {
        entries[_TE] = input[_TE];
    }
    if (input[_ETST] != null) {
        const memberEntries = se_ExportToS3TaskSpecification(input[_ETST]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportToS3.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateIpamExternalResourceVerificationTokenRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ISI] != null) {
        entries[_ISI] = input[_ISI];
    }
    if (input[_L] != null) {
        entries[_L] = input[_L];
    }
    if (input[_SIPI] != null) {
        entries[_SIPI] = input[_SIPI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_AF] != null) {
        entries[_AF] = input[_AF];
    }
    if (input[_AIu] != null) {
        entries[_AIu] = input[_AIu];
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_AMNL] != null) {
        entries[_AMNL] = input[_AMNL];
    }
    if (input[_AMNLl] != null) {
        entries[_AMNLl] = input[_AMNLl];
    }
    if (input[_ADNL] != null) {
        entries[_ADNL] = input[_ADNL];
    }
    if (input[_ARTl] != null) {
        const memberEntries = se_RequestIpamResourceTagList(input[_ARTl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_ASw] != null) {
        entries[_ASw] = input[_ASw];
    }
    if (input[_PIS] != null) {
        entries[_PIS] = input[_PIS];
    }
    if (input[_SRo] != null) {
        const memberEntries = se_IpamPoolSourceResourceRequest(input[_SRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceResource.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateIpamRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_OR] != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input[_OR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_Ti] != null) {
        entries[_Ti] = input[_Ti];
    }
    if (input[_EPG] != null) {
        entries[_EPG] = input[_EPG];
    }
    if (input[_MAe] != null) {
        entries[_MAe] = input[_MAe];
    }
    return entries;
};
const se_CreateIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_OR] != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input[_OR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateKeyPairRequest = (input, context) => {
    const entries = {};
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_KT] != null) {
        entries[_KT] = input[_KT];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_KF] != null) {
        entries[_KF] = input[_KF];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_VD] != null) {
        entries[_VD] = input[_VD];
    }
    if (input[_LTD] != null) {
        const memberEntries = se_RequestLaunchTemplateData(input[_LTD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_O] != null) {
        const memberEntries = se_OperatorRequest(input[_O]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Operator.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateLaunchTemplateVersionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_SV] != null) {
        entries[_SV] = input[_SV];
    }
    if (input[_VD] != null) {
        entries[_VD] = input[_VD];
    }
    if (input[_LTD] != null) {
        const memberEntries = se_RequestLaunchTemplateData(input[_LTD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RAe] != null) {
        entries[_RAe] = input[_RAe];
    }
    return entries;
};
const se_CreateLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_LGVIGI] != null) {
        entries[_LGVIGI] = input[_LGVIGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_DPLI] != null) {
        entries[_DPLI] = input[_DPLI];
    }
    return entries;
};
const se_CreateLocalGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_LGI] != null) {
        entries[_LGI] = input[_LGI];
    }
    if (input[_Mo] != null) {
        entries[_Mo] = input[_Mo];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_LGVIGI] != null) {
        entries[_LGVIGI] = input[_LGVIGI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateLocalGatewayVirtualInterfaceGroupRequest = (input, context) => {
    const entries = {};
    if (input[_LGI] != null) {
        entries[_LGI] = input[_LGI];
    }
    if (input[_LBA] != null) {
        entries[_LBA] = input[_LBA];
    }
    if (input[_LBAE] != null) {
        entries[_LBAE] = input[_LBAE];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateLocalGatewayVirtualInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_LGVIGI] != null) {
        entries[_LGVIGI] = input[_LGVIGI];
    }
    if (input[_OLI] != null) {
        entries[_OLI] = input[_OLI];
    }
    if (input[_Vl] != null) {
        entries[_Vl] = input[_Vl];
    }
    if (input[_LA] != null) {
        entries[_LA] = input[_LA];
    }
    if (input[_PAe] != null) {
        entries[_PAe] = input[_PAe];
    }
    if (input[_PBA] != null) {
        entries[_PBA] = input[_PBA];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PBAE] != null) {
        entries[_PBAE] = input[_PBAE];
    }
    return entries;
};
const se_CreateMacSystemIntegrityProtectionModificationTaskRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_MC] != null) {
        entries[_MC] = input[_MC];
    }
    if (input[_MSIPC] != null) {
        const memberEntries = se_MacSystemIntegrityProtectionConfigurationRequest(input[_MSIPC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MacSystemIntegrityProtectionConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MSIPS] != null) {
        entries[_MSIPS] = input[_MSIPS];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PLN] != null) {
        entries[_PLN] = input[_PLN];
    }
    if (input[_Ent] != null) {
        const memberEntries = se_AddPrefixListEntries(input[_Ent]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Entry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ME] != null) {
        entries[_ME] = input[_ME];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AF] != null) {
        entries[_AF] = input[_AF];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateNatGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTo] != null) {
        entries[_CTo] = input[_CTo];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_SAI] != null) {
        const memberEntries = se_AllocationIdList(input[_SAI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecondaryAllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIA] != null) {
        const memberEntries = se_IpList(input[_SPIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecondaryPrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIAC] != null) {
        entries[_SPIAC] = input[_SPIAC];
    }
    return entries;
};
const se_CreateNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NAI] != null) {
        entries[_NAI] = input[_NAI];
    }
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_RAu] != null) {
        entries[_RAu] = input[_RAu];
    }
    if (input[_Eg] != null) {
        entries[_Eg] = input[_Eg];
    }
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    if (input[_ICB] != null) {
        entries[_ICB] = input[_ICB];
    }
    if (input[_ITC] != null) {
        const memberEntries = se_IcmpTypeCode(input[_ITC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Icmp.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PR] != null) {
        const memberEntries = se_PortRange(input[_PR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateNetworkAclRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_CreateNetworkInsightsAccessScopeRequest = (input, context) => {
    const entries = {};
    if (input[_MP] != null) {
        const memberEntries = se_AccessScopePathListRequest(input[_MP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MatchPath.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EP] != null) {
        const memberEntries = se_AccessScopePathListRequest(input[_EP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludePath.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateNetworkInsightsPathRequest = (input, context) => {
    const entries = {};
    if (input[_SIo] != null) {
        entries[_SIo] = input[_SIo];
    }
    if (input[_DIest] != null) {
        entries[_DIest] = input[_DIest];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_DPe] != null) {
        entries[_DPe] = input[_DPe];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_FAS] != null) {
        const memberEntries = se_PathRequestFilter(input[_FAS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterAtSource.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_FAD] != null) {
        const memberEntries = se_PathRequestFilter(input[_FAD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterAtDestination.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateNetworkInterfacePermissionRequest = (input, context) => {
    const entries = {};
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_AAI] != null) {
        entries[_AAI] = input[_AAI];
    }
    if (input[_ASw] != null) {
        entries[_ASw] = input[_ASw];
    }
    if (input[_Pe] != null) {
        entries[_Pe] = input[_Pe];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_IPp] != null) {
        const memberEntries = se_Ipv4PrefixList(input[_IPp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPCp] != null) {
        entries[_IPCp] = input[_IPCp];
    }
    if (input[_IP] != null) {
        const memberEntries = se_Ipv6PrefixList(input[_IP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPC] != null) {
        entries[_IPC] = input[_IPC];
    }
    if (input[_ITn] != null) {
        entries[_ITn] = input[_ITn];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_EPI] != null) {
        entries[_EPI] = input[_EPI];
    }
    if (input[_CTS] != null) {
        const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionTrackingSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_O] != null) {
        const memberEntries = se_OperatorRequest(input[_O]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Operator.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_G] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIA] != null) {
        const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIAC] != null) {
        entries[_SPIAC] = input[_SPIAC];
    }
    if (input[_IA] != null) {
        const memberEntries = se_InstanceIpv6AddressList(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAC] != null) {
        entries[_IAC] = input[_IAC];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreatePlacementGroupRequest = (input, context) => {
    const entries = {};
    if (input[_PCa] != null) {
        entries[_PCa] = input[_PCa];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SLp] != null) {
        entries[_SLp] = input[_SLp];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_Str] != null) {
        entries[_Str] = input[_Str];
    }
    return entries;
};
const se_CreatePublicIpv4PoolRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    return entries;
};
const se_CreateReplaceRootVolumeTaskRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRRV] != null) {
        entries[_DRRV] = input[_DRRV];
    }
    if (input[_VIR] != null) {
        entries[_VIR] = input[_VIR];
    }
    return entries;
};
const se_CreateReservedInstancesListingRequest = (input, context) => {
    const entries = {};
    if (input[_RIIe] != null) {
        entries[_RIIe] = input[_RIIe];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_PS] != null) {
        const memberEntries = se_PriceScheduleSpecificationList(input[_PS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PriceSchedules.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateRestoreImageTaskRequest = (input, context) => {
    const entries = {};
    if (input[_B] != null) {
        entries[_B] = input[_B];
    }
    if (input[_OK] != null) {
        entries[_OK] = input[_OK];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DPLI] != null) {
        entries[_DPLI] = input[_DPLI];
    }
    if (input[_VEIp] != null) {
        entries[_VEIp] = input[_VEIp];
    }
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_LGI] != null) {
        entries[_LGI] = input[_LGI];
    }
    if (input[_CGI] != null) {
        entries[_CGI] = input[_CGI];
    }
    if (input[_CNAo] != null) {
        entries[_CNAo] = input[_CNAo];
    }
    if (input[_ONA] != null) {
        entries[_ONA] = input[_ONA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_GI] != null) {
        entries[_GI] = input[_GI];
    }
    if (input[_DICB] != null) {
        entries[_DICB] = input[_DICB];
    }
    if (input[_EOIGI] != null) {
        entries[_EOIGI] = input[_EOIGI];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    return entries;
};
const se_CreateRouteServerEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateRouteServerPeerRequest = (input, context) => {
    const entries = {};
    if (input[_RSEI] != null) {
        entries[_RSEI] = input[_RSEI];
    }
    if (input[_PAe] != null) {
        entries[_PAe] = input[_PAe];
    }
    if (input[_BO] != null) {
        const memberEntries = se_RouteServerBgpOptionsRequest(input[_BO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BgpOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateRouteServerRequest = (input, context) => {
    const entries = {};
    if (input[_ASA] != null) {
        entries[_ASA] = input[_ASA];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PRe] != null) {
        entries[_PRe] = input[_PRe];
    }
    if (input[_PRD] != null) {
        entries[_PRD] = input[_PRD];
    }
    if (input[_SNE] != null) {
        entries[_SNE] = input[_SNE];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_CreateSecurityGroupRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_GD] = input[_De];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateSnapshotRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Lo] != null) {
        entries[_Lo] = input[_Lo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_ISn] != null) {
        const memberEntries = se_InstanceSpecification(input[_ISn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTFS] != null) {
        entries[_CTFS] = input[_CTFS];
    }
    if (input[_Lo] != null) {
        entries[_Lo] = input[_Lo];
    }
    return entries;
};
const se_CreateSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_B] != null) {
        entries[_B] = input[_B];
    }
    if (input[_Pr] != null) {
        entries[_Pr] = input[_Pr];
    }
    return entries;
};
const se_CreateStoreImageTaskRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_B] != null) {
        entries[_B] = input[_B];
    }
    if (input[_SOT] != null) {
        const memberEntries = se_S3ObjectTagList(input[_SOT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3ObjectTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateSubnetCidrReservationRequest = (input, context) => {
    const entries = {};
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_RTes] != null) {
        entries[_RTes] = input[_RTes];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateSubnetRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    if (input[_ICB] != null) {
        entries[_ICB] = input[_ICB];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_IN] != null) {
        entries[_IN] = input[_IN];
    }
    if (input[_IIPIp] != null) {
        entries[_IIPIp] = input[_IIPIp];
    }
    if (input[_INLp] != null) {
        entries[_INLp] = input[_INLp];
    }
    if (input[_IIPI] != null) {
        entries[_IIPI] = input[_IIPI];
    }
    if (input[_INL] != null) {
        entries[_INL] = input[_INL];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTagsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Re] != null) {
        const memberEntries = se_ResourceIdList(input[_Re]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateTrafficMirrorFilterRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input[_TMFI] != null) {
        entries[_TMFI] = input[_TMFI];
    }
    if (input[_TD] != null) {
        entries[_TD] = input[_TD];
    }
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_RAu] != null) {
        entries[_RAu] = input[_RAu];
    }
    if (input[_DPR] != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input[_DPR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SPR] != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input[_SPR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_SCB] != null) {
        entries[_SCB] = input[_SCB];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_TMTI] != null) {
        entries[_TMTI] = input[_TMTI];
    }
    if (input[_TMFI] != null) {
        entries[_TMFI] = input[_TMFI];
    }
    if (input[_PL] != null) {
        entries[_PL] = input[_PL];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_VNI] != null) {
        entries[_VNI] = input[_VNI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateTrafficMirrorTargetRequest = (input, context) => {
    const entries = {};
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_NLBA] != null) {
        entries[_NLBA] = input[_NLBA];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_GLBEI] != null) {
        entries[_GLBEI] = input[_GLBEI];
    }
    return entries;
};
const se_CreateTransitGatewayConnectPeerRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_TGA] != null) {
        entries[_TGA] = input[_TGA];
    }
    if (input[_PAe] != null) {
        entries[_PAe] = input[_PAe];
    }
    if (input[_BO] != null) {
        const memberEntries = se_TransitGatewayConnectRequestBgpOptions(input[_BO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BgpOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ICBn] != null) {
        const memberEntries = se_InsideCidrBlocksStringList(input[_ICBn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InsideCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayConnectRequest = (input, context) => {
    const entries = {};
    if (input[_TTGAI] != null) {
        entries[_TTGAI] = input[_TTGAI];
    }
    if (input[_Op] != null) {
        const memberEntries = se_CreateTransitGatewayConnectRequestOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayConnectRequestOptions = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    return entries;
};
const se_CreateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_Op] != null) {
        const memberEntries = se_CreateTransitGatewayMulticastDomainRequestOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayMulticastDomainRequestOptions = (input, context) => {
    const entries = {};
    if (input[_ISg] != null) {
        entries[_ISg] = input[_ISg];
    }
    if (input[_SSS] != null) {
        entries[_SSS] = input[_SSS];
    }
    if (input[_AASA] != null) {
        entries[_AASA] = input[_AASA];
    }
    return entries;
};
const se_CreateTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_PTGI] != null) {
        entries[_PTGI] = input[_PTGI];
    }
    if (input[_PAI] != null) {
        entries[_PAI] = input[_PAI];
    }
    if (input[_PRee] != null) {
        entries[_PRee] = input[_PRee];
    }
    if (input[_Op] != null) {
        const memberEntries = se_CreateTransitGatewayPeeringAttachmentRequestOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayPeeringAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input[_DRy] != null) {
        entries[_DRy] = input[_DRy];
    }
    return entries;
};
const se_CreateTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_Bl] != null) {
        entries[_Bl] = input[_Bl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Op] != null) {
        const memberEntries = se_TransitGatewayRequestOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_Bl] != null) {
        entries[_Bl] = input[_Bl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayRouteTableAnnouncementRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_PAIe] != null) {
        entries[_PAIe] = input[_PAIe];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Op] != null) {
        const memberEntries = se_CreateTransitGatewayVpcAttachmentRequestOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input[_DSns] != null) {
        entries[_DSns] = input[_DSns];
    }
    if (input[_SGRS] != null) {
        entries[_SGRS] = input[_SGRS];
    }
    if (input[_ISp] != null) {
        entries[_ISp] = input[_ISp];
    }
    if (input[_AMS] != null) {
        entries[_AMS] = input[_AMS];
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointCidrOptions = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_PRo] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointPortRangeList(input[_PRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointEniOptions = (input, context) => {
    const entries = {};
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_Po] != null) {
        entries[_Po] = input[_Po];
    }
    if (input[_PRo] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointPortRangeList(input[_PRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointLoadBalancerOptions = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_Po] != null) {
        entries[_Po] = input[_Po];
    }
    if (input[_LBAo] != null) {
        entries[_LBAo] = input[_LBAo];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PRo] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointPortRangeList(input[_PRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointPortRange = (input, context) => {
    const entries = {};
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointPortRangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_CreateVerifiedAccessEndpointPortRange(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointRdsOptions = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_Po] != null) {
        entries[_Po] = input[_Po];
    }
    if (input[_RDIA] != null) {
        entries[_RDIA] = input[_RDIA];
    }
    if (input[_RDCA] != null) {
        entries[_RDCA] = input[_RDCA];
    }
    if (input[_RDPA] != null) {
        entries[_RDPA] = input[_RDPA];
    }
    if (input[_RE] != null) {
        entries[_RE] = input[_RE];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointSubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_ET] != null) {
        entries[_ET] = input[_ET];
    }
    if (input[_ATt] != null) {
        entries[_ATt] = input[_ATt];
    }
    if (input[_DCA] != null) {
        entries[_DCA] = input[_DCA];
    }
    if (input[_ADp] != null) {
        entries[_ADp] = input[_ADp];
    }
    if (input[_EDP] != null) {
        entries[_EDP] = input[_EDP];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_SecurityGroupIdList(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LBO] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointLoadBalancerOptions(input[_LBO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NIO] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointEniOptions(input[_NIO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SS] != null) {
        const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SseSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RO] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointRdsOptions(input[_RO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RdsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CO] != null) {
        const memberEntries = se_CreateVerifiedAccessEndpointCidrOptions(input[_CO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_CreateVerifiedAccessGroupRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SS] != null) {
        const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SseSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVerifiedAccessInstanceRequest = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FIPSE] != null) {
        entries[_FIPSE] = input[_FIPSE];
    }
    if (input[_CECSD] != null) {
        entries[_CECSD] = input[_CECSD];
    }
    return entries;
};
const se_CreateVerifiedAccessNativeApplicationOidcOptions = (input, context) => {
    const entries = {};
    if (input[_PSKE] != null) {
        entries[_PSKE] = input[_PSKE];
    }
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_AE] != null) {
        entries[_AE] = input[_AE];
    }
    if (input[_TEo] != null) {
        entries[_TEo] = input[_TEo];
    }
    if (input[_UIE] != null) {
        entries[_UIE] = input[_UIE];
    }
    if (input[_CIl] != null) {
        entries[_CIl] = input[_CIl];
    }
    if (input[_CSl] != null) {
        entries[_CSl] = input[_CSl];
    }
    if (input[_Sc] != null) {
        entries[_Sc] = input[_Sc];
    }
    return entries;
};
const se_CreateVerifiedAccessTrustProviderDeviceOptions = (input, context) => {
    const entries = {};
    if (input[_TIe] != null) {
        entries[_TIe] = input[_TIe];
    }
    if (input[_PSKU] != null) {
        entries[_PSKU] = input[_PSKU];
    }
    return entries;
};
const se_CreateVerifiedAccessTrustProviderOidcOptions = (input, context) => {
    const entries = {};
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_AE] != null) {
        entries[_AE] = input[_AE];
    }
    if (input[_TEo] != null) {
        entries[_TEo] = input[_TEo];
    }
    if (input[_UIE] != null) {
        entries[_UIE] = input[_UIE];
    }
    if (input[_CIl] != null) {
        entries[_CIl] = input[_CIl];
    }
    if (input[_CSl] != null) {
        entries[_CSl] = input[_CSl];
    }
    if (input[_Sc] != null) {
        entries[_Sc] = input[_Sc];
    }
    return entries;
};
const se_CreateVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input[_TPT] != null) {
        entries[_TPT] = input[_TPT];
    }
    if (input[_UTPT] != null) {
        entries[_UTPT] = input[_UTPT];
    }
    if (input[_DTPT] != null) {
        entries[_DTPT] = input[_DTPT];
    }
    if (input[_OO] != null) {
        const memberEntries = se_CreateVerifiedAccessTrustProviderOidcOptions(input[_OO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OidcOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DOe] != null) {
        const memberEntries = se_CreateVerifiedAccessTrustProviderDeviceOptions(input[_DOe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeviceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PRN] != null) {
        entries[_PRN] = input[_PRN];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SS] != null) {
        const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SseSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NAOO] != null) {
        const memberEntries = se_CreateVerifiedAccessNativeApplicationOidcOptions(input[_NAOO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NativeApplicationOidcOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVolumePermission = (input, context) => {
    const entries = {};
    if (input[_UIs] != null) {
        entries[_UIs] = input[_UIs];
    }
    if (input[_Gr] != null) {
        entries[_Gr] = input[_Gr];
    }
    return entries;
};
const se_CreateVolumePermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_CreateVolumePermission(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_CreateVolumePermissionModifications = (input, context) => {
    const entries = {};
    if (input[_Add] != null) {
        const memberEntries = se_CreateVolumePermissionList(input[_Add]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Rem] != null) {
        const memberEntries = se_CreateVolumePermissionList(input[_Rem]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVolumeRequest = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_Io] != null) {
        entries[_Io] = input[_Io];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_Siz] != null) {
        entries[_Siz] = input[_Siz];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_VT] != null) {
        entries[_VT] = input[_VT];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MAE] != null) {
        entries[_MAE] = input[_MAE];
    }
    if (input[_Th] != null) {
        entries[_Th] = input[_Th];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_VIR] != null) {
        entries[_VIR] = input[_VIR];
    }
    if (input[_O] != null) {
        const memberEntries = se_OperatorRequest(input[_O]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Operator.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreateVpcBlockPublicAccessExclusionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_IGEM] != null) {
        entries[_IGEM] = input[_IGEM];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpcEndpointConnectionNotificationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_VEIp] != null) {
        entries[_VEIp] = input[_VEIp];
    }
    if (input[_CNAon] != null) {
        entries[_CNAon] = input[_CNAon];
    }
    if (input[_CEo] != null) {
        const memberEntries = se_ValueStringList(input[_CEo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_CreateVpcEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VET] != null) {
        entries[_VET] = input[_VET];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_SNe] != null) {
        entries[_SNe] = input[_SNe];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_RTIo] != null) {
        const memberEntries = se_VpcEndpointRouteTableIdList(input[_RTIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIu] != null) {
        const memberEntries = se_VpcEndpointSubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SGI] != null) {
        const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAT] != null) {
        entries[_IAT] = input[_IAT];
    }
    if (input[_DOn] != null) {
        const memberEntries = se_DnsOptionsSpecification(input[_DOn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_PDE] != null) {
        entries[_PDE] = input[_PDE];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SC] != null) {
        const memberEntries = se_SubnetConfigurationsList(input[_SC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SNA] != null) {
        entries[_SNA] = input[_SNA];
    }
    if (input[_RCA] != null) {
        entries[_RCA] = input[_RCA];
    }
    if (input[_SRe] != null) {
        entries[_SRe] = input[_SRe];
    }
    return entries;
};
const se_CreateVpcEndpointServiceConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ARc] != null) {
        entries[_ARc] = input[_ARc];
    }
    if (input[_PDN] != null) {
        entries[_PDN] = input[_PDN];
    }
    if (input[_NLBAe] != null) {
        const memberEntries = se_ValueStringList(input[_NLBAe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_GLBA] != null) {
        const memberEntries = se_ValueStringList(input[_GLBA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIAT] != null) {
        const memberEntries = se_ValueStringList(input[_SIAT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SRu] != null) {
        const memberEntries = se_ValueStringList(input[_SRu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SupportedRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_PRee] != null) {
        entries[_PRee] = input[_PRee];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_PVI] != null) {
        entries[_PVI] = input[_PVI];
    }
    if (input[_POI] != null) {
        entries[_POI] = input[_POI];
    }
    return entries;
};
const se_CreateVpcRequest = (input, context) => {
    const entries = {};
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    if (input[_IPpv] != null) {
        entries[_IPpv] = input[_IPpv];
    }
    if (input[_ICB] != null) {
        entries[_ICB] = input[_ICB];
    }
    if (input[_IIPIp] != null) {
        entries[_IIPIp] = input[_IIPIp];
    }
    if (input[_INLp] != null) {
        entries[_INLp] = input[_INLp];
    }
    if (input[_IIPI] != null) {
        entries[_IIPI] = input[_IIPI];
    }
    if (input[_INL] != null) {
        entries[_INL] = input[_INL];
    }
    if (input[_ICBNBG] != null) {
        entries[_ICBNBG] = input[_ICBNBG];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ITns] != null) {
        entries[_ITns] = input[_ITns];
    }
    if (input[_APICB] != null) {
        entries[_APICB] = input[_APICB];
    }
    return entries;
};
const se_CreateVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_CGIu] != null) {
        entries[_CGIu] = input[_CGIu];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_VGI] != null) {
        entries[_VGI] = input[_VGI];
    }
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PSKS] != null) {
        entries[_PSKS] = input[_PSKS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Op] != null) {
        const memberEntries = se_VpnConnectionOptionsSpecification(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_CreateVpnConnectionRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    return entries;
};
const se_CreateVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ASA] != null) {
        entries[_ASA] = input[_ASA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_CreationDateConditionRequest = (input, context) => {
    const entries = {};
    if (input[_MDSC] != null) {
        entries[_MDSC] = input[_MDSC];
    }
    return entries;
};
const se_CreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_CCp] != null) {
        entries[_CCp] = input[_CCp];
    }
    return entries;
};
const se_CustomerGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`CustomerGatewayId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DataQueries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_DataQuery(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_DataQuery = (input, context) => {
    const entries = {};
    if (input[_Id] != null) {
        entries[_Id] = input[_Id];
    }
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_Met] != null) {
        entries[_Met] = input[_Met];
    }
    if (input[_Sta] != null) {
        entries[_Sta] = input[_Sta];
    }
    if (input[_Per] != null) {
        entries[_Per] = input[_Per];
    }
    return entries;
};
const se_DedicatedHostIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteCarrierGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_CGI] != null) {
        entries[_CGI] = input[_CGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteClientVpnRouteRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_TVSI] != null) {
        entries[_TVSI] = input[_TVSI];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteCoipCidrRequest = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_CPIo] != null) {
        entries[_CPIo] = input[_CPIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteCoipPoolRequest = (input, context) => {
    const entries = {};
    if (input[_CPIo] != null) {
        entries[_CPIo] = input[_CPIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteCustomerGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_CGIu] != null) {
        entries[_CGIu] = input[_CGIu];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DOI] != null) {
        entries[_DOI] = input[_DOI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteEgressOnlyInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_EOIGI] != null) {
        entries[_EOIGI] = input[_EOIGI];
    }
    return entries;
};
const se_DeleteFleetsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FI] != null) {
        const memberEntries = se_FleetIdSet(input[_FI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TI] != null) {
        entries[_TI] = input[_TI];
    }
    return entries;
};
const se_DeleteFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FLI] != null) {
        const memberEntries = se_FlowLogIdList(input[_FLI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteFpgaImageRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FII] != null) {
        entries[_FII] = input[_FII];
    }
    return entries;
};
const se_DeleteImageUsageReportRequest = (input, context) => {
    const entries = {};
    if (input[_RIep] != null) {
        entries[_RIep] = input[_RIep];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteInstanceConnectEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ICEI] != null) {
        entries[_ICEI] = input[_ICEI];
    }
    return entries;
};
const se_DeleteInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FD] != null) {
        entries[_FD] = input[_FD];
    }
    if (input[_IEWI] != null) {
        entries[_IEWI] = input[_IEWI];
    }
    return entries;
};
const se_DeleteInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IGI] != null) {
        entries[_IGI] = input[_IGI];
    }
    return entries;
};
const se_DeleteIpamExternalResourceVerificationTokenRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IERVTI] != null) {
        entries[_IERVTI] = input[_IERVTI];
    }
    return entries;
};
const se_DeleteIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_Ca] != null) {
        entries[_Ca] = input[_Ca];
    }
    return entries;
};
const se_DeleteIpamRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_Ca] != null) {
        entries[_Ca] = input[_Ca];
    }
    return entries;
};
const se_DeleteIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDI] != null) {
        entries[_IRDI] = input[_IRDI];
    }
    return entries;
};
const se_DeleteIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ISI] != null) {
        entries[_ISI] = input[_ISI];
    }
    return entries;
};
const se_DeleteKeyPairRequest = (input, context) => {
    const entries = {};
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_KPI] != null) {
        entries[_KPI] = input[_KPI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    return entries;
};
const se_DeleteLaunchTemplateVersionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_Ve] != null) {
        const memberEntries = se_VersionStringList(input[_Ve]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_DPLI] != null) {
        entries[_DPLI] = input[_DPLI];
    }
    return entries;
};
const se_DeleteLocalGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTVIGAI] != null) {
        entries[_LGRTVIGAI] = input[_LGRTVIGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteLocalGatewayRouteTableVpcAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTVAI] != null) {
        entries[_LGRTVAI] = input[_LGRTVAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteLocalGatewayVirtualInterfaceGroupRequest = (input, context) => {
    const entries = {};
    if (input[_LGVIGI] != null) {
        entries[_LGVIGI] = input[_LGVIGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteLocalGatewayVirtualInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_LGVII] != null) {
        entries[_LGVII] = input[_LGVII];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    return entries;
};
const se_DeleteNatGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    return entries;
};
const se_DeleteNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NAI] != null) {
        entries[_NAI] = input[_NAI];
    }
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_Eg] != null) {
        entries[_Eg] = input[_Eg];
    }
    return entries;
};
const se_DeleteNetworkAclRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NAI] != null) {
        entries[_NAI] = input[_NAI];
    }
    return entries;
};
const se_DeleteNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
    const entries = {};
    if (input[_NIASAI] != null) {
        entries[_NIASAI] = input[_NIASAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteNetworkInsightsAccessScopeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NIASI] != null) {
        entries[_NIASI] = input[_NIASI];
    }
    return entries;
};
const se_DeleteNetworkInsightsAnalysisRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NIAI] != null) {
        entries[_NIAI] = input[_NIAI];
    }
    return entries;
};
const se_DeleteNetworkInsightsPathRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NIPI] != null) {
        entries[_NIPI] = input[_NIPI];
    }
    return entries;
};
const se_DeleteNetworkInterfacePermissionRequest = (input, context) => {
    const entries = {};
    if (input[_NIPIe] != null) {
        entries[_NIPIe] = input[_NIPIe];
    }
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    return entries;
};
const se_DeletePlacementGroupRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    return entries;
};
const se_DeletePublicIpv4PoolRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PIo] != null) {
        entries[_PIo] = input[_PIo];
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    return entries;
};
const se_DeleteQueuedReservedInstancesIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DeleteQueuedReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RIIes] != null) {
        const memberEntries = se_DeleteQueuedReservedInstancesIdList(input[_RIIes]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DPLI] != null) {
        entries[_DPLI] = input[_DPLI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_DICB] != null) {
        entries[_DICB] = input[_DICB];
    }
    return entries;
};
const se_DeleteRouteServerEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_RSEI] != null) {
        entries[_RSEI] = input[_RSEI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteRouteServerPeerRequest = (input, context) => {
    const entries = {};
    if (input[_RSPI] != null) {
        entries[_RSPI] = input[_RSPI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteRouteServerRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    return entries;
};
const se_DeleteSecurityGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteSnapshotRequest = (input, context) => {
    const entries = {};
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteSubnetCidrReservationRequest = (input, context) => {
    const entries = {};
    if (input[_SCRIu] != null) {
        entries[_SCRIu] = input[_SCRIu];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteSubnetRequest = (input, context) => {
    const entries = {};
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTagsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Re] != null) {
        const memberEntries = se_ResourceIdList(input[_Re]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteTrafficMirrorFilterRequest = (input, context) => {
    const entries = {};
    if (input[_TMFI] != null) {
        entries[_TMFI] = input[_TMFI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input[_TMFRI] != null) {
        entries[_TMFRI] = input[_TMFRI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input[_TMSI] != null) {
        entries[_TMSI] = input[_TMSI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTrafficMirrorTargetRequest = (input, context) => {
    const entries = {};
    if (input[_TMTI] != null) {
        entries[_TMTI] = input[_TMTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayConnectPeerRequest = (input, context) => {
    const entries = {};
    if (input[_TGCPI] != null) {
        entries[_TGCPI] = input[_TGCPI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayConnectRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGPTI] != null) {
        entries[_TGPTI] = input[_TGPTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayRouteTableAnnouncementRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTAI] != null) {
        entries[_TGRTAI] = input[_TGRTAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteVerifiedAccessEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_VAEI] != null) {
        entries[_VAEI] = input[_VAEI];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteVerifiedAccessGroupRequest = (input, context) => {
    const entries = {};
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteVerifiedAccessInstanceRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_DeleteVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input[_VATPI] != null) {
        entries[_VATPI] = input[_VATPI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_DeleteVolumeRequest = (input, context) => {
    const entries = {};
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteVpcBlockPublicAccessExclusionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_EIxc] != null) {
        entries[_EIxc] = input[_EIxc];
    }
    return entries;
};
const se_DeleteVpcEndpointConnectionNotificationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CNIo] != null) {
        const memberEntries = se_ConnectionNotificationIdsList(input[_CNIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionNotificationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteVpcEndpointServiceConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIer] != null) {
        const memberEntries = se_VpcEndpointServiceIdList(input[_SIer]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteVpcEndpointsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VEI] != null) {
        const memberEntries = se_VpcEndpointIdList(input[_VEI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeleteVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    return entries;
};
const se_DeleteVpcRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeleteVpnConnectionRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    return entries;
};
const se_DeleteVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_VGI] != null) {
        entries[_VGI] = input[_VGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeprecationTimeConditionRequest = (input, context) => {
    const entries = {};
    if (input[_MDSD] != null) {
        entries[_MDSD] = input[_MDSD];
    }
    return entries;
};
const se_DeprovisionByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeprovisionIpamByoasnRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_As] != null) {
        entries[_As] = input[_As];
    }
    return entries;
};
const se_DeprovisionIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    return entries;
};
const se_DeprovisionPublicIpv4PoolCidrRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PIo] != null) {
        entries[_PIo] = input[_PIo];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    return entries;
};
const se_DeregisterImageRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DAS] != null) {
        entries[_DAS] = input[_DAS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeregisterInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ITA] != null) {
        const memberEntries = se_DeregisterInstanceTagAttributeRequest(input[_ITA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagAttribute.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeregisterInstanceTagAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_IATOI] != null) {
        entries[_IATOI] = input[_IATOI];
    }
    if (input[_ITK] != null) {
        const memberEntries = se_InstanceTagKeySet(input[_ITK]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DeregisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_GIA] != null) {
        entries[_GIA] = input[_GIA];
    }
    if (input[_NIIe] != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DeregisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_GIA] != null) {
        entries[_GIA] = input[_GIA];
    }
    if (input[_NIIe] != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeAccountAttributesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AN] != null) {
        const memberEntries = se_AccountAttributeNameStringList(input[_AN]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AttributeName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeAddressesAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_AIll] != null) {
        const memberEntries = se_AllocationIds(input[_AIll]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeAddressesRequest = (input, context) => {
    const entries = {};
    if (input[_PIu] != null) {
        const memberEntries = se_PublicIpStringList(input[_PIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AIll] != null) {
        const memberEntries = se_AllocationIdList(input[_AIll]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeAddressTransfersRequest = (input, context) => {
    const entries = {};
    if (input[_AIll] != null) {
        const memberEntries = se_AllocationIdList(input[_AIll]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllocationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeAggregateIdFormatRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeAvailabilityZonesRequest = (input, context) => {
    const entries = {};
    if (input[_ZN] != null) {
        const memberEntries = se_ZoneNameStringList(input[_ZN]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ZoneName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ZI] != null) {
        const memberEntries = se_ZoneIdStringList(input[_ZI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ZoneId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AAZ] != null) {
        entries[_AAZ] = input[_AAZ];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeAwsNetworkPerformanceMetricSubscriptionsRequest = (input, context) => {
    const entries = {};
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeBundleTasksRequest = (input, context) => {
    const entries = {};
    if (input[_BIun] != null) {
        const memberEntries = se_BundleIdStringList(input[_BIun]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BundleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeByoipCidrsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeCapacityBlockExtensionHistoryRequest = (input, context) => {
    const entries = {};
    if (input[_CRIa] != null) {
        const memberEntries = se_CapacityReservationIdSet(input[_CRIa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCapacityBlockExtensionOfferingsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CBEDH] != null) {
        entries[_CBEDH] = input[_CBEDH];
    }
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeCapacityBlockOfferingsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_SDR] != null) {
        entries[_SDR] = smithyClient.serializeDateTime(input[_SDR]);
    }
    if (input[_EDR] != null) {
        entries[_EDR] = smithyClient.serializeDateTime(input[_EDR]);
    }
    if (input[_CDH] != null) {
        entries[_CDH] = input[_CDH];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_UTl] != null) {
        entries[_UTl] = input[_UTl];
    }
    if (input[_UC] != null) {
        entries[_UC] = input[_UC];
    }
    return entries;
};
const se_DescribeCapacityBlocksRequest = (input, context) => {
    const entries = {};
    if (input[_CBI] != null) {
        const memberEntries = se_CapacityBlockIds(input[_CBI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityBlockId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCapacityBlockStatusRequest = (input, context) => {
    const entries = {};
    if (input[_CBI] != null) {
        const memberEntries = se_CapacityBlockIds(input[_CBI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityBlockId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCapacityReservationBillingRequestsRequest = (input, context) => {
    const entries = {};
    if (input[_CRIa] != null) {
        const memberEntries = se_CapacityReservationIdSet(input[_CRIa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Ro] != null) {
        entries[_Ro] = input[_Ro];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCapacityReservationFleetsRequest = (input, context) => {
    const entries = {};
    if (input[_CRFI] != null) {
        const memberEntries = se_CapacityReservationFleetIdSet(input[_CRFI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationFleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCapacityReservationsRequest = (input, context) => {
    const entries = {};
    if (input[_CRIa] != null) {
        const memberEntries = se_CapacityReservationIdSet(input[_CRIa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCarrierGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_CGIa] != null) {
        const memberEntries = se_CarrierGatewayIdSet(input[_CGIa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CarrierGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeClassicLinkInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeClientVpnAuthorizationRulesRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeClientVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeClientVpnEndpointsRequest = (input, context) => {
    const entries = {};
    if (input[_CVEIl] != null) {
        const memberEntries = se_ClientVpnEndpointIdList(input[_CVEIl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientVpnEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeClientVpnRoutesRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeClientVpnTargetNetworksRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_AIs] != null) {
        const memberEntries = se_ValueStringList(input[_AIs]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeCoipPoolsRequest = (input, context) => {
    const entries = {};
    if (input[_PIoo] != null) {
        const memberEntries = se_CoipPoolIdSet(input[_PIoo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeConversionTasksRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTIo] != null) {
        const memberEntries = se_ConversionIdStringList(input[_CTIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConversionTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeCustomerGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_CGIus] != null) {
        const memberEntries = se_CustomerGatewayIdStringList(input[_CGIus]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomerGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeDeclarativePoliciesReportsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_RIepo] != null) {
        const memberEntries = se_ValueStringList(input[_RIepo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReportId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeDhcpOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DOIh] != null) {
        const memberEntries = se_DhcpOptionsIdStringList(input[_DOIh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DhcpOptionsId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeEgressOnlyInternetGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_EOIGIg] != null) {
        const memberEntries = se_EgressOnlyInternetGatewayIdList(input[_EOIGIg]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EgressOnlyInternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeElasticGpusRequest = (input, context) => {
    const entries = {};
    if (input[_EGI] != null) {
        const memberEntries = se_ElasticGpuIdSet(input[_EGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeExportImageTasksRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EITI] != null) {
        const memberEntries = se_ExportImageTaskIdList(input[_EITI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportImageTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeExportTasksRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ETIx] != null) {
        const memberEntries = se_ExportTaskIdStringList(input[_ETIx]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeFastLaunchImagesRequest = (input, context) => {
    const entries = {};
    if (input[_IImag] != null) {
        const memberEntries = se_FastLaunchImageIdList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeFleetHistoryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ETv] != null) {
        entries[_ETv] = input[_ETv];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_FIl] != null) {
        entries[_FIl] = input[_FIl];
    }
    if (input[_STt] != null) {
        entries[_STt] = smithyClient.serializeDateTime(input[_STt]);
    }
    return entries;
};
const se_DescribeFleetInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_FIl] != null) {
        entries[_FIl] = input[_FIl];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeFleetsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_FI] != null) {
        const memberEntries = se_FleetIdSet(input[_FI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FleetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeFlowLogsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fil] != null) {
        const memberEntries = se_FilterList(input[_Fil]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_FLI] != null) {
        const memberEntries = se_FlowLogIdList(input[_FLI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FlowLogId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FII] != null) {
        entries[_FII] = input[_FII];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    return entries;
};
const se_DescribeFpgaImagesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FIIp] != null) {
        const memberEntries = se_FpgaImageIdList(input[_FIIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FpgaImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Ow] != null) {
        const memberEntries = se_OwnerStringList(input[_Ow]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeHostReservationOfferingsRequest = (input, context) => {
    const entries = {};
    if (input[_Fil] != null) {
        const memberEntries = se_FilterList(input[_Fil]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MD] != null) {
        entries[_MD] = input[_MD];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_MDi] != null) {
        entries[_MDi] = input[_MDi];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    return entries;
};
const se_DescribeHostReservationsRequest = (input, context) => {
    const entries = {};
    if (input[_Fil] != null) {
        const memberEntries = se_FilterList(input[_Fil]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_HRIS] != null) {
        const memberEntries = se_HostReservationIdSet(input[_HRIS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostReservationIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeHostsRequest = (input, context) => {
    const entries = {};
    if (input[_HI] != null) {
        const memberEntries = se_RequestHostIdList(input[_HI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fil] != null) {
        const memberEntries = se_FilterList(input[_Fil]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIamInstanceProfileAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_AIs] != null) {
        const memberEntries = se_AssociationIdList(input[_AIs]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeIdentityIdFormatRequest = (input, context) => {
    const entries = {};
    if (input[_Res] != null) {
        entries[_Res] = input[_Res];
    }
    if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
    }
    return entries;
};
const se_DescribeIdFormatRequest = (input, context) => {
    const entries = {};
    if (input[_Res] != null) {
        entries[_Res] = input[_Res];
    }
    return entries;
};
const se_DescribeImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeImageReferencesImageIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DescribeImageReferencesRequest = (input, context) => {
    const entries = {};
    if (input[_IImag] != null) {
        const memberEntries = se_DescribeImageReferencesImageIdStringList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IART] != null) {
        entries[_IART] = input[_IART];
    }
    if (input[_RTe] != null) {
        const memberEntries = se_ResourceTypeRequestList(input[_RTe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeImagesRequest = (input, context) => {
    const entries = {};
    if (input[_EU] != null) {
        const memberEntries = se_ExecutableByStringList(input[_EU]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExecutableBy.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IImag] != null) {
        const memberEntries = se_ImageIdStringList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Ow] != null) {
        const memberEntries = se_OwnerStringList(input[_Ow]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ID] != null) {
        entries[_ID] = input[_ID];
    }
    if (input[_IDn] != null) {
        entries[_IDn] = input[_IDn];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeImageUsageReportEntriesRequest = (input, context) => {
    const entries = {};
    if (input[_IImag] != null) {
        const memberEntries = se_DescribeImageUsageReportsImageIdStringList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RIepo] != null) {
        const memberEntries = se_ImageUsageReportIdStringList(input[_RIepo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReportId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeImageUsageReportsImageIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DescribeImageUsageReportsRequest = (input, context) => {
    const entries = {};
    if (input[_IImag] != null) {
        const memberEntries = se_DescribeImageUsageReportsImageIdStringList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RIepo] != null) {
        const memberEntries = se_ImageUsageReportIdStringList(input[_RIepo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReportId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeImportImageTasksRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ITIm] != null) {
        const memberEntries = se_ImportTaskIdList(input[_ITIm]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeImportSnapshotTasksRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filters.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ITIm] != null) {
        const memberEntries = se_ImportSnapshotTaskIdList(input[_ITIm]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImportTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    return entries;
};
const se_DescribeInstanceConnectEndpointsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ICEIn] != null) {
        const memberEntries = se_ValueStringList(input[_ICEIn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceConnectEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeInstanceCreditSpecificationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeInstanceEventWindowsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IEWIn] != null) {
        const memberEntries = se_InstanceEventWindowIdSet(input[_IEWIn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceEventWindowId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeInstanceImageMetadataRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeInstanceStatusRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAI] != null) {
        entries[_IAI] = input[_IAI];
    }
    return entries;
};
const se_DescribeInstanceTopologyGroupNameSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DescribeInstanceTopologyInstanceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DescribeInstanceTopologyRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_IIns] != null) {
        const memberEntries = se_DescribeInstanceTopologyInstanceIdSet(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_GNr] != null) {
        const memberEntries = se_DescribeInstanceTopologyGroupNameSet(input[_GNr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeInstanceTypeOfferingsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LT] != null) {
        entries[_LT] = input[_LT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeInstanceTypesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ITnst] != null) {
        const memberEntries = se_RequestInstanceTypeList(input[_ITnst]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeInternetGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IGIn] != null) {
        const memberEntries = se_InternetGatewayIdList(input[_IGIn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InternetGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamByoasnRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeIpamExternalResourceVerificationTokensRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_IERVTIp] != null) {
        const memberEntries = se_ValueStringList(input[_IERVTIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamExternalResourceVerificationTokenId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamPoolsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_IPIp] != null) {
        const memberEntries = se_ValueStringList(input[_IPIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamPoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamResourceDiscoveriesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDIp] != null) {
        const memberEntries = se_ValueStringList(input[_IRDIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamResourceDiscoveryId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamResourceDiscoveryAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDAI] != null) {
        const memberEntries = se_ValueStringList(input[_IRDAI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamResourceDiscoveryAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamScopesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_ISIp] != null) {
        const memberEntries = se_ValueStringList(input[_ISIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamScopeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpamsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_IIpa] != null) {
        const memberEntries = se_ValueStringList(input[_IIpa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpamId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeIpv6PoolsRequest = (input, context) => {
    const entries = {};
    if (input[_PIoo] != null) {
        const memberEntries = se_Ipv6PoolIdList(input[_PIoo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeKeyPairsRequest = (input, context) => {
    const entries = {};
    if (input[_KNe] != null) {
        const memberEntries = se_KeyNameStringList(input[_KNe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_KPIe] != null) {
        const memberEntries = se_KeyPairIdStringList(input[_KPIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KeyPairId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPK] != null) {
        entries[_IPK] = input[_IPK];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeLaunchTemplatesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LTIa] != null) {
        const memberEntries = se_LaunchTemplateIdStringList(input[_LTIa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LTNa] != null) {
        const memberEntries = se_LaunchTemplateNameStringList(input[_LTNa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeLaunchTemplateVersionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_Ve] != null) {
        const memberEntries = se_VersionStringList(input[_Ve]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MVi] != null) {
        entries[_MVi] = input[_MVi];
    }
    if (input[_MVa] != null) {
        entries[_MVa] = input[_MVa];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RAe] != null) {
        entries[_RAe] = input[_RAe];
    }
    return entries;
};
const se_DescribeLocalGatewayRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTIo] != null) {
        const memberEntries = se_LocalGatewayRouteTableIdSet(input[_LGRTIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTVIGAIo] != null) {
        const memberEntries = se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet(input[_LGRTVIGAIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableVirtualInterfaceGroupAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeLocalGatewayRouteTableVpcAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTVAIo] != null) {
        const memberEntries = se_LocalGatewayRouteTableVpcAssociationIdSet(input[_LGRTVAIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayRouteTableVpcAssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeLocalGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_LGIo] != null) {
        const memberEntries = se_LocalGatewayIdSet(input[_LGIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeLocalGatewayVirtualInterfaceGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_LGVIGIo] != null) {
        const memberEntries = se_LocalGatewayVirtualInterfaceGroupIdSet(input[_LGVIGIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayVirtualInterfaceGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeLocalGatewayVirtualInterfacesRequest = (input, context) => {
    const entries = {};
    if (input[_LGVIIo] != null) {
        const memberEntries = se_LocalGatewayVirtualInterfaceIdSet(input[_LGVIIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalGatewayVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeLockedSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SIna] != null) {
        const memberEntries = se_SnapshotIdStringList(input[_SIna]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeMacHostsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_HI] != null) {
        const memberEntries = se_RequestHostIdList(input[_HI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeMacModificationTasksRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MMTI] != null) {
        const memberEntries = se_MacModificationTaskIdList(input[_MMTI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MacModificationTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeManagedPrefixListsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_PLIr] != null) {
        const memberEntries = se_ValueStringList(input[_PLIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeMovingAddressesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PIu] != null) {
        const memberEntries = se_ValueStringList(input[_PIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PublicIp.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeNatGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fil] != null) {
        const memberEntries = se_FilterList(input[_Fil]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NGIa] != null) {
        const memberEntries = se_NatGatewayIdStringList(input[_NGIa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NatGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeNetworkAclsRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NAIe] != null) {
        const memberEntries = se_NetworkAclIdStringList(input[_NAIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkAclId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeNetworkInsightsAccessScopeAnalysesRequest = (input, context) => {
    const entries = {};
    if (input[_NIASAIe] != null) {
        const memberEntries = se_NetworkInsightsAccessScopeAnalysisIdList(input[_NIASAIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAccessScopeAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NIASI] != null) {
        entries[_NIASI] = input[_NIASI];
    }
    if (input[_ASTB] != null) {
        entries[_ASTB] = smithyClient.serializeDateTime(input[_ASTB]);
    }
    if (input[_ASTE] != null) {
        entries[_ASTE] = smithyClient.serializeDateTime(input[_ASTE]);
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeNetworkInsightsAccessScopesRequest = (input, context) => {
    const entries = {};
    if (input[_NIASIe] != null) {
        const memberEntries = se_NetworkInsightsAccessScopeIdList(input[_NIASIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAccessScopeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeNetworkInsightsAnalysesRequest = (input, context) => {
    const entries = {};
    if (input[_NIAIe] != null) {
        const memberEntries = se_NetworkInsightsAnalysisIdList(input[_NIAIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsAnalysisId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NIPI] != null) {
        entries[_NIPI] = input[_NIPI];
    }
    if (input[_AST] != null) {
        entries[_AST] = smithyClient.serializeDateTime(input[_AST]);
    }
    if (input[_AET] != null) {
        entries[_AET] = smithyClient.serializeDateTime(input[_AET]);
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeNetworkInsightsPathsRequest = (input, context) => {
    const entries = {};
    if (input[_NIPIet] != null) {
        const memberEntries = se_NetworkInsightsPathIdList(input[_NIPIet]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInsightsPathId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    return entries;
};
const se_DescribeNetworkInterfacePermissionsRequest = (input, context) => {
    const entries = {};
    if (input[_NIPIetw] != null) {
        const memberEntries = se_NetworkInterfacePermissionIdList(input[_NIPIetw]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfacePermissionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeNetworkInterfacesRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NIIe] != null) {
        const memberEntries = se_NetworkInterfaceIdList(input[_NIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeOutpostLagsRequest = (input, context) => {
    const entries = {};
    if (input[_OLIu] != null) {
        const memberEntries = se_OutpostLagIdSet(input[_OLIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OutpostLagId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribePlacementGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_GIro] != null) {
        const memberEntries = se_PlacementGroupIdStringList(input[_GIro]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GNr] != null) {
        const memberEntries = se_PlacementGroupStringList(input[_GNr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribePrefixListsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_PLIr] != null) {
        const memberEntries = se_PrefixListResourceIdStringList(input[_PLIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribePrincipalIdFormatRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Re] != null) {
        const memberEntries = se_ResourceList(input[_Re]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribePublicIpv4PoolsRequest = (input, context) => {
    const entries = {};
    if (input[_PIoo] != null) {
        const memberEntries = se_PublicIpv4PoolIdStringList(input[_PIoo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeRegionsRequest = (input, context) => {
    const entries = {};
    if (input[_RNe] != null) {
        const memberEntries = se_RegionNameStringList(input[_RNe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ARll] != null) {
        entries[_ARll] = input[_ARll];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeReplaceRootVolumeTasksRequest = (input, context) => {
    const entries = {};
    if (input[_RRVTI] != null) {
        const memberEntries = se_ReplaceRootVolumeTaskIds(input[_RRVTI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReplaceRootVolumeTaskId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeReservedInstancesListingsRequest = (input, context) => {
    const entries = {};
    if (input[_RIIe] != null) {
        entries[_RIIe] = input[_RIIe];
    }
    if (input[_RILI] != null) {
        entries[_RILI] = input[_RILI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeReservedInstancesModificationsRequest = (input, context) => {
    const entries = {};
    if (input[_RIMI] != null) {
        const memberEntries = se_ReservedInstancesModificationIdStringList(input[_RIMI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesModificationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeReservedInstancesOfferingsRequest = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_IM] != null) {
        entries[_IM] = input[_IM];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_MD] != null) {
        entries[_MD] = input[_MD];
    }
    if (input[_MIC] != null) {
        entries[_MIC] = input[_MIC];
    }
    if (input[_MDi] != null) {
        entries[_MDi] = input[_MDi];
    }
    if (input[_OC] != null) {
        entries[_OC] = input[_OC];
    }
    if (input[_PDr] != null) {
        entries[_PDr] = input[_PDr];
    }
    if (input[_RIOI] != null) {
        const memberEntries = se_ReservedInstancesOfferingIdStringList(input[_RIOI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesOfferingId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ITns] != null) {
        entries[_ITns] = input[_ITns];
    }
    if (input[_OT] != null) {
        entries[_OT] = input[_OT];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_OC] != null) {
        entries[_OC] = input[_OC];
    }
    if (input[_RIIes] != null) {
        const memberEntries = se_ReservedInstancesIdStringList(input[_RIIes]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_OT] != null) {
        entries[_OT] = input[_OT];
    }
    return entries;
};
const se_DescribeRouteServerEndpointsRequest = (input, context) => {
    const entries = {};
    if (input[_RSEIo] != null) {
        const memberEntries = se_RouteServerEndpointIdsList(input[_RSEIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteServerEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeRouteServerPeersRequest = (input, context) => {
    const entries = {};
    if (input[_RSPIo] != null) {
        const memberEntries = se_RouteServerPeerIdsList(input[_RSPIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteServerPeerId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeRouteServersRequest = (input, context) => {
    const entries = {};
    if (input[_RSIou] != null) {
        const memberEntries = se_RouteServerIdsList(input[_RSIou]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteServerId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RTIo] != null) {
        const memberEntries = se_RouteTableIdStringList(input[_RTIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeScheduledInstanceAvailabilityRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_FSSTR] != null) {
        const memberEntries = se_SlotDateTimeRangeRequest(input[_FSSTR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FirstSlotStartTimeRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_MSDIH] != null) {
        entries[_MSDIH] = input[_MSDIH];
    }
    if (input[_MSDIHi] != null) {
        entries[_MSDIHi] = input[_MSDIHi];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Rec] != null) {
        const memberEntries = se_ScheduledInstanceRecurrenceRequest(input[_Rec]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Recurrence.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SIIc] != null) {
        const memberEntries = se_ScheduledInstanceIdRequestSet(input[_SIIc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ScheduledInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SSTR] != null) {
        const memberEntries = se_SlotStartTimeRangeRequest(input[_SSTR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SlotStartTimeRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSecurityGroupReferencesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GIr] != null) {
        const memberEntries = se_GroupIds(input[_GIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSecurityGroupRulesRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SGRI] != null) {
        const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeSecurityGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_GIro] != null) {
        const memberEntries = se_GroupIdStringList(input[_GIro]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_GNr] != null) {
        const memberEntries = se_GroupNameStringList(input[_GNr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSecurityGroupVpcAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeServiceLinkVirtualInterfacesRequest = (input, context) => {
    const entries = {};
    if (input[_SLVII] != null) {
        const memberEntries = se_ServiceLinkVirtualInterfaceIdSet(input[_SLVII]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceLinkVirtualInterfaceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeSnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeSnapshotsRequest = (input, context) => {
    const entries = {};
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_OIw] != null) {
        const memberEntries = se_OwnerStringList(input[_OIw]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Owner.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RBUI] != null) {
        const memberEntries = se_RestorableByStringList(input[_RBUI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RestorableBy.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIna] != null) {
        const memberEntries = se_SnapshotIdStringList(input[_SIna]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSnapshotTierStatusRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeSpotDatafeedSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeSpotFleetInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SFRIp] != null) {
        entries[_SFRIp] = input[_SFRIp];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeSpotFleetRequestHistoryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SFRIp] != null) {
        entries[_SFRIp] = input[_SFRIp];
    }
    if (input[_ETv] != null) {
        entries[_ETv] = input[_ETv];
    }
    if (input[_STt] != null) {
        entries[_STt] = smithyClient.serializeDateTime(input[_STt]);
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeSpotFleetRequestsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SFRI] != null) {
        const memberEntries = se_SpotFleetRequestIdList(input[_SFRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeSpotInstanceRequestsRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIRI] != null) {
        const memberEntries = se_SpotInstanceRequestIdList(input[_SIRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotInstanceRequestId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeSpotPriceHistoryRequest = (input, context) => {
    const entries = {};
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_STt] != null) {
        entries[_STt] = smithyClient.serializeDateTime(input[_STt]);
    }
    if (input[_ETn] != null) {
        entries[_ETn] = smithyClient.serializeDateTime(input[_ETn]);
    }
    if (input[_ITnst] != null) {
        const memberEntries = se_InstanceTypeList(input[_ITnst]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PDro] != null) {
        const memberEntries = se_ProductDescriptionList(input[_PDro]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeStaleSecurityGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DescribeStoreImageTasksRequest = (input, context) => {
    const entries = {};
    if (input[_IImag] != null) {
        const memberEntries = se_ImageIdList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeSubnetsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIu] != null) {
        const memberEntries = se_SubnetIdStringList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTagsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeTrafficMirrorFilterRulesRequest = (input, context) => {
    const entries = {};
    if (input[_TMFRIr] != null) {
        const memberEntries = se_TrafficMirrorFilterRuleIdList(input[_TMFRIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorFilterRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TMFI] != null) {
        entries[_TMFI] = input[_TMFI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeTrafficMirrorFiltersRequest = (input, context) => {
    const entries = {};
    if (input[_TMFIr] != null) {
        const memberEntries = se_TrafficMirrorFilterIdList(input[_TMFIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorFilterId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeTrafficMirrorSessionsRequest = (input, context) => {
    const entries = {};
    if (input[_TMSIr] != null) {
        const memberEntries = se_TrafficMirrorSessionIdList(input[_TMSIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorSessionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeTrafficMirrorTargetsRequest = (input, context) => {
    const entries = {};
    if (input[_TMTIr] != null) {
        const memberEntries = se_TrafficMirrorTargetIdList(input[_TMTIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TrafficMirrorTargetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeTransitGatewayAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input[_TGAIr] != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayConnectPeersRequest = (input, context) => {
    const entries = {};
    if (input[_TGCPIr] != null) {
        const memberEntries = se_TransitGatewayConnectPeerIdStringList(input[_TGCPIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayConnectPeerIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayConnectsRequest = (input, context) => {
    const entries = {};
    if (input[_TGAIr] != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayMulticastDomainsRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDIr] != null) {
        const memberEntries = se_TransitGatewayMulticastDomainIdStringList(input[_TGMDIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayMulticastDomainIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayPeeringAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input[_TGAIr] != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayPolicyTablesRequest = (input, context) => {
    const entries = {};
    if (input[_TGPTIr] != null) {
        const memberEntries = se_TransitGatewayPolicyTableIdStringList(input[_TGPTIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayPolicyTableIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayRouteTableAnnouncementsRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTAIr] != null) {
        const memberEntries = se_TransitGatewayRouteTableAnnouncementIdStringList(input[_TGRTAIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayRouteTableAnnouncementIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayRouteTablesRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTIr] != null) {
        const memberEntries = se_TransitGatewayRouteTableIdStringList(input[_TGRTIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayRouteTableIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_TGIr] != null) {
        const memberEntries = se_TransitGatewayIdStringList(input[_TGIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTransitGatewayVpcAttachmentsRequest = (input, context) => {
    const entries = {};
    if (input[_TGAIr] != null) {
        const memberEntries = se_TransitGatewayAttachmentIdStringList(input[_TGAIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayAttachmentIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeTrunkInterfaceAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_AIs] != null) {
        const memberEntries = se_TrunkInterfaceAssociationIdList(input[_AIs]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeVerifiedAccessEndpointsRequest = (input, context) => {
    const entries = {};
    if (input[_VAEIe] != null) {
        const memberEntries = se_VerifiedAccessEndpointIdList(input[_VAEIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVerifiedAccessGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_VAGIe] != null) {
        const memberEntries = se_VerifiedAccessGroupIdList(input[_VAGIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVerifiedAccessInstanceLoggingConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input[_VAIIe] != null) {
        const memberEntries = se_VerifiedAccessInstanceIdList(input[_VAIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVerifiedAccessInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_VAIIe] != null) {
        const memberEntries = se_VerifiedAccessInstanceIdList(input[_VAIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVerifiedAccessTrustProvidersRequest = (input, context) => {
    const entries = {};
    if (input[_VATPIe] != null) {
        const memberEntries = se_VerifiedAccessTrustProviderIdList(input[_VATPIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VerifiedAccessTrustProviderId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVolumeAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVolumesModificationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VIol] != null) {
        const memberEntries = se_VolumeIdStringList(input[_VIol]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeVolumesRequest = (input, context) => {
    const entries = {};
    if (input[_VIol] != null) {
        const memberEntries = se_VolumeIdStringList(input[_VIol]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeVolumeStatusRequest = (input, context) => {
    const entries = {};
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_VIol] != null) {
        const memberEntries = se_VolumeIdStringList(input[_VIol]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeVpcAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVpcBlockPublicAccessExclusionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EIxcl] != null) {
        const memberEntries = se_VpcBlockPublicAccessExclusionIdList(input[_EIxcl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExclusionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_DescribeVpcBlockPublicAccessOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input[_VIp] != null) {
        const memberEntries = se_VpcClassicLinkIdList(input[_VIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VIp] != null) {
        const memberEntries = se_VpcClassicLinkIdList(input[_VIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeVpcEndpointAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VEI] != null) {
        const memberEntries = se_VpcEndpointIdList(input[_VEI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcEndpointConnectionNotificationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CNIon] != null) {
        entries[_CNIon] = input[_CNIon];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcEndpointServiceConfigurationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIer] != null) {
        const memberEntries = se_VpcEndpointServiceIdList(input[_SIer]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcEndpointServicePermissionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcEndpointServicesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SNer] != null) {
        const memberEntries = se_ValueStringList(input[_SNer]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SRer] != null) {
        const memberEntries = se_ValueStringList(input[_SRer]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ServiceRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeVpcEndpointsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VEI] != null) {
        const memberEntries = se_VpcEndpointIdList(input[_VEI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_DescribeVpcPeeringConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VPCIp] != null) {
        const memberEntries = se_VpcPeeringConnectionIdList(input[_VPCIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcPeeringConnectionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DescribeVpcsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VIp] != null) {
        const memberEntries = se_VpcIdStringList(input[_VIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VCIp] != null) {
        const memberEntries = se_VpnConnectionIdStringList(input[_VCIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpnConnectionId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DescribeVpnGatewaysRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VGIp] != null) {
        const memberEntries = se_VpnGatewayIdStringList(input[_VGIp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpnGatewayId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DestinationOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_FF] != null) {
        entries[_FF] = input[_FF];
    }
    if (input[_HCP] != null) {
        entries[_HCP] = input[_HCP];
    }
    if (input[_PHP] != null) {
        entries[_PHP] = input[_PHP];
    }
    return entries;
};
const se_DetachClassicLinkVpcRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DetachInternetGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IGI] != null) {
        entries[_IGI] = input[_IGI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DetachNetworkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AIt] != null) {
        entries[_AIt] = input[_AIt];
    }
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    return entries;
};
const se_DetachVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_VATPI] != null) {
        entries[_VATPI] = input[_VATPI];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DetachVolumeRequest = (input, context) => {
    const entries = {};
    if (input[_Dev] != null) {
        entries[_Dev] = input[_Dev];
    }
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DetachVpnGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_VGI] != null) {
        entries[_VGI] = input[_VGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DhcpOptionsIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`DhcpOptionsId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_DirectoryServiceAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input[_DIir] != null) {
        entries[_DIir] = input[_DIir];
    }
    return entries;
};
const se_DisableAddressTransferRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableAllowedImagesSettingsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableAwsNetworkPerformanceMetricSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_Met] != null) {
        entries[_Met] = input[_Met];
    }
    if (input[_Sta] != null) {
        entries[_Sta] = input[_Sta];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableFastLaunchRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input[_AZv] != null) {
        const memberEntries = se_AvailabilityZoneStringList(input[_AZv]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SSIo] != null) {
        const memberEntries = se_SnapshotIdStringList(input[_SSIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableImageBlockPublicAccessRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableImageDeprecationRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableImageDeregistrationProtectionRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableImageRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableIpamOrganizationAdminAccountRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_DAAI] != null) {
        entries[_DAAI] = input[_DAAI];
    }
    return entries;
};
const se_DisableRouteServerPropagationRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableSerialConsoleAccessRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableSnapshotBlockPublicAccessRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableTransitGatewayRouteTablePropagationRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TGRTAI] != null) {
        entries[_TGRTAI] = input[_TGRTAI];
    }
    return entries;
};
const se_DisableVgwRoutePropagationRequest = (input, context) => {
    const entries = {};
    if (input[_GI] != null) {
        entries[_GI] = input[_GI];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisableVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DisableVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_DisassociateAddressRequest = (input, context) => {
    const entries = {};
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateCapacityReservationBillingOwnerRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_URBOI] != null) {
        entries[_URBOI] = input[_URBOI];
    }
    return entries;
};
const se_DisassociateClientVpnTargetNetworkRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateEnclaveCertificateIamRoleRequest = (input, context) => {
    const entries = {};
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_RAo] != null) {
        entries[_RAo] = input[_RAo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateIamInstanceProfileRequest = (input, context) => {
    const entries = {};
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    return entries;
};
const se_DisassociateInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IEWI] != null) {
        entries[_IEWI] = input[_IEWI];
    }
    if (input[_AT] != null) {
        const memberEntries = se_InstanceEventWindowDisassociationRequest(input[_AT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DisassociateIpamByoasnRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_As] != null) {
        entries[_As] = input[_As];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    return entries;
};
const se_DisassociateIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDAIp] != null) {
        entries[_IRDAIp] = input[_IRDAIp];
    }
    return entries;
};
const se_DisassociateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    if (input[_AIs] != null) {
        const memberEntries = se_EipAssociationIdList(input[_AIs]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociationId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MDDS] != null) {
        entries[_MDDS] = input[_MDDS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateRouteServerRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    return entries;
};
const se_DisassociateSecurityGroupVpcRequest = (input, context) => {
    const entries = {};
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateSubnetCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    return entries;
};
const se_DisassociateTransitGatewayMulticastDomainRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateTransitGatewayPolicyTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGPTI] != null) {
        entries[_TGPTI] = input[_TGPTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateTransitGatewayRouteTableRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateTrunkInterfaceRequest = (input, context) => {
    const entries = {};
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_DisassociateVpcCidrBlockRequest = (input, context) => {
    const entries = {};
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    return entries;
};
const se_DiskImage = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Im] != null) {
        const memberEntries = se_DiskImageDetail(input[_Im]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Image.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Vo] != null) {
        const memberEntries = se_VolumeDetail(input[_Vo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Volume.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_DiskImageDetail = (input, context) => {
    const entries = {};
    if (input[_Fo] != null) {
        entries[_Fo] = input[_Fo];
    }
    if (input[_By] != null) {
        entries[_By] = input[_By];
    }
    if (input[_IMU] != null) {
        entries[_IMU] = input[_IMU];
    }
    return entries;
};
const se_DiskImageList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_DiskImage(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_DnsOptionsSpecification = (input, context) => {
    const entries = {};
    if (input[_DRIT] != null) {
        entries[_DRIT] = input[_DRIT];
    }
    if (input[_PDOFIRE] != null) {
        entries[_PDOFIRE] = input[_PDOFIRE];
    }
    return entries;
};
const se_DnsServersOptionsModifyStructure = (input, context) => {
    const entries = {};
    if (input[_CDSu] != null) {
        const memberEntries = se_ValueStringList(input[_CDSu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CustomDnsServers.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_EbsBlockDevice = (input, context) => {
    const entries = {};
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_Io] != null) {
        entries[_Io] = input[_Io];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_VS] != null) {
        entries[_VS] = input[_VS];
    }
    if (input[_VT] != null) {
        entries[_VT] = input[_VT];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_Th] != null) {
        entries[_Th] = input[_Th];
    }
    if (input[_OA] != null) {
        entries[_OA] = input[_OA];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_VIR] != null) {
        entries[_VIR] = input[_VIR];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    return entries;
};
const se_EbsInstanceBlockDeviceSpecification = (input, context) => {
    const entries = {};
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    return entries;
};
const se_EgressOnlyInternetGatewayIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_EipAssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ElasticGpuIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ElasticGpuSpecification = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    return entries;
};
const se_ElasticGpuSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ElasticGpuSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ElasticGpuSpecification.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ElasticGpuSpecifications = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ElasticGpuSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ElasticInferenceAccelerator = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_Cou] != null) {
        entries[_Cou] = input[_Cou];
    }
    return entries;
};
const se_ElasticInferenceAccelerators = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ElasticInferenceAccelerator(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_EnableAddressTransferRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_TAI] != null) {
        entries[_TAI] = input[_TAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableAllowedImagesSettingsRequest = (input, context) => {
    const entries = {};
    if (input[_AISS] != null) {
        entries[_AISS] = input[_AISS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableAwsNetworkPerformanceMetricSubscriptionRequest = (input, context) => {
    const entries = {};
    if (input[_S] != null) {
        entries[_S] = input[_S];
    }
    if (input[_D] != null) {
        entries[_D] = input[_D];
    }
    if (input[_Met] != null) {
        entries[_Met] = input[_Met];
    }
    if (input[_Sta] != null) {
        entries[_Sta] = input[_Sta];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableFastLaunchRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_SCn] != null) {
        const memberEntries = se_FastLaunchSnapshotConfigurationRequest(input[_SCn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotConfiguration.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LTa] != null) {
        const memberEntries = se_FastLaunchLaunchTemplateSpecificationRequest(input[_LTa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MPL] != null) {
        entries[_MPL] = input[_MPL];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableFastSnapshotRestoresRequest = (input, context) => {
    const entries = {};
    if (input[_AZv] != null) {
        const memberEntries = se_AvailabilityZoneStringList(input[_AZv]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AvailabilityZone.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SSIo] != null) {
        const memberEntries = se_SnapshotIdStringList(input[_SSIo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceSnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableImageBlockPublicAccessRequest = (input, context) => {
    const entries = {};
    if (input[_IBPAS] != null) {
        entries[_IBPAS] = input[_IBPAS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableImageDeprecationRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DAe] != null) {
        entries[_DAe] = smithyClient.serializeDateTime(input[_DAe]);
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableImageDeregistrationProtectionRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_WC] != null) {
        entries[_WC] = input[_WC];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableImageRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableIpamOrganizationAdminAccountRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_DAAI] != null) {
        entries[_DAAI] = input[_DAAI];
    }
    return entries;
};
const se_EnableReachabilityAnalyzerOrganizationSharingRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableRouteServerPropagationRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableSerialConsoleAccessRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableSnapshotBlockPublicAccessRequest = (input, context) => {
    const entries = {};
    if (input[_Stat] != null) {
        entries[_Stat] = input[_Stat];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableTransitGatewayRouteTablePropagationRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TGRTAI] != null) {
        entries[_TGRTAI] = input[_TGRTAI];
    }
    return entries;
};
const se_EnableVgwRoutePropagationRequest = (input, context) => {
    const entries = {};
    if (input[_GI] != null) {
        entries[_GI] = input[_GI];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_EnableVolumeIORequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    return entries;
};
const se_EnableVpcClassicLinkDnsSupportRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_EnableVpcClassicLinkRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    return entries;
};
const se_EnaSrdSpecification = (input, context) => {
    const entries = {};
    if (input[_ESE] != null) {
        entries[_ESE] = input[_ESE];
    }
    if (input[_ESUS] != null) {
        const memberEntries = se_EnaSrdUdpSpecification(input[_ESUS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdUdpSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnaSrdSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_ESE] != null) {
        entries[_ESE] = input[_ESE];
    }
    if (input[_ESUS] != null) {
        const memberEntries = se_EnaSrdUdpSpecificationRequest(input[_ESUS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdUdpSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_EnaSrdUdpSpecification = (input, context) => {
    const entries = {};
    if (input[_ESUE] != null) {
        entries[_ESUE] = input[_ESUE];
    }
    return entries;
};
const se_EnaSrdUdpSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_ESUE] != null) {
        entries[_ESUE] = input[_ESUE];
    }
    return entries;
};
const se_EnclaveOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_ExcludedInstanceTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExecutableByStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExecutableBy.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExportClientVpnClientCertificateRevocationListRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ExportClientVpnClientConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ExportImageRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DIFi] != null) {
        entries[_DIFi] = input[_DIFi];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_SEL] != null) {
        const memberEntries = se_ExportTaskS3LocationRequest(input[_SEL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3ExportLocation.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RNo] != null) {
        entries[_RNo] = input[_RNo];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ExportImageTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExportImageTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExportTaskIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ExportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ExportTaskS3LocationRequest = (input, context) => {
    const entries = {};
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    if (input[_SP] != null) {
        entries[_SP] = input[_SP];
    }
    return entries;
};
const se_ExportToS3TaskSpecification = (input, context) => {
    const entries = {};
    if (input[_DIFi] != null) {
        entries[_DIFi] = input[_DIFi];
    }
    if (input[_CFo] != null) {
        entries[_CFo] = input[_CFo];
    }
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    if (input[_SP] != null) {
        entries[_SP] = input[_SP];
    }
    return entries;
};
const se_ExportTransitGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ExportVerifiedAccessInstanceClientConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_FastLaunchImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImageId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FastLaunchLaunchTemplateSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_V] != null) {
        entries[_V] = input[_V];
    }
    return entries;
};
const se_FastLaunchSnapshotConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_TRC] != null) {
        entries[_TRC] = input[_TRC];
    }
    return entries;
};
const se_FederatedAuthenticationRequest = (input, context) => {
    const entries = {};
    if (input[_SAMLPA] != null) {
        entries[_SAMLPA] = input[_SAMLPA];
    }
    if (input[_SSSAMLPA] != null) {
        entries[_SSSAMLPA] = input[_SSSAMLPA];
    }
    return entries;
};
const se_Filter = (input, context) => {
    const entries = {};
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_Val] != null) {
        const memberEntries = se_ValueStringList(input[_Val]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FilterList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Filter(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Filter.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetBlockDeviceMappingRequest = (input, context) => {
    const entries = {};
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_VN] != null) {
        entries[_VN] = input[_VN];
    }
    if (input[_E] != null) {
        const memberEntries = se_FleetEbsBlockDeviceRequest(input[_E]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ND] != null) {
        entries[_ND] = input[_ND];
    }
    return entries;
};
const se_FleetBlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_FleetBlockDeviceMappingRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetEbsBlockDeviceRequest = (input, context) => {
    const entries = {};
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_Io] != null) {
        entries[_Io] = input[_Io];
    }
    if (input[_Th] != null) {
        entries[_Th] = input[_Th];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_VS] != null) {
        entries[_VS] = input[_VS];
    }
    if (input[_VT] != null) {
        entries[_VT] = input[_VT];
    }
    return entries;
};
const se_FleetIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FleetLaunchTemplateConfigListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_FleetLaunchTemplateConfigRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetLaunchTemplateConfigRequest = (input, context) => {
    const entries = {};
    if (input[_LTS] != null) {
        const memberEntries = se_FleetLaunchTemplateSpecificationRequest(input[_LTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ov] != null) {
        const memberEntries = se_FleetLaunchTemplateOverridesListRequest(input[_Ov]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FleetLaunchTemplateOverridesListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_FleetLaunchTemplateOverridesRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_FleetLaunchTemplateOverridesRequest = (input, context) => {
    const entries = {};
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_MPa] != null) {
        entries[_MPa] = input[_MPa];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_WCe] != null) {
        entries[_WCe] = smithyClient.serializeFloat(input[_WCe]);
    }
    if (input[_Pri] != null) {
        entries[_Pri] = smithyClient.serializeFloat(input[_Pri]);
    }
    if (input[_Pl] != null) {
        const memberEntries = se_Placement(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_BDM] != null) {
        const memberEntries = se_FleetBlockDeviceMappingRequestList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IR] != null) {
        const memberEntries = se_InstanceRequirementsRequest(input[_IR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    return entries;
};
const se_FleetLaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_V] != null) {
        entries[_V] = input[_V];
    }
    return entries;
};
const se_FleetLaunchTemplateSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_V] != null) {
        entries[_V] = input[_V];
    }
    return entries;
};
const se_FleetSpotCapacityRebalanceRequest = (input, context) => {
    const entries = {};
    if (input[_RS] != null) {
        entries[_RS] = input[_RS];
    }
    if (input[_TDe] != null) {
        entries[_TDe] = input[_TDe];
    }
    return entries;
};
const se_FleetSpotMaintenanceStrategiesRequest = (input, context) => {
    const entries = {};
    if (input[_CRap] != null) {
        const memberEntries = se_FleetSpotCapacityRebalanceRequest(input[_CRap]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityRebalance.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_FlowLogIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FlowLogResourceIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_FpgaImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GetActiveVpnTunnelStatusRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_VTOIA] != null) {
        entries[_VTOIA] = input[_VTOIA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetAllowedImagesSettingsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetAssociatedEnclaveCertificateIamRolesRequest = (input, context) => {
    const entries = {};
    if (input[_CA] != null) {
        entries[_CA] = input[_CA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetAssociatedIpv6PoolCidrsRequest = (input, context) => {
    const entries = {};
    if (input[_PIo] != null) {
        entries[_PIo] = input[_PIo];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetAwsNetworkPerformanceDataRequest = (input, context) => {
    const entries = {};
    if (input[_DQ] != null) {
        const memberEntries = se_DataQueries(input[_DQ]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DataQuery.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_STt] != null) {
        entries[_STt] = smithyClient.serializeDateTime(input[_STt]);
    }
    if (input[_ETn] != null) {
        entries[_ETn] = smithyClient.serializeDateTime(input[_ETn]);
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetCapacityReservationUsageRequest = (input, context) => {
    const entries = {};
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetCoipPoolUsageRequest = (input, context) => {
    const entries = {};
    if (input[_PIo] != null) {
        entries[_PIo] = input[_PIo];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetConsoleOutputRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_La] != null) {
        entries[_La] = input[_La];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetConsoleScreenshotRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_WU] != null) {
        entries[_WU] = input[_WU];
    }
    return entries;
};
const se_GetDeclarativePoliciesReportSummaryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RIep] != null) {
        entries[_RIep] = input[_RIep];
    }
    return entries;
};
const se_GetDefaultCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IF] != null) {
        entries[_IF] = input[_IF];
    }
    return entries;
};
const se_GetEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetEbsEncryptionByDefaultRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetFlowLogsIntegrationTemplateRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FLIl] != null) {
        entries[_FLIl] = input[_FLIl];
    }
    if (input[_CDSDA] != null) {
        entries[_CDSDA] = input[_CDSDA];
    }
    if (input[_ISnt] != null) {
        const memberEntries = se_IntegrateServices(input[_ISnt]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IntegrateService.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetGroupsForCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetHostReservationPurchasePreviewRequest = (input, context) => {
    const entries = {};
    if (input[_HIS] != null) {
        const memberEntries = se_RequestHostIdSet(input[_HIS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    return entries;
};
const se_GetImageBlockPublicAccessStateRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetInstanceMetadataDefaultsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetInstanceTpmEkPubRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_KT] != null) {
        entries[_KT] = input[_KT];
    }
    if (input[_KF] != null) {
        entries[_KF] = input[_KF];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetInstanceTypesFromInstanceRequirementsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ATr] != null) {
        const memberEntries = se_ArchitectureTypeSet(input[_ATr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VTi] != null) {
        const memberEntries = se_VirtualizationTypeSet(input[_VTi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IR] != null) {
        const memberEntries = se_InstanceRequirementsRequest(input[_IR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_Con] != null) {
        entries[_Con] = input[_Con];
    }
    return entries;
};
const se_GetInstanceUefiDataRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetIpamAddressHistoryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_ISI] != null) {
        entries[_ISI] = input[_ISI];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_STt] != null) {
        entries[_STt] = smithyClient.serializeDateTime(input[_STt]);
    }
    if (input[_ETn] != null) {
        entries[_ETn] = smithyClient.serializeDateTime(input[_ETn]);
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_GetIpamDiscoveredAccountsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDI] != null) {
        entries[_IRDI] = input[_IRDI];
    }
    if (input[_DRi] != null) {
        entries[_DRi] = input[_DRi];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_GetIpamDiscoveredPublicAddressesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDI] != null) {
        entries[_IRDI] = input[_IRDI];
    }
    if (input[_ARd] != null) {
        entries[_ARd] = input[_ARd];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_GetIpamDiscoveredResourceCidrsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDI] != null) {
        entries[_IRDI] = input[_IRDI];
    }
    if (input[_RRe] != null) {
        entries[_RRe] = input[_RRe];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_GetIpamPoolAllocationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_IPAI] != null) {
        entries[_IPAI] = input[_IPAI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_GetIpamPoolCidrsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_GetIpamResourceCidrsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_ISI] != null) {
        entries[_ISI] = input[_ISI];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_RIeso] != null) {
        entries[_RIeso] = input[_RIeso];
    }
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_RTeso] != null) {
        const memberEntries = se_RequestIpamResourceTag(input[_RTeso]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTag.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ROe] != null) {
        entries[_ROe] = input[_ROe];
    }
    return entries;
};
const se_GetLaunchTemplateDataRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    return entries;
};
const se_GetManagedPrefixListAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_GetManagedPrefixListEntriesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_TV] != null) {
        entries[_TV] = input[_TV];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_GetNetworkInsightsAccessScopeAnalysisFindingsRequest = (input, context) => {
    const entries = {};
    if (input[_NIASAI] != null) {
        entries[_NIASAI] = input[_NIASAI];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetNetworkInsightsAccessScopeContentRequest = (input, context) => {
    const entries = {};
    if (input[_NIASI] != null) {
        entries[_NIASI] = input[_NIASI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetPasswordDataRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetReservedInstancesExchangeQuoteRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RII] != null) {
        const memberEntries = se_ReservedInstanceIdSet(input[_RII]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TC] != null) {
        const memberEntries = se_TargetConfigurationRequestSet(input[_TC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetRouteServerAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetRouteServerPropagationsRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetRouteServerRoutingDatabaseRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_GetSecurityGroupsForVpcRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetSerialConsoleAccessStatusRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetSnapshotBlockPublicAccessStateRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetSpotPlacementScoresRequest = (input, context) => {
    const entries = {};
    if (input[_ITnst] != null) {
        const memberEntries = se_InstanceTypes(input[_ITnst]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TCa] != null) {
        entries[_TCa] = input[_TCa];
    }
    if (input[_TCUT] != null) {
        entries[_TCUT] = input[_TCUT];
    }
    if (input[_SAZ] != null) {
        entries[_SAZ] = input[_SAZ];
    }
    if (input[_RNe] != null) {
        const memberEntries = se_RegionNames(input[_RNe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RegionName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IRWM] != null) {
        const memberEntries = se_InstanceRequirementsWithMetadataRequest(input[_IRWM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirementsWithMetadata.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    return entries;
};
const se_GetSubnetCidrReservationsRequest = (input, context) => {
    const entries = {};
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    return entries;
};
const se_GetTransitGatewayAttachmentPropagationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetTransitGatewayPolicyTableAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGPTI] != null) {
        entries[_TGPTI] = input[_TGPTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetTransitGatewayPolicyTableEntriesRequest = (input, context) => {
    const entries = {};
    if (input[_TGPTI] != null) {
        entries[_TGPTI] = input[_TGPTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetTransitGatewayPrefixListReferencesRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetTransitGatewayRouteTableAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetTransitGatewayRouteTablePropagationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetVerifiedAccessEndpointPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_VAEI] != null) {
        entries[_VAEI] = input[_VAEI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetVerifiedAccessEndpointTargetsRequest = (input, context) => {
    const entries = {};
    if (input[_VAEI] != null) {
        entries[_VAEI] = input[_VAEI];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetVerifiedAccessGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetVpnConnectionDeviceSampleConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_VCDTI] != null) {
        entries[_VCDTI] = input[_VCDTI];
    }
    if (input[_IKEV] != null) {
        entries[_IKEV] = input[_IKEV];
    }
    if (input[_STa] != null) {
        entries[_STa] = input[_STa];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetVpnConnectionDeviceTypesRequest = (input, context) => {
    const entries = {};
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GetVpnTunnelReplacementStatusRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_VTOIA] != null) {
        entries[_VTOIA] = input[_VTOIA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_GroupIdentifier = (input, context) => {
    const entries = {};
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    return entries;
};
const se_GroupIdentifierList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_GroupIdentifier(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_GroupIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_GroupNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_HibernationOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_Conf] != null) {
        entries[_Conf] = input[_Conf];
    }
    return entries;
};
const se_HostReservationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IamInstanceProfileSpecification = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    return entries;
};
const se_IcmpTypeCode = (input, context) => {
    const entries = {};
    if (input[_Cod] != null) {
        entries[_Cod] = input[_Cod];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    return entries;
};
const se_IKEVersionsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_IKEVersionsRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_IKEVersionsRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_ImageCriterionRequest = (input, context) => {
    const entries = {};
    if (input[_IPm] != null) {
        const memberEntries = se_ImageProviderRequestList(input[_IPm]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageProvider.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MPC] != null) {
        const memberEntries = se_MarketplaceProductCodeRequestList(input[_MPC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MarketplaceProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_INm] != null) {
        const memberEntries = se_ImageNameRequestList(input[_INm]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DTC] != null) {
        const memberEntries = se_DeprecationTimeConditionRequest(input[_DTC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeprecationTimeCondition.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CDC] != null) {
        const memberEntries = se_CreationDateConditionRequest(input[_CDC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreationDateCondition.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImageCriterionRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImageCriterionRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`ImageCriterion.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImageDiskContainer = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_Fo] != null) {
        entries[_Fo] = input[_Fo];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    if (input[_UB] != null) {
        const memberEntries = se_UserBucket(input[_UB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserBucket.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImageDiskContainerList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImageDiskContainer(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImageIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImageId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageNameRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageProviderRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageUsageReportIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageUsageReportUserIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageUsageResourceTypeOptionRequest = (input, context) => {
    const entries = {};
    if (input[_ON] != null) {
        entries[_ON] = input[_ON];
    }
    if (input[_OV] != null) {
        const memberEntries = se_ImageUsageResourceTypeOptionValuesList(input[_OV]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionValue.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImageUsageResourceTypeOptionRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImageUsageResourceTypeOptionRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImageUsageResourceTypeOptionValuesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImageUsageResourceTypeRequest = (input, context) => {
    const entries = {};
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_RTO] != null) {
        const memberEntries = se_ImageUsageResourceTypeOptionRequestList(input[_RTO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypeOption.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImageUsageResourceTypeRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImageUsageResourceTypeRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImportClientVpnClientCertificateRevocationListRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_CRL] != null) {
        entries[_CRL] = input[_CRL];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ImportImageLicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_LCA] != null) {
        entries[_LCA] = input[_LCA];
    }
    return entries;
};
const se_ImportImageLicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ImportImageLicenseConfigurationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ImportImageRequest = (input, context) => {
    const entries = {};
    if (input[_Arc] != null) {
        entries[_Arc] = input[_Arc];
    }
    if (input[_CDl] != null) {
        const memberEntries = se_ClientData(input[_CDl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DCi] != null) {
        const memberEntries = se_ImageDiskContainerList(input[_DCi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskContainer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_H] != null) {
        entries[_H] = input[_H];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_LTi] != null) {
        entries[_LTi] = input[_LTi];
    }
    if (input[_Pla] != null) {
        entries[_Pla] = input[_Pla];
    }
    if (input[_RNo] != null) {
        entries[_RNo] = input[_RNo];
    }
    if (input[_LSi] != null) {
        const memberEntries = se_ImportImageLicenseSpecificationListRequest(input[_LSi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_UO] != null) {
        entries[_UO] = input[_UO];
    }
    if (input[_BM] != null) {
        entries[_BM] = input[_BM];
    }
    return entries;
};
const se_ImportInstanceLaunchSpecification = (input, context) => {
    const entries = {};
    if (input[_Arc] != null) {
        entries[_Arc] = input[_Arc];
    }
    if (input[_GNr] != null) {
        const memberEntries = se_SecurityGroupStringList(input[_GNr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_GIro] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_GIro]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AId] != null) {
        entries[_AId] = input[_AId];
    }
    if (input[_UD] != null) {
        const memberEntries = se_UserData(input[_UD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_Pl] != null) {
        const memberEntries = se_Placement(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Mon] != null) {
        entries[_Mon] = input[_Mon];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_IISB] != null) {
        entries[_IISB] = input[_IISB];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    return entries;
};
const se_ImportInstanceRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_LSa] != null) {
        const memberEntries = se_ImportInstanceLaunchSpecification(input[_LSa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DIis] != null) {
        const memberEntries = se_DiskImageList(input[_DIis]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskImage.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Pla] != null) {
        entries[_Pla] = input[_Pla];
    }
    return entries;
};
const se_ImportKeyPairRequest = (input, context) => {
    const entries = {};
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_PKM] != null) {
        entries[_PKM] = context.base64Encoder(input[_PKM]);
    }
    return entries;
};
const se_ImportSnapshotRequest = (input, context) => {
    const entries = {};
    if (input[_CDl] != null) {
        const memberEntries = se_ClientData(input[_CDl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DCis] != null) {
        const memberEntries = se_SnapshotDiskContainer(input[_DCis]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DiskContainer.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_RNo] != null) {
        entries[_RNo] = input[_RNo];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ImportSnapshotTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImportTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ImportTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ImportVolumeRequest = (input, context) => {
    const entries = {};
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_Im] != null) {
        const memberEntries = se_DiskImageDetail(input[_Im]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Image.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Vo] != null) {
        const memberEntries = se_VolumeDetail(input[_Vo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Volume.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InsideCidrBlocksStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceBlockDeviceMappingSpecification = (input, context) => {
    const entries = {};
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_E] != null) {
        const memberEntries = se_EbsInstanceBlockDeviceSpecification(input[_E]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VN] != null) {
        entries[_VN] = input[_VN];
    }
    if (input[_ND] != null) {
        entries[_ND] = input[_ND];
    }
    return entries;
};
const se_InstanceBlockDeviceMappingSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceBlockDeviceMappingSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceCreditSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceCreditSpecificationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_CCp] != null) {
        entries[_CCp] = input[_CCp];
    }
    return entries;
};
const se_InstanceEventWindowAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ITnsta] != null) {
        const memberEntries = se_TagList(input[_ITnsta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DHI] != null) {
        const memberEntries = se_DedicatedHostIdList(input[_DHI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceEventWindowDisassociationRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ITnsta] != null) {
        const memberEntries = se_TagList(input[_ITnsta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DHI] != null) {
        const memberEntries = se_DedicatedHostIdList(input[_DHI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DedicatedHostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceEventWindowIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`InstanceEventWindowId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceEventWindowTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input[_SWD] != null) {
        entries[_SWD] = input[_SWD];
    }
    if (input[_SH] != null) {
        entries[_SH] = input[_SH];
    }
    if (input[_EWD] != null) {
        entries[_EWD] = input[_EWD];
    }
    if (input[_EH] != null) {
        entries[_EH] = input[_EH];
    }
    return entries;
};
const se_InstanceEventWindowTimeRangeRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceEventWindowTimeRangeRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceGenerationSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`InstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceIpv6Address = (input, context) => {
    const entries = {};
    if (input[_IApv] != null) {
        entries[_IApv] = input[_IApv];
    }
    if (input[_IPIs] != null) {
        entries[_IPIs] = input[_IPIs];
    }
    return entries;
};
const se_InstanceIpv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceIpv6Address(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceIpv6AddressListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceIpv6AddressRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`InstanceIpv6Address.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceIpv6AddressRequest = (input, context) => {
    const entries = {};
    if (input[_IApv] != null) {
        entries[_IApv] = input[_IApv];
    }
    return entries;
};
const se_InstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_ARu] != null) {
        entries[_ARu] = input[_ARu];
    }
    return entries;
};
const se_InstanceMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_MT] != null) {
        entries[_MT] = input[_MT];
    }
    if (input[_SO] != null) {
        const memberEntries = se_SpotMarketOptions(input[_SO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_HT] != null) {
        entries[_HT] = input[_HT];
    }
    if (input[_HPRHL] != null) {
        entries[_HPRHL] = input[_HPRHL];
    }
    if (input[_HE] != null) {
        entries[_HE] = input[_HE];
    }
    if (input[_HPI] != null) {
        entries[_HPI] = input[_HPI];
    }
    if (input[_IMT] != null) {
        entries[_IMT] = input[_IMT];
    }
    return entries;
};
const se_InstanceNetworkInterfaceSpecification = (input, context) => {
    const entries = {};
    if (input[_APIAs] != null) {
        entries[_APIAs] = input[_APIAs];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DIev] != null) {
        entries[_DIev] = input[_DIev];
    }
    if (input[_G] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAC] != null) {
        entries[_IAC] = input[_IAC];
    }
    if (input[_IA] != null) {
        const memberEntries = se_InstanceIpv6AddressList(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_PIA] != null) {
        const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIAC] != null) {
        entries[_SPIAC] = input[_SPIAC];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_ACIA] != null) {
        entries[_ACIA] = input[_ACIA];
    }
    if (input[_ITn] != null) {
        entries[_ITn] = input[_ITn];
    }
    if (input[_NCI] != null) {
        entries[_NCI] = input[_NCI];
    }
    if (input[_IPp] != null) {
        const memberEntries = se_Ipv4PrefixList(input[_IPp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPCp] != null) {
        entries[_IPCp] = input[_IPCp];
    }
    if (input[_IP] != null) {
        const memberEntries = se_Ipv6PrefixList(input[_IP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPC] != null) {
        entries[_IPC] = input[_IPC];
    }
    if (input[_PIr] != null) {
        entries[_PIr] = input[_PIr];
    }
    if (input[_ESS] != null) {
        const memberEntries = se_EnaSrdSpecificationRequest(input[_ESS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CTS] != null) {
        const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionTrackingSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EQC] != null) {
        entries[_EQC] = input[_EQC];
    }
    return entries;
};
const se_InstanceNetworkInterfaceSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_InstanceNetworkInterfaceSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_InstanceNetworkPerformanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_BW] != null) {
        entries[_BW] = input[_BW];
    }
    return entries;
};
const se_InstanceRequirements = (input, context) => {
    const entries = {};
    if (input[_VCC] != null) {
        const memberEntries = se_VCpuCountRange(input[_VCC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MMB] != null) {
        const memberEntries = se_MemoryMiB(input[_MMB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CM] != null) {
        const memberEntries = se_CpuManufacturerSet(input[_CM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MGBPVC] != null) {
        const memberEntries = se_MemoryGiBPerVCpu(input[_MGBPVC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EIT] != null) {
        const memberEntries = se_ExcludedInstanceTypeSet(input[_EIT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IG] != null) {
        const memberEntries = se_InstanceGenerationSet(input[_IG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGenerationSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SMPPOLP] != null) {
        entries[_SMPPOLP] = input[_SMPPOLP];
    }
    if (input[_ODMPPOLP] != null) {
        entries[_ODMPPOLP] = input[_ODMPPOLP];
    }
    if (input[_BMa] != null) {
        entries[_BMa] = input[_BMa];
    }
    if (input[_BP] != null) {
        entries[_BP] = input[_BP];
    }
    if (input[_RHS] != null) {
        entries[_RHS] = input[_RHS];
    }
    if (input[_NIC] != null) {
        const memberEntries = se_NetworkInterfaceCount(input[_NIC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LSo] != null) {
        entries[_LSo] = input[_LSo];
    }
    if (input[_LST] != null) {
        const memberEntries = se_LocalStorageTypeSet(input[_LST]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TLSGB] != null) {
        const memberEntries = se_TotalLocalStorageGB(input[_TLSGB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_BEBM] != null) {
        const memberEntries = se_BaselineEbsBandwidthMbps(input[_BEBM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ATc] != null) {
        const memberEntries = se_AcceleratorTypeSet(input[_ATc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ACc] != null) {
        const memberEntries = se_AcceleratorCount(input[_ACc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AM] != null) {
        const memberEntries = se_AcceleratorManufacturerSet(input[_AM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturerSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ANc] != null) {
        const memberEntries = se_AcceleratorNameSet(input[_ANc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorNameSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ATMMB] != null) {
        const memberEntries = se_AcceleratorTotalMemoryMiB(input[_ATMMB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NBGe] != null) {
        const memberEntries = se_NetworkBandwidthGbps(input[_NBGe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkBandwidthGbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AIT] != null) {
        const memberEntries = se_AllowedInstanceTypeSet(input[_AIT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllowedInstanceTypeSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MSPAPOOODP] != null) {
        entries[_MSPAPOOODP] = input[_MSPAPOOODP];
    }
    if (input[_BPF] != null) {
        const memberEntries = se_BaselinePerformanceFactors(input[_BPF]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselinePerformanceFactors.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceRequirementsRequest = (input, context) => {
    const entries = {};
    if (input[_VCC] != null) {
        const memberEntries = se_VCpuCountRangeRequest(input[_VCC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VCpuCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MMB] != null) {
        const memberEntries = se_MemoryMiBRequest(input[_MMB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CM] != null) {
        const memberEntries = se_CpuManufacturerSet(input[_CM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuManufacturer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MGBPVC] != null) {
        const memberEntries = se_MemoryGiBPerVCpuRequest(input[_MGBPVC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MemoryGiBPerVCpu.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EIT] != null) {
        const memberEntries = se_ExcludedInstanceTypeSet(input[_EIT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IG] != null) {
        const memberEntries = se_InstanceGenerationSet(input[_IG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceGeneration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SMPPOLP] != null) {
        entries[_SMPPOLP] = input[_SMPPOLP];
    }
    if (input[_ODMPPOLP] != null) {
        entries[_ODMPPOLP] = input[_ODMPPOLP];
    }
    if (input[_BMa] != null) {
        entries[_BMa] = input[_BMa];
    }
    if (input[_BP] != null) {
        entries[_BP] = input[_BP];
    }
    if (input[_RHS] != null) {
        entries[_RHS] = input[_RHS];
    }
    if (input[_NIC] != null) {
        const memberEntries = se_NetworkInterfaceCountRequest(input[_NIC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LSo] != null) {
        entries[_LSo] = input[_LSo];
    }
    if (input[_LST] != null) {
        const memberEntries = se_LocalStorageTypeSet(input[_LST]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LocalStorageType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TLSGB] != null) {
        const memberEntries = se_TotalLocalStorageGBRequest(input[_TLSGB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TotalLocalStorageGB.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_BEBM] != null) {
        const memberEntries = se_BaselineEbsBandwidthMbpsRequest(input[_BEBM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselineEbsBandwidthMbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ATc] != null) {
        const memberEntries = se_AcceleratorTypeSet(input[_ATc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ACc] != null) {
        const memberEntries = se_AcceleratorCountRequest(input[_ACc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorCount.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AM] != null) {
        const memberEntries = se_AcceleratorManufacturerSet(input[_AM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorManufacturer.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ANc] != null) {
        const memberEntries = se_AcceleratorNameSet(input[_ANc]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorName.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ATMMB] != null) {
        const memberEntries = se_AcceleratorTotalMemoryMiBRequest(input[_ATMMB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AcceleratorTotalMemoryMiB.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NBGe] != null) {
        const memberEntries = se_NetworkBandwidthGbpsRequest(input[_NBGe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkBandwidthGbps.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AIT] != null) {
        const memberEntries = se_AllowedInstanceTypeSet(input[_AIT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AllowedInstanceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MSPAPOOODP] != null) {
        entries[_MSPAPOOODP] = input[_MSPAPOOODP];
    }
    if (input[_BPF] != null) {
        const memberEntries = se_BaselinePerformanceFactorsRequest(input[_BPF]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BaselinePerformanceFactors.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceRequirementsWithMetadataRequest = (input, context) => {
    const entries = {};
    if (input[_ATr] != null) {
        const memberEntries = se_ArchitectureTypeSet(input[_ATr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ArchitectureType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VTi] != null) {
        const memberEntries = se_VirtualizationTypeSet(input[_VTi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VirtualizationType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IR] != null) {
        const memberEntries = se_InstanceRequirementsRequest(input[_IR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceSpecification = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_EBV] != null) {
        entries[_EBV] = input[_EBV];
    }
    if (input[_EDVI] != null) {
        const memberEntries = se_VolumeIdStringList(input[_EDVI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ExcludeDataVolumeId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InstanceTagKeySet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_InstanceTypes = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IntegrateServices = (input, context) => {
    const entries = {};
    if (input[_AIth] != null) {
        const memberEntries = se_AthenaIntegrationsSet(input[_AIth]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AthenaIntegration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_InternetGatewayIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpamCidrAuthorizationContext = (input, context) => {
    const entries = {};
    if (input[_Me] != null) {
        entries[_Me] = input[_Me];
    }
    if (input[_Si] != null) {
        entries[_Si] = input[_Si];
    }
    return entries;
};
const se_IpamPoolAllocationAllowedCidrs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpamPoolAllocationDisallowedCidrs = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpamPoolSourceResourceRequest = (input, context) => {
    const entries = {};
    if (input[_RIeso] != null) {
        entries[_RIeso] = input[_RIeso];
    }
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_RRe] != null) {
        entries[_RRe] = input[_RRe];
    }
    if (input[_ROe] != null) {
        entries[_ROe] = input[_ROe];
    }
    return entries;
};
const se_IpList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpPermission = (input, context) => {
    const entries = {};
    if (input[_IPpr] != null) {
        entries[_IPpr] = input[_IPpr];
    }
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    if (input[_UIGP] != null) {
        const memberEntries = se_UserIdGroupPairList(input[_UIGP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Groups.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IRp] != null) {
        const memberEntries = se_IpRangeList(input[_IRp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpRanges.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IRpv] != null) {
        const memberEntries = se_Ipv6RangeList(input[_IRpv]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Ranges.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PLIr] != null) {
        const memberEntries = se_PrefixListIdList(input[_PLIr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrefixListIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_IpPermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_IpPermission(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_IpPrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_IpRange = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_CIi] != null) {
        entries[_CIi] = input[_CIi];
    }
    return entries;
};
const se_IpRangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_IpRange(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Ipv4PrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Ipv4PrefixSpecificationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Ipv4PrefixSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_IPpvr] != null) {
        entries[_IPpvr] = input[_IPpvr];
    }
    return entries;
};
const se_Ipv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Ipv6PoolIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Ipv6PrefixList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Ipv6PrefixSpecificationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Ipv6PrefixSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_IPpvre] != null) {
        entries[_IPpvre] = input[_IPpvre];
    }
    return entries;
};
const se_Ipv6Range = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_CIid] != null) {
        entries[_CIid] = input[_CIid];
    }
    return entries;
};
const se_Ipv6RangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Ipv6Range(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_KeyNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`KeyName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_KeyPairIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`KeyPairId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LaunchPermission = (input, context) => {
    const entries = {};
    if (input[_OAr] != null) {
        entries[_OAr] = input[_OAr];
    }
    if (input[_OUA] != null) {
        entries[_OUA] = input[_OUA];
    }
    if (input[_UIs] != null) {
        entries[_UIs] = input[_UIs];
    }
    if (input[_Gr] != null) {
        entries[_Gr] = input[_Gr];
    }
    return entries;
};
const se_LaunchPermissionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchPermission(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchPermissionModifications = (input, context) => {
    const entries = {};
    if (input[_Add] != null) {
        const memberEntries = se_LaunchPermissionList(input[_Add]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Rem] != null) {
        const memberEntries = se_LaunchPermissionList(input[_Rem]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchSpecsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SpotFleetLaunchSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateBlockDeviceMappingRequest = (input, context) => {
    const entries = {};
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_VN] != null) {
        entries[_VN] = input[_VN];
    }
    if (input[_E] != null) {
        const memberEntries = se_LaunchTemplateEbsBlockDeviceRequest(input[_E]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ND] != null) {
        entries[_ND] = input[_ND];
    }
    return entries;
};
const se_LaunchTemplateBlockDeviceMappingRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateBlockDeviceMappingRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateCapacityReservationSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_CRP] != null) {
        entries[_CRP] = input[_CRP];
    }
    if (input[_CRTa] != null) {
        const memberEntries = se_CapacityReservationTarget(input[_CRTa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationTarget.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateConfig = (input, context) => {
    const entries = {};
    if (input[_LTS] != null) {
        const memberEntries = se_FleetLaunchTemplateSpecification(input[_LTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ov] != null) {
        const memberEntries = se_LaunchTemplateOverridesList(input[_Ov]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Overrides.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateConfigList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateConfig(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateCpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_CC] != null) {
        entries[_CC] = input[_CC];
    }
    if (input[_TPC] != null) {
        entries[_TPC] = input[_TPC];
    }
    if (input[_ASS] != null) {
        entries[_ASS] = input[_ASS];
    }
    return entries;
};
const se_LaunchTemplateEbsBlockDeviceRequest = (input, context) => {
    const entries = {};
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_Io] != null) {
        entries[_Io] = input[_Io];
    }
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_VS] != null) {
        entries[_VS] = input[_VS];
    }
    if (input[_VT] != null) {
        entries[_VT] = input[_VT];
    }
    if (input[_Th] != null) {
        entries[_Th] = input[_Th];
    }
    if (input[_VIR] != null) {
        entries[_VIR] = input[_VIR];
    }
    return entries;
};
const se_LaunchTemplateElasticInferenceAccelerator = (input, context) => {
    const entries = {};
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_Cou] != null) {
        entries[_Cou] = input[_Cou];
    }
    return entries;
};
const se_LaunchTemplateElasticInferenceAcceleratorList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateElasticInferenceAccelerator(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateEnclaveOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_LaunchTemplateHibernationOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_Conf] != null) {
        entries[_Conf] = input[_Conf];
    }
    return entries;
};
const se_LaunchTemplateIamInstanceProfileSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    return entries;
};
const se_LaunchTemplateIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LaunchTemplateInstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_ARu] != null) {
        entries[_ARu] = input[_ARu];
    }
    return entries;
};
const se_LaunchTemplateInstanceMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_MT] != null) {
        entries[_MT] = input[_MT];
    }
    if (input[_SO] != null) {
        const memberEntries = se_LaunchTemplateSpotMarketOptionsRequest(input[_SO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateInstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_HT] != null) {
        entries[_HT] = input[_HT];
    }
    if (input[_HPRHL] != null) {
        entries[_HPRHL] = input[_HPRHL];
    }
    if (input[_HE] != null) {
        entries[_HE] = input[_HE];
    }
    if (input[_HPI] != null) {
        entries[_HPI] = input[_HPI];
    }
    if (input[_IMT] != null) {
        entries[_IMT] = input[_IMT];
    }
    return entries;
};
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_ACIA] != null) {
        entries[_ACIA] = input[_ACIA];
    }
    if (input[_APIAs] != null) {
        entries[_APIAs] = input[_APIAs];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DIev] != null) {
        entries[_DIev] = input[_DIev];
    }
    if (input[_G] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ITn] != null) {
        entries[_ITn] = input[_ITn];
    }
    if (input[_IAC] != null) {
        entries[_IAC] = input[_IAC];
    }
    if (input[_IA] != null) {
        const memberEntries = se_InstanceIpv6AddressListRequest(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_PIA] != null) {
        const memberEntries = se_PrivateIpAddressSpecificationList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIAC] != null) {
        entries[_SPIAC] = input[_SPIAC];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_NCI] != null) {
        entries[_NCI] = input[_NCI];
    }
    if (input[_IPp] != null) {
        const memberEntries = se_Ipv4PrefixList(input[_IPp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPCp] != null) {
        entries[_IPCp] = input[_IPCp];
    }
    if (input[_IP] != null) {
        const memberEntries = se_Ipv6PrefixList(input[_IP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPC] != null) {
        entries[_IPC] = input[_IPC];
    }
    if (input[_PIr] != null) {
        entries[_PIr] = input[_PIr];
    }
    if (input[_ESS] != null) {
        const memberEntries = se_EnaSrdSpecificationRequest(input[_ESS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CTS] != null) {
        const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionTrackingSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EQC] != null) {
        entries[_EQC] = input[_EQC];
    }
    return entries;
};
const se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`InstanceNetworkInterfaceSpecification.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateLicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_LCA] != null) {
        entries[_LCA] = input[_LCA];
    }
    return entries;
};
const se_LaunchTemplateLicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateLicenseConfigurationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplateNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LaunchTemplateNetworkPerformanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_BW] != null) {
        entries[_BW] = input[_BW];
    }
    return entries;
};
const se_LaunchTemplateOverrides = (input, context) => {
    const entries = {};
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_SPp] != null) {
        entries[_SPp] = input[_SPp];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_WCe] != null) {
        entries[_WCe] = smithyClient.serializeFloat(input[_WCe]);
    }
    if (input[_Pri] != null) {
        entries[_Pri] = smithyClient.serializeFloat(input[_Pri]);
    }
    if (input[_IR] != null) {
        const memberEntries = se_InstanceRequirements(input[_IR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateOverridesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateOverrides(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LaunchTemplatePlacementRequest = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_Af] != null) {
        entries[_Af] = input[_Af];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_HIo] != null) {
        entries[_HIo] = input[_HIo];
    }
    if (input[_Te] != null) {
        entries[_Te] = input[_Te];
    }
    if (input[_SDp] != null) {
        entries[_SDp] = input[_SDp];
    }
    if (input[_HRGA] != null) {
        entries[_HRGA] = input[_HRGA];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    return entries;
};
const se_LaunchTemplatePrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_HTo] != null) {
        entries[_HTo] = input[_HTo];
    }
    if (input[_ERNDAR] != null) {
        entries[_ERNDAR] = input[_ERNDAR];
    }
    if (input[_ERNDAAAAR] != null) {
        entries[_ERNDAAAAR] = input[_ERNDAAAAR];
    }
    return entries;
};
const se_LaunchTemplatesMonitoringRequest = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_LaunchTemplateSpecification = (input, context) => {
    const entries = {};
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_V] != null) {
        entries[_V] = input[_V];
    }
    return entries;
};
const se_LaunchTemplateSpotMarketOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_MPa] != null) {
        entries[_MPa] = input[_MPa];
    }
    if (input[_SIT] != null) {
        entries[_SIT] = input[_SIT];
    }
    if (input[_BDMl] != null) {
        entries[_BDMl] = input[_BDMl];
    }
    if (input[_VU] != null) {
        entries[_VU] = smithyClient.serializeDateTime(input[_VU]);
    }
    if (input[_IIB] != null) {
        entries[_IIB] = input[_IIB];
    }
    return entries;
};
const se_LaunchTemplateTagSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LaunchTemplateTagSpecificationRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LaunchTemplateTagSpecificationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`LaunchTemplateTagSpecificationRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LicenseConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_LCA] != null) {
        entries[_LCA] = input[_LCA];
    }
    return entries;
};
const se_LicenseSpecificationListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LicenseConfigurationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ListImagesInRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input[_IImag] != null) {
        const memberEntries = se_ImageIdStringList(input[_IImag]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ListSnapshotsInRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_SIna] != null) {
        const memberEntries = se_SnapshotIdStringList(input[_SIna]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SnapshotId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_LoadBalancersConfig = (input, context) => {
    const entries = {};
    if (input[_CLBC] != null) {
        const memberEntries = se_ClassicLoadBalancersConfig(input[_CLBC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClassicLoadBalancersConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TGC] != null) {
        const memberEntries = se_TargetGroupsConfig(input[_TGC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroupsConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LoadPermissionListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_LoadPermissionRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_LoadPermissionModifications = (input, context) => {
    const entries = {};
    if (input[_Add] != null) {
        const memberEntries = se_LoadPermissionListRequest(input[_Add]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Add.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Rem] != null) {
        const memberEntries = se_LoadPermissionListRequest(input[_Rem]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Remove.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_LoadPermissionRequest = (input, context) => {
    const entries = {};
    if (input[_Gr] != null) {
        entries[_Gr] = input[_Gr];
    }
    if (input[_UIs] != null) {
        entries[_UIs] = input[_UIs];
    }
    return entries;
};
const se_LocalGatewayIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayRouteTableIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayRouteTableVirtualInterfaceGroupAssociationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayRouteTableVpcAssociationIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayVirtualInterfaceGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalGatewayVirtualInterfaceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LocalStorageTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_LockSnapshotRequest = (input, context) => {
    const entries = {};
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LM] != null) {
        entries[_LM] = input[_LM];
    }
    if (input[_COP] != null) {
        entries[_COP] = input[_COP];
    }
    if (input[_LDo] != null) {
        entries[_LDo] = input[_LDo];
    }
    if (input[_EDx] != null) {
        entries[_EDx] = smithyClient.serializeDateTime(input[_EDx]);
    }
    return entries;
};
const se_MacModificationTaskIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MacSystemIntegrityProtectionConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_AIp] != null) {
        entries[_AIp] = input[_AIp];
    }
    if (input[_BS] != null) {
        entries[_BS] = input[_BS];
    }
    if (input[_DReb] != null) {
        entries[_DReb] = input[_DReb];
    }
    if (input[_DTR] != null) {
        entries[_DTR] = input[_DTR];
    }
    if (input[_FPi] != null) {
        entries[_FPi] = input[_FPi];
    }
    if (input[_KS] != null) {
        entries[_KS] = input[_KS];
    }
    if (input[_NP] != null) {
        entries[_NP] = input[_NP];
    }
    return entries;
};
const se_MarketplaceProductCodeRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_MemoryGiBPerVCpu = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = smithyClient.serializeFloat(input[_M]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_MemoryGiBPerVCpuRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = smithyClient.serializeFloat(input[_M]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_MemoryMiB = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_MemoryMiBRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_ModifyAddressAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_DNo] != null) {
        entries[_DNo] = input[_DNo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyAvailabilityZoneGroupRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_OIS] != null) {
        entries[_OIS] = input[_OIS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyCapacityReservationFleetRequest = (input, context) => {
    const entries = {};
    if (input[_CRFIa] != null) {
        entries[_CRFIa] = input[_CRFIa];
    }
    if (input[_TTC] != null) {
        entries[_TTC] = input[_TTC];
    }
    if (input[_ED] != null) {
        entries[_ED] = smithyClient.serializeDateTime(input[_ED]);
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RED] != null) {
        entries[_RED] = input[_RED];
    }
    return entries;
};
const se_ModifyCapacityReservationRequest = (input, context) => {
    const entries = {};
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_ED] != null) {
        entries[_ED] = smithyClient.serializeDateTime(input[_ED]);
    }
    if (input[_EDT] != null) {
        entries[_EDT] = input[_EDT];
    }
    if (input[_Ac] != null) {
        entries[_Ac] = input[_Ac];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AId] != null) {
        entries[_AId] = input[_AId];
    }
    if (input[_IMC] != null) {
        entries[_IMC] = input[_IMC];
    }
    return entries;
};
const se_ModifyClientVpnEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_SCA] != null) {
        entries[_SCA] = input[_SCA];
    }
    if (input[_CLO] != null) {
        const memberEntries = se_ConnectionLogOptions(input[_CLO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DSn] != null) {
        const memberEntries = se_DnsServersOptionsModifyStructure(input[_DSn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsServers.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VP] != null) {
        entries[_VP] = input[_VP];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_ST] != null) {
        entries[_ST] = input[_ST];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_ClientVpnSecurityGroupIdSet(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_SSP] != null) {
        entries[_SSP] = input[_SSP];
    }
    if (input[_CCO] != null) {
        const memberEntries = se_ClientConnectOptions(input[_CCO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientConnectOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_STH] != null) {
        entries[_STH] = input[_STH];
    }
    if (input[_CLBO] != null) {
        const memberEntries = se_ClientLoginBannerOptions(input[_CLBO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientLoginBannerOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CREO] != null) {
        const memberEntries = se_ClientRouteEnforcementOptions(input[_CREO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ClientRouteEnforcementOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DOST] != null) {
        entries[_DOST] = input[_DOST];
    }
    return entries;
};
const se_ModifyDefaultCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IF] != null) {
        entries[_IF] = input[_IF];
    }
    if (input[_CCp] != null) {
        entries[_CCp] = input[_CCp];
    }
    return entries;
};
const se_ModifyEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input[_KKI] != null) {
        entries[_KKI] = input[_KKI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyFleetRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ECTP] != null) {
        entries[_ECTP] = input[_ECTP];
    }
    if (input[_LTC] != null) {
        const memberEntries = se_FleetLaunchTemplateConfigListRequest(input[_LTC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_FIl] != null) {
        entries[_FIl] = input[_FIl];
    }
    if (input[_TCS] != null) {
        const memberEntries = se_TargetCapacitySpecificationRequest(input[_TCS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetCapacitySpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Con] != null) {
        entries[_Con] = input[_Con];
    }
    return entries;
};
const se_ModifyFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FII] != null) {
        entries[_FII] = input[_FII];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_OTp] != null) {
        entries[_OTp] = input[_OTp];
    }
    if (input[_UIse] != null) {
        const memberEntries = se_UserIdStringList(input[_UIse]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_UG] != null) {
        const memberEntries = se_UserGroupStringList(input[_UG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PCr] != null) {
        const memberEntries = se_ProductCodeStringList(input[_PCr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LP] != null) {
        const memberEntries = se_LoadPermissionModifications(input[_LP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadPermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    return entries;
};
const se_ModifyHostsRequest = (input, context) => {
    const entries = {};
    if (input[_HR] != null) {
        entries[_HR] = input[_HR];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_IF] != null) {
        entries[_IF] = input[_IF];
    }
    if (input[_HM] != null) {
        entries[_HM] = input[_HM];
    }
    if (input[_HI] != null) {
        const memberEntries = se_RequestHostIdList(input[_HI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AP] != null) {
        entries[_AP] = input[_AP];
    }
    return entries;
};
const se_ModifyIdentityIdFormatRequest = (input, context) => {
    const entries = {};
    if (input[_Res] != null) {
        entries[_Res] = input[_Res];
    }
    if (input[_ULI] != null) {
        entries[_ULI] = input[_ULI];
    }
    if (input[_PAr] != null) {
        entries[_PAr] = input[_PAr];
    }
    return entries;
};
const se_ModifyIdFormatRequest = (input, context) => {
    const entries = {};
    if (input[_Res] != null) {
        entries[_Res] = input[_Res];
    }
    if (input[_ULI] != null) {
        entries[_ULI] = input[_ULI];
    }
    return entries;
};
const se_ModifyImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_De] != null) {
        const memberEntries = se_AttributeValue(input[_De]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Description.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_LPa] != null) {
        const memberEntries = se_LaunchPermissionModifications(input[_LPa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchPermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_OTp] != null) {
        entries[_OTp] = input[_OTp];
    }
    if (input[_PCr] != null) {
        const memberEntries = se_ProductCodeStringList(input[_PCr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ProductCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_UG] != null) {
        const memberEntries = se_UserGroupStringList(input[_UG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_UIse] != null) {
        const memberEntries = se_UserIdStringList(input[_UIse]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    if (input[_OArg] != null) {
        const memberEntries = se_OrganizationArnStringList(input[_OArg]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_OUAr] != null) {
        const memberEntries = se_OrganizationalUnitArnStringList(input[_OUAr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OrganizationalUnitArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ISm] != null) {
        const memberEntries = se_AttributeValue(input[_ISm]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImdsSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_SDC] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_SDC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceDestCheck.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DASi] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_DASi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableApiStop.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    if (input[_BDM] != null) {
        const memberEntries = se_InstanceBlockDeviceMappingSpecificationList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DATis] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_DATis]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableApiTermination.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IT] != null) {
        const memberEntries = se_AttributeValue(input[_IT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceType.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_K] != null) {
        const memberEntries = se_AttributeValue(input[_K]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Kernel.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Ra] != null) {
        const memberEntries = se_AttributeValue(input[_Ra]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ramdisk.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_UD] != null) {
        const memberEntries = se_BlobAttributeValue(input[_UD], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserData.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IISB] != null) {
        const memberEntries = se_AttributeValue(input[_IISB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceInitiatedShutdownBehavior.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_G] != null) {
        const memberEntries = se_GroupIdStringList(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EO] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_EO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EbsOptimized.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SNS] != null) {
        const memberEntries = se_AttributeValue(input[_SNS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SriovNetSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ESn] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_ESn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSupport.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyInstanceCapacityReservationAttributesRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_CRSa] != null) {
        const memberEntries = se_CapacityReservationSpecification(input[_CRSa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyInstanceConnectEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ICEI] != null) {
        entries[_ICEI] = input[_ICEI];
    }
    if (input[_IAT] != null) {
        entries[_IAT] = input[_IAT];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_SecurityGroupIdStringListRequest(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PCI] != null) {
        entries[_PCI] = input[_PCI];
    }
    return entries;
};
const se_ModifyInstanceCpuOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_CC] != null) {
        entries[_CC] = input[_CC];
    }
    if (input[_TPC] != null) {
        entries[_TPC] = input[_TPC];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyInstanceCreditSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_ICS] != null) {
        const memberEntries = se_InstanceCreditSpecificationListRequest(input[_ICS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceCreditSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyInstanceEventStartTimeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_IEI] != null) {
        entries[_IEI] = input[_IEI];
    }
    if (input[_NB] != null) {
        entries[_NB] = smithyClient.serializeDateTime(input[_NB]);
    }
    return entries;
};
const se_ModifyInstanceEventWindowRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_IEWI] != null) {
        entries[_IEWI] = input[_IEWI];
    }
    if (input[_TRi] != null) {
        const memberEntries = se_InstanceEventWindowTimeRangeRequestSet(input[_TRi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TimeRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CE] != null) {
        entries[_CE] = input[_CE];
    }
    return entries;
};
const se_ModifyInstanceMaintenanceOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_ARu] != null) {
        entries[_ARu] = input[_ARu];
    }
    if (input[_RMe] != null) {
        entries[_RMe] = input[_RMe];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyInstanceMetadataDefaultsRequest = (input, context) => {
    const entries = {};
    if (input[_HT] != null) {
        entries[_HT] = input[_HT];
    }
    if (input[_HPRHL] != null) {
        entries[_HPRHL] = input[_HPRHL];
    }
    if (input[_HE] != null) {
        entries[_HE] = input[_HE];
    }
    if (input[_IMT] != null) {
        entries[_IMT] = input[_IMT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyInstanceMetadataOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_HT] != null) {
        entries[_HT] = input[_HT];
    }
    if (input[_HPRHL] != null) {
        entries[_HPRHL] = input[_HPRHL];
    }
    if (input[_HE] != null) {
        entries[_HE] = input[_HE];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_HPI] != null) {
        entries[_HPI] = input[_HPI];
    }
    if (input[_IMT] != null) {
        entries[_IMT] = input[_IMT];
    }
    return entries;
};
const se_ModifyInstanceNetworkPerformanceRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_BW] != null) {
        entries[_BW] = input[_BW];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyInstancePlacementRequest = (input, context) => {
    const entries = {};
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_HRGA] != null) {
        entries[_HRGA] = input[_HRGA];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_Te] != null) {
        entries[_Te] = input[_Te];
    }
    if (input[_Af] != null) {
        entries[_Af] = input[_Af];
    }
    if (input[_HIo] != null) {
        entries[_HIo] = input[_HIo];
    }
    return entries;
};
const se_ModifyIpamPoolRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_AIu] != null) {
        entries[_AIu] = input[_AIu];
    }
    if (input[_AMNL] != null) {
        entries[_AMNL] = input[_AMNL];
    }
    if (input[_AMNLl] != null) {
        entries[_AMNLl] = input[_AMNLl];
    }
    if (input[_ADNL] != null) {
        entries[_ADNL] = input[_ADNL];
    }
    if (input[_CADNL] != null) {
        entries[_CADNL] = input[_CADNL];
    }
    if (input[_AART] != null) {
        const memberEntries = se_RequestIpamResourceTagList(input[_AART]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RART] != null) {
        const memberEntries = se_RequestIpamResourceTagList(input[_RART]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveAllocationResourceTag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyIpamRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_AOR] != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input[_AOR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ROR] != null) {
        const memberEntries = se_RemoveIpamOperatingRegionSet(input[_ROR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Ti] != null) {
        entries[_Ti] = input[_Ti];
    }
    if (input[_EPG] != null) {
        entries[_EPG] = input[_EPG];
    }
    if (input[_MAe] != null) {
        entries[_MAe] = input[_MAe];
    }
    return entries;
};
const se_ModifyIpamResourceCidrRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RIeso] != null) {
        entries[_RIeso] = input[_RIeso];
    }
    if (input[_RC] != null) {
        entries[_RC] = input[_RC];
    }
    if (input[_RRe] != null) {
        entries[_RRe] = input[_RRe];
    }
    if (input[_CISI] != null) {
        entries[_CISI] = input[_CISI];
    }
    if (input[_DISI] != null) {
        entries[_DISI] = input[_DISI];
    }
    if (input[_Moni] != null) {
        entries[_Moni] = input[_Moni];
    }
    return entries;
};
const se_ModifyIpamResourceDiscoveryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IRDI] != null) {
        entries[_IRDI] = input[_IRDI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_AOR] != null) {
        const memberEntries = se_AddIpamOperatingRegionSet(input[_AOR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ROR] != null) {
        const memberEntries = se_RemoveIpamOperatingRegionSet(input[_ROR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveOperatingRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AOUE] != null) {
        const memberEntries = se_AddIpamOrganizationalUnitExclusionSet(input[_AOUE]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddOrganizationalUnitExclusion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ROUE] != null) {
        const memberEntries = se_RemoveIpamOrganizationalUnitExclusionSet(input[_ROUE]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveOrganizationalUnitExclusion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyIpamScopeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ISI] != null) {
        entries[_ISI] = input[_ISI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    return entries;
};
const se_ModifyLaunchTemplateRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_LTI] != null) {
        entries[_LTI] = input[_LTI];
    }
    if (input[_LTN] != null) {
        entries[_LTN] = input[_LTN];
    }
    if (input[_DVef] != null) {
        entries[_SDV] = input[_DVef];
    }
    return entries;
};
const se_ModifyLocalGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_LGVIGI] != null) {
        entries[_LGVIGI] = input[_LGVIGI];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_DPLI] != null) {
        entries[_DPLI] = input[_DPLI];
    }
    return entries;
};
const se_ModifyManagedPrefixListRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_CVu] != null) {
        entries[_CVu] = input[_CVu];
    }
    if (input[_PLN] != null) {
        entries[_PLN] = input[_PLN];
    }
    if (input[_AEd] != null) {
        const memberEntries = se_AddPrefixListEntries(input[_AEd]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddEntry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_REe] != null) {
        const memberEntries = se_RemovePrefixListEntries(input[_REe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveEntry.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ME] != null) {
        entries[_ME] = input[_ME];
    }
    return entries;
};
const se_ModifyNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_ESS] != null) {
        const memberEntries = se_EnaSrdSpecification(input[_ESS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnaSrdSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EPI] != null) {
        entries[_EPI] = input[_EPI];
    }
    if (input[_CTS] != null) {
        const memberEntries = se_ConnectionTrackingSpecificationRequest(input[_CTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionTrackingSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_APIAs] != null) {
        entries[_APIAs] = input[_APIAs];
    }
    if (input[_ASI] != null) {
        const memberEntries = se_SubnetIdList(input[_ASI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssociatedSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_De] != null) {
        const memberEntries = se_AttributeValue(input[_De]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Description.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SDC] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_SDC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceDestCheck.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_G] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Att] != null) {
        const memberEntries = se_NetworkInterfaceAttachmentChanges(input[_Att]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Attachment.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyPrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_PDHT] != null) {
        entries[_PDHT] = input[_PDHT];
    }
    if (input[_ERNDAR] != null) {
        entries[_ERNDAR] = input[_ERNDAR];
    }
    if (input[_ERNDAAAAR] != null) {
        entries[_ERNDAAAAR] = input[_ERNDAAAAR];
    }
    return entries;
};
const se_ModifyPublicIpDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_HTo] != null) {
        entries[_HTo] = input[_HTo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyReservedInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_RIIes] != null) {
        const memberEntries = se_ReservedInstancesIdStringList(input[_RIIes]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_TC] != null) {
        const memberEntries = se_ReservedInstancesConfigurationList(input[_TC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReservedInstancesConfigurationSetItemType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyRouteServerRequest = (input, context) => {
    const entries = {};
    if (input[_RSIo] != null) {
        entries[_RSIo] = input[_RSIo];
    }
    if (input[_PRe] != null) {
        entries[_PRe] = input[_PRe];
    }
    if (input[_PRD] != null) {
        entries[_PRD] = input[_PRD];
    }
    if (input[_SNE] != null) {
        entries[_SNE] = input[_SNE];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifySecurityGroupRulesRequest = (input, context) => {
    const entries = {};
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_SGR] != null) {
        const memberEntries = se_SecurityGroupRuleUpdateList(input[_SGR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRule.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifySnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_CVP] != null) {
        const memberEntries = se_CreateVolumePermissionModifications(input[_CVP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreateVolumePermission.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_GNr] != null) {
        const memberEntries = se_GroupNameStringList(input[_GNr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_OTp] != null) {
        entries[_OTp] = input[_OTp];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_UIse] != null) {
        const memberEntries = se_UserIdStringList(input[_UIse]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifySnapshotTierRequest = (input, context) => {
    const entries = {};
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_STto] != null) {
        entries[_STto] = input[_STto];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifySpotFleetRequestRequest = (input, context) => {
    const entries = {};
    if (input[_LTC] != null) {
        const memberEntries = se_LaunchTemplateConfigList(input[_LTC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ODTC] != null) {
        entries[_ODTC] = input[_ODTC];
    }
    if (input[_Con] != null) {
        entries[_Con] = input[_Con];
    }
    if (input[_SFRIp] != null) {
        entries[_SFRIp] = input[_SFRIp];
    }
    if (input[_TCa] != null) {
        entries[_TCa] = input[_TCa];
    }
    if (input[_ECTP] != null) {
        entries[_ECTP] = input[_ECTP];
    }
    return entries;
};
const se_ModifySubnetAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_AIAOC] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_AIAOC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AssignIpv6AddressOnCreation.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MPIOL] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_MPIOL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MapPublicIpOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_MCOIOL] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_MCOIOL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MapCustomerOwnedIpOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_COIP] != null) {
        entries[_COIP] = input[_COIP];
    }
    if (input[_EDn] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_EDn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDns64.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PDHTOL] != null) {
        entries[_PDHTOL] = input[_PDHTOL];
    }
    if (input[_ERNDAROL] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_ERNDAROL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableResourceNameDnsARecordOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ERNDAAAAROL] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_ERNDAAAAROL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableResourceNameDnsAAAARecordOnLaunch.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ELADI] != null) {
        entries[_ELADI] = input[_ELADI];
    }
    if (input[_DLADI] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_DLADI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DisableLniAtDeviceIndex.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyTrafficMirrorFilterNetworkServicesRequest = (input, context) => {
    const entries = {};
    if (input[_TMFI] != null) {
        entries[_TMFI] = input[_TMFI];
    }
    if (input[_ANS] != null) {
        const memberEntries = se_TrafficMirrorNetworkServiceList(input[_ANS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddNetworkService.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RNS] != null) {
        const memberEntries = se_TrafficMirrorNetworkServiceList(input[_RNS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveNetworkService.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyTrafficMirrorFilterRuleRequest = (input, context) => {
    const entries = {};
    if (input[_TMFRI] != null) {
        entries[_TMFRI] = input[_TMFRI];
    }
    if (input[_TD] != null) {
        entries[_TD] = input[_TD];
    }
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_RAu] != null) {
        entries[_RAu] = input[_RAu];
    }
    if (input[_DPR] != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input[_DPR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SPR] != null) {
        const memberEntries = se_TrafficMirrorPortRangeRequest(input[_SPR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_SCB] != null) {
        entries[_SCB] = input[_SCB];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_RF] != null) {
        const memberEntries = se_TrafficMirrorFilterRuleFieldList(input[_RF]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyTrafficMirrorSessionRequest = (input, context) => {
    const entries = {};
    if (input[_TMSI] != null) {
        entries[_TMSI] = input[_TMSI];
    }
    if (input[_TMTI] != null) {
        entries[_TMTI] = input[_TMTI];
    }
    if (input[_TMFI] != null) {
        entries[_TMFI] = input[_TMFI];
    }
    if (input[_PL] != null) {
        entries[_PL] = input[_PL];
    }
    if (input[_SN] != null) {
        entries[_SN] = input[_SN];
    }
    if (input[_VNI] != null) {
        entries[_VNI] = input[_VNI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_RF] != null) {
        const memberEntries = se_TrafficMirrorSessionFieldList(input[_RF]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveField.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyTransitGatewayOptions = (input, context) => {
    const entries = {};
    if (input[_ATGCB] != null) {
        const memberEntries = se_TransitGatewayCidrBlockStringList(input[_ATGCB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RTGCB] != null) {
        const memberEntries = se_TransitGatewayCidrBlockStringList(input[_RTGCB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveTransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VES] != null) {
        entries[_VES] = input[_VES];
    }
    if (input[_DSns] != null) {
        entries[_DSns] = input[_DSns];
    }
    if (input[_SGRS] != null) {
        entries[_SGRS] = input[_SGRS];
    }
    if (input[_AASAu] != null) {
        entries[_AASAu] = input[_AASAu];
    }
    if (input[_DRTA] != null) {
        entries[_DRTA] = input[_DRTA];
    }
    if (input[_ADRTI] != null) {
        entries[_ADRTI] = input[_ADRTI];
    }
    if (input[_DRTP] != null) {
        entries[_DRTP] = input[_DRTP];
    }
    if (input[_PDRTI] != null) {
        entries[_PDRTI] = input[_PDRTI];
    }
    if (input[_ASA] != null) {
        entries[_ASA] = input[_ASA];
    }
    return entries;
};
const se_ModifyTransitGatewayPrefixListReferenceRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_Bl] != null) {
        entries[_Bl] = input[_Bl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyTransitGatewayRequest = (input, context) => {
    const entries = {};
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Op] != null) {
        const memberEntries = se_ModifyTransitGatewayOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_ASId] != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input[_ASId]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RSIe] != null) {
        const memberEntries = se_TransitGatewaySubnetIdList(input[_RSIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Op] != null) {
        const memberEntries = se_ModifyTransitGatewayVpcAttachmentRequestOptions(input[_Op]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Options.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyTransitGatewayVpcAttachmentRequestOptions = (input, context) => {
    const entries = {};
    if (input[_DSns] != null) {
        entries[_DSns] = input[_DSns];
    }
    if (input[_SGRS] != null) {
        entries[_SGRS] = input[_SGRS];
    }
    if (input[_ISp] != null) {
        entries[_ISp] = input[_ISp];
    }
    if (input[_AMS] != null) {
        entries[_AMS] = input[_AMS];
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointCidrOptions = (input, context) => {
    const entries = {};
    if (input[_PRo] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointPortRangeList(input[_PRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointEniOptions = (input, context) => {
    const entries = {};
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_Po] != null) {
        entries[_Po] = input[_Po];
    }
    if (input[_PRo] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointPortRangeList(input[_PRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointLoadBalancerOptions = (input, context) => {
    const entries = {};
    if (input[_SIu] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_Po] != null) {
        entries[_Po] = input[_Po];
    }
    if (input[_PRo] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointPortRangeList(input[_PRo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_VAEI] != null) {
        entries[_VAEI] = input[_VAEI];
    }
    if (input[_PE] != null) {
        entries[_PE] = input[_PE];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SS] != null) {
        const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SseSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointPortRange = (input, context) => {
    const entries = {};
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointPortRangeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ModifyVerifiedAccessEndpointPortRange(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointRdsOptions = (input, context) => {
    const entries = {};
    if (input[_SIu] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointSubnetIdList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Po] != null) {
        entries[_Po] = input[_Po];
    }
    if (input[_RE] != null) {
        entries[_RE] = input[_RE];
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_VAEI] != null) {
        entries[_VAEI] = input[_VAEI];
    }
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_LBO] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointLoadBalancerOptions(input[_LBO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancerOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NIO] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointEniOptions(input[_NIO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RO] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointRdsOptions(input[_RO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RdsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CO] != null) {
        const memberEntries = se_ModifyVerifiedAccessEndpointCidrOptions(input[_CO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVerifiedAccessEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ModifyVerifiedAccessGroupPolicyRequest = (input, context) => {
    const entries = {};
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_PE] != null) {
        entries[_PE] = input[_PE];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SS] != null) {
        const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SseSpecification.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVerifiedAccessGroupRequest = (input, context) => {
    const entries = {};
    if (input[_VAGI] != null) {
        entries[_VAGI] = input[_VAGI];
    }
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyVerifiedAccessInstanceLoggingConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_AL] != null) {
        const memberEntries = se_VerifiedAccessLogOptions(input[_AL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AccessLogs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_ModifyVerifiedAccessInstanceRequest = (input, context) => {
    const entries = {};
    if (input[_VAII] != null) {
        entries[_VAII] = input[_VAII];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_CECSD] != null) {
        entries[_CECSD] = input[_CECSD];
    }
    return entries;
};
const se_ModifyVerifiedAccessNativeApplicationOidcOptions = (input, context) => {
    const entries = {};
    if (input[_PSKE] != null) {
        entries[_PSKE] = input[_PSKE];
    }
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_AE] != null) {
        entries[_AE] = input[_AE];
    }
    if (input[_TEo] != null) {
        entries[_TEo] = input[_TEo];
    }
    if (input[_UIE] != null) {
        entries[_UIE] = input[_UIE];
    }
    if (input[_CIl] != null) {
        entries[_CIl] = input[_CIl];
    }
    if (input[_CSl] != null) {
        entries[_CSl] = input[_CSl];
    }
    if (input[_Sc] != null) {
        entries[_Sc] = input[_Sc];
    }
    return entries;
};
const se_ModifyVerifiedAccessTrustProviderDeviceOptions = (input, context) => {
    const entries = {};
    if (input[_PSKU] != null) {
        entries[_PSKU] = input[_PSKU];
    }
    return entries;
};
const se_ModifyVerifiedAccessTrustProviderOidcOptions = (input, context) => {
    const entries = {};
    if (input[_I] != null) {
        entries[_I] = input[_I];
    }
    if (input[_AE] != null) {
        entries[_AE] = input[_AE];
    }
    if (input[_TEo] != null) {
        entries[_TEo] = input[_TEo];
    }
    if (input[_UIE] != null) {
        entries[_UIE] = input[_UIE];
    }
    if (input[_CIl] != null) {
        entries[_CIl] = input[_CIl];
    }
    if (input[_CSl] != null) {
        entries[_CSl] = input[_CSl];
    }
    if (input[_Sc] != null) {
        entries[_Sc] = input[_Sc];
    }
    return entries;
};
const se_ModifyVerifiedAccessTrustProviderRequest = (input, context) => {
    const entries = {};
    if (input[_VATPI] != null) {
        entries[_VATPI] = input[_VATPI];
    }
    if (input[_OO] != null) {
        const memberEntries = se_ModifyVerifiedAccessTrustProviderOidcOptions(input[_OO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OidcOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DOe] != null) {
        const memberEntries = se_ModifyVerifiedAccessTrustProviderDeviceOptions(input[_DOe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DeviceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_SS] != null) {
        const memberEntries = se_VerifiedAccessSseSpecificationRequest(input[_SS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SseSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NAOO] != null) {
        const memberEntries = se_ModifyVerifiedAccessNativeApplicationOidcOptions(input[_NAOO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NativeApplicationOidcOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVolumeAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_AEIO] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_AEIO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AutoEnableIO.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyVolumeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VIo] != null) {
        entries[_VIo] = input[_VIo];
    }
    if (input[_Siz] != null) {
        entries[_Siz] = input[_Siz];
    }
    if (input[_VT] != null) {
        entries[_VT] = input[_VT];
    }
    if (input[_Io] != null) {
        entries[_Io] = input[_Io];
    }
    if (input[_Th] != null) {
        entries[_Th] = input[_Th];
    }
    if (input[_MAE] != null) {
        entries[_MAE] = input[_MAE];
    }
    return entries;
};
const se_ModifyVpcAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_EDH] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_EDH]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDnsHostnames.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EDS] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_EDS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableDnsSupport.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_ENAUM] != null) {
        const memberEntries = se_AttributeBooleanValue(input[_ENAUM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnableNetworkAddressUsageMetrics.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcBlockPublicAccessExclusionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_EIxc] != null) {
        entries[_EIxc] = input[_EIxc];
    }
    if (input[_IGEM] != null) {
        entries[_IGEM] = input[_IGEM];
    }
    return entries;
};
const se_ModifyVpcBlockPublicAccessOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IGBM] != null) {
        entries[_IGBM] = input[_IGBM];
    }
    return entries;
};
const se_ModifyVpcEndpointConnectionNotificationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CNIon] != null) {
        entries[_CNIon] = input[_CNIon];
    }
    if (input[_CNAon] != null) {
        entries[_CNAon] = input[_CNAon];
    }
    if (input[_CEo] != null) {
        const memberEntries = se_ValueStringList(input[_CEo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ConnectionEvents.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcEndpointRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VEIp] != null) {
        entries[_VEIp] = input[_VEIp];
    }
    if (input[_RP] != null) {
        entries[_RP] = input[_RP];
    }
    if (input[_PD] != null) {
        entries[_PD] = input[_PD];
    }
    if (input[_ARTI] != null) {
        const memberEntries = se_VpcEndpointRouteTableIdList(input[_ARTI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RRTI] != null) {
        const memberEntries = se_VpcEndpointRouteTableIdList(input[_RRTI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveRouteTableId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ASId] != null) {
        const memberEntries = se_VpcEndpointSubnetIdList(input[_ASId]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RSIe] != null) {
        const memberEntries = se_VpcEndpointSubnetIdList(input[_RSIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSubnetId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ASGId] != null) {
        const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_ASGId]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RSGIe] != null) {
        const memberEntries = se_VpcEndpointSecurityGroupIdList(input[_RSGIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAT] != null) {
        entries[_IAT] = input[_IAT];
    }
    if (input[_DOn] != null) {
        const memberEntries = se_DnsOptionsSpecification(input[_DOn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DnsOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PDE] != null) {
        entries[_PDE] = input[_PDE];
    }
    if (input[_SC] != null) {
        const memberEntries = se_SubnetConfigurationsList(input[_SC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetConfiguration.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcEndpointServiceConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_PDN] != null) {
        entries[_PDN] = input[_PDN];
    }
    if (input[_RPDN] != null) {
        entries[_RPDN] = input[_RPDN];
    }
    if (input[_ARc] != null) {
        entries[_ARc] = input[_ARc];
    }
    if (input[_ANLBA] != null) {
        const memberEntries = se_ValueStringList(input[_ANLBA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RNLBA] != null) {
        const memberEntries = se_ValueStringList(input[_RNLBA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveNetworkLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AGLBA] != null) {
        const memberEntries = se_ValueStringList(input[_AGLBA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RGLBA] != null) {
        const memberEntries = se_ValueStringList(input[_RGLBA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveGatewayLoadBalancerArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ASIAT] != null) {
        const memberEntries = se_ValueStringList(input[_ASIAT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RSIAT] != null) {
        const memberEntries = se_ValueStringList(input[_RSIAT]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSupportedIpAddressType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ASR] != null) {
        const memberEntries = se_ValueStringList(input[_ASR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddSupportedRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RSR] != null) {
        const memberEntries = se_ValueStringList(input[_RSR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveSupportedRegion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcEndpointServicePayerResponsibilityRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_PRa] != null) {
        entries[_PRa] = input[_PRa];
    }
    return entries;
};
const se_ModifyVpcEndpointServicePermissionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_AAP] != null) {
        const memberEntries = se_ValueStringList(input[_AAP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AddAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RAP] != null) {
        const memberEntries = se_ValueStringList(input[_RAP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RemoveAllowedPrincipals.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ModifyVpcPeeringConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_APCO] != null) {
        const memberEntries = se_PeeringConnectionOptionsRequest(input[_APCO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AccepterPeeringConnectionOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RPCO] != null) {
        const memberEntries = se_PeeringConnectionOptionsRequest(input[_RPCO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `RequesterPeeringConnectionOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    return entries;
};
const se_ModifyVpcTenancyRequest = (input, context) => {
    const entries = {};
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_ITns] != null) {
        entries[_ITns] = input[_ITns];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyVpnConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_LINC] != null) {
        entries[_LINC] = input[_LINC];
    }
    if (input[_RINC] != null) {
        entries[_RINC] = input[_RINC];
    }
    if (input[_LINCo] != null) {
        entries[_LINCo] = input[_LINCo];
    }
    if (input[_RINCe] != null) {
        entries[_RINCe] = input[_RINCe];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyVpnConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_CGIu] != null) {
        entries[_CGIu] = input[_CGIu];
    }
    if (input[_VGI] != null) {
        entries[_VGI] = input[_VGI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyVpnTunnelCertificateRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_VTOIA] != null) {
        entries[_VTOIA] = input[_VTOIA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ModifyVpnTunnelOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_VTOIA] != null) {
        entries[_VTOIA] = input[_VTOIA];
    }
    if (input[_TO] != null) {
        const memberEntries = se_ModifyVpnTunnelOptionsSpecification(input[_TO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TunnelOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_STR] != null) {
        entries[_STR] = input[_STR];
    }
    if (input[_PSKS] != null) {
        entries[_PSKS] = input[_PSKS];
    }
    return entries;
};
const se_ModifyVpnTunnelOptionsSpecification = (input, context) => {
    const entries = {};
    if (input[_TIC] != null) {
        entries[_TIC] = input[_TIC];
    }
    if (input[_TIIC] != null) {
        entries[_TIIC] = input[_TIIC];
    }
    if (input[_PSK] != null) {
        entries[_PSK] = input[_PSK];
    }
    if (input[_PLS] != null) {
        entries[_PLS] = input[_PLS];
    }
    if (input[_PLSh] != null) {
        entries[_PLSh] = input[_PLSh];
    }
    if (input[_RMTS] != null) {
        entries[_RMTS] = input[_RMTS];
    }
    if (input[_RFP] != null) {
        entries[_RFP] = input[_RFP];
    }
    if (input[_RWS] != null) {
        entries[_RWS] = input[_RWS];
    }
    if (input[_DPDTS] != null) {
        entries[_DPDTS] = input[_DPDTS];
    }
    if (input[_DPDTA] != null) {
        entries[_DPDTA] = input[_DPDTA];
    }
    if (input[_PEA] != null) {
        const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input[_PEA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PEAh] != null) {
        const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input[_PEAh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIAh] != null) {
        const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input[_PIAh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIAha] != null) {
        const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input[_PIAha]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PDHGN] != null) {
        const memberEntries = se_Phase1DHGroupNumbersRequestList(input[_PDHGN]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PDHGNh] != null) {
        const memberEntries = se_Phase2DHGroupNumbersRequestList(input[_PDHGNh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IKEVe] != null) {
        const memberEntries = se_IKEVersionsRequestList(input[_IKEVe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SA] != null) {
        entries[_SA] = input[_SA];
    }
    if (input[_LO] != null) {
        const memberEntries = se_VpnTunnelLogOptionsSpecification(input[_LO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ETLC] != null) {
        entries[_ETLC] = input[_ETLC];
    }
    return entries;
};
const se_MonitorInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_MoveAddressToVpcRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    return entries;
};
const se_MoveByoipCidrToIpamRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_IPO] != null) {
        entries[_IPO] = input[_IPO];
    }
    return entries;
};
const se_MoveCapacityReservationInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_SCRI] != null) {
        entries[_SCRI] = input[_SCRI];
    }
    if (input[_DCRI] != null) {
        entries[_DCRI] = input[_DCRI];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    return entries;
};
const se_NatGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkAclIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkBandwidthGbps = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = smithyClient.serializeFloat(input[_M]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_NetworkBandwidthGbpsRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = smithyClient.serializeFloat(input[_M]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_NetworkInsightsAccessScopeAnalysisIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInsightsAccessScopeIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInsightsAnalysisIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInsightsPathIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInterfaceAttachmentChanges = (input, context) => {
    const entries = {};
    if (input[_DEQC] != null) {
        entries[_DEQC] = input[_DEQC];
    }
    if (input[_EQC] != null) {
        entries[_EQC] = input[_EQC];
    }
    if (input[_AIt] != null) {
        entries[_AIt] = input[_AIt];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    return entries;
};
const se_NetworkInterfaceCount = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_NetworkInterfaceCountRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_NetworkInterfaceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NetworkInterfacePermissionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_NewDhcpConfiguration = (input, context) => {
    const entries = {};
    if (input[_Ke] != null) {
        entries[_Ke] = input[_Ke];
    }
    if (input[_Val] != null) {
        const memberEntries = se_ValueStringList(input[_Val]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Value.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_NewDhcpConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_NewDhcpConfiguration(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_OccurrenceDayRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OccurenceDay.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OnDemandOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_AS] != null) {
        entries[_AS] = input[_AS];
    }
    if (input[_CRO] != null) {
        const memberEntries = se_CapacityReservationOptionsRequest(input[_CRO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SITi] != null) {
        entries[_SITi] = input[_SITi];
    }
    if (input[_SAZ] != null) {
        entries[_SAZ] = input[_SAZ];
    }
    if (input[_MTC] != null) {
        entries[_MTC] = input[_MTC];
    }
    if (input[_MTP] != null) {
        entries[_MTP] = input[_MTP];
    }
    return entries;
};
const se_OperatorRequest = (input, context) => {
    const entries = {};
    if (input[_Prin] != null) {
        entries[_Prin] = input[_Prin];
    }
    return entries;
};
const se_OrganizationalUnitArnStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OrganizationalUnitArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OrganizationArnStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`OrganizationArn.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OutpostLagIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_OwnerStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Owner.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PacketHeaderStatementRequest = (input, context) => {
    const entries = {};
    if (input[_SAo] != null) {
        const memberEntries = se_ValueStringList(input[_SAo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourceAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DAes] != null) {
        const memberEntries = se_ValueStringList(input[_DAes]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPo] != null) {
        const memberEntries = se_ValueStringList(input[_SPo]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePort.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DPes] != null) {
        const memberEntries = se_ValueStringList(input[_DPes]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPort.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPL] != null) {
        const memberEntries = se_ValueStringList(input[_SPL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePrefixList.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DPLe] != null) {
        const memberEntries = se_ValueStringList(input[_DPLe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPrefixList.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Pro] != null) {
        const memberEntries = se_ProtocolList(input[_Pro]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Protocol.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PathRequestFilter = (input, context) => {
    const entries = {};
    if (input[_SAou] != null) {
        entries[_SAou] = input[_SAou];
    }
    if (input[_SPR] != null) {
        const memberEntries = se_RequestFilterPortRange(input[_SPR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SourcePortRange.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DAest] != null) {
        entries[_DAest] = input[_DAest];
    }
    if (input[_DPR] != null) {
        const memberEntries = se_RequestFilterPortRange(input[_DPR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `DestinationPortRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PathStatementRequest = (input, context) => {
    const entries = {};
    if (input[_PHS] != null) {
        const memberEntries = se_PacketHeaderStatementRequest(input[_PHS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PacketHeaderStatement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RSe] != null) {
        const memberEntries = se_ResourceStatementRequest(input[_RSe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceStatement.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PeeringConnectionOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_ADRFRV] != null) {
        entries[_ADRFRV] = input[_ADRFRV];
    }
    if (input[_AEFLCLTRV] != null) {
        entries[_AEFLCLTRV] = input[_AEFLCLTRV];
    }
    if (input[_AEFLVTRCL] != null) {
        entries[_AEFLVTRCL] = input[_AEFLVTRCL];
    }
    return entries;
};
const se_PerformanceFactorReference = (input, context) => {
    const entries = {};
    if (input[_IF] != null) {
        entries[_IF] = input[_IF];
    }
    return entries;
};
const se_PerformanceFactorReferenceRequest = (input, context) => {
    const entries = {};
    if (input[_IF] != null) {
        entries[_IF] = input[_IF];
    }
    return entries;
};
const se_PerformanceFactorReferenceSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PerformanceFactorReference(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PerformanceFactorReferenceSetRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PerformanceFactorReferenceRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1DHGroupNumbersRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase1DHGroupNumbersRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1DHGroupNumbersRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_Phase1EncryptionAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase1EncryptionAlgorithmsRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1EncryptionAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_Phase1IntegrityAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase1IntegrityAlgorithmsRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase1IntegrityAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_Phase2DHGroupNumbersRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase2DHGroupNumbersRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase2DHGroupNumbersRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_Phase2EncryptionAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase2EncryptionAlgorithmsRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase2EncryptionAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_Phase2IntegrityAlgorithmsRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Phase2IntegrityAlgorithmsRequestListValue(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_Phase2IntegrityAlgorithmsRequestListValue = (input, context) => {
    const entries = {};
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_Placement = (input, context) => {
    const entries = {};
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_Af] != null) {
        entries[_Af] = input[_Af];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_PN] != null) {
        entries[_PN] = input[_PN];
    }
    if (input[_HIo] != null) {
        entries[_HIo] = input[_HIo];
    }
    if (input[_Te] != null) {
        entries[_Te] = input[_Te];
    }
    if (input[_SDp] != null) {
        entries[_SDp] = input[_SDp];
    }
    if (input[_HRGA] != null) {
        entries[_HRGA] = input[_HRGA];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    return entries;
};
const se_PlacementGroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`GroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PlacementGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PortRange = (input, context) => {
    const entries = {};
    if (input[_Fr] != null) {
        entries[_Fr] = input[_Fr];
    }
    if (input[_To] != null) {
        entries[_To] = input[_To];
    }
    return entries;
};
const se_PrefixListId = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    return entries;
};
const se_PrefixListIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PrefixListId(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrefixListResourceIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PriceScheduleSpecification = (input, context) => {
    const entries = {};
    if (input[_Ter] != null) {
        entries[_Ter] = input[_Ter];
    }
    if (input[_Pric] != null) {
        entries[_Pric] = smithyClient.serializeFloat(input[_Pric]);
    }
    if (input[_CCu] != null) {
        entries[_CCu] = input[_CCu];
    }
    return entries;
};
const se_PriceScheduleSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PriceScheduleSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrivateDnsNameOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_HTo] != null) {
        entries[_HTo] = input[_HTo];
    }
    if (input[_ERNDAR] != null) {
        entries[_ERNDAR] = input[_ERNDAR];
    }
    if (input[_ERNDAAAAR] != null) {
        entries[_ERNDAAAAR] = input[_ERNDAAAAR];
    }
    return entries;
};
const se_PrivateIpAddressConfigSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesPrivateIpAddressConfig(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`PrivateIpAddressConfigSet.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrivateIpAddressSpecification = (input, context) => {
    const entries = {};
    if (input[_Prim] != null) {
        entries[_Prim] = input[_Prim];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    return entries;
};
const se_PrivateIpAddressSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PrivateIpAddressSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PrivateIpAddressStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`PrivateIpAddress.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProductCodeStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ProductCode.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProductDescriptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProtocolList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ProvisionByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_CAC] != null) {
        const memberEntries = se_CidrAuthorizationContext(input[_CAC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PA] != null) {
        entries[_PA] = input[_PA];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PTS] != null) {
        const memberEntries = se_TagSpecificationList(input[_PTS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PoolTagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MRu] != null) {
        entries[_MRu] = input[_MRu];
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    return entries;
};
const se_ProvisionIpamByoasnRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIp] != null) {
        entries[_IIp] = input[_IIp];
    }
    if (input[_As] != null) {
        entries[_As] = input[_As];
    }
    if (input[_AAC] != null) {
        const memberEntries = se_AsnAuthorizationContext(input[_AAC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AsnAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ProvisionIpamPoolCidrRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_CAC] != null) {
        const memberEntries = se_IpamCidrAuthorizationContext(input[_CAC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CidrAuthorizationContext.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NL] != null) {
        entries[_NL] = input[_NL];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_VM] != null) {
        entries[_VM] = input[_VM];
    }
    if (input[_IERVTI] != null) {
        entries[_IERVTI] = input[_IERVTI];
    }
    return entries;
};
const se_ProvisionPublicIpv4PoolCidrRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_PIo] != null) {
        entries[_PIo] = input[_PIo];
    }
    if (input[_NL] != null) {
        entries[_NL] = input[_NL];
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    return entries;
};
const se_PublicIpStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`PublicIp.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PublicIpv4PoolIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_PurchaseCapacityBlockExtensionRequest = (input, context) => {
    const entries = {};
    if (input[_CBEOI] != null) {
        entries[_CBEOI] = input[_CBEOI];
    }
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_PurchaseCapacityBlockRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CBOI] != null) {
        entries[_CBOI] = input[_CBOI];
    }
    if (input[_IPn] != null) {
        entries[_IPn] = input[_IPn];
    }
    return entries;
};
const se_PurchaseHostReservationRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_CCu] != null) {
        entries[_CCu] = input[_CCu];
    }
    if (input[_HIS] != null) {
        const memberEntries = se_RequestHostIdSet(input[_HIS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostIdSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LPi] != null) {
        entries[_LPi] = input[_LPi];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PurchaseRequest = (input, context) => {
    const entries = {};
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_PT] != null) {
        entries[_PT] = input[_PT];
    }
    return entries;
};
const se_PurchaseRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_PurchaseRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`PurchaseRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_PurchaseReservedInstancesOfferingRequest = (input, context) => {
    const entries = {};
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_RIOIe] != null) {
        entries[_RIOIe] = input[_RIOIe];
    }
    if (input[_PTu] != null) {
        entries[_PTu] = smithyClient.serializeDateTime(input[_PTu]);
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_LPi] != null) {
        const memberEntries = se_ReservedInstanceLimitPrice(input[_LPi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LimitPrice.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_PurchaseScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PRu] != null) {
        const memberEntries = se_PurchaseRequestSet(input[_PRu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PurchaseRequest.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ReasonCodesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RebootInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RegionNames = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RegionNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`RegionName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RegisterImageRequest = (input, context) => {
    const entries = {};
    if (input[_IL] != null) {
        entries[_IL] = input[_IL];
    }
    if (input[_BPi] != null) {
        const memberEntries = se_BillingProductList(input[_BPi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BillingProduct.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_BM] != null) {
        entries[_BM] = input[_BM];
    }
    if (input[_TSp] != null) {
        entries[_TSp] = input[_TSp];
    }
    if (input[_UDe] != null) {
        entries[_UDe] = input[_UDe];
    }
    if (input[_ISm] != null) {
        entries[_ISm] = input[_ISm];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Arc] != null) {
        entries[_Arc] = input[_Arc];
    }
    if (input[_KI] != null) {
        entries[_KI] = input[_KI];
    }
    if (input[_RIa] != null) {
        entries[_RIa] = input[_RIa];
    }
    if (input[_RDN] != null) {
        entries[_RDN] = input[_RDN];
    }
    if (input[_BDM] != null) {
        const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_VTir] != null) {
        entries[_VTir] = input[_VTir];
    }
    if (input[_SNS] != null) {
        entries[_SNS] = input[_SNS];
    }
    if (input[_ESn] != null) {
        entries[_ESn] = input[_ESn];
    }
    return entries;
};
const se_RegisterInstanceEventNotificationAttributesRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_ITA] != null) {
        const memberEntries = se_RegisterInstanceTagAttributeRequest(input[_ITA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagAttribute.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RegisterInstanceTagAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_IATOI] != null) {
        entries[_IATOI] = input[_IATOI];
    }
    if (input[_ITK] != null) {
        const memberEntries = se_InstanceTagKeySet(input[_ITK]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceTagKey.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RegisterTransitGatewayMulticastGroupMembersRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_GIA] != null) {
        entries[_GIA] = input[_GIA];
    }
    if (input[_NIIe] != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RegisterTransitGatewayMulticastGroupSourcesRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_GIA] != null) {
        entries[_GIA] = input[_GIA];
    }
    if (input[_NIIe] != null) {
        const memberEntries = se_TransitGatewayNetworkInterfaceIdList(input[_NIIe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RejectCapacityReservationBillingOwnershipRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_CRI] != null) {
        entries[_CRI] = input[_CRI];
    }
    return entries;
};
const se_RejectTransitGatewayMulticastDomainAssociationsRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_SIu] != null) {
        const memberEntries = se_ValueStringList(input[_SIu]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SubnetIds.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RejectTransitGatewayPeeringAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RejectTransitGatewayVpcAttachmentRequest = (input, context) => {
    const entries = {};
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RejectVpcEndpointConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    if (input[_VEI] != null) {
        const memberEntries = se_VpcEndpointIdList(input[_VEI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `VpcEndpointId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RejectVpcPeeringConnectionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    return entries;
};
const se_ReleaseAddressRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    if (input[_NBG] != null) {
        entries[_NBG] = input[_NBG];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ReleaseHostsRequest = (input, context) => {
    const entries = {};
    if (input[_HI] != null) {
        const memberEntries = se_RequestHostIdList(input[_HI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HostId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ReleaseIpamPoolAllocationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IPI] != null) {
        entries[_IPI] = input[_IPI];
    }
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_IPAI] != null) {
        entries[_IPAI] = input[_IPAI];
    }
    return entries;
};
const se_RemoveIpamOperatingRegion = (input, context) => {
    const entries = {};
    if (input[_RN] != null) {
        entries[_RN] = input[_RN];
    }
    return entries;
};
const se_RemoveIpamOperatingRegionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RemoveIpamOperatingRegion(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RemoveIpamOrganizationalUnitExclusion = (input, context) => {
    const entries = {};
    if (input[_OEP] != null) {
        entries[_OEP] = input[_OEP];
    }
    return entries;
};
const se_RemoveIpamOrganizationalUnitExclusionSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RemoveIpamOrganizationalUnitExclusion(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RemovePrefixListEntries = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RemovePrefixListEntry(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RemovePrefixListEntry = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    return entries;
};
const se_ReplaceIamInstanceProfileAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_IIP] != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    return entries;
};
const se_ReplaceImageCriteriaInAllowedImagesSettingsRequest = (input, context) => {
    const entries = {};
    if (input[_ICm] != null) {
        const memberEntries = se_ImageCriterionRequestList(input[_ICm]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ImageCriterion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ReplaceNetworkAclAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    if (input[_NAI] != null) {
        entries[_NAI] = input[_NAI];
    }
    return entries;
};
const se_ReplaceNetworkAclEntryRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NAI] != null) {
        entries[_NAI] = input[_NAI];
    }
    if (input[_RNu] != null) {
        entries[_RNu] = input[_RNu];
    }
    if (input[_P] != null) {
        entries[_P] = input[_P];
    }
    if (input[_RAu] != null) {
        entries[_RAu] = input[_RAu];
    }
    if (input[_Eg] != null) {
        entries[_Eg] = input[_Eg];
    }
    if (input[_CB] != null) {
        entries[_CB] = input[_CB];
    }
    if (input[_ICB] != null) {
        entries[_ICB] = input[_ICB];
    }
    if (input[_ITC] != null) {
        const memberEntries = se_IcmpTypeCode(input[_ITC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Icmp.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PR] != null) {
        const memberEntries = se_PortRange(input[_PR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PortRange.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ReplaceRootVolumeTaskIds = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReplaceRootVolumeTaskId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReplaceRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DPLI] != null) {
        entries[_DPLI] = input[_DPLI];
    }
    if (input[_VEIp] != null) {
        entries[_VEIp] = input[_VEIp];
    }
    if (input[_LTo] != null) {
        entries[_LTo] = input[_LTo];
    }
    if (input[_TGI] != null) {
        entries[_TGI] = input[_TGI];
    }
    if (input[_LGI] != null) {
        entries[_LGI] = input[_LGI];
    }
    if (input[_CGI] != null) {
        entries[_CGI] = input[_CGI];
    }
    if (input[_CNAo] != null) {
        entries[_CNAo] = input[_CNAo];
    }
    if (input[_ONA] != null) {
        entries[_ONA] = input[_ONA];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_GI] != null) {
        entries[_GI] = input[_GI];
    }
    if (input[_DICB] != null) {
        entries[_DICB] = input[_DICB];
    }
    if (input[_EOIGI] != null) {
        entries[_EOIGI] = input[_EOIGI];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    return entries;
};
const se_ReplaceRouteTableAssociationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_AIss] != null) {
        entries[_AIss] = input[_AIss];
    }
    if (input[_RTI] != null) {
        entries[_RTI] = input[_RTI];
    }
    return entries;
};
const se_ReplaceTransitGatewayRouteRequest = (input, context) => {
    const entries = {};
    if (input[_DCBe] != null) {
        entries[_DCBe] = input[_DCBe];
    }
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_TGAI] != null) {
        entries[_TGAI] = input[_TGAI];
    }
    if (input[_Bl] != null) {
        entries[_Bl] = input[_Bl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ReplaceVpnTunnelRequest = (input, context) => {
    const entries = {};
    if (input[_VCI] != null) {
        entries[_VCI] = input[_VCI];
    }
    if (input[_VTOIA] != null) {
        entries[_VTOIA] = input[_VTOIA];
    }
    if (input[_APM] != null) {
        entries[_APM] = input[_APM];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ReportInstanceStatusRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_In] != null) {
        const memberEntries = se_InstanceIdStringList(input[_In]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Statu] != null) {
        entries[_Statu] = input[_Statu];
    }
    if (input[_STt] != null) {
        entries[_STt] = smithyClient.serializeDateTime(input[_STt]);
    }
    if (input[_ETn] != null) {
        entries[_ETn] = smithyClient.serializeDateTime(input[_ETn]);
    }
    if (input[_RCe] != null) {
        const memberEntries = se_ReasonCodesList(input[_RCe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ReasonCode.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    return entries;
};
const se_RequestFilterPortRange = (input, context) => {
    const entries = {};
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    return entries;
};
const se_RequestHostIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestHostIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestInstanceTypeList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestIpamResourceTag = (input, context) => {
    const entries = {};
    if (input[_Ke] != null) {
        entries[_Ke] = input[_Ke];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_RequestIpamResourceTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_RequestIpamResourceTag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RequestLaunchTemplateData = (input, context) => {
    const entries = {};
    if (input[_KI] != null) {
        entries[_KI] = input[_KI];
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    if (input[_IIP] != null) {
        const memberEntries = se_LaunchTemplateIamInstanceProfileSpecificationRequest(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_BDM] != null) {
        const memberEntries = se_LaunchTemplateBlockDeviceMappingRequestList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NI] != null) {
        const memberEntries = se_LaunchTemplateInstanceNetworkInterfaceSpecificationRequestList(input[_NI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_Mon] != null) {
        const memberEntries = se_LaunchTemplatesMonitoringRequest(input[_Mon]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Pl] != null) {
        const memberEntries = se_LaunchTemplatePlacementRequest(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RDI] != null) {
        entries[_RDI] = input[_RDI];
    }
    if (input[_DATis] != null) {
        entries[_DATis] = input[_DATis];
    }
    if (input[_IISB] != null) {
        entries[_IISB] = input[_IISB];
    }
    if (input[_UD] != null) {
        entries[_UD] = input[_UD];
    }
    if (input[_TS] != null) {
        const memberEntries = se_LaunchTemplateTagSpecificationRequestList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EGS] != null) {
        const memberEntries = se_ElasticGpuSpecificationList(input[_EGS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EIA] != null) {
        const memberEntries = se_LaunchTemplateElasticInferenceAcceleratorList(input[_EIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SGI] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SG] != null) {
        const memberEntries = se_SecurityGroupStringList(input[_SG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IMO] != null) {
        const memberEntries = se_LaunchTemplateInstanceMarketOptionsRequest(input[_IMO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMarketOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CSred] != null) {
        const memberEntries = se_CreditSpecificationRequest(input[_CSred]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreditSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_COp] != null) {
        const memberEntries = se_LaunchTemplateCpuOptionsRequest(input[_COp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CRSa] != null) {
        const memberEntries = se_LaunchTemplateCapacityReservationSpecificationRequest(input[_CRSa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LSi] != null) {
        const memberEntries = se_LaunchTemplateLicenseSpecificationListRequest(input[_LSi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_HO] != null) {
        const memberEntries = se_LaunchTemplateHibernationOptionsRequest(input[_HO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HibernationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MO] != null) {
        const memberEntries = se_LaunchTemplateInstanceMetadataOptionsRequest(input[_MO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EOn] != null) {
        const memberEntries = se_LaunchTemplateEnclaveOptionsRequest(input[_EOn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnclaveOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IR] != null) {
        const memberEntries = se_InstanceRequirementsRequest(input[_IR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PDNO] != null) {
        const memberEntries = se_LaunchTemplatePrivateDnsNameOptionsRequest(input[_PDNO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateDnsNameOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MOa] != null) {
        const memberEntries = se_LaunchTemplateInstanceMaintenanceOptionsRequest(input[_MOa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DASi] != null) {
        entries[_DASi] = input[_DASi];
    }
    if (input[_O] != null) {
        const memberEntries = se_OperatorRequest(input[_O]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Operator.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NPO] != null) {
        const memberEntries = se_LaunchTemplateNetworkPerformanceOptionsRequest(input[_NPO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkPerformanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RequestSpotFleetRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SFRC] != null) {
        const memberEntries = se_SpotFleetRequestConfigData(input[_SFRC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotFleetRequestConfig.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RequestSpotInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_LSa] != null) {
        const memberEntries = se_RequestSpotLaunchSpecification(input[_LSa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIB] != null) {
        entries[_IIB] = input[_IIB];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SPp] != null) {
        entries[_SPp] = input[_SPp];
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_VF] != null) {
        entries[_VF] = smithyClient.serializeDateTime(input[_VF]);
    }
    if (input[_VU] != null) {
        entries[_VU] = smithyClient.serializeDateTime(input[_VU]);
    }
    if (input[_LG] != null) {
        entries[_LG] = input[_LG];
    }
    if (input[_AZG] != null) {
        entries[_AZG] = input[_AZG];
    }
    if (input[_BDMl] != null) {
        entries[_BDMl] = input[_BDMl];
    }
    return entries;
};
const se_RequestSpotLaunchSpecification = (input, context) => {
    const entries = {};
    if (input[_SGI] != null) {
        const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupIdList(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SG] != null) {
        const memberEntries = se_RequestSpotLaunchSpecificationSecurityGroupList(input[_SG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ATd] != null) {
        entries[_ATd] = input[_ATd];
    }
    if (input[_BDM] != null) {
        const memberEntries = se_BlockDeviceMappingList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    if (input[_IIP] != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_KI] != null) {
        entries[_KI] = input[_KI];
    }
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_Mon] != null) {
        const memberEntries = se_RunInstancesMonitoringEnabled(input[_Mon]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NI] != null) {
        const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Pl] != null) {
        const memberEntries = se_SpotPlacement(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RIa] != null) {
        entries[_RIa] = input[_RIa];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_UD] != null) {
        entries[_UD] = input[_UD];
    }
    return entries;
};
const se_RequestSpotLaunchSpecificationSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RequestSpotLaunchSpecificationSecurityGroupList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservationFleetInstanceSpecification = (input, context) => {
    const entries = {};
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_IPn] != null) {
        entries[_IPn] = input[_IPn];
    }
    if (input[_W] != null) {
        entries[_W] = smithyClient.serializeFloat(input[_W]);
    }
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    if (input[_Pri] != null) {
        entries[_Pri] = input[_Pri];
    }
    return entries;
};
const se_ReservationFleetInstanceSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ReservationFleetInstanceSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ReservedInstanceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservedInstanceLimitPrice = (input, context) => {
    const entries = {};
    if (input[_Am] != null) {
        entries[_Am] = smithyClient.serializeFloat(input[_Am]);
    }
    if (input[_CCu] != null) {
        entries[_CCu] = input[_CCu];
    }
    return entries;
};
const se_ReservedInstancesConfiguration = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_Pla] != null) {
        entries[_Pla] = input[_Pla];
    }
    if (input[_Sc] != null) {
        entries[_Sc] = input[_Sc];
    }
    if (input[_AZI] != null) {
        entries[_AZI] = input[_AZI];
    }
    return entries;
};
const se_ReservedInstancesConfigurationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ReservedInstancesConfiguration(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ReservedInstancesIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstancesId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservedInstancesModificationIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ReservedInstancesModificationId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ReservedInstancesOfferingIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResetAddressAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_AIl] != null) {
        entries[_AIl] = input[_AIl];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ResetEbsDefaultKmsKeyIdRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ResetFpgaImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_FII] != null) {
        entries[_FII] = input[_FII];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    return entries;
};
const se_ResetImageAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ResetInstanceAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    return entries;
};
const se_ResetNetworkInterfaceAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_SDC] != null) {
        entries[_SDC] = input[_SDC];
    }
    return entries;
};
const se_ResetSnapshotAttributeRequest = (input, context) => {
    const entries = {};
    if (input[_At] != null) {
        entries[_At] = input[_At];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ResourceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceStatementRequest = (input, context) => {
    const entries = {};
    if (input[_Re] != null) {
        const memberEntries = se_ValueStringList(input[_Re]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Resource.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_RTe] != null) {
        const memberEntries = se_ValueStringList(input[_RTe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceType.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResourceTypeOption = (input, context) => {
    const entries = {};
    if (input[_ON] != null) {
        entries[_ON] = input[_ON];
    }
    if (input[_OV] != null) {
        const memberEntries = se_ResourceTypeOptionValuesList(input[_OV]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OptionValue.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResourceTypeOptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ResourceTypeOption(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ResourceTypeOptionValuesList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ResourceTypeRequest = (input, context) => {
    const entries = {};
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_RTO] != null) {
        const memberEntries = se_ResourceTypeOptionList(input[_RTO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceTypeOption.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ResourceTypeRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ResourceTypeRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_RestorableByStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RestoreAddressToClassicRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PI] != null) {
        entries[_PI] = input[_PI];
    }
    return entries;
};
const se_RestoreImageFromRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RestoreManagedPrefixListVersionRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_PV] != null) {
        entries[_PV] = input[_PV];
    }
    if (input[_CVu] != null) {
        entries[_CVu] = input[_CVu];
    }
    return entries;
};
const se_RestoreSnapshotFromRecycleBinRequest = (input, context) => {
    const entries = {};
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RestoreSnapshotTierRequest = (input, context) => {
    const entries = {};
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_TRD] != null) {
        entries[_TRD] = input[_TRD];
    }
    if (input[_PRer] != null) {
        entries[_PRer] = input[_PRer];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RevokeClientVpnIngressRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_TNC] != null) {
        entries[_TNC] = input[_TNC];
    }
    if (input[_AGI] != null) {
        entries[_AGI] = input[_AGI];
    }
    if (input[_RAG] != null) {
        entries[_RAG] = input[_RAG];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RevokeSecurityGroupEgressRequest = (input, context) => {
    const entries = {};
    if (input[_SGRI] != null) {
        const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_SSGN] != null) {
        entries[_SSGN] = input[_SSGN];
    }
    if (input[_SSGOI] != null) {
        entries[_SSGOI] = input[_SSGOI];
    }
    if (input[_IPpr] != null) {
        entries[_IPpr] = input[_IPpr];
    }
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    if (input[_CIi] != null) {
        entries[_CIi] = input[_CIi];
    }
    if (input[_IPpe] != null) {
        const memberEntries = se_IpPermissionList(input[_IPpe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_RevokeSecurityGroupIngressRequest = (input, context) => {
    const entries = {};
    if (input[_CIi] != null) {
        entries[_CIi] = input[_CIi];
    }
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_IPpe] != null) {
        const memberEntries = se_IpPermissionList(input[_IPpe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IPpr] != null) {
        entries[_IPpr] = input[_IPpr];
    }
    if (input[_SSGN] != null) {
        entries[_SSGN] = input[_SSGN];
    }
    if (input[_SSGOI] != null) {
        entries[_SSGOI] = input[_SSGOI];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    if (input[_SGRI] != null) {
        const memberEntries = se_SecurityGroupRuleIdList(input[_SGRI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_RouteServerBgpOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_PAee] != null) {
        entries[_PAee] = input[_PAee];
    }
    if (input[_PLD] != null) {
        entries[_PLD] = input[_PLD];
    }
    return entries;
};
const se_RouteServerEndpointIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RouteServerIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RouteServerPeerIdsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RouteTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_RunInstancesMonitoringEnabled = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_RunInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_BDM] != null) {
        const memberEntries = se_BlockDeviceMappingRequestList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_IAC] != null) {
        entries[_IAC] = input[_IAC];
    }
    if (input[_IA] != null) {
        const memberEntries = se_InstanceIpv6AddressList(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_KI] != null) {
        entries[_KI] = input[_KI];
    }
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_MCa] != null) {
        entries[_MCa] = input[_MCa];
    }
    if (input[_MCi] != null) {
        entries[_MCi] = input[_MCi];
    }
    if (input[_Mon] != null) {
        const memberEntries = se_RunInstancesMonitoringEnabled(input[_Mon]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_Pl] != null) {
        const memberEntries = se_Placement(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RIa] != null) {
        entries[_RIa] = input[_RIa];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_SecurityGroupIdStringList(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SG] != null) {
        const memberEntries = se_SecurityGroupStringList(input[_SG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroup.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_UD] != null) {
        entries[_UD] = input[_UD];
    }
    if (input[_EGSl] != null) {
        const memberEntries = se_ElasticGpuSpecifications(input[_EGSl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticGpuSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EIA] != null) {
        const memberEntries = se_ElasticInferenceAccelerators(input[_EIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ElasticInferenceAccelerator.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LTa] != null) {
        const memberEntries = se_LaunchTemplateSpecification(input[_LTa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplate.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IMO] != null) {
        const memberEntries = se_InstanceMarketOptionsRequest(input[_IMO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceMarketOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CSred] != null) {
        const memberEntries = se_CreditSpecificationRequest(input[_CSred]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CreditSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_COp] != null) {
        const memberEntries = se_CpuOptionsRequest(input[_COp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CpuOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CRSa] != null) {
        const memberEntries = se_CapacityReservationSpecification(input[_CRSa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityReservationSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_HO] != null) {
        const memberEntries = se_HibernationOptionsRequest(input[_HO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `HibernationOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LSi] != null) {
        const memberEntries = se_LicenseSpecificationListRequest(input[_LSi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LicenseSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MO] != null) {
        const memberEntries = se_InstanceMetadataOptionsRequest(input[_MO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MetadataOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EOn] != null) {
        const memberEntries = se_EnclaveOptionsRequest(input[_EOn]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `EnclaveOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_PDNO] != null) {
        const memberEntries = se_PrivateDnsNameOptionsRequest(input[_PDNO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateDnsNameOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_MOa] != null) {
        const memberEntries = se_InstanceMaintenanceOptionsRequest(input[_MOa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DASi] != null) {
        entries[_DASi] = input[_DASi];
    }
    if (input[_EPI] != null) {
        entries[_EPI] = input[_EPI];
    }
    if (input[_NPO] != null) {
        const memberEntries = se_InstanceNetworkPerformanceOptionsRequest(input[_NPO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkPerformanceOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_O] != null) {
        const memberEntries = se_OperatorRequest(input[_O]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Operator.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_DATis] != null) {
        entries[_DATis] = input[_DATis];
    }
    if (input[_IISB] != null) {
        entries[_IISB] = input[_IISB];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_AId] != null) {
        entries[_AId] = input[_AId];
    }
    if (input[_NI] != null) {
        const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IIP] != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    return entries;
};
const se_RunScheduledInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_LSa] != null) {
        const memberEntries = se_ScheduledInstancesLaunchSpecification(input[_LSa]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecification.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SIIch] != null) {
        entries[_SIIch] = input[_SIIch];
    }
    return entries;
};
const se_S3ObjectTag = (input, context) => {
    const entries = {};
    if (input[_Ke] != null) {
        entries[_Ke] = input[_Ke];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_S3ObjectTagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_S3ObjectTag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_S3Storage = (input, context) => {
    const entries = {};
    if (input[_AWSAKI] != null) {
        entries[_AWSAKI] = input[_AWSAKI];
    }
    if (input[_B] != null) {
        entries[_B] = input[_B];
    }
    if (input[_Pr] != null) {
        entries[_Pr] = input[_Pr];
    }
    if (input[_UP] != null) {
        entries[_UP] = context.base64Encoder(input[_UP]);
    }
    if (input[_UPS] != null) {
        entries[_UPS] = input[_UPS];
    }
    return entries;
};
const se_ScheduledInstanceIdRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ScheduledInstanceId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ScheduledInstanceRecurrenceRequest = (input, context) => {
    const entries = {};
    if (input[_Fre] != null) {
        entries[_Fre] = input[_Fre];
    }
    if (input[_Int] != null) {
        entries[_Int] = input[_Int];
    }
    if (input[_OD] != null) {
        const memberEntries = se_OccurrenceDayRequestSet(input[_OD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `OccurrenceDay.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_ORTE] != null) {
        entries[_ORTE] = input[_ORTE];
    }
    if (input[_OU] != null) {
        entries[_OU] = input[_OU];
    }
    return entries;
};
const se_ScheduledInstancesBlockDeviceMapping = (input, context) => {
    const entries = {};
    if (input[_DN] != null) {
        entries[_DN] = input[_DN];
    }
    if (input[_E] != null) {
        const memberEntries = se_ScheduledInstancesEbs(input[_E]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ebs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ND] != null) {
        entries[_ND] = input[_ND];
    }
    if (input[_VN] != null) {
        entries[_VN] = input[_VN];
    }
    return entries;
};
const se_ScheduledInstancesBlockDeviceMappingSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesBlockDeviceMapping(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`BlockDeviceMapping.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScheduledInstancesEbs = (input, context) => {
    const entries = {};
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_Enc] != null) {
        entries[_Enc] = input[_Enc];
    }
    if (input[_Io] != null) {
        entries[_Io] = input[_Io];
    }
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_VS] != null) {
        entries[_VS] = input[_VS];
    }
    if (input[_VT] != null) {
        entries[_VT] = input[_VT];
    }
    return entries;
};
const se_ScheduledInstancesIamInstanceProfile = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    if (input[_N] != null) {
        entries[_N] = input[_N];
    }
    return entries;
};
const se_ScheduledInstancesIpv6Address = (input, context) => {
    const entries = {};
    if (input[_IApv] != null) {
        entries[_IApv] = input[_IApv];
    }
    return entries;
};
const se_ScheduledInstancesIpv6AddressList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesIpv6Address(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Ipv6Address.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScheduledInstancesLaunchSpecification = (input, context) => {
    const entries = {};
    if (input[_BDM] != null) {
        const memberEntries = se_ScheduledInstancesBlockDeviceMappingSet(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    if (input[_IIP] != null) {
        const memberEntries = se_ScheduledInstancesIamInstanceProfile(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_KI] != null) {
        entries[_KI] = input[_KI];
    }
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_Mon] != null) {
        const memberEntries = se_ScheduledInstancesMonitoring(input[_Mon]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NI] != null) {
        const memberEntries = se_ScheduledInstancesNetworkInterfaceSet(input[_NI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterface.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Pl] != null) {
        const memberEntries = se_ScheduledInstancesPlacement(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RIa] != null) {
        entries[_RIa] = input[_RIa];
    }
    if (input[_SGI] != null) {
        const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input[_SGI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_UD] != null) {
        entries[_UD] = input[_UD];
    }
    return entries;
};
const se_ScheduledInstancesMonitoring = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_ScheduledInstancesNetworkInterface = (input, context) => {
    const entries = {};
    if (input[_APIAs] != null) {
        entries[_APIAs] = input[_APIAs];
    }
    if (input[_DOT] != null) {
        entries[_DOT] = input[_DOT];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_DIev] != null) {
        entries[_DIev] = input[_DIev];
    }
    if (input[_G] != null) {
        const memberEntries = se_ScheduledInstancesSecurityGroupIdSet(input[_G]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Group.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IAC] != null) {
        entries[_IAC] = input[_IAC];
    }
    if (input[_IA] != null) {
        const memberEntries = se_ScheduledInstancesIpv6AddressList(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Address.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    if (input[_PIACr] != null) {
        const memberEntries = se_PrivateIpAddressConfigSet(input[_PIACr]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddressConfig.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPIAC] != null) {
        entries[_SPIAC] = input[_SPIAC];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    return entries;
};
const se_ScheduledInstancesNetworkInterfaceSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ScheduledInstancesNetworkInterface(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`NetworkInterface.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_ScheduledInstancesPlacement = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    return entries;
};
const se_ScheduledInstancesPrivateIpAddressConfig = (input, context) => {
    const entries = {};
    if (input[_Prim] != null) {
        entries[_Prim] = input[_Prim];
    }
    if (input[_PIAr] != null) {
        entries[_PIAr] = input[_PIAr];
    }
    return entries;
};
const se_ScheduledInstancesSecurityGroupIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SearchLocalGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input[_LGRTI] != null) {
        entries[_LGRTI] = input[_LGRTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_SearchTransitGatewayMulticastGroupsRequest = (input, context) => {
    const entries = {};
    if (input[_TGMDI] != null) {
        entries[_TGMDI] = input[_TGMDI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_NT] != null) {
        entries[_NT] = input[_NT];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_SearchTransitGatewayRoutesRequest = (input, context) => {
    const entries = {};
    if (input[_TGRTI] != null) {
        entries[_TGRTI] = input[_TGRTI];
    }
    if (input[_Fi] != null) {
        const memberEntries = se_FilterList(input[_Fi]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Filter.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MR] != null) {
        entries[_MR] = input[_MR];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_SecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupIdStringListRequest = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroupId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupRuleDescription = (input, context) => {
    const entries = {};
    if (input[_SGRIe] != null) {
        entries[_SGRIe] = input[_SGRIe];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    return entries;
};
const se_SecurityGroupRuleDescriptionList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SecurityGroupRuleDescription(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SecurityGroupRuleIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SecurityGroupRuleRequest = (input, context) => {
    const entries = {};
    if (input[_IPpr] != null) {
        entries[_IPpr] = input[_IPpr];
    }
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    if (input[_CIidr] != null) {
        entries[_CIidr] = input[_CIidr];
    }
    if (input[_CIid] != null) {
        entries[_CIid] = input[_CIid];
    }
    if (input[_PLI] != null) {
        entries[_PLI] = input[_PLI];
    }
    if (input[_RGI] != null) {
        entries[_RGI] = input[_RGI];
    }
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    return entries;
};
const se_SecurityGroupRuleUpdate = (input, context) => {
    const entries = {};
    if (input[_SGRIe] != null) {
        entries[_SGRIe] = input[_SGRIe];
    }
    if (input[_SGRe] != null) {
        const memberEntries = se_SecurityGroupRuleRequest(input[_SGRe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRule.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SecurityGroupRuleUpdateList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SecurityGroupRuleUpdate(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SecurityGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SecurityGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SendDiagnosticInterruptRequest = (input, context) => {
    const entries = {};
    if (input[_IIn] != null) {
        entries[_IIn] = input[_IIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ServiceLinkVirtualInterfaceIdSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SlotDateTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input[_ETa] != null) {
        entries[_ETa] = smithyClient.serializeDateTime(input[_ETa]);
    }
    if (input[_LTat] != null) {
        entries[_LTat] = smithyClient.serializeDateTime(input[_LTat]);
    }
    return entries;
};
const se_SlotStartTimeRangeRequest = (input, context) => {
    const entries = {};
    if (input[_ETa] != null) {
        entries[_ETa] = smithyClient.serializeDateTime(input[_ETa]);
    }
    if (input[_LTat] != null) {
        entries[_LTat] = smithyClient.serializeDateTime(input[_LTat]);
    }
    return entries;
};
const se_SnapshotDiskContainer = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_Fo] != null) {
        entries[_Fo] = input[_Fo];
    }
    if (input[_U] != null) {
        entries[_U] = input[_U];
    }
    if (input[_UB] != null) {
        const memberEntries = se_UserBucket(input[_UB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `UserBucket.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SnapshotIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SnapshotId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SpotCapacityRebalance = (input, context) => {
    const entries = {};
    if (input[_RS] != null) {
        entries[_RS] = input[_RS];
    }
    if (input[_TDe] != null) {
        entries[_TDe] = input[_TDe];
    }
    return entries;
};
const se_SpotFleetLaunchSpecification = (input, context) => {
    const entries = {};
    if (input[_ATd] != null) {
        entries[_ATd] = input[_ATd];
    }
    if (input[_BDM] != null) {
        const memberEntries = se_BlockDeviceMappingList(input[_BDM]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `BlockDeviceMapping.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_EO] != null) {
        entries[_EO] = input[_EO];
    }
    if (input[_IIP] != null) {
        const memberEntries = se_IamInstanceProfileSpecification(input[_IIP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IamInstanceProfile.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIma] != null) {
        entries[_IIma] = input[_IIma];
    }
    if (input[_IT] != null) {
        entries[_IT] = input[_IT];
    }
    if (input[_KI] != null) {
        entries[_KI] = input[_KI];
    }
    if (input[_KN] != null) {
        entries[_KN] = input[_KN];
    }
    if (input[_Mon] != null) {
        const memberEntries = se_SpotFleetMonitoring(input[_Mon]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Monitoring.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_NI] != null) {
        const memberEntries = se_InstanceNetworkInterfaceSpecificationList(input[_NI]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `NetworkInterfaceSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Pl] != null) {
        const memberEntries = se_SpotPlacement(input[_Pl]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Placement.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_RIa] != null) {
        entries[_RIa] = input[_RIa];
    }
    if (input[_SPp] != null) {
        entries[_SPp] = input[_SPp];
    }
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_UD] != null) {
        entries[_UD] = input[_UD];
    }
    if (input[_WCe] != null) {
        entries[_WCe] = smithyClient.serializeFloat(input[_WCe]);
    }
    if (input[_TS] != null) {
        const memberEntries = se_SpotFleetTagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecificationSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IR] != null) {
        const memberEntries = se_InstanceRequirements(input[_IR]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceRequirements.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_SG] != null) {
        const memberEntries = se_GroupIdentifierList(input[_SG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `GroupSet.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotFleetMonitoring = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    return entries;
};
const se_SpotFleetRequestConfigData = (input, context) => {
    const entries = {};
    if (input[_AS] != null) {
        entries[_AS] = input[_AS];
    }
    if (input[_ODAS] != null) {
        entries[_ODAS] = input[_ODAS];
    }
    if (input[_SMS] != null) {
        const memberEntries = se_SpotMaintenanceStrategies(input[_SMS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SpotMaintenanceStrategies.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    if (input[_ECTP] != null) {
        entries[_ECTP] = input[_ECTP];
    }
    if (input[_FC] != null) {
        entries[_FC] = smithyClient.serializeFloat(input[_FC]);
    }
    if (input[_ODFC] != null) {
        entries[_ODFC] = smithyClient.serializeFloat(input[_ODFC]);
    }
    if (input[_IFR] != null) {
        entries[_IFR] = input[_IFR];
    }
    if (input[_LSau] != null) {
        const memberEntries = se_LaunchSpecsList(input[_LSau]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchSpecifications.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LTC] != null) {
        const memberEntries = se_LaunchTemplateConfigList(input[_LTC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LaunchTemplateConfigs.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SPp] != null) {
        entries[_SPp] = input[_SPp];
    }
    if (input[_TCa] != null) {
        entries[_TCa] = input[_TCa];
    }
    if (input[_ODTC] != null) {
        entries[_ODTC] = input[_ODTC];
    }
    if (input[_ODMTP] != null) {
        entries[_ODMTP] = input[_ODMTP];
    }
    if (input[_SMTP] != null) {
        entries[_SMTP] = input[_SMTP];
    }
    if (input[_TIWE] != null) {
        entries[_TIWE] = input[_TIWE];
    }
    if (input[_T] != null) {
        entries[_T] = input[_T];
    }
    if (input[_VF] != null) {
        entries[_VF] = smithyClient.serializeDateTime(input[_VF]);
    }
    if (input[_VU] != null) {
        entries[_VU] = smithyClient.serializeDateTime(input[_VU]);
    }
    if (input[_RUI] != null) {
        entries[_RUI] = input[_RUI];
    }
    if (input[_IIB] != null) {
        entries[_IIB] = input[_IIB];
    }
    if (input[_LBC] != null) {
        const memberEntries = se_LoadBalancersConfig(input[_LBC]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LoadBalancersConfig.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IPTUC] != null) {
        entries[_IPTUC] = input[_IPTUC];
    }
    if (input[_Con] != null) {
        entries[_Con] = input[_Con];
    }
    if (input[_TCUT] != null) {
        entries[_TCUT] = input[_TCUT];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotFleetRequestIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SpotFleetTagSpecification = (input, context) => {
    const entries = {};
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotFleetTagSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SpotFleetTagSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SpotInstanceRequestIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SpotInstanceRequestId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SpotMaintenanceStrategies = (input, context) => {
    const entries = {};
    if (input[_CRap] != null) {
        const memberEntries = se_SpotCapacityRebalance(input[_CRap]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CapacityRebalance.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_SpotMarketOptions = (input, context) => {
    const entries = {};
    if (input[_MPa] != null) {
        entries[_MPa] = input[_MPa];
    }
    if (input[_SIT] != null) {
        entries[_SIT] = input[_SIT];
    }
    if (input[_BDMl] != null) {
        entries[_BDMl] = input[_BDMl];
    }
    if (input[_VU] != null) {
        entries[_VU] = smithyClient.serializeDateTime(input[_VU]);
    }
    if (input[_IIB] != null) {
        entries[_IIB] = input[_IIB];
    }
    return entries;
};
const se_SpotOptionsRequest = (input, context) => {
    const entries = {};
    if (input[_AS] != null) {
        entries[_AS] = input[_AS];
    }
    if (input[_MS] != null) {
        const memberEntries = se_FleetSpotMaintenanceStrategiesRequest(input[_MS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `MaintenanceStrategies.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_IIB] != null) {
        entries[_IIB] = input[_IIB];
    }
    if (input[_IPTUC] != null) {
        entries[_IPTUC] = input[_IPTUC];
    }
    if (input[_SITi] != null) {
        entries[_SITi] = input[_SITi];
    }
    if (input[_SAZ] != null) {
        entries[_SAZ] = input[_SAZ];
    }
    if (input[_MTC] != null) {
        entries[_MTC] = input[_MTC];
    }
    if (input[_MTP] != null) {
        entries[_MTP] = input[_MTP];
    }
    return entries;
};
const se_SpotPlacement = (input, context) => {
    const entries = {};
    if (input[_AZ] != null) {
        entries[_AZ] = input[_AZ];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_Te] != null) {
        entries[_Te] = input[_Te];
    }
    return entries;
};
const se_StartDeclarativePoliciesReportRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    if (input[_SP] != null) {
        entries[_SP] = input[_SP];
    }
    if (input[_TIa] != null) {
        entries[_TIa] = input[_TIa];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_StartInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_AId] != null) {
        entries[_AId] = input[_AId];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_StartNetworkInsightsAccessScopeAnalysisRequest = (input, context) => {
    const entries = {};
    if (input[_NIASI] != null) {
        entries[_NIASI] = input[_NIASI];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_StartNetworkInsightsAnalysisRequest = (input, context) => {
    const entries = {};
    if (input[_NIPI] != null) {
        entries[_NIPI] = input[_NIPI];
    }
    if (input[_AAd] != null) {
        const memberEntries = se_ValueStringList(input[_AAd]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `AdditionalAccount.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_FIA] != null) {
        const memberEntries = se_ArnList(input[_FIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterInArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_FOA] != null) {
        const memberEntries = se_ArnList(input[_FOA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `FilterOutArn.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_TS] != null) {
        const memberEntries = se_TagSpecificationList(input[_TS]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TagSpecification.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_CTl] === undefined) {
        input[_CTl] = uuid.v4();
    }
    if (input[_CTl] != null) {
        entries[_CTl] = input[_CTl];
    }
    return entries;
};
const se_StartVpcEndpointServicePrivateDnsVerificationRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_SIe] != null) {
        entries[_SIe] = input[_SIe];
    }
    return entries;
};
const se_StopInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_Hi] != null) {
        entries[_Hi] = input[_Hi];
    }
    if (input[_SOS] != null) {
        entries[_SOS] = input[_SOS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    return entries;
};
const se_Storage = (input, context) => {
    const entries = {};
    if (input[_S_] != null) {
        const memberEntries = se_S3Storage(input[_S_], context);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_StorageLocation = (input, context) => {
    const entries = {};
    if (input[_B] != null) {
        entries[_B] = input[_B];
    }
    if (input[_Ke] != null) {
        entries[_Ke] = input[_Ke];
    }
    return entries;
};
const se_SubnetConfiguration = (input, context) => {
    const entries = {};
    if (input[_SIub] != null) {
        entries[_SIub] = input[_SIub];
    }
    if (input[_Ip] != null) {
        entries[_Ip] = input[_Ip];
    }
    if (input[_Ipv] != null) {
        entries[_Ipv] = input[_Ipv];
    }
    return entries;
};
const se_SubnetConfigurationsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_SubnetConfiguration(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_SubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`AssociatedSubnetId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_SubnetIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`SubnetId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_Tag = (input, context) => {
    const entries = {};
    if (input[_Ke] != null) {
        entries[_Ke] = input[_Ke];
    }
    if (input[_Va] != null) {
        entries[_Va] = input[_Va];
    }
    return entries;
};
const se_TagList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_Tag(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TagSpecification = (input, context) => {
    const entries = {};
    if (input[_RT] != null) {
        entries[_RT] = input[_RT];
    }
    if (input[_Ta] != null) {
        const memberEntries = se_TagList(input[_Ta]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Tag.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TagSpecificationList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TagSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TargetCapacitySpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_TTC] != null) {
        entries[_TTC] = input[_TTC];
    }
    if (input[_ODTC] != null) {
        entries[_ODTC] = input[_ODTC];
    }
    if (input[_STC] != null) {
        entries[_STC] = input[_STC];
    }
    if (input[_DTCT] != null) {
        entries[_DTCT] = input[_DTCT];
    }
    if (input[_TCUT] != null) {
        entries[_TCUT] = input[_TCUT];
    }
    return entries;
};
const se_TargetConfigurationRequest = (input, context) => {
    const entries = {};
    if (input[_IC] != null) {
        entries[_IC] = input[_IC];
    }
    if (input[_OI] != null) {
        entries[_OI] = input[_OI];
    }
    return entries;
};
const se_TargetConfigurationRequestSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TargetConfigurationRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`TargetConfigurationRequest.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TargetGroup = (input, context) => {
    const entries = {};
    if (input[_Ar] != null) {
        entries[_Ar] = input[_Ar];
    }
    return entries;
};
const se_TargetGroups = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_TargetGroup(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TargetGroupsConfig = (input, context) => {
    const entries = {};
    if (input[_TG] != null) {
        const memberEntries = se_TargetGroups(input[_TG]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TargetGroups.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TerminateClientVpnConnectionsRequest = (input, context) => {
    const entries = {};
    if (input[_CVEI] != null) {
        entries[_CVEI] = input[_CVEI];
    }
    if (input[_CIo] != null) {
        entries[_CIo] = input[_CIo];
    }
    if (input[_Us] != null) {
        entries[_Us] = input[_Us];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_TerminateInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_F] != null) {
        entries[_F] = input[_F];
    }
    if (input[_SOS] != null) {
        entries[_SOS] = input[_SOS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ThroughResourcesStatementRequest = (input, context) => {
    const entries = {};
    if (input[_RSe] != null) {
        const memberEntries = se_ResourceStatementRequest(input[_RSe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `ResourceStatement.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_ThroughResourcesStatementRequestList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_ThroughResourcesStatementRequest(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_TotalLocalStorageGB = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = smithyClient.serializeFloat(input[_M]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_TotalLocalStorageGBRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = smithyClient.serializeFloat(input[_M]);
    }
    if (input[_Ma] != null) {
        entries[_Ma] = smithyClient.serializeFloat(input[_Ma]);
    }
    return entries;
};
const se_TrafficMirrorFilterIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorFilterRuleFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorFilterRuleIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorNetworkServiceList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorPortRangeRequest = (input, context) => {
    const entries = {};
    if (input[_FP] != null) {
        entries[_FP] = input[_FP];
    }
    if (input[_TP] != null) {
        entries[_TP] = input[_TP];
    }
    return entries;
};
const se_TrafficMirrorSessionFieldList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorSessionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrafficMirrorTargetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayAttachmentIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Member.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayCidrBlockStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayConnectPeerIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayConnectRequestBgpOptions = (input, context) => {
    const entries = {};
    if (input[_PAee] != null) {
        entries[_PAee] = input[_PAee];
    }
    return entries;
};
const se_TransitGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayMulticastDomainIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayNetworkInterfaceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayPolicyTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayRequestOptions = (input, context) => {
    const entries = {};
    if (input[_ASA] != null) {
        entries[_ASA] = input[_ASA];
    }
    if (input[_AASAu] != null) {
        entries[_AASAu] = input[_AASAu];
    }
    if (input[_DRTA] != null) {
        entries[_DRTA] = input[_DRTA];
    }
    if (input[_DRTP] != null) {
        entries[_DRTP] = input[_DRTP];
    }
    if (input[_VES] != null) {
        entries[_VES] = input[_VES];
    }
    if (input[_DSns] != null) {
        entries[_DSns] = input[_DSns];
    }
    if (input[_SGRS] != null) {
        entries[_SGRS] = input[_SGRS];
    }
    if (input[_MSu] != null) {
        entries[_MSu] = input[_MSu];
    }
    if (input[_TGCB] != null) {
        const memberEntries = se_TransitGatewayCidrBlockStringList(input[_TGCB]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TransitGatewayCidrBlocks.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_TransitGatewayRouteTableAnnouncementIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewayRouteTableIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TransitGatewaySubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_TrunkInterfaceAssociationIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_UnassignIpv6AddressesRequest = (input, context) => {
    const entries = {};
    if (input[_IP] != null) {
        const memberEntries = se_IpPrefixList(input[_IP]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_IA] != null) {
        const memberEntries = se_Ipv6AddressList(input[_IA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv6Addresses.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UnassignPrivateIpAddressesRequest = (input, context) => {
    const entries = {};
    if (input[_IPp] != null) {
        const memberEntries = se_IpPrefixList(input[_IPp]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Ipv4Prefix.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_NII] != null) {
        entries[_NII] = input[_NII];
    }
    if (input[_PIA] != null) {
        const memberEntries = se_PrivateIpAddressStringList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UnassignPrivateNatGatewayAddressRequest = (input, context) => {
    const entries = {};
    if (input[_NGI] != null) {
        entries[_NGI] = input[_NGI];
    }
    if (input[_PIA] != null) {
        const memberEntries = se_IpList(input[_PIA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `PrivateIpAddress.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_MDDS] != null) {
        entries[_MDDS] = input[_MDDS];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_UnlockSnapshotRequest = (input, context) => {
    const entries = {};
    if (input[_SIn] != null) {
        entries[_SIn] = input[_SIn];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_UnmonitorInstancesRequest = (input, context) => {
    const entries = {};
    if (input[_IIns] != null) {
        const memberEntries = se_InstanceIdStringList(input[_IIns]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `InstanceId.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_UpdateSecurityGroupRuleDescriptionsEgressRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_IPpe] != null) {
        const memberEntries = se_IpPermissionList(input[_IPpe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SGRD] != null) {
        const memberEntries = se_SecurityGroupRuleDescriptionList(input[_SGRD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UpdateSecurityGroupRuleDescriptionsIngressRequest = (input, context) => {
    const entries = {};
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_IPpe] != null) {
        const memberEntries = se_IpPermissionList(input[_IPpe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IpPermissions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SGRD] != null) {
        const memberEntries = se_SecurityGroupRuleDescriptionList(input[_SGRD]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `SecurityGroupRuleDescription.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_UserBucket = (input, context) => {
    const entries = {};
    if (input[_SB] != null) {
        entries[_SB] = input[_SB];
    }
    if (input[_SK] != null) {
        entries[_SK] = input[_SK];
    }
    return entries;
};
const se_UserData = (input, context) => {
    const entries = {};
    if (input[_Da] != null) {
        entries[_Da] = input[_Da];
    }
    return entries;
};
const se_UserGroupStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserGroup.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_UserIdGroupPair = (input, context) => {
    const entries = {};
    if (input[_De] != null) {
        entries[_De] = input[_De];
    }
    if (input[_UIs] != null) {
        entries[_UIs] = input[_UIs];
    }
    if (input[_GN] != null) {
        entries[_GN] = input[_GN];
    }
    if (input[_GIr] != null) {
        entries[_GIr] = input[_GIr];
    }
    if (input[_VI] != null) {
        entries[_VI] = input[_VI];
    }
    if (input[_VPCI] != null) {
        entries[_VPCI] = input[_VPCI];
    }
    if (input[_PSe] != null) {
        entries[_PSe] = input[_PSe];
    }
    return entries;
};
const se_UserIdGroupPairList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_UserIdGroupPair(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Item.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_UserIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`UserId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ValueStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VCpuCountRange = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_VCpuCountRangeRequest = (input, context) => {
    const entries = {};
    if (input[_M] != null) {
        entries[_M] = input[_M];
    }
    if (input[_Ma] != null) {
        entries[_Ma] = input[_Ma];
    }
    return entries;
};
const se_VerifiedAccessEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VerifiedAccessGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VerifiedAccessInstanceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VerifiedAccessLogCloudWatchLogsDestinationOptions = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    if (input[_LGo] != null) {
        entries[_LGo] = input[_LGo];
    }
    return entries;
};
const se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    if (input[_DSel] != null) {
        entries[_DSel] = input[_DSel];
    }
    return entries;
};
const se_VerifiedAccessLogOptions = (input, context) => {
    const entries = {};
    if (input[_S_] != null) {
        const memberEntries = se_VerifiedAccessLogS3DestinationOptions(input[_S_]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `S3.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_CWL] != null) {
        const memberEntries = se_VerifiedAccessLogCloudWatchLogsDestinationOptions(input[_CWL]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudWatchLogs.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_KDF] != null) {
        const memberEntries = se_VerifiedAccessLogKinesisDataFirehoseDestinationOptions(input[_KDF]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `KinesisDataFirehose.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_LV] != null) {
        entries[_LV] = input[_LV];
    }
    if (input[_ITCn] != null) {
        entries[_ITCn] = input[_ITCn];
    }
    return entries;
};
const se_VerifiedAccessLogS3DestinationOptions = (input, context) => {
    const entries = {};
    if (input[_En] != null) {
        entries[_En] = input[_En];
    }
    if (input[_BN] != null) {
        entries[_BN] = input[_BN];
    }
    if (input[_Pr] != null) {
        entries[_Pr] = input[_Pr];
    }
    if (input[_BOu] != null) {
        entries[_BOu] = input[_BOu];
    }
    return entries;
};
const se_VerifiedAccessSseSpecificationRequest = (input, context) => {
    const entries = {};
    if (input[_CMKE] != null) {
        entries[_CMKE] = input[_CMKE];
    }
    if (input[_KKA] != null) {
        entries[_KKA] = input[_KKA];
    }
    return entries;
};
const se_VerifiedAccessTrustProviderIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VersionStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VirtualizationTypeSet = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VolumeDetail = (input, context) => {
    const entries = {};
    if (input[_Siz] != null) {
        entries[_Siz] = input[_Siz];
    }
    return entries;
};
const se_VolumeIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VolumeId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcBlockPublicAccessExclusionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcClassicLinkIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointRouteTableIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointSecurityGroupIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointServiceIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcEndpointSubnetIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpcId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpcPeeringConnectionIdList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`Item.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpnConnectionIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpnConnectionId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpnConnectionOptionsSpecification = (input, context) => {
    const entries = {};
    if (input[_EA] != null) {
        entries[_EA] = input[_EA];
    }
    if (input[_TIIV] != null) {
        entries[_TIIV] = input[_TIIV];
    }
    if (input[_TO] != null) {
        const memberEntries = se_VpnTunnelOptionsSpecificationsList(input[_TO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `TunnelOptions.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_LINC] != null) {
        entries[_LINC] = input[_LINC];
    }
    if (input[_RINC] != null) {
        entries[_RINC] = input[_RINC];
    }
    if (input[_LINCo] != null) {
        entries[_LINCo] = input[_LINCo];
    }
    if (input[_RINCe] != null) {
        entries[_RINCe] = input[_RINCe];
    }
    if (input[_OIAT] != null) {
        entries[_OIAT] = input[_OIAT];
    }
    if (input[_TTGAI] != null) {
        entries[_TTGAI] = input[_TTGAI];
    }
    if (input[_SRO] != null) {
        entries[_SRO] = input[_SRO];
    }
    return entries;
};
const se_VpnGatewayIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`VpnGatewayId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_VpnTunnelLogOptionsSpecification = (input, context) => {
    const entries = {};
    if (input[_CWLO] != null) {
        const memberEntries = se_CloudWatchLogOptionsSpecification(input[_CWLO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `CloudWatchLogOptions.${key}`;
            entries[loc] = value;
        });
    }
    return entries;
};
const se_VpnTunnelOptionsSpecification = (input, context) => {
    const entries = {};
    if (input[_TIC] != null) {
        entries[_TIC] = input[_TIC];
    }
    if (input[_TIIC] != null) {
        entries[_TIIC] = input[_TIIC];
    }
    if (input[_PSK] != null) {
        entries[_PSK] = input[_PSK];
    }
    if (input[_PLS] != null) {
        entries[_PLS] = input[_PLS];
    }
    if (input[_PLSh] != null) {
        entries[_PLSh] = input[_PLSh];
    }
    if (input[_RMTS] != null) {
        entries[_RMTS] = input[_RMTS];
    }
    if (input[_RFP] != null) {
        entries[_RFP] = input[_RFP];
    }
    if (input[_RWS] != null) {
        entries[_RWS] = input[_RWS];
    }
    if (input[_DPDTS] != null) {
        entries[_DPDTS] = input[_DPDTS];
    }
    if (input[_DPDTA] != null) {
        entries[_DPDTA] = input[_DPDTA];
    }
    if (input[_PEA] != null) {
        const memberEntries = se_Phase1EncryptionAlgorithmsRequestList(input[_PEA]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PEAh] != null) {
        const memberEntries = se_Phase2EncryptionAlgorithmsRequestList(input[_PEAh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2EncryptionAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIAh] != null) {
        const memberEntries = se_Phase1IntegrityAlgorithmsRequestList(input[_PIAh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PIAha] != null) {
        const memberEntries = se_Phase2IntegrityAlgorithmsRequestList(input[_PIAha]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2IntegrityAlgorithm.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PDHGN] != null) {
        const memberEntries = se_Phase1DHGroupNumbersRequestList(input[_PDHGN]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase1DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_PDHGNh] != null) {
        const memberEntries = se_Phase2DHGroupNumbersRequestList(input[_PDHGNh]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `Phase2DHGroupNumber.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_IKEVe] != null) {
        const memberEntries = se_IKEVersionsRequestList(input[_IKEVe]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `IKEVersion.${key.substring(key.indexOf(".") + 1)}`;
            entries[loc] = value;
        });
    }
    if (input[_SA] != null) {
        entries[_SA] = input[_SA];
    }
    if (input[_LO] != null) {
        const memberEntries = se_VpnTunnelLogOptionsSpecification(input[_LO]);
        Object.entries(memberEntries).forEach(([key, value]) => {
            const loc = `LogOptions.${key}`;
            entries[loc] = value;
        });
    }
    if (input[_ETLC] != null) {
        entries[_ETLC] = input[_ETLC];
    }
    return entries;
};
const se_VpnTunnelOptionsSpecificationsList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        const memberEntries = se_VpnTunnelOptionsSpecification(entry);
        Object.entries(memberEntries).forEach(([key, value]) => {
            entries[`Member.${counter}.${key}`] = value;
        });
        counter++;
    }
    return entries;
};
const se_WithdrawByoipCidrRequest = (input, context) => {
    const entries = {};
    if (input[_C] != null) {
        entries[_C] = input[_C];
    }
    if (input[_DRr] != null) {
        entries[_DRr] = input[_DRr];
    }
    return entries;
};
const se_ZoneIdStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ZoneId.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const se_ZoneNameStringList = (input, context) => {
    const entries = {};
    let counter = 1;
    for (const entry of input) {
        if (entry === null) {
            continue;
        }
        entries[`ZoneName.${counter}`] = entry;
        counter++;
    }
    return entries;
};
const de_AcceleratorCount = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseInt32(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseInt32(output[_ma]);
    }
    return contents;
};
const de_AcceleratorManufacturerSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AcceleratorNameSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AcceleratorTotalMemoryMiB = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseInt32(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseInt32(output[_ma]);
    }
    return contents;
};
const de_AcceleratorTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AcceptAddressTransferResult = (output, context) => {
    const contents = {};
    if (output[_aT] != null) {
        contents[_ATdd] = de_AddressTransfer(output[_aT]);
    }
    return contents;
};
const de_AcceptCapacityReservationBillingOwnershipResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_AcceptReservedInstancesExchangeQuoteResult = (output, context) => {
    const contents = {};
    if (output[_eI] != null) {
        contents[_EIxch] = smithyClient.expectString(output[_eI]);
    }
    return contents;
};
const de_AcceptTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {};
    if (output[_a] != null) {
        contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a]);
    }
    return contents;
};
const de_AcceptTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGPA] != null) {
        contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA]);
    }
    return contents;
};
const de_AcceptTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGVA] != null) {
        contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA]);
    }
    return contents;
};
const de_AcceptVpcEndpointConnectionsResult = (output, context) => {
    const contents = {};
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_AcceptVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output[_vPC] != null) {
        contents[_VPC] = de_VpcPeeringConnection(output[_vPC]);
    }
    return contents;
};
const de_AccessScopeAnalysisFinding = (output, context) => {
    const contents = {};
    if (output[_nIASAI] != null) {
        contents[_NIASAI] = smithyClient.expectString(output[_nIASAI]);
    }
    if (output[_nIASI] != null) {
        contents[_NIASI] = smithyClient.expectString(output[_nIASI]);
    }
    if (output[_fI] != null) {
        contents[_FIi] = smithyClient.expectString(output[_fI]);
    }
    if (String(output.findingComponentSet).trim() === "") {
        contents[_FCi] = [];
    }
    else if (output[_fCS] != null && output[_fCS][_i] != null) {
        contents[_FCi] = de_PathComponentList(smithyClient.getArrayIfSingleItem(output[_fCS][_i]));
    }
    return contents;
};
const de_AccessScopeAnalysisFindingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessScopeAnalysisFinding(entry);
    });
};
const de_AccessScopePath = (output, context) => {
    const contents = {};
    if (output[_s] != null) {
        contents[_S] = de_PathStatement(output[_s]);
    }
    if (output[_d] != null) {
        contents[_D] = de_PathStatement(output[_d]);
    }
    if (String(output.throughResourceSet).trim() === "") {
        contents[_TR] = [];
    }
    else if (output[_tRS] != null && output[_tRS][_i] != null) {
        contents[_TR] = de_ThroughResourcesStatementList(smithyClient.getArrayIfSingleItem(output[_tRS][_i]));
    }
    return contents;
};
const de_AccessScopePathList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccessScopePath(entry);
    });
};
const de_AccountAttribute = (output, context) => {
    const contents = {};
    if (output[_aN] != null) {
        contents[_ANt] = smithyClient.expectString(output[_aN]);
    }
    if (String(output.attributeValueSet).trim() === "") {
        contents[_AVt] = [];
    }
    else if (output[_aVS] != null && output[_aVS][_i] != null) {
        contents[_AVt] = de_AccountAttributeValueList(smithyClient.getArrayIfSingleItem(output[_aVS][_i]));
    }
    return contents;
};
const de_AccountAttributeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountAttribute(entry);
    });
};
const de_AccountAttributeValue = (output, context) => {
    const contents = {};
    if (output[_aV] != null) {
        contents[_AVtt] = smithyClient.expectString(output[_aV]);
    }
    return contents;
};
const de_AccountAttributeValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AccountAttributeValue(entry);
    });
};
const de_ActiveInstance = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_sIRI] != null) {
        contents[_SIRIp] = smithyClient.expectString(output[_sIRI]);
    }
    if (output[_iH] != null) {
        contents[_IH] = smithyClient.expectString(output[_iH]);
    }
    return contents;
};
const de_ActiveInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActiveInstance(entry);
    });
};
const de_ActiveVpnTunnelStatus = (output, context) => {
    const contents = {};
    if (output[_pEA] != null) {
        contents[_PEAha] = smithyClient.expectString(output[_pEA]);
    }
    if (output[_pEAh] != null) {
        contents[_PEAhas] = smithyClient.expectString(output[_pEAh]);
    }
    if (output[_pIA] != null) {
        contents[_PIAhas] = smithyClient.expectString(output[_pIA]);
    }
    if (output[_pIAh] != null) {
        contents[_PIAhase] = smithyClient.expectString(output[_pIAh]);
    }
    if (output[_pDHG] != null) {
        contents[_PDHG] = smithyClient.strictParseInt32(output[_pDHG]);
    }
    if (output[_pDHGh] != null) {
        contents[_PDHGh] = smithyClient.strictParseInt32(output[_pDHGh]);
    }
    if (output[_iV] != null) {
        contents[_IVk] = smithyClient.expectString(output[_iV]);
    }
    if (output[_pS] != null) {
        contents[_PSr] = smithyClient.expectString(output[_pS]);
    }
    if (output[_pSR] != null) {
        contents[_PSR] = smithyClient.expectString(output[_pSR]);
    }
    return contents;
};
const de_AddedPrincipal = (output, context) => {
    const contents = {};
    if (output[_pT] != null) {
        contents[_PTr] = smithyClient.expectString(output[_pT]);
    }
    if (output[_p] != null) {
        contents[_Prin] = smithyClient.expectString(output[_p]);
    }
    if (output[_sPI] != null) {
        contents[_SPI] = smithyClient.expectString(output[_sPI]);
    }
    if (output[_sI] != null) {
        contents[_SIe] = smithyClient.expectString(output[_sI]);
    }
    return contents;
};
const de_AddedPrincipalSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AddedPrincipal(entry);
    });
};
const de_AdditionalDetail = (output, context) => {
    const contents = {};
    if (output[_aDT] != null) {
        contents[_ADT] = smithyClient.expectString(output[_aDT]);
    }
    if (output[_c] != null) {
        contents[_Com] = de_AnalysisComponent(output[_c]);
    }
    if (output[_vES] != null) {
        contents[_VESp] = de_AnalysisComponent(output[_vES]);
    }
    if (String(output.ruleOptionSet).trim() === "") {
        contents[_ROu] = [];
    }
    else if (output[_rOS] != null && output[_rOS][_i] != null) {
        contents[_ROu] = de_RuleOptionList(smithyClient.getArrayIfSingleItem(output[_rOS][_i]));
    }
    if (String(output.ruleGroupTypePairSet).trim() === "") {
        contents[_RGTP] = [];
    }
    else if (output[_rGTPS] != null && output[_rGTPS][_i] != null) {
        contents[_RGTP] = de_RuleGroupTypePairList(smithyClient.getArrayIfSingleItem(output[_rGTPS][_i]));
    }
    if (String(output.ruleGroupRuleOptionsPairSet).trim() === "") {
        contents[_RGROP] = [];
    }
    else if (output[_rGROPS] != null && output[_rGROPS][_i] != null) {
        contents[_RGROP] = de_RuleGroupRuleOptionsPairList(smithyClient.getArrayIfSingleItem(output[_rGROPS][_i]));
    }
    if (output[_sN] != null) {
        contents[_SNe] = smithyClient.expectString(output[_sN]);
    }
    if (String(output.loadBalancerSet).trim() === "") {
        contents[_LB] = [];
    }
    else if (output[_lBS] != null && output[_lBS][_i] != null) {
        contents[_LB] = de_AnalysisComponentList(smithyClient.getArrayIfSingleItem(output[_lBS][_i]));
    }
    return contents;
};
const de_AdditionalDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdditionalDetail(entry);
    });
};
const de_Address = (output, context) => {
    const contents = {};
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_do] != null) {
        contents[_Do] = smithyClient.expectString(output[_do]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_nIOI] != null) {
        contents[_NIOI] = smithyClient.expectString(output[_nIOI]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_pIP] != null) {
        contents[_PIP] = smithyClient.expectString(output[_pIP]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    if (output[_cOI] != null) {
        contents[_COI] = smithyClient.expectString(output[_cOI]);
    }
    if (output[_cOIP] != null) {
        contents[_COIP] = smithyClient.expectString(output[_cOIP]);
    }
    if (output[_cI] != null) {
        contents[_CIa] = smithyClient.expectString(output[_cI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_sM] != null) {
        contents[_SM] = smithyClient.expectString(output[_sM]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    return contents;
};
const de_AddressAttribute = (output, context) => {
    const contents = {};
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_pR] != null) {
        contents[_PRt] = smithyClient.expectString(output[_pR]);
    }
    if (output[_pRU] != null) {
        contents[_PRU] = de_PtrUpdateStatus(output[_pRU]);
    }
    return contents;
};
const de_AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Address(entry);
    });
};
const de_AddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AddressAttribute(entry);
    });
};
const de_AddressTransfer = (output, context) => {
    const contents = {};
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_tAI] != null) {
        contents[_TAI] = smithyClient.expectString(output[_tAI]);
    }
    if (output[_tOET] != null) {
        contents[_TOET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_tOET]));
    }
    if (output[_tOAT] != null) {
        contents[_TOAT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_tOAT]));
    }
    if (output[_aTS] != null) {
        contents[_ATS] = smithyClient.expectString(output[_aTS]);
    }
    return contents;
};
const de_AddressTransferList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AddressTransfer(entry);
    });
};
const de_AdvertiseByoipCidrResult = (output, context) => {
    const contents = {};
    if (output[_bC] != null) {
        contents[_BC] = de_ByoipCidr(output[_bC]);
    }
    return contents;
};
const de_AllocateAddressResult = (output, context) => {
    const contents = {};
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_pIP] != null) {
        contents[_PIP] = smithyClient.expectString(output[_pIP]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    if (output[_do] != null) {
        contents[_Do] = smithyClient.expectString(output[_do]);
    }
    if (output[_cOI] != null) {
        contents[_COI] = smithyClient.expectString(output[_cOI]);
    }
    if (output[_cOIP] != null) {
        contents[_COIP] = smithyClient.expectString(output[_cOIP]);
    }
    if (output[_cI] != null) {
        contents[_CIa] = smithyClient.expectString(output[_cI]);
    }
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    return contents;
};
const de_AllocateHostsResult = (output, context) => {
    const contents = {};
    if (String(output.hostIdSet).trim() === "") {
        contents[_HI] = [];
    }
    else if (output[_hIS] != null && output[_hIS][_i] != null) {
        contents[_HI] = de_ResponseHostIdList(smithyClient.getArrayIfSingleItem(output[_hIS][_i]));
    }
    return contents;
};
const de_AllocateIpamPoolCidrResult = (output, context) => {
    const contents = {};
    if (output[_iPA] != null) {
        contents[_IPA] = de_IpamPoolAllocation(output[_iPA]);
    }
    return contents;
};
const de_AllowedInstanceTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AllowedPrincipal = (output, context) => {
    const contents = {};
    if (output[_pT] != null) {
        contents[_PTr] = smithyClient.expectString(output[_pT]);
    }
    if (output[_p] != null) {
        contents[_Prin] = smithyClient.expectString(output[_p]);
    }
    if (output[_sPI] != null) {
        contents[_SPI] = smithyClient.expectString(output[_sPI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sI] != null) {
        contents[_SIe] = smithyClient.expectString(output[_sI]);
    }
    return contents;
};
const de_AllowedPrincipalSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AllowedPrincipal(entry);
    });
};
const de_AlternatePathHint = (output, context) => {
    const contents = {};
    if (output[_cIo] != null) {
        contents[_CIom] = smithyClient.expectString(output[_cIo]);
    }
    if (output[_cA] != null) {
        contents[_CAo] = smithyClient.expectString(output[_cA]);
    }
    return contents;
};
const de_AlternatePathHintList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlternatePathHint(entry);
    });
};
const de_AnalysisAclRule = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_e] != null) {
        contents[_Eg] = smithyClient.parseBoolean(output[_e]);
    }
    if (output[_pRo] != null) {
        contents[_PR] = de_PortRange(output[_pRo]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_rA] != null) {
        contents[_RAu] = smithyClient.expectString(output[_rA]);
    }
    if (output[_rN] != null) {
        contents[_RNu] = smithyClient.strictParseInt32(output[_rN]);
    }
    return contents;
};
const de_AnalysisComponent = (output, context) => {
    const contents = {};
    if (output[_id] != null) {
        contents[_Id] = smithyClient.expectString(output[_id]);
    }
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    return contents;
};
const de_AnalysisComponentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AnalysisComponent(entry);
    });
};
const de_AnalysisLoadBalancerListener = (output, context) => {
    const contents = {};
    if (output[_lBP] != null) {
        contents[_LBP] = smithyClient.strictParseInt32(output[_lBP]);
    }
    if (output[_iP] != null) {
        contents[_IPns] = smithyClient.strictParseInt32(output[_iP]);
    }
    return contents;
};
const de_AnalysisLoadBalancerTarget = (output, context) => {
    const contents = {};
    if (output[_ad] != null) {
        contents[_Ad] = smithyClient.expectString(output[_ad]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_in] != null) {
        contents[_Ins] = de_AnalysisComponent(output[_in]);
    }
    if (output[_po] != null) {
        contents[_Po] = smithyClient.strictParseInt32(output[_po]);
    }
    return contents;
};
const de_AnalysisPacketHeader = (output, context) => {
    const contents = {};
    if (String(output.destinationAddressSet).trim() === "") {
        contents[_DAes] = [];
    }
    else if (output[_dAS] != null && output[_dAS][_i] != null) {
        contents[_DAes] = de_IpAddressList(smithyClient.getArrayIfSingleItem(output[_dAS][_i]));
    }
    if (String(output.destinationPortRangeSet).trim() === "") {
        contents[_DPRe] = [];
    }
    else if (output[_dPRS] != null && output[_dPRS][_i] != null) {
        contents[_DPRe] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_dPRS][_i]));
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (String(output.sourceAddressSet).trim() === "") {
        contents[_SAo] = [];
    }
    else if (output[_sAS] != null && output[_sAS][_i] != null) {
        contents[_SAo] = de_IpAddressList(smithyClient.getArrayIfSingleItem(output[_sAS][_i]));
    }
    if (String(output.sourcePortRangeSet).trim() === "") {
        contents[_SPRo] = [];
    }
    else if (output[_sPRS] != null && output[_sPRS][_i] != null) {
        contents[_SPRo] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_sPRS][_i]));
    }
    return contents;
};
const de_AnalysisRouteTableRoute = (output, context) => {
    const contents = {};
    if (output[_dC] != null) {
        contents[_DCe] = smithyClient.expectString(output[_dC]);
    }
    if (output[_dPLI] != null) {
        contents[_DPLI] = smithyClient.expectString(output[_dPLI]);
    }
    if (output[_eOIGI] != null) {
        contents[_EOIGI] = smithyClient.expectString(output[_eOIGI]);
    }
    if (output[_gI] != null) {
        contents[_GI] = smithyClient.expectString(output[_gI]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_o] != null) {
        contents[_Or] = smithyClient.expectString(output[_o]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_vPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_vPCI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cGI] != null) {
        contents[_CGI] = smithyClient.expectString(output[_cGI]);
    }
    if (output[_cNA] != null) {
        contents[_CNAo] = smithyClient.expectString(output[_cNA]);
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    return contents;
};
const de_AnalysisSecurityGroupRule = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_di] != null) {
        contents[_Di] = smithyClient.expectString(output[_di]);
    }
    if (output[_sGI] != null) {
        contents[_SGIe] = smithyClient.expectString(output[_sGI]);
    }
    if (output[_pRo] != null) {
        contents[_PR] = de_PortRange(output[_pRo]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    return contents;
};
const de_ApplySecurityGroupsToClientVpnTargetNetworkResult = (output, context) => {
    const contents = {};
    if (String(output.securityGroupIds).trim() === "") {
        contents[_SGI] = [];
    }
    else if (output[_sGIe] != null && output[_sGIe][_i] != null) {
        contents[_SGI] = de_ClientVpnSecurityGroupIdSet(smithyClient.getArrayIfSingleItem(output[_sGIe][_i]));
    }
    return contents;
};
const de_ArchitectureTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ArnList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AsnAssociation = (output, context) => {
    const contents = {};
    if (output[_as] != null) {
        contents[_As] = smithyClient.expectString(output[_as]);
    }
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_AsnAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AsnAssociation(entry);
    });
};
const de_AsPath = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AssignedPrivateIpAddress = (output, context) => {
    const contents = {};
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    return contents;
};
const de_AssignedPrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssignedPrivateIpAddress(entry);
    });
};
const de_AssignIpv6AddressesResult = (output, context) => {
    const contents = {};
    if (String(output.assignedIpv6Addresses).trim() === "") {
        contents[_AIAs] = [];
    }
    else if (output[_aIA] != null && output[_aIA][_i] != null) {
        contents[_AIAs] = de_Ipv6AddressList(smithyClient.getArrayIfSingleItem(output[_aIA][_i]));
    }
    if (String(output.assignedIpv6PrefixSet).trim() === "") {
        contents[_AIP] = [];
    }
    else if (output[_aIPS] != null && output[_aIPS][_i] != null) {
        contents[_AIP] = de_IpPrefixList(smithyClient.getArrayIfSingleItem(output[_aIPS][_i]));
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    return contents;
};
const de_AssignPrivateIpAddressesResult = (output, context) => {
    const contents = {};
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (String(output.assignedPrivateIpAddressesSet).trim() === "") {
        contents[_APIAss] = [];
    }
    else if (output[_aPIAS] != null && output[_aPIAS][_i] != null) {
        contents[_APIAss] = de_AssignedPrivateIpAddressList(smithyClient.getArrayIfSingleItem(output[_aPIAS][_i]));
    }
    if (String(output.assignedIpv4PrefixSet).trim() === "") {
        contents[_AIPs] = [];
    }
    else if (output[_aIPSs] != null && output[_aIPSs][_i] != null) {
        contents[_AIPs] = de_Ipv4PrefixesList(smithyClient.getArrayIfSingleItem(output[_aIPSs][_i]));
    }
    return contents;
};
const de_AssignPrivateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (String(output.natGatewayAddressSet).trim() === "") {
        contents[_NGA] = [];
    }
    else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
        contents[_NGA] = de_NatGatewayAddressList(smithyClient.getArrayIfSingleItem(output[_nGAS][_i]));
    }
    return contents;
};
const de_AssociateAddressResult = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    return contents;
};
const de_AssociateCapacityReservationBillingOwnerResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_AssociateClientVpnTargetNetworkResult = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_AssociationStatus(output[_sta]);
    }
    return contents;
};
const de_AssociatedRole = (output, context) => {
    const contents = {};
    if (output[_aRA] != null) {
        contents[_ARA] = smithyClient.expectString(output[_aRA]);
    }
    if (output[_cSBN] != null) {
        contents[_CSBN] = smithyClient.expectString(output[_cSBN]);
    }
    if (output[_cSOK] != null) {
        contents[_CSOK] = smithyClient.expectString(output[_cSOK]);
    }
    if (output[_eKKI] != null) {
        contents[_EKKI] = smithyClient.expectString(output[_eKKI]);
    }
    return contents;
};
const de_AssociatedRolesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedRole(entry);
    });
};
const de_AssociatedSubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_AssociatedTargetNetwork = (output, context) => {
    const contents = {};
    if (output[_nI] != null) {
        contents[_NIe] = smithyClient.expectString(output[_nI]);
    }
    if (output[_nT] != null) {
        contents[_NTe] = smithyClient.expectString(output[_nT]);
    }
    return contents;
};
const de_AssociatedTargetNetworkSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociatedTargetNetwork(entry);
    });
};
const de_AssociateEnclaveCertificateIamRoleResult = (output, context) => {
    const contents = {};
    if (output[_cSBN] != null) {
        contents[_CSBN] = smithyClient.expectString(output[_cSBN]);
    }
    if (output[_cSOK] != null) {
        contents[_CSOK] = smithyClient.expectString(output[_cSOK]);
    }
    if (output[_eKKI] != null) {
        contents[_EKKI] = smithyClient.expectString(output[_eKKI]);
    }
    return contents;
};
const de_AssociateIamInstanceProfileResult = (output, context) => {
    const contents = {};
    if (output[_iIPA] != null) {
        contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA]);
    }
    return contents;
};
const de_AssociateInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output[_iEW] != null) {
        contents[_IEW] = de_InstanceEventWindow(output[_iEW]);
    }
    return contents;
};
const de_AssociateIpamByoasnResult = (output, context) => {
    const contents = {};
    if (output[_aA] != null) {
        contents[_AAsn] = de_AsnAssociation(output[_aA]);
    }
    return contents;
};
const de_AssociateIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output[_iRDA] != null) {
        contents[_IRDA] = de_IpamResourceDiscoveryAssociation(output[_iRDA]);
    }
    return contents;
};
const de_AssociateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (String(output.natGatewayAddressSet).trim() === "") {
        contents[_NGA] = [];
    }
    else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
        contents[_NGA] = de_NatGatewayAddressList(smithyClient.getArrayIfSingleItem(output[_nGAS][_i]));
    }
    return contents;
};
const de_AssociateRouteServerResult = (output, context) => {
    const contents = {};
    if (output[_rSA] != null) {
        contents[_RSAo] = de_RouteServerAssociation(output[_rSA]);
    }
    return contents;
};
const de_AssociateRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_aS] != null) {
        contents[_ASs] = de_RouteTableAssociationState(output[_aS]);
    }
    return contents;
};
const de_AssociateSecurityGroupVpcResult = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_AssociateSubnetCidrBlockResult = (output, context) => {
    const contents = {};
    if (output[_iCBA] != null) {
        contents[_ICBA] = de_SubnetIpv6CidrBlockAssociation(output[_iCBA]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    return contents;
};
const de_AssociateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output[_a] != null) {
        contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a]);
    }
    return contents;
};
const de_AssociateTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_TransitGatewayPolicyTableAssociation(output[_ass]);
    }
    return contents;
};
const de_AssociateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_TransitGatewayAssociation(output[_ass]);
    }
    return contents;
};
const de_AssociateTrunkInterfaceResult = (output, context) => {
    const contents = {};
    if (output[_iA] != null) {
        contents[_IAn] = de_TrunkInterfaceAssociation(output[_iA]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_AssociateVpcCidrBlockResult = (output, context) => {
    const contents = {};
    if (output[_iCBA] != null) {
        contents[_ICBA] = de_VpcIpv6CidrBlockAssociation(output[_iCBA]);
    }
    if (output[_cBA] != null) {
        contents[_CBA] = de_VpcCidrBlockAssociation(output[_cBA]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_AssociationStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_AttachClassicLinkVpcResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_AttachmentEnaSrdSpecification = (output, context) => {
    const contents = {};
    if (output[_eSE] != null) {
        contents[_ESE] = smithyClient.parseBoolean(output[_eSE]);
    }
    if (output[_eSUS] != null) {
        contents[_ESUS] = de_AttachmentEnaSrdUdpSpecification(output[_eSUS]);
    }
    return contents;
};
const de_AttachmentEnaSrdUdpSpecification = (output, context) => {
    const contents = {};
    if (output[_eSUE] != null) {
        contents[_ESUE] = smithyClient.parseBoolean(output[_eSUE]);
    }
    return contents;
};
const de_AttachNetworkInterfaceResult = (output, context) => {
    const contents = {};
    if (output[_aIt] != null) {
        contents[_AIt] = smithyClient.expectString(output[_aIt]);
    }
    if (output[_nCI] != null) {
        contents[_NCI] = smithyClient.strictParseInt32(output[_nCI]);
    }
    return contents;
};
const de_AttachVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output[_vATP] != null) {
        contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP]);
    }
    if (output[_vAI] != null) {
        contents[_VAI] = de_VerifiedAccessInstance(output[_vAI]);
    }
    return contents;
};
const de_AttachVpnGatewayResult = (output, context) => {
    const contents = {};
    if (output[_at] != null) {
        contents[_VA] = de_VpcAttachment(output[_at]);
    }
    return contents;
};
const de_AttributeBooleanValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.parseBoolean(output[_v]);
    }
    return contents;
};
const de_AttributeSummary = (output, context) => {
    const contents = {};
    if (output[_aN] != null) {
        contents[_ANt] = smithyClient.expectString(output[_aN]);
    }
    if (output[_mFV] != null) {
        contents[_MFV] = smithyClient.expectString(output[_mFV]);
    }
    if (output[_nOMA] != null) {
        contents[_NOMA] = smithyClient.strictParseInt32(output[_nOMA]);
    }
    if (output[_nOUA] != null) {
        contents[_NOUA] = smithyClient.strictParseInt32(output[_nOUA]);
    }
    if (String(output.regionalSummarySet).trim() === "") {
        contents[_RSeg] = [];
    }
    else if (output[_rSS] != null && output[_rSS][_i] != null) {
        contents[_RSeg] = de_RegionalSummaryList(smithyClient.getArrayIfSingleItem(output[_rSS][_i]));
    }
    return contents;
};
const de_AttributeSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeSummary(entry);
    });
};
const de_AttributeValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_AuthorizationRule = (output, context) => {
    const contents = {};
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_aAc] != null) {
        contents[_AAc] = smithyClient.parseBoolean(output[_aAc]);
    }
    if (output[_dC] != null) {
        contents[_DCe] = smithyClient.expectString(output[_dC]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta]);
    }
    return contents;
};
const de_AuthorizationRuleSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthorizationRule(entry);
    });
};
const de_AuthorizeClientVpnIngressResult = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta]);
    }
    return contents;
};
const de_AuthorizeSecurityGroupEgressResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (String(output.securityGroupRuleSet).trim() === "") {
        contents[_SGR] = [];
    }
    else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
        contents[_SGR] = de_SecurityGroupRuleList(smithyClient.getArrayIfSingleItem(output[_sGRS][_i]));
    }
    return contents;
};
const de_AuthorizeSecurityGroupIngressResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (String(output.securityGroupRuleSet).trim() === "") {
        contents[_SGR] = [];
    }
    else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
        contents[_SGR] = de_SecurityGroupRuleList(smithyClient.getArrayIfSingleItem(output[_sGRS][_i]));
    }
    return contents;
};
const de_AvailabilityZone = (output, context) => {
    const contents = {};
    if (output[_oIS] != null) {
        contents[_OIS] = smithyClient.expectString(output[_oIS]);
    }
    if (String(output.messageSet).trim() === "") {
        contents[_Mes] = [];
    }
    else if (output[_mS] != null && output[_mS][_i] != null) {
        contents[_Mes] = de_AvailabilityZoneMessageList(smithyClient.getArrayIfSingleItem(output[_mS][_i]));
    }
    if (output[_rNe] != null) {
        contents[_RN] = smithyClient.expectString(output[_rNe]);
    }
    if (output[_zN] != null) {
        contents[_ZNo] = smithyClient.expectString(output[_zN]);
    }
    if (output[_zI] != null) {
        contents[_ZIo] = smithyClient.expectString(output[_zI]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    if (output[_zT] != null) {
        contents[_ZT] = smithyClient.expectString(output[_zT]);
    }
    if (output[_pZN] != null) {
        contents[_PZN] = smithyClient.expectString(output[_pZN]);
    }
    if (output[_pZI] != null) {
        contents[_PZI] = smithyClient.expectString(output[_pZI]);
    }
    if (output[_gLN] != null) {
        contents[_GLN] = smithyClient.expectString(output[_gLN]);
    }
    if (output[_zS] != null) {
        contents[_Stat] = smithyClient.expectString(output[_zS]);
    }
    return contents;
};
const de_AvailabilityZoneList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityZone(entry);
    });
};
const de_AvailabilityZoneMessage = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_AvailabilityZoneMessageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AvailabilityZoneMessage(entry);
    });
};
const de_AvailableCapacity = (output, context) => {
    const contents = {};
    if (String(output.availableInstanceCapacity).trim() === "") {
        contents[_AIC] = [];
    }
    else if (output[_aIC] != null && output[_aIC][_i] != null) {
        contents[_AIC] = de_AvailableInstanceCapacityList(smithyClient.getArrayIfSingleItem(output[_aIC][_i]));
    }
    if (output[_aVC] != null) {
        contents[_AVC] = smithyClient.strictParseInt32(output[_aVC]);
    }
    return contents;
};
const de_AvailableInstanceCapacityList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceCapacity(entry);
    });
};
const de_BandwidthWeightingTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_BaselineEbsBandwidthMbps = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseInt32(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseInt32(output[_ma]);
    }
    return contents;
};
const de_BaselinePerformanceFactors = (output, context) => {
    const contents = {};
    if (output[_cp] != null) {
        contents[_Cp] = de_CpuPerformanceFactor(output[_cp]);
    }
    return contents;
};
const de_BlockDeviceMapping = (output, context) => {
    const contents = {};
    if (output[_eb] != null) {
        contents[_E] = de_EbsBlockDevice(output[_eb]);
    }
    if (output[_nD] != null) {
        contents[_ND] = smithyClient.expectString(output[_nD]);
    }
    if (output[_dN] != null) {
        contents[_DN] = smithyClient.expectString(output[_dN]);
    }
    if (output[_vN] != null) {
        contents[_VN] = smithyClient.expectString(output[_vN]);
    }
    return contents;
};
const de_BlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlockDeviceMapping(entry);
    });
};
const de_BlockDeviceMappingResponse = (output, context) => {
    const contents = {};
    if (output[_dN] != null) {
        contents[_DN] = smithyClient.expectString(output[_dN]);
    }
    if (output[_vN] != null) {
        contents[_VN] = smithyClient.expectString(output[_vN]);
    }
    if (output[_eb] != null) {
        contents[_E] = de_EbsBlockDeviceResponse(output[_eb]);
    }
    if (output[_nD] != null) {
        contents[_ND] = smithyClient.expectString(output[_nD]);
    }
    return contents;
};
const de_BlockDeviceMappingResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BlockDeviceMappingResponse(entry);
    });
};
const de_BlockPublicAccessStates = (output, context) => {
    const contents = {};
    if (output[_iGBM] != null) {
        contents[_IGBM] = smithyClient.expectString(output[_iGBM]);
    }
    return contents;
};
const de_BootModeTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_BundleInstanceResult = (output, context) => {
    const contents = {};
    if (output[_bIT] != null) {
        contents[_BTu] = de_BundleTask(output[_bIT], context);
    }
    return contents;
};
const de_BundleTask = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_bI] != null) {
        contents[_BIu] = smithyClient.expectString(output[_bI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_uT] != null) {
        contents[_UTp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uT]));
    }
    if (output[_sto] != null) {
        contents[_St] = de_Storage(output[_sto], context);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_er] != null) {
        contents[_BTE] = de_BundleTaskError(output[_er]);
    }
    return contents;
};
const de_BundleTaskError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_BundleTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BundleTask(entry, context);
    });
};
const de_Byoasn = (output, context) => {
    const contents = {};
    if (output[_as] != null) {
        contents[_As] = smithyClient.expectString(output[_as]);
    }
    if (output[_iIp] != null) {
        contents[_IIp] = smithyClient.expectString(output[_iIp]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_ByoasnSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Byoasn(entry);
    });
};
const de_ByoipCidr = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.asnAssociationSet).trim() === "") {
        contents[_AAsns] = [];
    }
    else if (output[_aAS] != null && output[_aAS][_i] != null) {
        contents[_AAsns] = de_AsnAssociationSet(smithyClient.getArrayIfSingleItem(output[_aAS][_i]));
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    return contents;
};
const de_ByoipCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ByoipCidr(entry);
    });
};
const de_CancelBundleTaskResult = (output, context) => {
    const contents = {};
    if (output[_bIT] != null) {
        contents[_BTu] = de_BundleTask(output[_bIT], context);
    }
    return contents;
};
const de_CancelCapacityReservationFleetError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_CancelCapacityReservationFleetsResult = (output, context) => {
    const contents = {};
    if (String(output.successfulFleetCancellationSet).trim() === "") {
        contents[_SFC] = [];
    }
    else if (output[_sFCS] != null && output[_sFCS][_i] != null) {
        contents[_SFC] = de_CapacityReservationFleetCancellationStateSet(smithyClient.getArrayIfSingleItem(output[_sFCS][_i]));
    }
    if (String(output.failedFleetCancellationSet).trim() === "") {
        contents[_FFC] = [];
    }
    else if (output[_fFCS] != null && output[_fFCS][_i] != null) {
        contents[_FFC] = de_FailedCapacityReservationFleetCancellationResultSet(smithyClient.getArrayIfSingleItem(output[_fFCS][_i]));
    }
    return contents;
};
const de_CancelCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_CancelDeclarativePoliciesReportResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_CancelImageLaunchPermissionResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_CancelImportTaskResult = (output, context) => {
    const contents = {};
    if (output[_iTI] != null) {
        contents[_ITI] = smithyClient.expectString(output[_iTI]);
    }
    if (output[_pSr] != null) {
        contents[_PSre] = smithyClient.expectString(output[_pSr]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_CancelledSpotInstanceRequest = (output, context) => {
    const contents = {};
    if (output[_sIRI] != null) {
        contents[_SIRIp] = smithyClient.expectString(output[_sIRI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_CancelledSpotInstanceRequestList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancelledSpotInstanceRequest(entry);
    });
};
const de_CancelReservedInstancesListingResult = (output, context) => {
    const contents = {};
    if (String(output.reservedInstancesListingsSet).trim() === "") {
        contents[_RIL] = [];
    }
    else if (output[_rILS] != null && output[_rILS][_i] != null) {
        contents[_RIL] = de_ReservedInstancesListingList(smithyClient.getArrayIfSingleItem(output[_rILS][_i]));
    }
    return contents;
};
const de_CancelSpotFleetRequestsError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_CancelSpotFleetRequestsErrorItem = (output, context) => {
    const contents = {};
    if (output[_er] != null) {
        contents[_Er] = de_CancelSpotFleetRequestsError(output[_er]);
    }
    if (output[_sFRI] != null) {
        contents[_SFRIp] = smithyClient.expectString(output[_sFRI]);
    }
    return contents;
};
const de_CancelSpotFleetRequestsErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancelSpotFleetRequestsErrorItem(entry);
    });
};
const de_CancelSpotFleetRequestsResponse = (output, context) => {
    const contents = {};
    if (String(output.successfulFleetRequestSet).trim() === "") {
        contents[_SFR] = [];
    }
    else if (output[_sFRS] != null && output[_sFRS][_i] != null) {
        contents[_SFR] = de_CancelSpotFleetRequestsSuccessSet(smithyClient.getArrayIfSingleItem(output[_sFRS][_i]));
    }
    if (String(output.unsuccessfulFleetRequestSet).trim() === "") {
        contents[_UFR] = [];
    }
    else if (output[_uFRS] != null && output[_uFRS][_i] != null) {
        contents[_UFR] = de_CancelSpotFleetRequestsErrorSet(smithyClient.getArrayIfSingleItem(output[_uFRS][_i]));
    }
    return contents;
};
const de_CancelSpotFleetRequestsSuccessItem = (output, context) => {
    const contents = {};
    if (output[_cSFRS] != null) {
        contents[_CSFRS] = smithyClient.expectString(output[_cSFRS]);
    }
    if (output[_pSFRS] != null) {
        contents[_PSFRS] = smithyClient.expectString(output[_pSFRS]);
    }
    if (output[_sFRI] != null) {
        contents[_SFRIp] = smithyClient.expectString(output[_sFRI]);
    }
    return contents;
};
const de_CancelSpotFleetRequestsSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CancelSpotFleetRequestsSuccessItem(entry);
    });
};
const de_CancelSpotInstanceRequestsResult = (output, context) => {
    const contents = {};
    if (String(output.spotInstanceRequestSet).trim() === "") {
        contents[_CSIRa] = [];
    }
    else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
        contents[_CSIRa] = de_CancelledSpotInstanceRequestList(smithyClient.getArrayIfSingleItem(output[_sIRS][_i]));
    }
    return contents;
};
const de_CapacityAllocation = (output, context) => {
    const contents = {};
    if (output[_aTl] != null) {
        contents[_ATl] = smithyClient.expectString(output[_aTl]);
    }
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    return contents;
};
const de_CapacityAllocations = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityAllocation(entry);
    });
};
const de_CapacityBlock = (output, context) => {
    const contents = {};
    if (output[_cBI] != null) {
        contents[_CBIa] = smithyClient.expectString(output[_cBI]);
    }
    if (output[_uTl] != null) {
        contents[_UTl] = smithyClient.expectString(output[_uTl]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (String(output.capacityReservationIdSet).trim() === "") {
        contents[_CRIa] = [];
    }
    else if (output[_cRIS] != null && output[_cRIS][_i] != null) {
        contents[_CRIa] = de_CapacityReservationIdSet(smithyClient.getArrayIfSingleItem(output[_cRIS][_i]));
    }
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_cD] != null) {
        contents[_CDr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cD]));
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_CapacityBlockExtension = (output, context) => {
    const contents = {};
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_cBEOI] != null) {
        contents[_CBEOI] = smithyClient.expectString(output[_cBEOI]);
    }
    if (output[_cBEDH] != null) {
        contents[_CBEDH] = smithyClient.strictParseInt32(output[_cBEDH]);
    }
    if (output[_cBES] != null) {
        contents[_CBES] = smithyClient.expectString(output[_cBES]);
    }
    if (output[_cBEPD] != null) {
        contents[_CBEPD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cBEPD]));
    }
    if (output[_cBESD] != null) {
        contents[_CBESD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cBESD]));
    }
    if (output[_cBEED] != null) {
        contents[_CBEED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cBEED]));
    }
    if (output[_uF] != null) {
        contents[_UF] = smithyClient.expectString(output[_uF]);
    }
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    return contents;
};
const de_CapacityBlockExtensionOffering = (output, context) => {
    const contents = {};
    if (output[_cBEOI] != null) {
        contents[_CBEOI] = smithyClient.expectString(output[_cBEOI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_cBESD] != null) {
        contents[_CBESD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cBESD]));
    }
    if (output[_cBEED] != null) {
        contents[_CBEED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cBEED]));
    }
    if (output[_cBEDH] != null) {
        contents[_CBEDH] = smithyClient.strictParseInt32(output[_cBEDH]);
    }
    if (output[_uF] != null) {
        contents[_UF] = smithyClient.expectString(output[_uF]);
    }
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    return contents;
};
const de_CapacityBlockExtensionOfferingSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityBlockExtensionOffering(entry);
    });
};
const de_CapacityBlockExtensionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityBlockExtension(entry);
    });
};
const de_CapacityBlockOffering = (output, context) => {
    const contents = {};
    if (output[_cBOI] != null) {
        contents[_CBOI] = smithyClient.expectString(output[_cBOI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_cBDH] != null) {
        contents[_CBDH] = smithyClient.strictParseInt32(output[_cBDH]);
    }
    if (output[_uF] != null) {
        contents[_UF] = smithyClient.expectString(output[_uF]);
    }
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (output[_uTl] != null) {
        contents[_UTl] = smithyClient.expectString(output[_uTl]);
    }
    if (output[_uC] != null) {
        contents[_UC] = smithyClient.strictParseInt32(output[_uC]);
    }
    if (output[_cBDM] != null) {
        contents[_CBDM] = smithyClient.strictParseInt32(output[_cBDM]);
    }
    return contents;
};
const de_CapacityBlockOfferingSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityBlockOffering(entry);
    });
};
const de_CapacityBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityBlock(entry);
    });
};
const de_CapacityBlockStatus = (output, context) => {
    const contents = {};
    if (output[_cBI] != null) {
        contents[_CBIa] = smithyClient.expectString(output[_cBI]);
    }
    if (output[_iS] != null) {
        contents[_ISnte] = smithyClient.expectString(output[_iS]);
    }
    if (output[_tC] != null) {
        contents[_TCo] = smithyClient.strictParseInt32(output[_tC]);
    }
    if (output[_tAC] != null) {
        contents[_TAC] = smithyClient.strictParseInt32(output[_tAC]);
    }
    if (output[_tUC] != null) {
        contents[_TUC] = smithyClient.strictParseInt32(output[_tUC]);
    }
    if (String(output.capacityReservationStatusSet).trim() === "") {
        contents[_CRSap] = [];
    }
    else if (output[_cRSS] != null && output[_cRSS][_i] != null) {
        contents[_CRSap] = de_CapacityReservationStatusSet(smithyClient.getArrayIfSingleItem(output[_cRSS][_i]));
    }
    return contents;
};
const de_CapacityBlockStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityBlockStatus(entry);
    });
};
const de_CapacityReservation = (output, context) => {
    const contents = {};
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_cRA] != null) {
        contents[_CRA] = smithyClient.expectString(output[_cRA]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_iPn] != null) {
        contents[_IPn] = smithyClient.expectString(output[_iPn]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (output[_tIC] != null) {
        contents[_TICo] = smithyClient.strictParseInt32(output[_tIC]);
    }
    if (output[_aICv] != null) {
        contents[_AICv] = smithyClient.strictParseInt32(output[_aICv]);
    }
    if (output[_eO] != null) {
        contents[_EO] = smithyClient.parseBoolean(output[_eO]);
    }
    if (output[_eS] != null) {
        contents[_ES] = smithyClient.parseBoolean(output[_eS]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_eDT] != null) {
        contents[_EDT] = smithyClient.expectString(output[_eDT]);
    }
    if (output[_iMC] != null) {
        contents[_IMC] = smithyClient.expectString(output[_iMC]);
    }
    if (output[_cD] != null) {
        contents[_CDr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cD]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_cRFI] != null) {
        contents[_CRFIa] = smithyClient.expectString(output[_cRFI]);
    }
    if (output[_pGA] != null) {
        contents[_PGA] = smithyClient.expectString(output[_pGA]);
    }
    if (String(output.capacityAllocationSet).trim() === "") {
        contents[_CAa] = [];
    }
    else if (output[_cAS] != null && output[_cAS][_i] != null) {
        contents[_CAa] = de_CapacityAllocations(smithyClient.getArrayIfSingleItem(output[_cAS][_i]));
    }
    if (output[_rT] != null) {
        contents[_RTes] = smithyClient.expectString(output[_rT]);
    }
    if (output[_uRBOI] != null) {
        contents[_URBOI] = smithyClient.expectString(output[_uRBOI]);
    }
    if (output[_cIom] != null) {
        contents[_CIomm] = de_CapacityReservationCommitmentInfo(output[_cIom]);
    }
    if (output[_dP] != null) {
        contents[_DP] = smithyClient.expectString(output[_dP]);
    }
    if (output[_cBI] != null) {
        contents[_CBIa] = smithyClient.expectString(output[_cBI]);
    }
    return contents;
};
const de_CapacityReservationBillingRequest = (output, context) => {
    const contents = {};
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_rB] != null) {
        contents[_RB] = smithyClient.expectString(output[_rB]);
    }
    if (output[_uRBOI] != null) {
        contents[_URBOI] = smithyClient.expectString(output[_uRBOI]);
    }
    if (output[_lUT] != null) {
        contents[_LUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lUT]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_cRIa] != null) {
        contents[_CRIap] = de_CapacityReservationInfo(output[_cRIa]);
    }
    return contents;
};
const de_CapacityReservationBillingRequestSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationBillingRequest(entry);
    });
};
const de_CapacityReservationCommitmentInfo = (output, context) => {
    const contents = {};
    if (output[_cIC] != null) {
        contents[_CIC] = smithyClient.strictParseInt32(output[_cIC]);
    }
    if (output[_cED] != null) {
        contents[_CED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cED]));
    }
    return contents;
};
const de_CapacityReservationFleet = (output, context) => {
    const contents = {};
    if (output[_cRFI] != null) {
        contents[_CRFIa] = smithyClient.expectString(output[_cRFI]);
    }
    if (output[_cRFA] != null) {
        contents[_CRFA] = smithyClient.expectString(output[_cRFA]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_tTC] != null) {
        contents[_TTC] = smithyClient.strictParseInt32(output[_tTC]);
    }
    if (output[_tFC] != null) {
        contents[_TFC] = smithyClient.strictParseFloat(output[_tFC]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_iMC] != null) {
        contents[_IMC] = smithyClient.expectString(output[_iMC]);
    }
    if (output[_aSl] != null) {
        contents[_AS] = smithyClient.expectString(output[_aSl]);
    }
    if (String(output.instanceTypeSpecificationSet).trim() === "") {
        contents[_ITS] = [];
    }
    else if (output[_iTSS] != null && output[_iTSS][_i] != null) {
        contents[_ITS] = de_FleetCapacityReservationSet(smithyClient.getArrayIfSingleItem(output[_iTSS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_CapacityReservationFleetCancellationState = (output, context) => {
    const contents = {};
    if (output[_cFS] != null) {
        contents[_CFS] = smithyClient.expectString(output[_cFS]);
    }
    if (output[_pFS] != null) {
        contents[_PFS] = smithyClient.expectString(output[_pFS]);
    }
    if (output[_cRFI] != null) {
        contents[_CRFIa] = smithyClient.expectString(output[_cRFI]);
    }
    return contents;
};
const de_CapacityReservationFleetCancellationStateSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationFleetCancellationState(entry);
    });
};
const de_CapacityReservationFleetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationFleet(entry);
    });
};
const de_CapacityReservationGroup = (output, context) => {
    const contents = {};
    if (output[_gA] != null) {
        contents[_GA] = smithyClient.expectString(output[_gA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    return contents;
};
const de_CapacityReservationGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationGroup(entry);
    });
};
const de_CapacityReservationIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_CapacityReservationInfo = (output, context) => {
    const contents = {};
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    return contents;
};
const de_CapacityReservationOptions = (output, context) => {
    const contents = {};
    if (output[_uS] != null) {
        contents[_USs] = smithyClient.expectString(output[_uS]);
    }
    return contents;
};
const de_CapacityReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservation(entry);
    });
};
const de_CapacityReservationSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_cRP] != null) {
        contents[_CRP] = smithyClient.expectString(output[_cRP]);
    }
    if (output[_cRT] != null) {
        contents[_CRTa] = de_CapacityReservationTargetResponse(output[_cRT]);
    }
    return contents;
};
const de_CapacityReservationStatus = (output, context) => {
    const contents = {};
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_tC] != null) {
        contents[_TCo] = smithyClient.strictParseInt32(output[_tC]);
    }
    if (output[_tAC] != null) {
        contents[_TAC] = smithyClient.strictParseInt32(output[_tAC]);
    }
    if (output[_tUC] != null) {
        contents[_TUC] = smithyClient.strictParseInt32(output[_tUC]);
    }
    return contents;
};
const de_CapacityReservationStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CapacityReservationStatus(entry);
    });
};
const de_CapacityReservationTargetResponse = (output, context) => {
    const contents = {};
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_cRRGA] != null) {
        contents[_CRRGA] = smithyClient.expectString(output[_cRRGA]);
    }
    return contents;
};
const de_CarrierGateway = (output, context) => {
    const contents = {};
    if (output[_cGI] != null) {
        contents[_CGI] = smithyClient.expectString(output[_cGI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_CarrierGatewaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CarrierGateway(entry);
    });
};
const de_CertificateAuthentication = (output, context) => {
    const contents = {};
    if (output[_cRCC] != null) {
        contents[_CRCC] = smithyClient.expectString(output[_cRCC]);
    }
    return contents;
};
const de_CidrBlock = (output, context) => {
    const contents = {};
    if (output[_cB] != null) {
        contents[_CB] = smithyClient.expectString(output[_cB]);
    }
    return contents;
};
const de_CidrBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CidrBlock(entry);
    });
};
const de_ClassicLinkDnsSupport = (output, context) => {
    const contents = {};
    if (output[_cLDS] != null) {
        contents[_CLDS] = smithyClient.parseBoolean(output[_cLDS]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_ClassicLinkDnsSupportList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassicLinkDnsSupport(entry);
    });
};
const de_ClassicLinkInstance = (output, context) => {
    const contents = {};
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_ClassicLinkInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassicLinkInstance(entry);
    });
};
const de_ClassicLoadBalancer = (output, context) => {
    const contents = {};
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    return contents;
};
const de_ClassicLoadBalancers = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClassicLoadBalancer(entry);
    });
};
const de_ClassicLoadBalancersConfig = (output, context) => {
    const contents = {};
    if (String(output.classicLoadBalancers).trim() === "") {
        contents[_CLB] = [];
    }
    else if (output[_cLB] != null && output[_cLB][_i] != null) {
        contents[_CLB] = de_ClassicLoadBalancers(smithyClient.getArrayIfSingleItem(output[_cLB][_i]));
    }
    return contents;
};
const de_ClientCertificateRevocationListStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ClientConnectResponseOptions = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    if (output[_lFA] != null) {
        contents[_LFA] = smithyClient.expectString(output[_lFA]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnEndpointAttributeStatus(output[_sta]);
    }
    return contents;
};
const de_ClientLoginBannerResponseOptions = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    if (output[_bT] != null) {
        contents[_BT] = smithyClient.expectString(output[_bT]);
    }
    return contents;
};
const de_ClientRouteEnforcementResponseOptions = (output, context) => {
    const contents = {};
    if (output[_enf] != null) {
        contents[_Enf] = smithyClient.parseBoolean(output[_enf]);
    }
    return contents;
};
const de_ClientVpnAuthentication = (output, context) => {
    const contents = {};
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_aD] != null) {
        contents[_AD] = de_DirectoryServiceAuthentication(output[_aD]);
    }
    if (output[_mA] != null) {
        contents[_MA] = de_CertificateAuthentication(output[_mA]);
    }
    if (output[_fA] != null) {
        contents[_FA] = de_FederatedAuthentication(output[_fA]);
    }
    return contents;
};
const de_ClientVpnAuthenticationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnAuthentication(entry);
    });
};
const de_ClientVpnAuthorizationRuleStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ClientVpnConnection = (output, context) => {
    const contents = {};
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectString(output[_ti]);
    }
    if (output[_cIon] != null) {
        contents[_CIo] = smithyClient.expectString(output[_cIon]);
    }
    if (output[_us] != null) {
        contents[_Us] = smithyClient.expectString(output[_us]);
    }
    if (output[_cET] != null) {
        contents[_CETo] = smithyClient.expectString(output[_cET]);
    }
    if (output[_iB] != null) {
        contents[_IB] = smithyClient.expectString(output[_iB]);
    }
    if (output[_eB] != null) {
        contents[_EB] = smithyClient.expectString(output[_eB]);
    }
    if (output[_iPng] != null) {
        contents[_IPng] = smithyClient.expectString(output[_iPng]);
    }
    if (output[_eP] != null) {
        contents[_EPg] = smithyClient.expectString(output[_eP]);
    }
    if (output[_cIl] != null) {
        contents[_CIli] = smithyClient.expectString(output[_cIl]);
    }
    if (output[_cIA] != null) {
        contents[_CIA] = smithyClient.expectString(output[_cIA]);
    }
    if (output[_cN] != null) {
        contents[_CN] = smithyClient.expectString(output[_cN]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnConnectionStatus(output[_sta]);
    }
    if (output[_cETo] != null) {
        contents[_CETon] = smithyClient.expectString(output[_cETo]);
    }
    if (String(output.postureComplianceStatusSet).trim() === "") {
        contents[_PCS] = [];
    }
    else if (output[_pCSS] != null && output[_pCSS][_i] != null) {
        contents[_PCS] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_pCSS][_i]));
    }
    return contents;
};
const de_ClientVpnConnectionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnConnection(entry);
    });
};
const de_ClientVpnConnectionStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ClientVpnEndpoint = (output, context) => {
    const contents = {};
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectString(output[_cTre]);
    }
    if (output[_dT] != null) {
        contents[_DTel] = smithyClient.expectString(output[_dT]);
    }
    if (output[_dNn] != null) {
        contents[_DNn] = smithyClient.expectString(output[_dNn]);
    }
    if (output[_cCB] != null) {
        contents[_CCB] = smithyClient.expectString(output[_cCB]);
    }
    if (String(output.dnsServer).trim() === "") {
        contents[_DSn] = [];
    }
    else if (output[_dS] != null && output[_dS][_i] != null) {
        contents[_DSn] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dS][_i]));
    }
    if (output[_sTp] != null) {
        contents[_ST] = smithyClient.parseBoolean(output[_sTp]);
    }
    if (output[_vP] != null) {
        contents[_VPp] = smithyClient.expectString(output[_vP]);
    }
    if (output[_tP] != null) {
        contents[_TPr] = smithyClient.expectString(output[_tP]);
    }
    if (output[_vPp] != null) {
        contents[_VP] = smithyClient.strictParseInt32(output[_vPp]);
    }
    if (String(output.associatedTargetNetwork).trim() === "") {
        contents[_ATN] = [];
    }
    else if (output[_aTN] != null && output[_aTN][_i] != null) {
        contents[_ATN] = de_AssociatedTargetNetworkSet(smithyClient.getArrayIfSingleItem(output[_aTN][_i]));
    }
    if (output[_sCA] != null) {
        contents[_SCA] = smithyClient.expectString(output[_sCA]);
    }
    if (String(output.authenticationOptions).trim() === "") {
        contents[_AO] = [];
    }
    else if (output[_aO] != null && output[_aO][_i] != null) {
        contents[_AO] = de_ClientVpnAuthenticationList(smithyClient.getArrayIfSingleItem(output[_aO][_i]));
    }
    if (output[_cLO] != null) {
        contents[_CLO] = de_ConnectionLogResponseOptions(output[_cLO]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.securityGroupIdSet).trim() === "") {
        contents[_SGI] = [];
    }
    else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
        contents[_SGI] = de_ClientVpnSecurityGroupIdSet(smithyClient.getArrayIfSingleItem(output[_sGIS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sSPU] != null) {
        contents[_SSPU] = smithyClient.expectString(output[_sSPU]);
    }
    if (output[_cCO] != null) {
        contents[_CCO] = de_ClientConnectResponseOptions(output[_cCO]);
    }
    if (output[_sTH] != null) {
        contents[_STH] = smithyClient.strictParseInt32(output[_sTH]);
    }
    if (output[_cLBO] != null) {
        contents[_CLBO] = de_ClientLoginBannerResponseOptions(output[_cLBO]);
    }
    if (output[_cREO] != null) {
        contents[_CREO] = de_ClientRouteEnforcementResponseOptions(output[_cREO]);
    }
    if (output[_dOST] != null) {
        contents[_DOST] = smithyClient.parseBoolean(output[_dOST]);
    }
    if (output[_eIAT] != null) {
        contents[_EIAT] = smithyClient.expectString(output[_eIAT]);
    }
    if (output[_tIAT] != null) {
        contents[_TIAT] = smithyClient.expectString(output[_tIAT]);
    }
    return contents;
};
const de_ClientVpnEndpointAttributeStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ClientVpnEndpointStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ClientVpnRoute = (output, context) => {
    const contents = {};
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_dC] != null) {
        contents[_DCe] = smithyClient.expectString(output[_dC]);
    }
    if (output[_tSa] != null) {
        contents[_TSa] = smithyClient.expectString(output[_tSa]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_o] != null) {
        contents[_Or] = smithyClient.expectString(output[_o]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnRouteStatus(output[_sta]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    return contents;
};
const de_ClientVpnRouteSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnRoute(entry);
    });
};
const de_ClientVpnRouteStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ClientVpnSecurityGroupIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_CloudWatchLogOptions = (output, context) => {
    const contents = {};
    if (output[_lE] != null) {
        contents[_LE] = smithyClient.parseBoolean(output[_lE]);
    }
    if (output[_lGA] != null) {
        contents[_LGA] = smithyClient.expectString(output[_lGA]);
    }
    if (output[_lOF] != null) {
        contents[_LOF] = smithyClient.expectString(output[_lOF]);
    }
    return contents;
};
const de_CoipAddressUsage = (output, context) => {
    const contents = {};
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_aAI] != null) {
        contents[_AAI] = smithyClient.expectString(output[_aAI]);
    }
    if (output[_aSw] != null) {
        contents[_ASw] = smithyClient.expectString(output[_aSw]);
    }
    if (output[_cIop] != null) {
        contents[_CIop] = smithyClient.expectString(output[_cIop]);
    }
    return contents;
};
const de_CoipAddressUsageSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoipAddressUsage(entry);
    });
};
const de_CoipCidr = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_cPI] != null) {
        contents[_CPIo] = smithyClient.expectString(output[_cPI]);
    }
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    return contents;
};
const de_CoipPool = (output, context) => {
    const contents = {};
    if (output[_pIo] != null) {
        contents[_PIo] = smithyClient.expectString(output[_pIo]);
    }
    if (String(output.poolCidrSet).trim() === "") {
        contents[_PCo] = [];
    }
    else if (output[_pCS] != null && output[_pCS][_i] != null) {
        contents[_PCo] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_pCS][_i]));
    }
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_pA] != null) {
        contents[_PAo] = smithyClient.expectString(output[_pA]);
    }
    return contents;
};
const de_CoipPoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CoipPool(entry);
    });
};
const de_ConfirmProductInstanceResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    return contents;
};
const de_ConnectionLogResponseOptions = (output, context) => {
    const contents = {};
    if (output[_En] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_En]);
    }
    if (output[_CLG] != null) {
        contents[_CLG] = smithyClient.expectString(output[_CLG]);
    }
    if (output[_CLS] != null) {
        contents[_CLS] = smithyClient.expectString(output[_CLS]);
    }
    return contents;
};
const de_ConnectionNotification = (output, context) => {
    const contents = {};
    if (output[_cNI] != null) {
        contents[_CNIon] = smithyClient.expectString(output[_cNI]);
    }
    if (output[_sI] != null) {
        contents[_SIe] = smithyClient.expectString(output[_sI]);
    }
    if (output[_vEI] != null) {
        contents[_VEIp] = smithyClient.expectString(output[_vEI]);
    }
    if (output[_cNT] != null) {
        contents[_CNT] = smithyClient.expectString(output[_cNT]);
    }
    if (output[_cNAo] != null) {
        contents[_CNAon] = smithyClient.expectString(output[_cNAo]);
    }
    if (String(output.connectionEvents).trim() === "") {
        contents[_CEo] = [];
    }
    else if (output[_cE] != null && output[_cE][_i] != null) {
        contents[_CEo] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_cE][_i]));
    }
    if (output[_cNS] != null) {
        contents[_CNS] = smithyClient.expectString(output[_cNS]);
    }
    if (output[_sR] != null) {
        contents[_SRe] = smithyClient.expectString(output[_sR]);
    }
    return contents;
};
const de_ConnectionNotificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConnectionNotification(entry);
    });
};
const de_ConnectionTrackingConfiguration = (output, context) => {
    const contents = {};
    if (output[_tET] != null) {
        contents[_TET] = smithyClient.strictParseInt32(output[_tET]);
    }
    if (output[_uST] != null) {
        contents[_UST] = smithyClient.strictParseInt32(output[_uST]);
    }
    if (output[_uTd] != null) {
        contents[_UT] = smithyClient.strictParseInt32(output[_uTd]);
    }
    return contents;
};
const de_ConnectionTrackingSpecification = (output, context) => {
    const contents = {};
    if (output[_tET] != null) {
        contents[_TET] = smithyClient.strictParseInt32(output[_tET]);
    }
    if (output[_uTd] != null) {
        contents[_UT] = smithyClient.strictParseInt32(output[_uTd]);
    }
    if (output[_uST] != null) {
        contents[_UST] = smithyClient.strictParseInt32(output[_uST]);
    }
    return contents;
};
const de_ConnectionTrackingSpecificationRequest = (output, context) => {
    const contents = {};
    if (output[_TET] != null) {
        contents[_TET] = smithyClient.strictParseInt32(output[_TET]);
    }
    if (output[_UST] != null) {
        contents[_UST] = smithyClient.strictParseInt32(output[_UST]);
    }
    if (output[_UT] != null) {
        contents[_UT] = smithyClient.strictParseInt32(output[_UT]);
    }
    return contents;
};
const de_ConnectionTrackingSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_tET] != null) {
        contents[_TET] = smithyClient.strictParseInt32(output[_tET]);
    }
    if (output[_uST] != null) {
        contents[_UST] = smithyClient.strictParseInt32(output[_uST]);
    }
    if (output[_uTd] != null) {
        contents[_UT] = smithyClient.strictParseInt32(output[_uTd]);
    }
    return contents;
};
const de_ConversionTask = (output, context) => {
    const contents = {};
    if (output[_cTI] != null) {
        contents[_CTI] = smithyClient.expectString(output[_cTI]);
    }
    if (output[_eT] != null) {
        contents[_ETx] = smithyClient.expectString(output[_eT]);
    }
    if (output[_iIm] != null) {
        contents[_IIm] = de_ImportInstanceTaskDetails(output[_iIm]);
    }
    if (output[_iVm] != null) {
        contents[_IV] = de_ImportVolumeTaskDetails(output[_iVm]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_CopyFpgaImageResult = (output, context) => {
    const contents = {};
    if (output[_fII] != null) {
        contents[_FII] = smithyClient.expectString(output[_fII]);
    }
    return contents;
};
const de_CopyImageResult = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    return contents;
};
const de_CopySnapshotResult = (output, context) => {
    const contents = {};
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    return contents;
};
const de_CoreCountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.strictParseInt32(entry);
    });
};
const de_CpuManufacturerSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_CpuOptions = (output, context) => {
    const contents = {};
    if (output[_cCo] != null) {
        contents[_CC] = smithyClient.strictParseInt32(output[_cCo]);
    }
    if (output[_tPC] != null) {
        contents[_TPC] = smithyClient.strictParseInt32(output[_tPC]);
    }
    if (output[_aSS] != null) {
        contents[_ASS] = smithyClient.expectString(output[_aSS]);
    }
    return contents;
};
const de_CpuPerformanceFactor = (output, context) => {
    const contents = {};
    if (String(output.referenceSet).trim() === "") {
        contents[_R] = [];
    }
    else if (output[_rS] != null && output[_rS][_i] != null) {
        contents[_R] = de_PerformanceFactorReferenceSet(smithyClient.getArrayIfSingleItem(output[_rS][_i]));
    }
    return contents;
};
const de_CreateCapacityReservationBySplittingResult = (output, context) => {
    const contents = {};
    if (output[_sCR] != null) {
        contents[_SCR] = de_CapacityReservation(output[_sCR]);
    }
    if (output[_dCR] != null) {
        contents[_DCRe] = de_CapacityReservation(output[_dCR]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    return contents;
};
const de_CreateCapacityReservationFleetResult = (output, context) => {
    const contents = {};
    if (output[_cRFI] != null) {
        contents[_CRFIa] = smithyClient.expectString(output[_cRFI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_tTC] != null) {
        contents[_TTC] = smithyClient.strictParseInt32(output[_tTC]);
    }
    if (output[_tFC] != null) {
        contents[_TFC] = smithyClient.strictParseFloat(output[_tFC]);
    }
    if (output[_iMC] != null) {
        contents[_IMC] = smithyClient.expectString(output[_iMC]);
    }
    if (output[_aSl] != null) {
        contents[_AS] = smithyClient.expectString(output[_aSl]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (String(output.fleetCapacityReservationSet).trim() === "") {
        contents[_FCR] = [];
    }
    else if (output[_fCRS] != null && output[_fCRS][_i] != null) {
        contents[_FCR] = de_FleetCapacityReservationSet(smithyClient.getArrayIfSingleItem(output[_fCRS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_CreateCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output[_cR] != null) {
        contents[_CRapa] = de_CapacityReservation(output[_cR]);
    }
    return contents;
};
const de_CreateCarrierGatewayResult = (output, context) => {
    const contents = {};
    if (output[_cG] != null) {
        contents[_CG] = de_CarrierGateway(output[_cG]);
    }
    return contents;
};
const de_CreateClientVpnEndpointResult = (output, context) => {
    const contents = {};
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta]);
    }
    if (output[_dNn] != null) {
        contents[_DNn] = smithyClient.expectString(output[_dNn]);
    }
    return contents;
};
const de_CreateClientVpnRouteResult = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnRouteStatus(output[_sta]);
    }
    return contents;
};
const de_CreateCoipCidrResult = (output, context) => {
    const contents = {};
    if (output[_cCoi] != null) {
        contents[_CCo] = de_CoipCidr(output[_cCoi]);
    }
    return contents;
};
const de_CreateCoipPoolResult = (output, context) => {
    const contents = {};
    if (output[_cP] != null) {
        contents[_CP] = de_CoipPool(output[_cP]);
    }
    return contents;
};
const de_CreateCustomerGatewayResult = (output, context) => {
    const contents = {};
    if (output[_cGu] != null) {
        contents[_CGu] = de_CustomerGateway(output[_cGu]);
    }
    return contents;
};
const de_CreateDefaultSubnetResult = (output, context) => {
    const contents = {};
    if (output[_su] != null) {
        contents[_Su] = de_Subnet(output[_su]);
    }
    return contents;
};
const de_CreateDefaultVpcResult = (output, context) => {
    const contents = {};
    if (output[_vp] != null) {
        contents[_Vp] = de_Vpc(output[_vp]);
    }
    return contents;
};
const de_CreateDelegateMacVolumeOwnershipTaskResult = (output, context) => {
    const contents = {};
    if (output[_mMT] != null) {
        contents[_MMT] = de_MacModificationTask(output[_mMT]);
    }
    return contents;
};
const de_CreateDhcpOptionsResult = (output, context) => {
    const contents = {};
    if (output[_dO] != null) {
        contents[_DOh] = de_DhcpOptions(output[_dO]);
    }
    return contents;
};
const de_CreateEgressOnlyInternetGatewayResult = (output, context) => {
    const contents = {};
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_eOIG] != null) {
        contents[_EOIG] = de_EgressOnlyInternetGateway(output[_eOIG]);
    }
    return contents;
};
const de_CreateFleetError = (output, context) => {
    const contents = {};
    if (output[_lTAO] != null) {
        contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO]);
    }
    if (output[_l] != null) {
        contents[_Li] = smithyClient.expectString(output[_l]);
    }
    if (output[_eC] != null) {
        contents[_EC] = smithyClient.expectString(output[_eC]);
    }
    if (output[_eM] != null) {
        contents[_EM] = smithyClient.expectString(output[_eM]);
    }
    return contents;
};
const de_CreateFleetErrorsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateFleetError(entry);
    });
};
const de_CreateFleetInstance = (output, context) => {
    const contents = {};
    if (output[_lTAO] != null) {
        contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO]);
    }
    if (output[_l] != null) {
        contents[_Li] = smithyClient.expectString(output[_l]);
    }
    if (String(output.instanceIds).trim() === "") {
        contents[_IIns] = [];
    }
    else if (output[_iIn] != null && output[_iIn][_i] != null) {
        contents[_IIns] = de_InstanceIdsSet(smithyClient.getArrayIfSingleItem(output[_iIn][_i]));
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    return contents;
};
const de_CreateFleetInstancesSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateFleetInstance(entry);
    });
};
const de_CreateFleetResult = (output, context) => {
    const contents = {};
    if (output[_fIl] != null) {
        contents[_FIl] = smithyClient.expectString(output[_fIl]);
    }
    if (String(output.errorSet).trim() === "") {
        contents[_Err] = [];
    }
    else if (output[_eSr] != null && output[_eSr][_i] != null) {
        contents[_Err] = de_CreateFleetErrorsSet(smithyClient.getArrayIfSingleItem(output[_eSr][_i]));
    }
    if (String(output.fleetInstanceSet).trim() === "") {
        contents[_In] = [];
    }
    else if (output[_fIS] != null && output[_fIS][_i] != null) {
        contents[_In] = de_CreateFleetInstancesSet(smithyClient.getArrayIfSingleItem(output[_fIS][_i]));
    }
    return contents;
};
const de_CreateFlowLogsResult = (output, context) => {
    const contents = {};
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (String(output.flowLogIdSet).trim() === "") {
        contents[_FLI] = [];
    }
    else if (output[_fLIS] != null && output[_fLIS][_i] != null) {
        contents[_FLI] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_fLIS][_i]));
    }
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_CreateFpgaImageResult = (output, context) => {
    const contents = {};
    if (output[_fII] != null) {
        contents[_FII] = smithyClient.expectString(output[_fII]);
    }
    if (output[_fIGI] != null) {
        contents[_FIGI] = smithyClient.expectString(output[_fIGI]);
    }
    return contents;
};
const de_CreateImageResult = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    return contents;
};
const de_CreateImageUsageReportResult = (output, context) => {
    const contents = {};
    if (output[_rI] != null) {
        contents[_RIep] = smithyClient.expectString(output[_rI]);
    }
    return contents;
};
const de_CreateInstanceConnectEndpointResult = (output, context) => {
    const contents = {};
    if (output[_iCE] != null) {
        contents[_ICE] = de_Ec2InstanceConnectEndpoint(output[_iCE]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output[_iEW] != null) {
        contents[_IEW] = de_InstanceEventWindow(output[_iEW]);
    }
    return contents;
};
const de_CreateInstanceExportTaskResult = (output, context) => {
    const contents = {};
    if (output[_eTx] != null) {
        contents[_ETxp] = de_ExportTask(output[_eTx]);
    }
    return contents;
};
const de_CreateInternetGatewayResult = (output, context) => {
    const contents = {};
    if (output[_iG] != null) {
        contents[_IGn] = de_InternetGateway(output[_iG]);
    }
    return contents;
};
const de_CreateIpamExternalResourceVerificationTokenResult = (output, context) => {
    const contents = {};
    if (output[_iERVT] != null) {
        contents[_IERVT] = de_IpamExternalResourceVerificationToken(output[_iERVT]);
    }
    return contents;
};
const de_CreateIpamPoolResult = (output, context) => {
    const contents = {};
    if (output[_iPp] != null) {
        contents[_IPpa] = de_IpamPool(output[_iPp]);
    }
    return contents;
};
const de_CreateIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output[_iRD] != null) {
        contents[_IRD] = de_IpamResourceDiscovery(output[_iRD]);
    }
    return contents;
};
const de_CreateIpamResult = (output, context) => {
    const contents = {};
    if (output[_ip] != null) {
        contents[_Ipa] = de_Ipam(output[_ip]);
    }
    return contents;
};
const de_CreateIpamScopeResult = (output, context) => {
    const contents = {};
    if (output[_iSp] != null) {
        contents[_ISpa] = de_IpamScope(output[_iSp]);
    }
    return contents;
};
const de_CreateLaunchTemplateResult = (output, context) => {
    const contents = {};
    if (output[_lT] != null) {
        contents[_LTa] = de_LaunchTemplate(output[_lT]);
    }
    if (output[_w] != null) {
        contents[_Wa] = de_ValidationWarning(output[_w]);
    }
    return contents;
};
const de_CreateLaunchTemplateVersionResult = (output, context) => {
    const contents = {};
    if (output[_lTV] != null) {
        contents[_LTV] = de_LaunchTemplateVersion(output[_lTV]);
    }
    if (output[_w] != null) {
        contents[_Wa] = de_ValidationWarning(output[_w]);
    }
    return contents;
};
const de_CreateLocalGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output[_ro] != null) {
        contents[_Rou] = de_LocalGatewayRoute(output[_ro]);
    }
    return contents;
};
const de_CreateLocalGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_lGRT] != null) {
        contents[_LGRT] = de_LocalGatewayRouteTable(output[_lGRT]);
    }
    return contents;
};
const de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (output, context) => {
    const contents = {};
    if (output[_lGRTVIGA] != null) {
        contents[_LGRTVIGA] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output[_lGRTVIGA]);
    }
    return contents;
};
const de_CreateLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
    const contents = {};
    if (output[_lGRTVA] != null) {
        contents[_LGRTVA] = de_LocalGatewayRouteTableVpcAssociation(output[_lGRTVA]);
    }
    return contents;
};
const de_CreateLocalGatewayVirtualInterfaceGroupResult = (output, context) => {
    const contents = {};
    if (output[_lGVIG] != null) {
        contents[_LGVIG] = de_LocalGatewayVirtualInterfaceGroup(output[_lGVIG]);
    }
    return contents;
};
const de_CreateLocalGatewayVirtualInterfaceResult = (output, context) => {
    const contents = {};
    if (output[_lGVI] != null) {
        contents[_LGVI] = de_LocalGatewayVirtualInterface(output[_lGVI]);
    }
    return contents;
};
const de_CreateMacSystemIntegrityProtectionModificationTaskResult = (output, context) => {
    const contents = {};
    if (output[_mMT] != null) {
        contents[_MMT] = de_MacModificationTask(output[_mMT]);
    }
    return contents;
};
const de_CreateManagedPrefixListResult = (output, context) => {
    const contents = {};
    if (output[_pL] != null) {
        contents[_PLr] = de_ManagedPrefixList(output[_pL]);
    }
    return contents;
};
const de_CreateNatGatewayResult = (output, context) => {
    const contents = {};
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_nG] != null) {
        contents[_NG] = de_NatGateway(output[_nG]);
    }
    return contents;
};
const de_CreateNetworkAclResult = (output, context) => {
    const contents = {};
    if (output[_nA] != null) {
        contents[_NA] = de_NetworkAcl(output[_nA]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateNetworkInsightsAccessScopeResult = (output, context) => {
    const contents = {};
    if (output[_nIAS] != null) {
        contents[_NIAS] = de_NetworkInsightsAccessScope(output[_nIAS]);
    }
    if (output[_nIASC] != null) {
        contents[_NIASC] = de_NetworkInsightsAccessScopeContent(output[_nIASC]);
    }
    return contents;
};
const de_CreateNetworkInsightsPathResult = (output, context) => {
    const contents = {};
    if (output[_nIP] != null) {
        contents[_NIP] = de_NetworkInsightsPath(output[_nIP]);
    }
    return contents;
};
const de_CreateNetworkInterfacePermissionResult = (output, context) => {
    const contents = {};
    if (output[_iPnt] != null) {
        contents[_IPnt] = de_NetworkInterfacePermission(output[_iPnt]);
    }
    return contents;
};
const de_CreateNetworkInterfaceResult = (output, context) => {
    const contents = {};
    if (output[_nIe] != null) {
        contents[_NIet] = de_NetworkInterface(output[_nIe]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreatePlacementGroupResult = (output, context) => {
    const contents = {};
    if (output[_pG] != null) {
        contents[_PG] = de_PlacementGroup(output[_pG]);
    }
    return contents;
};
const de_CreatePublicIpv4PoolResult = (output, context) => {
    const contents = {};
    if (output[_pIo] != null) {
        contents[_PIo] = smithyClient.expectString(output[_pIo]);
    }
    return contents;
};
const de_CreateReplaceRootVolumeTaskResult = (output, context) => {
    const contents = {};
    if (output[_rRVT] != null) {
        contents[_RRVT] = de_ReplaceRootVolumeTask(output[_rRVT]);
    }
    return contents;
};
const de_CreateReservedInstancesListingResult = (output, context) => {
    const contents = {};
    if (String(output.reservedInstancesListingsSet).trim() === "") {
        contents[_RIL] = [];
    }
    else if (output[_rILS] != null && output[_rILS][_i] != null) {
        contents[_RIL] = de_ReservedInstancesListingList(smithyClient.getArrayIfSingleItem(output[_rILS][_i]));
    }
    return contents;
};
const de_CreateRestoreImageTaskResult = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    return contents;
};
const de_CreateRouteResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_CreateRouteServerEndpointResult = (output, context) => {
    const contents = {};
    if (output[_rSE] != null) {
        contents[_RSE] = de_RouteServerEndpoint(output[_rSE]);
    }
    return contents;
};
const de_CreateRouteServerPeerResult = (output, context) => {
    const contents = {};
    if (output[_rSP] != null) {
        contents[_RSP] = de_RouteServerPeer(output[_rSP]);
    }
    return contents;
};
const de_CreateRouteServerResult = (output, context) => {
    const contents = {};
    if (output[_rSo] != null) {
        contents[_RSo] = de_RouteServer(output[_rSo]);
    }
    return contents;
};
const de_CreateRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_rTo] != null) {
        contents[_RTo] = de_RouteTable(output[_rTo]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateSecurityGroupResult = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sGA] != null) {
        contents[_SGA] = smithyClient.expectString(output[_sGA]);
    }
    return contents;
};
const de_CreateSnapshotsResult = (output, context) => {
    const contents = {};
    if (String(output.snapshotSet).trim() === "") {
        contents[_Sn] = [];
    }
    else if (output[_sS] != null && output[_sS][_i] != null) {
        contents[_Sn] = de_SnapshotSet(smithyClient.getArrayIfSingleItem(output[_sS][_i]));
    }
    return contents;
};
const de_CreateSpotDatafeedSubscriptionResult = (output, context) => {
    const contents = {};
    if (output[_sDS] != null) {
        contents[_SDS] = de_SpotDatafeedSubscription(output[_sDS]);
    }
    return contents;
};
const de_CreateStoreImageTaskResult = (output, context) => {
    const contents = {};
    if (output[_oK] != null) {
        contents[_OK] = smithyClient.expectString(output[_oK]);
    }
    return contents;
};
const de_CreateSubnetCidrReservationResult = (output, context) => {
    const contents = {};
    if (output[_sCRu] != null) {
        contents[_SCRu] = de_SubnetCidrReservation(output[_sCRu]);
    }
    return contents;
};
const de_CreateSubnetResult = (output, context) => {
    const contents = {};
    if (output[_su] != null) {
        contents[_Su] = de_Subnet(output[_su]);
    }
    return contents;
};
const de_CreateTrafficMirrorFilterResult = (output, context) => {
    const contents = {};
    if (output[_tMF] != null) {
        contents[_TMF] = de_TrafficMirrorFilter(output[_tMF]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {};
    if (output[_tMFR] != null) {
        contents[_TMFR] = de_TrafficMirrorFilterRule(output[_tMFR]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateTrafficMirrorSessionResult = (output, context) => {
    const contents = {};
    if (output[_tMS] != null) {
        contents[_TMS] = de_TrafficMirrorSession(output[_tMS]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateTrafficMirrorTargetResult = (output, context) => {
    const contents = {};
    if (output[_tMT] != null) {
        contents[_TMT] = de_TrafficMirrorTarget(output[_tMT]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateTransitGatewayConnectPeerResult = (output, context) => {
    const contents = {};
    if (output[_tGCP] != null) {
        contents[_TGCP] = de_TransitGatewayConnectPeer(output[_tGCP]);
    }
    return contents;
};
const de_CreateTransitGatewayConnectResult = (output, context) => {
    const contents = {};
    if (output[_tGC] != null) {
        contents[_TGCr] = de_TransitGatewayConnect(output[_tGC]);
    }
    return contents;
};
const de_CreateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output[_tGMD] != null) {
        contents[_TGMD] = de_TransitGatewayMulticastDomain(output[_tGMD]);
    }
    return contents;
};
const de_CreateTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGPA] != null) {
        contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA]);
    }
    return contents;
};
const de_CreateTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output[_tGPT] != null) {
        contents[_TGPT] = de_TransitGatewayPolicyTable(output[_tGPT]);
    }
    return contents;
};
const de_CreateTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {};
    if (output[_tGPLR] != null) {
        contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR]);
    }
    return contents;
};
const de_CreateTransitGatewayResult = (output, context) => {
    const contents = {};
    if (output[_tG] != null) {
        contents[_TGr] = de_TransitGateway(output[_tG]);
    }
    return contents;
};
const de_CreateTransitGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output[_ro] != null) {
        contents[_Rou] = de_TransitGatewayRoute(output[_ro]);
    }
    return contents;
};
const de_CreateTransitGatewayRouteTableAnnouncementResult = (output, context) => {
    const contents = {};
    if (output[_tGRTA] != null) {
        contents[_TGRTA] = de_TransitGatewayRouteTableAnnouncement(output[_tGRTA]);
    }
    return contents;
};
const de_CreateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_tGRT] != null) {
        contents[_TGRT] = de_TransitGatewayRouteTable(output[_tGRT]);
    }
    return contents;
};
const de_CreateTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGVA] != null) {
        contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA]);
    }
    return contents;
};
const de_CreateVerifiedAccessEndpointResult = (output, context) => {
    const contents = {};
    if (output[_vAE] != null) {
        contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE]);
    }
    return contents;
};
const de_CreateVerifiedAccessGroupResult = (output, context) => {
    const contents = {};
    if (output[_vAG] != null) {
        contents[_VAG] = de_VerifiedAccessGroup(output[_vAG]);
    }
    return contents;
};
const de_CreateVerifiedAccessInstanceResult = (output, context) => {
    const contents = {};
    if (output[_vAI] != null) {
        contents[_VAI] = de_VerifiedAccessInstance(output[_vAI]);
    }
    return contents;
};
const de_CreateVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output[_vATP] != null) {
        contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP]);
    }
    return contents;
};
const de_CreateVolumePermission = (output, context) => {
    const contents = {};
    if (output[_uI] != null) {
        contents[_UIs] = smithyClient.expectString(output[_uI]);
    }
    if (output[_g] != null) {
        contents[_Gr] = smithyClient.expectString(output[_g]);
    }
    return contents;
};
const de_CreateVolumePermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CreateVolumePermission(entry);
    });
};
const de_CreateVpcBlockPublicAccessExclusionResult = (output, context) => {
    const contents = {};
    if (output[_vBPAE] != null) {
        contents[_VBPAE] = de_VpcBlockPublicAccessExclusion(output[_vBPAE]);
    }
    return contents;
};
const de_CreateVpcEndpointConnectionNotificationResult = (output, context) => {
    const contents = {};
    if (output[_cNo] != null) {
        contents[_CNo] = de_ConnectionNotification(output[_cNo]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateVpcEndpointResult = (output, context) => {
    const contents = {};
    if (output[_vE] != null) {
        contents[_VE] = de_VpcEndpoint(output[_vE]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateVpcEndpointServiceConfigurationResult = (output, context) => {
    const contents = {};
    if (output[_sC] != null) {
        contents[_SCe] = de_ServiceConfiguration(output[_sC]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_CreateVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output[_vPC] != null) {
        contents[_VPC] = de_VpcPeeringConnection(output[_vPC]);
    }
    return contents;
};
const de_CreateVpcResult = (output, context) => {
    const contents = {};
    if (output[_vp] != null) {
        contents[_Vp] = de_Vpc(output[_vp]);
    }
    return contents;
};
const de_CreateVpnConnectionResult = (output, context) => {
    const contents = {};
    if (output[_vC] != null) {
        contents[_VC] = de_VpnConnection(output[_vC]);
    }
    return contents;
};
const de_CreateVpnGatewayResult = (output, context) => {
    const contents = {};
    if (output[_vG] != null) {
        contents[_VG] = de_VpnGateway(output[_vG]);
    }
    return contents;
};
const de_CreationDateCondition = (output, context) => {
    const contents = {};
    if (output[_mDSC] != null) {
        contents[_MDSC] = smithyClient.strictParseInt32(output[_mDSC]);
    }
    return contents;
};
const de_CreditSpecification = (output, context) => {
    const contents = {};
    if (output[_cCp] != null) {
        contents[_CCp] = smithyClient.expectString(output[_cCp]);
    }
    return contents;
};
const de_CustomerGateway = (output, context) => {
    const contents = {};
    if (output[_cAe] != null) {
        contents[_CA] = smithyClient.expectString(output[_cAe]);
    }
    if (output[_dN] != null) {
        contents[_DN] = smithyClient.expectString(output[_dN]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_bAE] != null) {
        contents[_BAE] = smithyClient.expectString(output[_bAE]);
    }
    if (output[_cGIu] != null) {
        contents[_CGIu] = smithyClient.expectString(output[_cGIu]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_iAp] != null) {
        contents[_IAp] = smithyClient.expectString(output[_iAp]);
    }
    if (output[_bA] != null) {
        contents[_BA] = smithyClient.expectString(output[_bA]);
    }
    return contents;
};
const de_CustomerGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomerGateway(entry);
    });
};
const de_DataResponse = (output, context) => {
    const contents = {};
    if (output[_id] != null) {
        contents[_Id] = smithyClient.expectString(output[_id]);
    }
    if (output[_s] != null) {
        contents[_S] = smithyClient.expectString(output[_s]);
    }
    if (output[_d] != null) {
        contents[_D] = smithyClient.expectString(output[_d]);
    }
    if (output[_met] != null) {
        contents[_Met] = smithyClient.expectString(output[_met]);
    }
    if (output[_stat] != null) {
        contents[_Sta] = smithyClient.expectString(output[_stat]);
    }
    if (output[_pe] != null) {
        contents[_Per] = smithyClient.expectString(output[_pe]);
    }
    if (String(output.metricPointSet).trim() === "") {
        contents[_MPe] = [];
    }
    else if (output[_mPS] != null && output[_mPS][_i] != null) {
        contents[_MPe] = de_MetricPoints(smithyClient.getArrayIfSingleItem(output[_mPS][_i]));
    }
    return contents;
};
const de_DataResponses = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DataResponse(entry);
    });
};
const de_DeclarativePoliciesReport = (output, context) => {
    const contents = {};
    if (output[_rI] != null) {
        contents[_RIep] = smithyClient.expectString(output[_rI]);
    }
    if (output[_sB] != null) {
        contents[_SB] = smithyClient.expectString(output[_sB]);
    }
    if (output[_sP] != null) {
        contents[_SP] = smithyClient.expectString(output[_sP]);
    }
    if (output[_tI] != null) {
        contents[_TIa] = smithyClient.expectString(output[_tI]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_eTn] != null) {
        contents[_ETn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTn]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_DeclarativePoliciesReportList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeclarativePoliciesReport(entry);
    });
};
const de_DedicatedHostIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_DeleteCarrierGatewayResult = (output, context) => {
    const contents = {};
    if (output[_cG] != null) {
        contents[_CG] = de_CarrierGateway(output[_cG]);
    }
    return contents;
};
const de_DeleteClientVpnEndpointResult = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnEndpointStatus(output[_sta]);
    }
    return contents;
};
const de_DeleteClientVpnRouteResult = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnRouteStatus(output[_sta]);
    }
    return contents;
};
const de_DeleteCoipCidrResult = (output, context) => {
    const contents = {};
    if (output[_cCoi] != null) {
        contents[_CCo] = de_CoipCidr(output[_cCoi]);
    }
    return contents;
};
const de_DeleteCoipPoolResult = (output, context) => {
    const contents = {};
    if (output[_cP] != null) {
        contents[_CP] = de_CoipPool(output[_cP]);
    }
    return contents;
};
const de_DeleteEgressOnlyInternetGatewayResult = (output, context) => {
    const contents = {};
    if (output[_rC] != null) {
        contents[_RCet] = smithyClient.parseBoolean(output[_rC]);
    }
    return contents;
};
const de_DeleteFleetError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_DeleteFleetErrorItem = (output, context) => {
    const contents = {};
    if (output[_er] != null) {
        contents[_Er] = de_DeleteFleetError(output[_er]);
    }
    if (output[_fIl] != null) {
        contents[_FIl] = smithyClient.expectString(output[_fIl]);
    }
    return contents;
};
const de_DeleteFleetErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteFleetErrorItem(entry);
    });
};
const de_DeleteFleetsResult = (output, context) => {
    const contents = {};
    if (String(output.successfulFleetDeletionSet).trim() === "") {
        contents[_SFD] = [];
    }
    else if (output[_sFDS] != null && output[_sFDS][_i] != null) {
        contents[_SFD] = de_DeleteFleetSuccessSet(smithyClient.getArrayIfSingleItem(output[_sFDS][_i]));
    }
    if (String(output.unsuccessfulFleetDeletionSet).trim() === "") {
        contents[_UFD] = [];
    }
    else if (output[_uFDS] != null && output[_uFDS][_i] != null) {
        contents[_UFD] = de_DeleteFleetErrorSet(smithyClient.getArrayIfSingleItem(output[_uFDS][_i]));
    }
    return contents;
};
const de_DeleteFleetSuccessItem = (output, context) => {
    const contents = {};
    if (output[_cFS] != null) {
        contents[_CFS] = smithyClient.expectString(output[_cFS]);
    }
    if (output[_pFS] != null) {
        contents[_PFS] = smithyClient.expectString(output[_pFS]);
    }
    if (output[_fIl] != null) {
        contents[_FIl] = smithyClient.expectString(output[_fIl]);
    }
    return contents;
};
const de_DeleteFleetSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteFleetSuccessItem(entry);
    });
};
const de_DeleteFlowLogsResult = (output, context) => {
    const contents = {};
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_DeleteFpgaImageResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DeleteImageUsageReportResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DeleteInstanceConnectEndpointResult = (output, context) => {
    const contents = {};
    if (output[_iCE] != null) {
        contents[_ICE] = de_Ec2InstanceConnectEndpoint(output[_iCE]);
    }
    return contents;
};
const de_DeleteInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output[_iEWS] != null) {
        contents[_IEWS] = de_InstanceEventWindowStateChange(output[_iEWS]);
    }
    return contents;
};
const de_DeleteIpamExternalResourceVerificationTokenResult = (output, context) => {
    const contents = {};
    if (output[_iERVT] != null) {
        contents[_IERVT] = de_IpamExternalResourceVerificationToken(output[_iERVT]);
    }
    return contents;
};
const de_DeleteIpamPoolResult = (output, context) => {
    const contents = {};
    if (output[_iPp] != null) {
        contents[_IPpa] = de_IpamPool(output[_iPp]);
    }
    return contents;
};
const de_DeleteIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output[_iRD] != null) {
        contents[_IRD] = de_IpamResourceDiscovery(output[_iRD]);
    }
    return contents;
};
const de_DeleteIpamResult = (output, context) => {
    const contents = {};
    if (output[_ip] != null) {
        contents[_Ipa] = de_Ipam(output[_ip]);
    }
    return contents;
};
const de_DeleteIpamScopeResult = (output, context) => {
    const contents = {};
    if (output[_iSp] != null) {
        contents[_ISpa] = de_IpamScope(output[_iSp]);
    }
    return contents;
};
const de_DeleteKeyPairResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (output[_kPI] != null) {
        contents[_KPI] = smithyClient.expectString(output[_kPI]);
    }
    return contents;
};
const de_DeleteLaunchTemplateResult = (output, context) => {
    const contents = {};
    if (output[_lT] != null) {
        contents[_LTa] = de_LaunchTemplate(output[_lT]);
    }
    return contents;
};
const de_DeleteLaunchTemplateVersionsResponseErrorItem = (output, context) => {
    const contents = {};
    if (output[_lTI] != null) {
        contents[_LTI] = smithyClient.expectString(output[_lTI]);
    }
    if (output[_lTN] != null) {
        contents[_LTN] = smithyClient.expectString(output[_lTN]);
    }
    if (output[_vNe] != null) {
        contents[_VNe] = smithyClient.strictParseLong(output[_vNe]);
    }
    if (output[_rE] != null) {
        contents[_REes] = de_ResponseError(output[_rE]);
    }
    return contents;
};
const de_DeleteLaunchTemplateVersionsResponseErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteLaunchTemplateVersionsResponseErrorItem(entry);
    });
};
const de_DeleteLaunchTemplateVersionsResponseSuccessItem = (output, context) => {
    const contents = {};
    if (output[_lTI] != null) {
        contents[_LTI] = smithyClient.expectString(output[_lTI]);
    }
    if (output[_lTN] != null) {
        contents[_LTN] = smithyClient.expectString(output[_lTN]);
    }
    if (output[_vNe] != null) {
        contents[_VNe] = smithyClient.strictParseLong(output[_vNe]);
    }
    return contents;
};
const de_DeleteLaunchTemplateVersionsResponseSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteLaunchTemplateVersionsResponseSuccessItem(entry);
    });
};
const de_DeleteLaunchTemplateVersionsResult = (output, context) => {
    const contents = {};
    if (String(output.successfullyDeletedLaunchTemplateVersionSet).trim() === "") {
        contents[_SDLTV] = [];
    }
    else if (output[_sDLTVS] != null && output[_sDLTVS][_i] != null) {
        contents[_SDLTV] = de_DeleteLaunchTemplateVersionsResponseSuccessSet(smithyClient.getArrayIfSingleItem(output[_sDLTVS][_i]));
    }
    if (String(output.unsuccessfullyDeletedLaunchTemplateVersionSet).trim() === "") {
        contents[_UDLTV] = [];
    }
    else if (output[_uDLTVS] != null && output[_uDLTVS][_i] != null) {
        contents[_UDLTV] = de_DeleteLaunchTemplateVersionsResponseErrorSet(smithyClient.getArrayIfSingleItem(output[_uDLTVS][_i]));
    }
    return contents;
};
const de_DeleteLocalGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output[_ro] != null) {
        contents[_Rou] = de_LocalGatewayRoute(output[_ro]);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_lGRT] != null) {
        contents[_LGRT] = de_LocalGatewayRouteTable(output[_lGRT]);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationResult = (output, context) => {
    const contents = {};
    if (output[_lGRTVIGA] != null) {
        contents[_LGRTVIGA] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(output[_lGRTVIGA]);
    }
    return contents;
};
const de_DeleteLocalGatewayRouteTableVpcAssociationResult = (output, context) => {
    const contents = {};
    if (output[_lGRTVA] != null) {
        contents[_LGRTVA] = de_LocalGatewayRouteTableVpcAssociation(output[_lGRTVA]);
    }
    return contents;
};
const de_DeleteLocalGatewayVirtualInterfaceGroupResult = (output, context) => {
    const contents = {};
    if (output[_lGVIG] != null) {
        contents[_LGVIG] = de_LocalGatewayVirtualInterfaceGroup(output[_lGVIG]);
    }
    return contents;
};
const de_DeleteLocalGatewayVirtualInterfaceResult = (output, context) => {
    const contents = {};
    if (output[_lGVI] != null) {
        contents[_LGVI] = de_LocalGatewayVirtualInterface(output[_lGVI]);
    }
    return contents;
};
const de_DeleteManagedPrefixListResult = (output, context) => {
    const contents = {};
    if (output[_pL] != null) {
        contents[_PLr] = de_ManagedPrefixList(output[_pL]);
    }
    return contents;
};
const de_DeleteNatGatewayResult = (output, context) => {
    const contents = {};
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    return contents;
};
const de_DeleteNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
    const contents = {};
    if (output[_nIASAI] != null) {
        contents[_NIASAI] = smithyClient.expectString(output[_nIASAI]);
    }
    return contents;
};
const de_DeleteNetworkInsightsAccessScopeResult = (output, context) => {
    const contents = {};
    if (output[_nIASI] != null) {
        contents[_NIASI] = smithyClient.expectString(output[_nIASI]);
    }
    return contents;
};
const de_DeleteNetworkInsightsAnalysisResult = (output, context) => {
    const contents = {};
    if (output[_nIAI] != null) {
        contents[_NIAI] = smithyClient.expectString(output[_nIAI]);
    }
    return contents;
};
const de_DeleteNetworkInsightsPathResult = (output, context) => {
    const contents = {};
    if (output[_nIPI] != null) {
        contents[_NIPI] = smithyClient.expectString(output[_nIPI]);
    }
    return contents;
};
const de_DeleteNetworkInterfacePermissionResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DeletePublicIpv4PoolResult = (output, context) => {
    const contents = {};
    if (output[_rV] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_rV]);
    }
    return contents;
};
const de_DeleteQueuedReservedInstancesError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_DeleteQueuedReservedInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.successfulQueuedPurchaseDeletionSet).trim() === "") {
        contents[_SQPD] = [];
    }
    else if (output[_sQPDS] != null && output[_sQPDS][_i] != null) {
        contents[_SQPD] = de_SuccessfulQueuedPurchaseDeletionSet(smithyClient.getArrayIfSingleItem(output[_sQPDS][_i]));
    }
    if (String(output.failedQueuedPurchaseDeletionSet).trim() === "") {
        contents[_FQPD] = [];
    }
    else if (output[_fQPDS] != null && output[_fQPDS][_i] != null) {
        contents[_FQPD] = de_FailedQueuedPurchaseDeletionSet(smithyClient.getArrayIfSingleItem(output[_fQPDS][_i]));
    }
    return contents;
};
const de_DeleteRouteServerEndpointResult = (output, context) => {
    const contents = {};
    if (output[_rSE] != null) {
        contents[_RSE] = de_RouteServerEndpoint(output[_rSE]);
    }
    return contents;
};
const de_DeleteRouteServerPeerResult = (output, context) => {
    const contents = {};
    if (output[_rSP] != null) {
        contents[_RSP] = de_RouteServerPeer(output[_rSP]);
    }
    return contents;
};
const de_DeleteRouteServerResult = (output, context) => {
    const contents = {};
    if (output[_rSo] != null) {
        contents[_RSo] = de_RouteServer(output[_rSo]);
    }
    return contents;
};
const de_DeleteSecurityGroupResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    return contents;
};
const de_DeleteSnapshotResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeleteSnapshotReturnCode(entry);
    });
};
const de_DeleteSnapshotReturnCode = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_rC] != null) {
        contents[_RCet] = smithyClient.expectString(output[_rC]);
    }
    return contents;
};
const de_DeleteSubnetCidrReservationResult = (output, context) => {
    const contents = {};
    if (output[_dSCR] != null) {
        contents[_DSCRe] = de_SubnetCidrReservation(output[_dSCR]);
    }
    return contents;
};
const de_DeleteTrafficMirrorFilterResult = (output, context) => {
    const contents = {};
    if (output[_tMFI] != null) {
        contents[_TMFI] = smithyClient.expectString(output[_tMFI]);
    }
    return contents;
};
const de_DeleteTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {};
    if (output[_tMFRI] != null) {
        contents[_TMFRI] = smithyClient.expectString(output[_tMFRI]);
    }
    return contents;
};
const de_DeleteTrafficMirrorSessionResult = (output, context) => {
    const contents = {};
    if (output[_tMSI] != null) {
        contents[_TMSI] = smithyClient.expectString(output[_tMSI]);
    }
    return contents;
};
const de_DeleteTrafficMirrorTargetResult = (output, context) => {
    const contents = {};
    if (output[_tMTI] != null) {
        contents[_TMTI] = smithyClient.expectString(output[_tMTI]);
    }
    return contents;
};
const de_DeleteTransitGatewayConnectPeerResult = (output, context) => {
    const contents = {};
    if (output[_tGCP] != null) {
        contents[_TGCP] = de_TransitGatewayConnectPeer(output[_tGCP]);
    }
    return contents;
};
const de_DeleteTransitGatewayConnectResult = (output, context) => {
    const contents = {};
    if (output[_tGC] != null) {
        contents[_TGCr] = de_TransitGatewayConnect(output[_tGC]);
    }
    return contents;
};
const de_DeleteTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output[_tGMD] != null) {
        contents[_TGMD] = de_TransitGatewayMulticastDomain(output[_tGMD]);
    }
    return contents;
};
const de_DeleteTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGPA] != null) {
        contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA]);
    }
    return contents;
};
const de_DeleteTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output[_tGPT] != null) {
        contents[_TGPT] = de_TransitGatewayPolicyTable(output[_tGPT]);
    }
    return contents;
};
const de_DeleteTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {};
    if (output[_tGPLR] != null) {
        contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR]);
    }
    return contents;
};
const de_DeleteTransitGatewayResult = (output, context) => {
    const contents = {};
    if (output[_tG] != null) {
        contents[_TGr] = de_TransitGateway(output[_tG]);
    }
    return contents;
};
const de_DeleteTransitGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output[_ro] != null) {
        contents[_Rou] = de_TransitGatewayRoute(output[_ro]);
    }
    return contents;
};
const de_DeleteTransitGatewayRouteTableAnnouncementResult = (output, context) => {
    const contents = {};
    if (output[_tGRTA] != null) {
        contents[_TGRTA] = de_TransitGatewayRouteTableAnnouncement(output[_tGRTA]);
    }
    return contents;
};
const de_DeleteTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_tGRT] != null) {
        contents[_TGRT] = de_TransitGatewayRouteTable(output[_tGRT]);
    }
    return contents;
};
const de_DeleteTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGVA] != null) {
        contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA]);
    }
    return contents;
};
const de_DeleteVerifiedAccessEndpointResult = (output, context) => {
    const contents = {};
    if (output[_vAE] != null) {
        contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE]);
    }
    return contents;
};
const de_DeleteVerifiedAccessGroupResult = (output, context) => {
    const contents = {};
    if (output[_vAG] != null) {
        contents[_VAG] = de_VerifiedAccessGroup(output[_vAG]);
    }
    return contents;
};
const de_DeleteVerifiedAccessInstanceResult = (output, context) => {
    const contents = {};
    if (output[_vAI] != null) {
        contents[_VAI] = de_VerifiedAccessInstance(output[_vAI]);
    }
    return contents;
};
const de_DeleteVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output[_vATP] != null) {
        contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP]);
    }
    return contents;
};
const de_DeleteVpcBlockPublicAccessExclusionResult = (output, context) => {
    const contents = {};
    if (output[_vBPAE] != null) {
        contents[_VBPAE] = de_VpcBlockPublicAccessExclusion(output[_vBPAE]);
    }
    return contents;
};
const de_DeleteVpcEndpointConnectionNotificationsResult = (output, context) => {
    const contents = {};
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_DeleteVpcEndpointServiceConfigurationsResult = (output, context) => {
    const contents = {};
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_DeleteVpcEndpointsResult = (output, context) => {
    const contents = {};
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_DeleteVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DeprecationTimeCondition = (output, context) => {
    const contents = {};
    if (output[_mDSD] != null) {
        contents[_MDSD] = smithyClient.strictParseInt32(output[_mDSD]);
    }
    return contents;
};
const de_DeprovisionByoipCidrResult = (output, context) => {
    const contents = {};
    if (output[_bC] != null) {
        contents[_BC] = de_ByoipCidr(output[_bC]);
    }
    return contents;
};
const de_DeprovisionedAddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_DeprovisionIpamByoasnResult = (output, context) => {
    const contents = {};
    if (output[_b] != null) {
        contents[_Byo] = de_Byoasn(output[_b]);
    }
    return contents;
};
const de_DeprovisionIpamPoolCidrResult = (output, context) => {
    const contents = {};
    if (output[_iPC] != null) {
        contents[_IPCpa] = de_IpamPoolCidr(output[_iPC]);
    }
    return contents;
};
const de_DeprovisionPublicIpv4PoolCidrResult = (output, context) => {
    const contents = {};
    if (output[_pIo] != null) {
        contents[_PIo] = smithyClient.expectString(output[_pIo]);
    }
    if (String(output.deprovisionedAddressSet).trim() === "") {
        contents[_DAep] = [];
    }
    else if (output[_dASe] != null && output[_dASe][_i] != null) {
        contents[_DAep] = de_DeprovisionedAddressSet(smithyClient.getArrayIfSingleItem(output[_dASe][_i]));
    }
    return contents;
};
const de_DeregisterImageResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (String(output.deleteSnapshotResultSet).trim() === "") {
        contents[_DSR] = [];
    }
    else if (output[_dSRS] != null && output[_dSRS][_i] != null) {
        contents[_DSR] = de_DeleteSnapshotResultSet(smithyClient.getArrayIfSingleItem(output[_dSRS][_i]));
    }
    return contents;
};
const de_DeregisterInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {};
    if (output[_iTA] != null) {
        contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA]);
    }
    return contents;
};
const de_DeregisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
    const contents = {};
    if (output[_dMGM] != null) {
        contents[_DMGM] = de_TransitGatewayMulticastDeregisteredGroupMembers(output[_dMGM]);
    }
    return contents;
};
const de_DeregisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
    const contents = {};
    if (output[_dMGS] != null) {
        contents[_DMGS] = de_TransitGatewayMulticastDeregisteredGroupSources(output[_dMGS]);
    }
    return contents;
};
const de_DescribeAccountAttributesResult = (output, context) => {
    const contents = {};
    if (String(output.accountAttributeSet).trim() === "") {
        contents[_AAcc] = [];
    }
    else if (output[_aASc] != null && output[_aASc][_i] != null) {
        contents[_AAcc] = de_AccountAttributeList(smithyClient.getArrayIfSingleItem(output[_aASc][_i]));
    }
    return contents;
};
const de_DescribeAddressesAttributeResult = (output, context) => {
    const contents = {};
    if (String(output.addressSet).trim() === "") {
        contents[_Addr] = [];
    }
    else if (output[_aSd] != null && output[_aSd][_i] != null) {
        contents[_Addr] = de_AddressSet(smithyClient.getArrayIfSingleItem(output[_aSd][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeAddressesResult = (output, context) => {
    const contents = {};
    if (String(output.addressesSet).trim() === "") {
        contents[_Addr] = [];
    }
    else if (output[_aSdd] != null && output[_aSdd][_i] != null) {
        contents[_Addr] = de_AddressList(smithyClient.getArrayIfSingleItem(output[_aSdd][_i]));
    }
    return contents;
};
const de_DescribeAddressTransfersResult = (output, context) => {
    const contents = {};
    if (String(output.addressTransferSet).trim() === "") {
        contents[_ATddr] = [];
    }
    else if (output[_aTSd] != null && output[_aTSd][_i] != null) {
        contents[_ATddr] = de_AddressTransferList(smithyClient.getArrayIfSingleItem(output[_aTSd][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeAggregateIdFormatResult = (output, context) => {
    const contents = {};
    if (output[_uLIA] != null) {
        contents[_ULIA] = smithyClient.parseBoolean(output[_uLIA]);
    }
    if (String(output.statusSet).trim() === "") {
        contents[_Status] = [];
    }
    else if (output[_sSt] != null && output[_sSt][_i] != null) {
        contents[_Status] = de_IdFormatList(smithyClient.getArrayIfSingleItem(output[_sSt][_i]));
    }
    return contents;
};
const de_DescribeAvailabilityZonesResult = (output, context) => {
    const contents = {};
    if (String(output.availabilityZoneInfo).trim() === "") {
        contents[_AZv] = [];
    }
    else if (output[_aZIv] != null && output[_aZIv][_i] != null) {
        contents[_AZv] = de_AvailabilityZoneList(smithyClient.getArrayIfSingleItem(output[_aZIv][_i]));
    }
    return contents;
};
const de_DescribeAwsNetworkPerformanceMetricSubscriptionsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.subscriptionSet).trim() === "") {
        contents[_Sub] = [];
    }
    else if (output[_sSu] != null && output[_sSu][_i] != null) {
        contents[_Sub] = de_SubscriptionList(smithyClient.getArrayIfSingleItem(output[_sSu][_i]));
    }
    return contents;
};
const de_DescribeBundleTasksResult = (output, context) => {
    const contents = {};
    if (String(output.bundleInstanceTasksSet).trim() === "") {
        contents[_BTun] = [];
    }
    else if (output[_bITS] != null && output[_bITS][_i] != null) {
        contents[_BTun] = de_BundleTaskList(smithyClient.getArrayIfSingleItem(output[_bITS][_i]), context);
    }
    return contents;
};
const de_DescribeByoipCidrsResult = (output, context) => {
    const contents = {};
    if (String(output.byoipCidrSet).trim() === "") {
        contents[_BCy] = [];
    }
    else if (output[_bCS] != null && output[_bCS][_i] != null) {
        contents[_BCy] = de_ByoipCidrSet(smithyClient.getArrayIfSingleItem(output[_bCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityBlockExtensionHistoryResult = (output, context) => {
    const contents = {};
    if (String(output.capacityBlockExtensionSet).trim() === "") {
        contents[_CBE] = [];
    }
    else if (output[_cBESa] != null && output[_cBESa][_i] != null) {
        contents[_CBE] = de_CapacityBlockExtensionSet(smithyClient.getArrayIfSingleItem(output[_cBESa][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityBlockExtensionOfferingsResult = (output, context) => {
    const contents = {};
    if (String(output.capacityBlockExtensionOfferingSet).trim() === "") {
        contents[_CBEO] = [];
    }
    else if (output[_cBEOS] != null && output[_cBEOS][_i] != null) {
        contents[_CBEO] = de_CapacityBlockExtensionOfferingSet(smithyClient.getArrayIfSingleItem(output[_cBEOS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityBlockOfferingsResult = (output, context) => {
    const contents = {};
    if (String(output.capacityBlockOfferingSet).trim() === "") {
        contents[_CBO] = [];
    }
    else if (output[_cBOS] != null && output[_cBOS][_i] != null) {
        contents[_CBO] = de_CapacityBlockOfferingSet(smithyClient.getArrayIfSingleItem(output[_cBOS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityBlocksResult = (output, context) => {
    const contents = {};
    if (String(output.capacityBlockSet).trim() === "") {
        contents[_CBa] = [];
    }
    else if (output[_cBS] != null && output[_cBS][_i] != null) {
        contents[_CBa] = de_CapacityBlockSet(smithyClient.getArrayIfSingleItem(output[_cBS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityBlockStatusResult = (output, context) => {
    const contents = {};
    if (String(output.capacityBlockStatusSet).trim() === "") {
        contents[_CBS] = [];
    }
    else if (output[_cBSS] != null && output[_cBSS][_i] != null) {
        contents[_CBS] = de_CapacityBlockStatusSet(smithyClient.getArrayIfSingleItem(output[_cBSS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityReservationBillingRequestsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.capacityReservationBillingRequestSet).trim() === "") {
        contents[_CRBR] = [];
    }
    else if (output[_cRBRS] != null && output[_cRBRS][_i] != null) {
        contents[_CRBR] = de_CapacityReservationBillingRequestSet(smithyClient.getArrayIfSingleItem(output[_cRBRS][_i]));
    }
    return contents;
};
const de_DescribeCapacityReservationFleetsResult = (output, context) => {
    const contents = {};
    if (String(output.capacityReservationFleetSet).trim() === "") {
        contents[_CRF] = [];
    }
    else if (output[_cRFS] != null && output[_cRFS][_i] != null) {
        contents[_CRF] = de_CapacityReservationFleetSet(smithyClient.getArrayIfSingleItem(output[_cRFS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCapacityReservationsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.capacityReservationSet).trim() === "") {
        contents[_CRapac] = [];
    }
    else if (output[_cRS] != null && output[_cRS][_i] != null) {
        contents[_CRapac] = de_CapacityReservationSet(smithyClient.getArrayIfSingleItem(output[_cRS][_i]));
    }
    return contents;
};
const de_DescribeCarrierGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.carrierGatewaySet).trim() === "") {
        contents[_CGa] = [];
    }
    else if (output[_cGS] != null && output[_cGS][_i] != null) {
        contents[_CGa] = de_CarrierGatewaySet(smithyClient.getArrayIfSingleItem(output[_cGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeClassicLinkInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instancesSet).trim() === "") {
        contents[_In] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_In] = de_ClassicLinkInstanceList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeClientVpnAuthorizationRulesResult = (output, context) => {
    const contents = {};
    if (String(output.authorizationRule).trim() === "") {
        contents[_ARut] = [];
    }
    else if (output[_aR] != null && output[_aR][_i] != null) {
        contents[_ARut] = de_AuthorizationRuleSet(smithyClient.getArrayIfSingleItem(output[_aR][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeClientVpnConnectionsResult = (output, context) => {
    const contents = {};
    if (String(output.connections).trim() === "") {
        contents[_Conn] = [];
    }
    else if (output[_con] != null && output[_con][_i] != null) {
        contents[_Conn] = de_ClientVpnConnectionSet(smithyClient.getArrayIfSingleItem(output[_con][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeClientVpnEndpointsResult = (output, context) => {
    const contents = {};
    if (String(output.clientVpnEndpoint).trim() === "") {
        contents[_CVEl] = [];
    }
    else if (output[_cVE] != null && output[_cVE][_i] != null) {
        contents[_CVEl] = de_EndpointSet(smithyClient.getArrayIfSingleItem(output[_cVE][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeClientVpnRoutesResult = (output, context) => {
    const contents = {};
    if (String(output.routes).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rou] != null && output[_rou][_i] != null) {
        contents[_Rout] = de_ClientVpnRouteSet(smithyClient.getArrayIfSingleItem(output[_rou][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeClientVpnTargetNetworksResult = (output, context) => {
    const contents = {};
    if (String(output.clientVpnTargetNetworks).trim() === "") {
        contents[_CVTN] = [];
    }
    else if (output[_cVTN] != null && output[_cVTN][_i] != null) {
        contents[_CVTN] = de_TargetNetworkSet(smithyClient.getArrayIfSingleItem(output[_cVTN][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeCoipPoolsResult = (output, context) => {
    const contents = {};
    if (String(output.coipPoolSet).trim() === "") {
        contents[_CPo] = [];
    }
    else if (output[_cPS] != null && output[_cPS][_i] != null) {
        contents[_CPo] = de_CoipPoolSet(smithyClient.getArrayIfSingleItem(output[_cPS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeConversionTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ConversionTask(entry);
    });
};
const de_DescribeConversionTasksResult = (output, context) => {
    const contents = {};
    if (String(output.conversionTasks).trim() === "") {
        contents[_CTon] = [];
    }
    else if (output[_cTo] != null && output[_cTo][_i] != null) {
        contents[_CTon] = de_DescribeConversionTaskList(smithyClient.getArrayIfSingleItem(output[_cTo][_i]));
    }
    return contents;
};
const de_DescribeCustomerGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.customerGatewaySet).trim() === "") {
        contents[_CGus] = [];
    }
    else if (output[_cGSu] != null && output[_cGSu][_i] != null) {
        contents[_CGus] = de_CustomerGatewayList(smithyClient.getArrayIfSingleItem(output[_cGSu][_i]));
    }
    return contents;
};
const de_DescribeDeclarativePoliciesReportsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.reportSet).trim() === "") {
        contents[_Rep] = [];
    }
    else if (output[_rSe] != null && output[_rSe][_i] != null) {
        contents[_Rep] = de_DeclarativePoliciesReportList(smithyClient.getArrayIfSingleItem(output[_rSe][_i]));
    }
    return contents;
};
const de_DescribeDhcpOptionsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.dhcpOptionsSet).trim() === "") {
        contents[_DOh] = [];
    }
    else if (output[_dOS] != null && output[_dOS][_i] != null) {
        contents[_DOh] = de_DhcpOptionsList(smithyClient.getArrayIfSingleItem(output[_dOS][_i]));
    }
    return contents;
};
const de_DescribeEgressOnlyInternetGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.egressOnlyInternetGatewaySet).trim() === "") {
        contents[_EOIGg] = [];
    }
    else if (output[_eOIGS] != null && output[_eOIGS][_i] != null) {
        contents[_EOIGg] = de_EgressOnlyInternetGatewayList(smithyClient.getArrayIfSingleItem(output[_eOIGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeElasticGpusResult = (output, context) => {
    const contents = {};
    if (String(output.elasticGpuSet).trim() === "") {
        contents[_EGSla] = [];
    }
    else if (output[_eGS] != null && output[_eGS][_i] != null) {
        contents[_EGSla] = de_ElasticGpuSet(smithyClient.getArrayIfSingleItem(output[_eGS][_i]));
    }
    if (output[_mR] != null) {
        contents[_MR] = smithyClient.strictParseInt32(output[_mR]);
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeExportImageTasksResult = (output, context) => {
    const contents = {};
    if (String(output.exportImageTaskSet).trim() === "") {
        contents[_EITx] = [];
    }
    else if (output[_eITS] != null && output[_eITS][_i] != null) {
        contents[_EITx] = de_ExportImageTaskList(smithyClient.getArrayIfSingleItem(output[_eITS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeExportTasksResult = (output, context) => {
    const contents = {};
    if (String(output.exportTaskSet).trim() === "") {
        contents[_ETxpo] = [];
    }
    else if (output[_eTS] != null && output[_eTS][_i] != null) {
        contents[_ETxpo] = de_ExportTaskList(smithyClient.getArrayIfSingleItem(output[_eTS][_i]));
    }
    return contents;
};
const de_DescribeFastLaunchImagesResult = (output, context) => {
    const contents = {};
    if (String(output.fastLaunchImageSet).trim() === "") {
        contents[_FLIa] = [];
    }
    else if (output[_fLISa] != null && output[_fLISa][_i] != null) {
        contents[_FLIa] = de_DescribeFastLaunchImagesSuccessSet(smithyClient.getArrayIfSingleItem(output[_fLISa][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeFastLaunchImagesSuccessItem = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_sCn] != null) {
        contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn]);
    }
    if (output[_lT] != null) {
        contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT]);
    }
    if (output[_mPL] != null) {
        contents[_MPL] = smithyClient.strictParseInt32(output[_mPL]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sTR] != null) {
        contents[_STRt] = smithyClient.expectString(output[_sTR]);
    }
    if (output[_sTT] != null) {
        contents[_STT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sTT]));
    }
    return contents;
};
const de_DescribeFastLaunchImagesSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFastLaunchImagesSuccessItem(entry);
    });
};
const de_DescribeFastSnapshotRestoresResult = (output, context) => {
    const contents = {};
    if (String(output.fastSnapshotRestoreSet).trim() === "") {
        contents[_FSR] = [];
    }
    else if (output[_fSRS] != null && output[_fSRS][_i] != null) {
        contents[_FSR] = de_DescribeFastSnapshotRestoreSuccessSet(smithyClient.getArrayIfSingleItem(output[_fSRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sTR] != null) {
        contents[_STRt] = smithyClient.expectString(output[_sTR]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_oAw] != null) {
        contents[_OAw] = smithyClient.expectString(output[_oAw]);
    }
    if (output[_eTna] != null) {
        contents[_ETna] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTna]));
    }
    if (output[_oT] != null) {
        contents[_OTpt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_oT]));
    }
    if (output[_eTnab] != null) {
        contents[_ETnab] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTnab]));
    }
    if (output[_dTi] != null) {
        contents[_DTi] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTi]));
    }
    if (output[_dTis] != null) {
        contents[_DTis] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTis]));
    }
    return contents;
};
const de_DescribeFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFastSnapshotRestoreSuccessItem(entry);
    });
};
const de_DescribeFleetError = (output, context) => {
    const contents = {};
    if (output[_lTAO] != null) {
        contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO]);
    }
    if (output[_l] != null) {
        contents[_Li] = smithyClient.expectString(output[_l]);
    }
    if (output[_eC] != null) {
        contents[_EC] = smithyClient.expectString(output[_eC]);
    }
    if (output[_eM] != null) {
        contents[_EM] = smithyClient.expectString(output[_eM]);
    }
    return contents;
};
const de_DescribeFleetHistoryResult = (output, context) => {
    const contents = {};
    if (String(output.historyRecordSet).trim() === "") {
        contents[_HRi] = [];
    }
    else if (output[_hRS] != null && output[_hRS][_i] != null) {
        contents[_HRi] = de_HistoryRecordSet(smithyClient.getArrayIfSingleItem(output[_hRS][_i]));
    }
    if (output[_lET] != null) {
        contents[_LET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lET]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (output[_fIl] != null) {
        contents[_FIl] = smithyClient.expectString(output[_fIl]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    return contents;
};
const de_DescribeFleetInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.activeInstanceSet).trim() === "") {
        contents[_AIct] = [];
    }
    else if (output[_aIS] != null && output[_aIS][_i] != null) {
        contents[_AIct] = de_ActiveInstanceSet(smithyClient.getArrayIfSingleItem(output[_aIS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (output[_fIl] != null) {
        contents[_FIl] = smithyClient.expectString(output[_fIl]);
    }
    return contents;
};
const de_DescribeFleetsErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFleetError(entry);
    });
};
const de_DescribeFleetsInstances = (output, context) => {
    const contents = {};
    if (output[_lTAO] != null) {
        contents[_LTAO] = de_LaunchTemplateAndOverridesResponse(output[_lTAO]);
    }
    if (output[_l] != null) {
        contents[_Li] = smithyClient.expectString(output[_l]);
    }
    if (String(output.instanceIds).trim() === "") {
        contents[_IIns] = [];
    }
    else if (output[_iIn] != null && output[_iIn][_i] != null) {
        contents[_IIns] = de_InstanceIdsSet(smithyClient.getArrayIfSingleItem(output[_iIn][_i]));
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    return contents;
};
const de_DescribeFleetsInstancesSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DescribeFleetsInstances(entry);
    });
};
const de_DescribeFleetsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.fleetSet).trim() === "") {
        contents[_Fl] = [];
    }
    else if (output[_fS] != null && output[_fS][_i] != null) {
        contents[_Fl] = de_FleetSet(smithyClient.getArrayIfSingleItem(output[_fS][_i]));
    }
    return contents;
};
const de_DescribeFlowLogsResult = (output, context) => {
    const contents = {};
    if (String(output.flowLogSet).trim() === "") {
        contents[_FL] = [];
    }
    else if (output[_fLS] != null && output[_fLS][_i] != null) {
        contents[_FL] = de_FlowLogSet(smithyClient.getArrayIfSingleItem(output[_fLS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeFpgaImageAttributeResult = (output, context) => {
    const contents = {};
    if (output[_fIA] != null) {
        contents[_FIAp] = de_FpgaImageAttribute(output[_fIA]);
    }
    return contents;
};
const de_DescribeFpgaImagesResult = (output, context) => {
    const contents = {};
    if (String(output.fpgaImageSet).trim() === "") {
        contents[_FIp] = [];
    }
    else if (output[_fISp] != null && output[_fISp][_i] != null) {
        contents[_FIp] = de_FpgaImageList(smithyClient.getArrayIfSingleItem(output[_fISp][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeHostReservationOfferingsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.offeringSet).trim() === "") {
        contents[_OS] = [];
    }
    else if (output[_oS] != null && output[_oS][_i] != null) {
        contents[_OS] = de_HostOfferingSet(smithyClient.getArrayIfSingleItem(output[_oS][_i]));
    }
    return contents;
};
const de_DescribeHostReservationsResult = (output, context) => {
    const contents = {};
    if (String(output.hostReservationSet).trim() === "") {
        contents[_HRS] = [];
    }
    else if (output[_hRSo] != null && output[_hRSo][_i] != null) {
        contents[_HRS] = de_HostReservationSet(smithyClient.getArrayIfSingleItem(output[_hRSo][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeHostsResult = (output, context) => {
    const contents = {};
    if (String(output.hostSet).trim() === "") {
        contents[_Ho] = [];
    }
    else if (output[_hS] != null && output[_hS][_i] != null) {
        contents[_Ho] = de_HostList(smithyClient.getArrayIfSingleItem(output[_hS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeIamInstanceProfileAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.iamInstanceProfileAssociationSet).trim() === "") {
        contents[_IIPAa] = [];
    }
    else if (output[_iIPAS] != null && output[_iIPAS][_i] != null) {
        contents[_IIPAa] = de_IamInstanceProfileAssociationSet(smithyClient.getArrayIfSingleItem(output[_iIPAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeIdentityIdFormatResult = (output, context) => {
    const contents = {};
    if (String(output.statusSet).trim() === "") {
        contents[_Status] = [];
    }
    else if (output[_sSt] != null && output[_sSt][_i] != null) {
        contents[_Status] = de_IdFormatList(smithyClient.getArrayIfSingleItem(output[_sSt][_i]));
    }
    return contents;
};
const de_DescribeIdFormatResult = (output, context) => {
    const contents = {};
    if (String(output.statusSet).trim() === "") {
        contents[_Status] = [];
    }
    else if (output[_sSt] != null && output[_sSt][_i] != null) {
        contents[_Status] = de_IdFormatList(smithyClient.getArrayIfSingleItem(output[_sSt][_i]));
    }
    return contents;
};
const de_DescribeImageReferencesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.imageReferenceSet).trim() === "") {
        contents[_IRm] = [];
    }
    else if (output[_iRS] != null && output[_iRS][_i] != null) {
        contents[_IRm] = de_ImageReferenceList(smithyClient.getArrayIfSingleItem(output[_iRS][_i]));
    }
    return contents;
};
const de_DescribeImagesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.imagesSet).trim() === "") {
        contents[_Ima] = [];
    }
    else if (output[_iSm] != null && output[_iSm][_i] != null) {
        contents[_Ima] = de_ImageList(smithyClient.getArrayIfSingleItem(output[_iSm][_i]));
    }
    return contents;
};
const de_DescribeImageUsageReportEntriesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.imageUsageReportEntrySet).trim() === "") {
        contents[_IURE] = [];
    }
    else if (output[_iURES] != null && output[_iURES][_i] != null) {
        contents[_IURE] = de_ImageUsageReportEntryList(smithyClient.getArrayIfSingleItem(output[_iURES][_i]));
    }
    return contents;
};
const de_DescribeImageUsageReportsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.imageUsageReportSet).trim() === "") {
        contents[_IUR] = [];
    }
    else if (output[_iURS] != null && output[_iURS][_i] != null) {
        contents[_IUR] = de_ImageUsageReportList(smithyClient.getArrayIfSingleItem(output[_iURS][_i]));
    }
    return contents;
};
const de_DescribeImportImageTasksResult = (output, context) => {
    const contents = {};
    if (String(output.importImageTaskSet).trim() === "") {
        contents[_IIT] = [];
    }
    else if (output[_iITS] != null && output[_iITS][_i] != null) {
        contents[_IIT] = de_ImportImageTaskList(smithyClient.getArrayIfSingleItem(output[_iITS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeImportSnapshotTasksResult = (output, context) => {
    const contents = {};
    if (String(output.importSnapshotTaskSet).trim() === "") {
        contents[_IST] = [];
    }
    else if (output[_iSTS] != null && output[_iSTS][_i] != null) {
        contents[_IST] = de_ImportSnapshotTaskList(smithyClient.getArrayIfSingleItem(output[_iSTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceConnectEndpointsResult = (output, context) => {
    const contents = {};
    if (String(output.instanceConnectEndpointSet).trim() === "") {
        contents[_ICEn] = [];
    }
    else if (output[_iCES] != null && output[_iCES][_i] != null) {
        contents[_ICEn] = de_InstanceConnectEndpointSet(smithyClient.getArrayIfSingleItem(output[_iCES][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceCreditSpecificationsResult = (output, context) => {
    const contents = {};
    if (String(output.instanceCreditSpecificationSet).trim() === "") {
        contents[_ICS] = [];
    }
    else if (output[_iCSS] != null && output[_iCSS][_i] != null) {
        contents[_ICS] = de_InstanceCreditSpecificationList(smithyClient.getArrayIfSingleItem(output[_iCSS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {};
    if (output[_iTA] != null) {
        contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA]);
    }
    return contents;
};
const de_DescribeInstanceEventWindowsResult = (output, context) => {
    const contents = {};
    if (String(output.instanceEventWindowSet).trim() === "") {
        contents[_IEWn] = [];
    }
    else if (output[_iEWSn] != null && output[_iEWSn][_i] != null) {
        contents[_IEWn] = de_InstanceEventWindowSet(smithyClient.getArrayIfSingleItem(output[_iEWSn][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceImageMetadataResult = (output, context) => {
    const contents = {};
    if (String(output.instanceImageMetadataSet).trim() === "") {
        contents[_IIM] = [];
    }
    else if (output[_iIMS] != null && output[_iIMS][_i] != null) {
        contents[_IIM] = de_InstanceImageMetadataList(smithyClient.getArrayIfSingleItem(output[_iIMS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstancesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.reservationSet).trim() === "") {
        contents[_Rese] = [];
    }
    else if (output[_rSes] != null && output[_rSes][_i] != null) {
        contents[_Rese] = de_ReservationList(smithyClient.getArrayIfSingleItem(output[_rSes][_i]));
    }
    return contents;
};
const de_DescribeInstanceStatusResult = (output, context) => {
    const contents = {};
    if (String(output.instanceStatusSet).trim() === "") {
        contents[_ISns] = [];
    }
    else if (output[_iSS] != null && output[_iSS][_i] != null) {
        contents[_ISns] = de_InstanceStatusList(smithyClient.getArrayIfSingleItem(output[_iSS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceTopologyResult = (output, context) => {
    const contents = {};
    if (String(output.instanceSet).trim() === "") {
        contents[_In] = [];
    }
    else if (output[_iSns] != null && output[_iSns][_i] != null) {
        contents[_In] = de_InstanceSet(smithyClient.getArrayIfSingleItem(output[_iSns][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceTypeOfferingsResult = (output, context) => {
    const contents = {};
    if (String(output.instanceTypeOfferingSet).trim() === "") {
        contents[_ITO] = [];
    }
    else if (output[_iTOS] != null && output[_iTOS][_i] != null) {
        contents[_ITO] = de_InstanceTypeOfferingsList(smithyClient.getArrayIfSingleItem(output[_iTOS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInstanceTypesResult = (output, context) => {
    const contents = {};
    if (String(output.instanceTypeSet).trim() === "") {
        contents[_ITnst] = [];
    }
    else if (output[_iTS] != null && output[_iTS][_i] != null) {
        contents[_ITnst] = de_InstanceTypeInfoList(smithyClient.getArrayIfSingleItem(output[_iTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeInternetGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.internetGatewaySet).trim() === "") {
        contents[_IGnt] = [];
    }
    else if (output[_iGS] != null && output[_iGS][_i] != null) {
        contents[_IGnt] = de_InternetGatewayList(smithyClient.getArrayIfSingleItem(output[_iGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeIpamByoasnResult = (output, context) => {
    const contents = {};
    if (String(output.byoasnSet).trim() === "") {
        contents[_Byoa] = [];
    }
    else if (output[_bS] != null && output[_bS][_i] != null) {
        contents[_Byoa] = de_ByoasnSet(smithyClient.getArrayIfSingleItem(output[_bS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeIpamExternalResourceVerificationTokensResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.ipamExternalResourceVerificationTokenSet).trim() === "") {
        contents[_IERVTp] = [];
    }
    else if (output[_iERVTS] != null && output[_iERVTS][_i] != null) {
        contents[_IERVTp] = de_IpamExternalResourceVerificationTokenSet(smithyClient.getArrayIfSingleItem(output[_iERVTS][_i]));
    }
    return contents;
};
const de_DescribeIpamPoolsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.ipamPoolSet).trim() === "") {
        contents[_IPpam] = [];
    }
    else if (output[_iPS] != null && output[_iPS][_i] != null) {
        contents[_IPpam] = de_IpamPoolSet(smithyClient.getArrayIfSingleItem(output[_iPS][_i]));
    }
    return contents;
};
const de_DescribeIpamResourceDiscoveriesResult = (output, context) => {
    const contents = {};
    if (String(output.ipamResourceDiscoverySet).trim() === "") {
        contents[_IRDp] = [];
    }
    else if (output[_iRDS] != null && output[_iRDS][_i] != null) {
        contents[_IRDp] = de_IpamResourceDiscoverySet(smithyClient.getArrayIfSingleItem(output[_iRDS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeIpamResourceDiscoveryAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.ipamResourceDiscoveryAssociationSet).trim() === "") {
        contents[_IRDAp] = [];
    }
    else if (output[_iRDAS] != null && output[_iRDAS][_i] != null) {
        contents[_IRDAp] = de_IpamResourceDiscoveryAssociationSet(smithyClient.getArrayIfSingleItem(output[_iRDAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeIpamScopesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.ipamScopeSet).trim() === "") {
        contents[_ISpam] = [];
    }
    else if (output[_iSSp] != null && output[_iSSp][_i] != null) {
        contents[_ISpam] = de_IpamScopeSet(smithyClient.getArrayIfSingleItem(output[_iSSp][_i]));
    }
    return contents;
};
const de_DescribeIpamsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.ipamSet).trim() === "") {
        contents[_Ipam] = [];
    }
    else if (output[_iSpa] != null && output[_iSpa][_i] != null) {
        contents[_Ipam] = de_IpamSet(smithyClient.getArrayIfSingleItem(output[_iSpa][_i]));
    }
    return contents;
};
const de_DescribeIpv6PoolsResult = (output, context) => {
    const contents = {};
    if (String(output.ipv6PoolSet).trim() === "") {
        contents[_IPpvo] = [];
    }
    else if (output[_iPSp] != null && output[_iPSp][_i] != null) {
        contents[_IPpvo] = de_Ipv6PoolSet(smithyClient.getArrayIfSingleItem(output[_iPSp][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeKeyPairsResult = (output, context) => {
    const contents = {};
    if (String(output.keySet).trim() === "") {
        contents[_KP] = [];
    }
    else if (output[_kS] != null && output[_kS][_i] != null) {
        contents[_KP] = de_KeyPairList(smithyClient.getArrayIfSingleItem(output[_kS][_i]));
    }
    return contents;
};
const de_DescribeLaunchTemplatesResult = (output, context) => {
    const contents = {};
    if (String(output.launchTemplates).trim() === "") {
        contents[_LTau] = [];
    }
    else if (output[_lTa] != null && output[_lTa][_i] != null) {
        contents[_LTau] = de_LaunchTemplateSet(smithyClient.getArrayIfSingleItem(output[_lTa][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLaunchTemplateVersionsResult = (output, context) => {
    const contents = {};
    if (String(output.launchTemplateVersionSet).trim() === "") {
        contents[_LTVa] = [];
    }
    else if (output[_lTVS] != null && output[_lTVS][_i] != null) {
        contents[_LTVa] = de_LaunchTemplateVersionSet(smithyClient.getArrayIfSingleItem(output[_lTVS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLocalGatewayRouteTablesResult = (output, context) => {
    const contents = {};
    if (String(output.localGatewayRouteTableSet).trim() === "") {
        contents[_LGRTo] = [];
    }
    else if (output[_lGRTS] != null && output[_lGRTS][_i] != null) {
        contents[_LGRTo] = de_LocalGatewayRouteTableSet(smithyClient.getArrayIfSingleItem(output[_lGRTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.localGatewayRouteTableVirtualInterfaceGroupAssociationSet).trim() === "") {
        contents[_LGRTVIGAo] = [];
    }
    else if (output[_lGRTVIGAS] != null && output[_lGRTVIGAS][_i] != null) {
        contents[_LGRTVIGAo] = de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet(smithyClient.getArrayIfSingleItem(output[_lGRTVIGAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLocalGatewayRouteTableVpcAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.localGatewayRouteTableVpcAssociationSet).trim() === "") {
        contents[_LGRTVAo] = [];
    }
    else if (output[_lGRTVAS] != null && output[_lGRTVAS][_i] != null) {
        contents[_LGRTVAo] = de_LocalGatewayRouteTableVpcAssociationSet(smithyClient.getArrayIfSingleItem(output[_lGRTVAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLocalGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.localGatewaySet).trim() === "") {
        contents[_LGoc] = [];
    }
    else if (output[_lGS] != null && output[_lGS][_i] != null) {
        contents[_LGoc] = de_LocalGatewaySet(smithyClient.getArrayIfSingleItem(output[_lGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLocalGatewayVirtualInterfaceGroupsResult = (output, context) => {
    const contents = {};
    if (String(output.localGatewayVirtualInterfaceGroupSet).trim() === "") {
        contents[_LGVIGo] = [];
    }
    else if (output[_lGVIGS] != null && output[_lGVIGS][_i] != null) {
        contents[_LGVIGo] = de_LocalGatewayVirtualInterfaceGroupSet(smithyClient.getArrayIfSingleItem(output[_lGVIGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLocalGatewayVirtualInterfacesResult = (output, context) => {
    const contents = {};
    if (String(output.localGatewayVirtualInterfaceSet).trim() === "") {
        contents[_LGVIo] = [];
    }
    else if (output[_lGVIS] != null && output[_lGVIS][_i] != null) {
        contents[_LGVIo] = de_LocalGatewayVirtualInterfaceSet(smithyClient.getArrayIfSingleItem(output[_lGVIS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeLockedSnapshotsResult = (output, context) => {
    const contents = {};
    if (String(output.snapshotSet).trim() === "") {
        contents[_Sn] = [];
    }
    else if (output[_sS] != null && output[_sS][_i] != null) {
        contents[_Sn] = de_LockedSnapshotsInfoList(smithyClient.getArrayIfSingleItem(output[_sS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeMacHostsResult = (output, context) => {
    const contents = {};
    if (String(output.macHostSet).trim() === "") {
        contents[_MHa] = [];
    }
    else if (output[_mHS] != null && output[_mHS][_i] != null) {
        contents[_MHa] = de_MacHostList(smithyClient.getArrayIfSingleItem(output[_mHS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeMacModificationTasksResult = (output, context) => {
    const contents = {};
    if (String(output.macModificationTaskSet).trim() === "") {
        contents[_MMTa] = [];
    }
    else if (output[_mMTS] != null && output[_mMTS][_i] != null) {
        contents[_MMTa] = de_MacModificationTaskList(smithyClient.getArrayIfSingleItem(output[_mMTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeManagedPrefixListsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.prefixListSet).trim() === "") {
        contents[_PLre] = [];
    }
    else if (output[_pLS] != null && output[_pLS][_i] != null) {
        contents[_PLre] = de_ManagedPrefixListSet(smithyClient.getArrayIfSingleItem(output[_pLS][_i]));
    }
    return contents;
};
const de_DescribeMovingAddressesResult = (output, context) => {
    const contents = {};
    if (String(output.movingAddressStatusSet).trim() === "") {
        contents[_MAS] = [];
    }
    else if (output[_mASS] != null && output[_mASS][_i] != null) {
        contents[_MAS] = de_MovingAddressStatusSet(smithyClient.getArrayIfSingleItem(output[_mASS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNatGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.natGatewaySet).trim() === "") {
        contents[_NGa] = [];
    }
    else if (output[_nGS] != null && output[_nGS][_i] != null) {
        contents[_NGa] = de_NatGatewayList(smithyClient.getArrayIfSingleItem(output[_nGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkAclsResult = (output, context) => {
    const contents = {};
    if (String(output.networkAclSet).trim() === "") {
        contents[_NAe] = [];
    }
    else if (output[_nAS] != null && output[_nAS][_i] != null) {
        contents[_NAe] = de_NetworkAclList(smithyClient.getArrayIfSingleItem(output[_nAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkInsightsAccessScopeAnalysesResult = (output, context) => {
    const contents = {};
    if (String(output.networkInsightsAccessScopeAnalysisSet).trim() === "") {
        contents[_NIASA] = [];
    }
    else if (output[_nIASAS] != null && output[_nIASAS][_i] != null) {
        contents[_NIASA] = de_NetworkInsightsAccessScopeAnalysisList(smithyClient.getArrayIfSingleItem(output[_nIASAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkInsightsAccessScopesResult = (output, context) => {
    const contents = {};
    if (String(output.networkInsightsAccessScopeSet).trim() === "") {
        contents[_NIASe] = [];
    }
    else if (output[_nIASS] != null && output[_nIASS][_i] != null) {
        contents[_NIASe] = de_NetworkInsightsAccessScopeList(smithyClient.getArrayIfSingleItem(output[_nIASS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkInsightsAnalysesResult = (output, context) => {
    const contents = {};
    if (String(output.networkInsightsAnalysisSet).trim() === "") {
        contents[_NIA] = [];
    }
    else if (output[_nIASe] != null && output[_nIASe][_i] != null) {
        contents[_NIA] = de_NetworkInsightsAnalysisList(smithyClient.getArrayIfSingleItem(output[_nIASe][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkInsightsPathsResult = (output, context) => {
    const contents = {};
    if (String(output.networkInsightsPathSet).trim() === "") {
        contents[_NIPe] = [];
    }
    else if (output[_nIPS] != null && output[_nIPS][_i] != null) {
        contents[_NIPe] = de_NetworkInsightsPathList(smithyClient.getArrayIfSingleItem(output[_nIPS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkInterfaceAttributeResult = (output, context) => {
    const contents = {};
    if (output[_at] != null) {
        contents[_Att] = de_NetworkInterfaceAttachment(output[_at]);
    }
    if (output[_de] != null) {
        contents[_De] = de_AttributeValue(output[_de]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_sDC] != null) {
        contents[_SDC] = de_AttributeBooleanValue(output[_sDC]);
    }
    if (output[_aPIA] != null) {
        contents[_APIAs] = smithyClient.parseBoolean(output[_aPIA]);
    }
    return contents;
};
const de_DescribeNetworkInterfacePermissionsResult = (output, context) => {
    const contents = {};
    if (String(output.networkInterfacePermissions).trim() === "") {
        contents[_NIPet] = [];
    }
    else if (output[_nIPe] != null && output[_nIPe][_i] != null) {
        contents[_NIPet] = de_NetworkInterfacePermissionList(smithyClient.getArrayIfSingleItem(output[_nIPe][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeNetworkInterfacesResult = (output, context) => {
    const contents = {};
    if (String(output.networkInterfaceSet).trim() === "") {
        contents[_NI] = [];
    }
    else if (output[_nIS] != null && output[_nIS][_i] != null) {
        contents[_NI] = de_NetworkInterfaceList(smithyClient.getArrayIfSingleItem(output[_nIS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeOutpostLagsResult = (output, context) => {
    const contents = {};
    if (String(output.outpostLagSet).trim() === "") {
        contents[_OL] = [];
    }
    else if (output[_oLS] != null && output[_oLS][_i] != null) {
        contents[_OL] = de_OutpostLagSet(smithyClient.getArrayIfSingleItem(output[_oLS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribePlacementGroupsResult = (output, context) => {
    const contents = {};
    if (String(output.placementGroupSet).trim() === "") {
        contents[_PGl] = [];
    }
    else if (output[_pGS] != null && output[_pGS][_i] != null) {
        contents[_PGl] = de_PlacementGroupList(smithyClient.getArrayIfSingleItem(output[_pGS][_i]));
    }
    return contents;
};
const de_DescribePrefixListsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.prefixListSet).trim() === "") {
        contents[_PLre] = [];
    }
    else if (output[_pLS] != null && output[_pLS][_i] != null) {
        contents[_PLre] = de_PrefixListSet(smithyClient.getArrayIfSingleItem(output[_pLS][_i]));
    }
    return contents;
};
const de_DescribePrincipalIdFormatResult = (output, context) => {
    const contents = {};
    if (String(output.principalSet).trim() === "") {
        contents[_Princ] = [];
    }
    else if (output[_pSri] != null && output[_pSri][_i] != null) {
        contents[_Princ] = de_PrincipalIdFormatList(smithyClient.getArrayIfSingleItem(output[_pSri][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribePublicIpv4PoolsResult = (output, context) => {
    const contents = {};
    if (String(output.publicIpv4PoolSet).trim() === "") {
        contents[_PIPu] = [];
    }
    else if (output[_pIPS] != null && output[_pIPS][_i] != null) {
        contents[_PIPu] = de_PublicIpv4PoolSet(smithyClient.getArrayIfSingleItem(output[_pIPS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeRegionsResult = (output, context) => {
    const contents = {};
    if (String(output.regionInfo).trim() === "") {
        contents[_Reg] = [];
    }
    else if (output[_rIe] != null && output[_rIe][_i] != null) {
        contents[_Reg] = de_RegionList(smithyClient.getArrayIfSingleItem(output[_rIe][_i]));
    }
    return contents;
};
const de_DescribeReplaceRootVolumeTasksResult = (output, context) => {
    const contents = {};
    if (String(output.replaceRootVolumeTaskSet).trim() === "") {
        contents[_RRVTe] = [];
    }
    else if (output[_rRVTS] != null && output[_rRVTS][_i] != null) {
        contents[_RRVTe] = de_ReplaceRootVolumeTasks(smithyClient.getArrayIfSingleItem(output[_rRVTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeReservedInstancesListingsResult = (output, context) => {
    const contents = {};
    if (String(output.reservedInstancesListingsSet).trim() === "") {
        contents[_RIL] = [];
    }
    else if (output[_rILS] != null && output[_rILS][_i] != null) {
        contents[_RIL] = de_ReservedInstancesListingList(smithyClient.getArrayIfSingleItem(output[_rILS][_i]));
    }
    return contents;
};
const de_DescribeReservedInstancesModificationsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.reservedInstancesModificationsSet).trim() === "") {
        contents[_RIM] = [];
    }
    else if (output[_rIMS] != null && output[_rIMS][_i] != null) {
        contents[_RIM] = de_ReservedInstancesModificationList(smithyClient.getArrayIfSingleItem(output[_rIMS][_i]));
    }
    return contents;
};
const de_DescribeReservedInstancesOfferingsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.reservedInstancesOfferingsSet).trim() === "") {
        contents[_RIO] = [];
    }
    else if (output[_rIOS] != null && output[_rIOS][_i] != null) {
        contents[_RIO] = de_ReservedInstancesOfferingList(smithyClient.getArrayIfSingleItem(output[_rIOS][_i]));
    }
    return contents;
};
const de_DescribeReservedInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.reservedInstancesSet).trim() === "") {
        contents[_RIese] = [];
    }
    else if (output[_rIS] != null && output[_rIS][_i] != null) {
        contents[_RIese] = de_ReservedInstancesList(smithyClient.getArrayIfSingleItem(output[_rIS][_i]));
    }
    return contents;
};
const de_DescribeRouteServerEndpointsResult = (output, context) => {
    const contents = {};
    if (String(output.routeServerEndpointSet).trim() === "") {
        contents[_RSEo] = [];
    }
    else if (output[_rSES] != null && output[_rSES][_i] != null) {
        contents[_RSEo] = de_RouteServerEndpointsList(smithyClient.getArrayIfSingleItem(output[_rSES][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeRouteServerPeersResult = (output, context) => {
    const contents = {};
    if (String(output.routeServerPeerSet).trim() === "") {
        contents[_RSPo] = [];
    }
    else if (output[_rSPS] != null && output[_rSPS][_i] != null) {
        contents[_RSPo] = de_RouteServerPeersList(smithyClient.getArrayIfSingleItem(output[_rSPS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeRouteServersResult = (output, context) => {
    const contents = {};
    if (String(output.routeServerSet).trim() === "") {
        contents[_RSou] = [];
    }
    else if (output[_rSSo] != null && output[_rSSo][_i] != null) {
        contents[_RSou] = de_RouteServersList(smithyClient.getArrayIfSingleItem(output[_rSSo][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeRouteTablesResult = (output, context) => {
    const contents = {};
    if (String(output.routeTableSet).trim() === "") {
        contents[_RTou] = [];
    }
    else if (output[_rTS] != null && output[_rTS][_i] != null) {
        contents[_RTou] = de_RouteTableList(smithyClient.getArrayIfSingleItem(output[_rTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeScheduledInstanceAvailabilityResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.scheduledInstanceAvailabilitySet).trim() === "") {
        contents[_SIAS] = [];
    }
    else if (output[_sIAS] != null && output[_sIAS][_i] != null) {
        contents[_SIAS] = de_ScheduledInstanceAvailabilitySet(smithyClient.getArrayIfSingleItem(output[_sIAS][_i]));
    }
    return contents;
};
const de_DescribeScheduledInstancesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.scheduledInstanceSet).trim() === "") {
        contents[_SIS] = [];
    }
    else if (output[_sIS] != null && output[_sIS][_i] != null) {
        contents[_SIS] = de_ScheduledInstanceSet(smithyClient.getArrayIfSingleItem(output[_sIS][_i]));
    }
    return contents;
};
const de_DescribeSecurityGroupReferencesResult = (output, context) => {
    const contents = {};
    if (String(output.securityGroupReferenceSet).trim() === "") {
        contents[_SGRSe] = [];
    }
    else if (output[_sGRSe] != null && output[_sGRSe][_i] != null) {
        contents[_SGRSe] = de_SecurityGroupReferences(smithyClient.getArrayIfSingleItem(output[_sGRSe][_i]));
    }
    return contents;
};
const de_DescribeSecurityGroupRulesResult = (output, context) => {
    const contents = {};
    if (String(output.securityGroupRuleSet).trim() === "") {
        contents[_SGR] = [];
    }
    else if (output[_sGRS] != null && output[_sGRS][_i] != null) {
        contents[_SGR] = de_SecurityGroupRuleList(smithyClient.getArrayIfSingleItem(output[_sGRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeSecurityGroupsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.securityGroupInfo).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_sGIec] != null && output[_sGIec][_i] != null) {
        contents[_SG] = de_SecurityGroupList(smithyClient.getArrayIfSingleItem(output[_sGIec][_i]));
    }
    return contents;
};
const de_DescribeSecurityGroupVpcAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.securityGroupVpcAssociationSet).trim() === "") {
        contents[_SGVA] = [];
    }
    else if (output[_sGVAS] != null && output[_sGVAS][_i] != null) {
        contents[_SGVA] = de_SecurityGroupVpcAssociationList(smithyClient.getArrayIfSingleItem(output[_sGVAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeServiceLinkVirtualInterfacesResult = (output, context) => {
    const contents = {};
    if (String(output.serviceLinkVirtualInterfaceSet).trim() === "") {
        contents[_SLVI] = [];
    }
    else if (output[_sLVIS] != null && output[_sLVIS][_i] != null) {
        contents[_SLVI] = de_ServiceLinkVirtualInterfaceSet(smithyClient.getArrayIfSingleItem(output[_sLVIS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeSnapshotAttributeResult = (output, context) => {
    const contents = {};
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (String(output.createVolumePermission).trim() === "") {
        contents[_CVPr] = [];
    }
    else if (output[_cVP] != null && output[_cVP][_i] != null) {
        contents[_CVPr] = de_CreateVolumePermissionList(smithyClient.getArrayIfSingleItem(output[_cVP][_i]));
    }
    return contents;
};
const de_DescribeSnapshotsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.snapshotSet).trim() === "") {
        contents[_Sn] = [];
    }
    else if (output[_sS] != null && output[_sS][_i] != null) {
        contents[_Sn] = de_SnapshotList(smithyClient.getArrayIfSingleItem(output[_sS][_i]));
    }
    return contents;
};
const de_DescribeSnapshotTierStatusResult = (output, context) => {
    const contents = {};
    if (String(output.snapshotTierStatusSet).trim() === "") {
        contents[_STS] = [];
    }
    else if (output[_sTSS] != null && output[_sTSS][_i] != null) {
        contents[_STS] = de_snapshotTierStatusSet(smithyClient.getArrayIfSingleItem(output[_sTSS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeSpotDatafeedSubscriptionResult = (output, context) => {
    const contents = {};
    if (output[_sDS] != null) {
        contents[_SDS] = de_SpotDatafeedSubscription(output[_sDS]);
    }
    return contents;
};
const de_DescribeSpotFleetInstancesResponse = (output, context) => {
    const contents = {};
    if (String(output.activeInstanceSet).trim() === "") {
        contents[_AIct] = [];
    }
    else if (output[_aIS] != null && output[_aIS][_i] != null) {
        contents[_AIct] = de_ActiveInstanceSet(smithyClient.getArrayIfSingleItem(output[_aIS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (output[_sFRI] != null) {
        contents[_SFRIp] = smithyClient.expectString(output[_sFRI]);
    }
    return contents;
};
const de_DescribeSpotFleetRequestHistoryResponse = (output, context) => {
    const contents = {};
    if (String(output.historyRecordSet).trim() === "") {
        contents[_HRi] = [];
    }
    else if (output[_hRS] != null && output[_hRS][_i] != null) {
        contents[_HRi] = de_HistoryRecords(smithyClient.getArrayIfSingleItem(output[_hRS][_i]));
    }
    if (output[_lET] != null) {
        contents[_LET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lET]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (output[_sFRI] != null) {
        contents[_SFRIp] = smithyClient.expectString(output[_sFRI]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    return contents;
};
const de_DescribeSpotFleetRequestsResponse = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.spotFleetRequestConfigSet).trim() === "") {
        contents[_SFRCp] = [];
    }
    else if (output[_sFRCS] != null && output[_sFRCS][_i] != null) {
        contents[_SFRCp] = de_SpotFleetRequestConfigSet(smithyClient.getArrayIfSingleItem(output[_sFRCS][_i]));
    }
    return contents;
};
const de_DescribeSpotInstanceRequestsResult = (output, context) => {
    const contents = {};
    if (String(output.spotInstanceRequestSet).trim() === "") {
        contents[_SIR] = [];
    }
    else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
        contents[_SIR] = de_SpotInstanceRequestList(smithyClient.getArrayIfSingleItem(output[_sIRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeSpotPriceHistoryResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.spotPriceHistorySet).trim() === "") {
        contents[_SPH] = [];
    }
    else if (output[_sPHS] != null && output[_sPHS][_i] != null) {
        contents[_SPH] = de_SpotPriceHistoryList(smithyClient.getArrayIfSingleItem(output[_sPHS][_i]));
    }
    return contents;
};
const de_DescribeStaleSecurityGroupsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.staleSecurityGroupSet).trim() === "") {
        contents[_SSGS] = [];
    }
    else if (output[_sSGS] != null && output[_sSGS][_i] != null) {
        contents[_SSGS] = de_StaleSecurityGroupSet(smithyClient.getArrayIfSingleItem(output[_sSGS][_i]));
    }
    return contents;
};
const de_DescribeStoreImageTasksResult = (output, context) => {
    const contents = {};
    if (String(output.storeImageTaskResultSet).trim() === "") {
        contents[_SITR] = [];
    }
    else if (output[_sITRS] != null && output[_sITRS][_i] != null) {
        contents[_SITR] = de_StoreImageTaskResultSet(smithyClient.getArrayIfSingleItem(output[_sITRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeSubnetsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.subnetSet).trim() === "") {
        contents[_Subn] = [];
    }
    else if (output[_sSub] != null && output[_sSub][_i] != null) {
        contents[_Subn] = de_SubnetList(smithyClient.getArrayIfSingleItem(output[_sSub][_i]));
    }
    return contents;
};
const de_DescribeTagsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagDescriptionList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_DescribeTrafficMirrorFilterRulesResult = (output, context) => {
    const contents = {};
    if (String(output.trafficMirrorFilterRuleSet).trim() === "") {
        contents[_TMFRr] = [];
    }
    else if (output[_tMFRS] != null && output[_tMFRS][_i] != null) {
        contents[_TMFRr] = de_TrafficMirrorFilterRuleSet(smithyClient.getArrayIfSingleItem(output[_tMFRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTrafficMirrorFiltersResult = (output, context) => {
    const contents = {};
    if (String(output.trafficMirrorFilterSet).trim() === "") {
        contents[_TMFr] = [];
    }
    else if (output[_tMFS] != null && output[_tMFS][_i] != null) {
        contents[_TMFr] = de_TrafficMirrorFilterSet(smithyClient.getArrayIfSingleItem(output[_tMFS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTrafficMirrorSessionsResult = (output, context) => {
    const contents = {};
    if (String(output.trafficMirrorSessionSet).trim() === "") {
        contents[_TMSr] = [];
    }
    else if (output[_tMSS] != null && output[_tMSS][_i] != null) {
        contents[_TMSr] = de_TrafficMirrorSessionSet(smithyClient.getArrayIfSingleItem(output[_tMSS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTrafficMirrorTargetsResult = (output, context) => {
    const contents = {};
    if (String(output.trafficMirrorTargetSet).trim() === "") {
        contents[_TMTr] = [];
    }
    else if (output[_tMTS] != null && output[_tMTS][_i] != null) {
        contents[_TMTr] = de_TrafficMirrorTargetSet(smithyClient.getArrayIfSingleItem(output[_tMTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayAttachmentsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayAttachments).trim() === "") {
        contents[_TGAr] = [];
    }
    else if (output[_tGA] != null && output[_tGA][_i] != null) {
        contents[_TGAr] = de_TransitGatewayAttachmentList(smithyClient.getArrayIfSingleItem(output[_tGA][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayConnectPeersResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayConnectPeerSet).trim() === "") {
        contents[_TGCPr] = [];
    }
    else if (output[_tGCPS] != null && output[_tGCPS][_i] != null) {
        contents[_TGCPr] = de_TransitGatewayConnectPeerList(smithyClient.getArrayIfSingleItem(output[_tGCPS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayConnectsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayConnectSet).trim() === "") {
        contents[_TGCra] = [];
    }
    else if (output[_tGCS] != null && output[_tGCS][_i] != null) {
        contents[_TGCra] = de_TransitGatewayConnectList(smithyClient.getArrayIfSingleItem(output[_tGCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayMulticastDomainsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayMulticastDomains).trim() === "") {
        contents[_TGMDr] = [];
    }
    else if (output[_tGMDr] != null && output[_tGMDr][_i] != null) {
        contents[_TGMDr] = de_TransitGatewayMulticastDomainList(smithyClient.getArrayIfSingleItem(output[_tGMDr][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayPeeringAttachmentsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayPeeringAttachments).trim() === "") {
        contents[_TGPAr] = [];
    }
    else if (output[_tGPAr] != null && output[_tGPAr][_i] != null) {
        contents[_TGPAr] = de_TransitGatewayPeeringAttachmentList(smithyClient.getArrayIfSingleItem(output[_tGPAr][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayPolicyTablesResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayPolicyTables).trim() === "") {
        contents[_TGPTr] = [];
    }
    else if (output[_tGPTr] != null && output[_tGPTr][_i] != null) {
        contents[_TGPTr] = de_TransitGatewayPolicyTableList(smithyClient.getArrayIfSingleItem(output[_tGPTr][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayRouteTableAnnouncementsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayRouteTableAnnouncements).trim() === "") {
        contents[_TGRTAr] = [];
    }
    else if (output[_tGRTAr] != null && output[_tGRTAr][_i] != null) {
        contents[_TGRTAr] = de_TransitGatewayRouteTableAnnouncementList(smithyClient.getArrayIfSingleItem(output[_tGRTAr][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayRouteTablesResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayRouteTables).trim() === "") {
        contents[_TGRTr] = [];
    }
    else if (output[_tGRTr] != null && output[_tGRTr][_i] != null) {
        contents[_TGRTr] = de_TransitGatewayRouteTableList(smithyClient.getArrayIfSingleItem(output[_tGRTr][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewaySet).trim() === "") {
        contents[_TGra] = [];
    }
    else if (output[_tGS] != null && output[_tGS][_i] != null) {
        contents[_TGra] = de_TransitGatewayList(smithyClient.getArrayIfSingleItem(output[_tGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTransitGatewayVpcAttachmentsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayVpcAttachments).trim() === "") {
        contents[_TGVAr] = [];
    }
    else if (output[_tGVAr] != null && output[_tGVAr][_i] != null) {
        contents[_TGVAr] = de_TransitGatewayVpcAttachmentList(smithyClient.getArrayIfSingleItem(output[_tGVAr][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeTrunkInterfaceAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.interfaceAssociationSet).trim() === "") {
        contents[_IAnt] = [];
    }
    else if (output[_iAS] != null && output[_iAS][_i] != null) {
        contents[_IAnt] = de_TrunkInterfaceAssociationList(smithyClient.getArrayIfSingleItem(output[_iAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVerifiedAccessEndpointsResult = (output, context) => {
    const contents = {};
    if (String(output.verifiedAccessEndpointSet).trim() === "") {
        contents[_VAEe] = [];
    }
    else if (output[_vAES] != null && output[_vAES][_i] != null) {
        contents[_VAEe] = de_VerifiedAccessEndpointList(smithyClient.getArrayIfSingleItem(output[_vAES][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVerifiedAccessGroupsResult = (output, context) => {
    const contents = {};
    if (String(output.verifiedAccessGroupSet).trim() === "") {
        contents[_VAGe] = [];
    }
    else if (output[_vAGS] != null && output[_vAGS][_i] != null) {
        contents[_VAGe] = de_VerifiedAccessGroupList(smithyClient.getArrayIfSingleItem(output[_vAGS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVerifiedAccessInstanceLoggingConfigurationsResult = (output, context) => {
    const contents = {};
    if (String(output.loggingConfigurationSet).trim() === "") {
        contents[_LC] = [];
    }
    else if (output[_lCS] != null && output[_lCS][_i] != null) {
        contents[_LC] = de_VerifiedAccessInstanceLoggingConfigurationList(smithyClient.getArrayIfSingleItem(output[_lCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVerifiedAccessInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.verifiedAccessInstanceSet).trim() === "") {
        contents[_VAIe] = [];
    }
    else if (output[_vAIS] != null && output[_vAIS][_i] != null) {
        contents[_VAIe] = de_VerifiedAccessInstanceList(smithyClient.getArrayIfSingleItem(output[_vAIS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVerifiedAccessTrustProvidersResult = (output, context) => {
    const contents = {};
    if (String(output.verifiedAccessTrustProviderSet).trim() === "") {
        contents[_VATPe] = [];
    }
    else if (output[_vATPS] != null && output[_vATPS][_i] != null) {
        contents[_VATPe] = de_VerifiedAccessTrustProviderList(smithyClient.getArrayIfSingleItem(output[_vATPS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVolumeAttributeResult = (output, context) => {
    const contents = {};
    if (output[_aEIO] != null) {
        contents[_AEIO] = de_AttributeBooleanValue(output[_aEIO]);
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    return contents;
};
const de_DescribeVolumesModificationsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.volumeModificationSet).trim() === "") {
        contents[_VMo] = [];
    }
    else if (output[_vMS] != null && output[_vMS][_i] != null) {
        contents[_VMo] = de_VolumeModificationList(smithyClient.getArrayIfSingleItem(output[_vMS][_i]));
    }
    return contents;
};
const de_DescribeVolumesResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.volumeSet).trim() === "") {
        contents[_Vol] = [];
    }
    else if (output[_vS] != null && output[_vS][_i] != null) {
        contents[_Vol] = de_VolumeList(smithyClient.getArrayIfSingleItem(output[_vS][_i]));
    }
    return contents;
};
const de_DescribeVolumeStatusResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.volumeStatusSet).trim() === "") {
        contents[_VSo] = [];
    }
    else if (output[_vSS] != null && output[_vSS][_i] != null) {
        contents[_VSo] = de_VolumeStatusList(smithyClient.getArrayIfSingleItem(output[_vSS][_i]));
    }
    return contents;
};
const de_DescribeVpcAttributeResult = (output, context) => {
    const contents = {};
    if (output[_eDH] != null) {
        contents[_EDH] = de_AttributeBooleanValue(output[_eDH]);
    }
    if (output[_eDS] != null) {
        contents[_EDS] = de_AttributeBooleanValue(output[_eDS]);
    }
    if (output[_eNAUM] != null) {
        contents[_ENAUM] = de_AttributeBooleanValue(output[_eNAUM]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_DescribeVpcBlockPublicAccessExclusionsResult = (output, context) => {
    const contents = {};
    if (String(output.vpcBlockPublicAccessExclusionSet).trim() === "") {
        contents[_VBPAEp] = [];
    }
    else if (output[_vBPAES] != null && output[_vBPAES][_i] != null) {
        contents[_VBPAEp] = de_VpcBlockPublicAccessExclusionList(smithyClient.getArrayIfSingleItem(output[_vBPAES][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcBlockPublicAccessOptionsResult = (output, context) => {
    const contents = {};
    if (output[_vBPAO] != null) {
        contents[_VBPAO] = de_VpcBlockPublicAccessOptions(output[_vBPAO]);
    }
    return contents;
};
const de_DescribeVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.vpcs).trim() === "") {
        contents[_Vpc] = [];
    }
    else if (output[_vpc] != null && output[_vpc][_i] != null) {
        contents[_Vpc] = de_ClassicLinkDnsSupportList(smithyClient.getArrayIfSingleItem(output[_vpc][_i]));
    }
    return contents;
};
const de_DescribeVpcClassicLinkResult = (output, context) => {
    const contents = {};
    if (String(output.vpcSet).trim() === "") {
        contents[_Vpc] = [];
    }
    else if (output[_vSp] != null && output[_vSp][_i] != null) {
        contents[_Vpc] = de_VpcClassicLinkList(smithyClient.getArrayIfSingleItem(output[_vSp][_i]));
    }
    return contents;
};
const de_DescribeVpcEndpointAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.vpcEndpointAssociationSet).trim() === "") {
        contents[_VEA] = [];
    }
    else if (output[_vEAS] != null && output[_vEAS][_i] != null) {
        contents[_VEA] = de_VpcEndpointAssociationSet(smithyClient.getArrayIfSingleItem(output[_vEAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcEndpointConnectionNotificationsResult = (output, context) => {
    const contents = {};
    if (String(output.connectionNotificationSet).trim() === "") {
        contents[_CNSo] = [];
    }
    else if (output[_cNSo] != null && output[_cNSo][_i] != null) {
        contents[_CNSo] = de_ConnectionNotificationSet(smithyClient.getArrayIfSingleItem(output[_cNSo][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcEndpointConnectionsResult = (output, context) => {
    const contents = {};
    if (String(output.vpcEndpointConnectionSet).trim() === "") {
        contents[_VEC] = [];
    }
    else if (output[_vECS] != null && output[_vECS][_i] != null) {
        contents[_VEC] = de_VpcEndpointConnectionSet(smithyClient.getArrayIfSingleItem(output[_vECS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcEndpointServiceConfigurationsResult = (output, context) => {
    const contents = {};
    if (String(output.serviceConfigurationSet).trim() === "") {
        contents[_SCer] = [];
    }
    else if (output[_sCS] != null && output[_sCS][_i] != null) {
        contents[_SCer] = de_ServiceConfigurationSet(smithyClient.getArrayIfSingleItem(output[_sCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcEndpointServicePermissionsResult = (output, context) => {
    const contents = {};
    if (String(output.allowedPrincipals).trim() === "") {
        contents[_APl] = [];
    }
    else if (output[_aP] != null && output[_aP][_i] != null) {
        contents[_APl] = de_AllowedPrincipalSet(smithyClient.getArrayIfSingleItem(output[_aP][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcEndpointServicesResult = (output, context) => {
    const contents = {};
    if (String(output.serviceNameSet).trim() === "") {
        contents[_SNer] = [];
    }
    else if (output[_sNS] != null && output[_sNS][_i] != null) {
        contents[_SNer] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sNS][_i]));
    }
    if (String(output.serviceDetailSet).trim() === "") {
        contents[_SDe] = [];
    }
    else if (output[_sDSe] != null && output[_sDSe][_i] != null) {
        contents[_SDe] = de_ServiceDetailSet(smithyClient.getArrayIfSingleItem(output[_sDSe][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcEndpointsResult = (output, context) => {
    const contents = {};
    if (String(output.vpcEndpointSet).trim() === "") {
        contents[_VEp] = [];
    }
    else if (output[_vESp] != null && output[_vESp][_i] != null) {
        contents[_VEp] = de_VpcEndpointSet(smithyClient.getArrayIfSingleItem(output[_vESp][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcPeeringConnectionsResult = (output, context) => {
    const contents = {};
    if (String(output.vpcPeeringConnectionSet).trim() === "") {
        contents[_VPCp] = [];
    }
    else if (output[_vPCS] != null && output[_vPCS][_i] != null) {
        contents[_VPCp] = de_VpcPeeringConnectionList(smithyClient.getArrayIfSingleItem(output[_vPCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_DescribeVpcsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.vpcSet).trim() === "") {
        contents[_Vpc] = [];
    }
    else if (output[_vSp] != null && output[_vSp][_i] != null) {
        contents[_Vpc] = de_VpcList(smithyClient.getArrayIfSingleItem(output[_vSp][_i]));
    }
    return contents;
};
const de_DescribeVpnConnectionsResult = (output, context) => {
    const contents = {};
    if (String(output.vpnConnectionSet).trim() === "") {
        contents[_VCp] = [];
    }
    else if (output[_vCS] != null && output[_vCS][_i] != null) {
        contents[_VCp] = de_VpnConnectionList(smithyClient.getArrayIfSingleItem(output[_vCS][_i]));
    }
    return contents;
};
const de_DescribeVpnGatewaysResult = (output, context) => {
    const contents = {};
    if (String(output.vpnGatewaySet).trim() === "") {
        contents[_VGp] = [];
    }
    else if (output[_vGS] != null && output[_vGS][_i] != null) {
        contents[_VGp] = de_VpnGatewayList(smithyClient.getArrayIfSingleItem(output[_vGS][_i]));
    }
    return contents;
};
const de_DestinationOptionsResponse = (output, context) => {
    const contents = {};
    if (output[_fF] != null) {
        contents[_FF] = smithyClient.expectString(output[_fF]);
    }
    if (output[_hCP] != null) {
        contents[_HCP] = smithyClient.parseBoolean(output[_hCP]);
    }
    if (output[_pHP] != null) {
        contents[_PHP] = smithyClient.parseBoolean(output[_pHP]);
    }
    return contents;
};
const de_DetachClassicLinkVpcResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DetachVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output[_vATP] != null) {
        contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP]);
    }
    if (output[_vAI] != null) {
        contents[_VAI] = de_VerifiedAccessInstance(output[_vAI]);
    }
    return contents;
};
const de_DeviceOptions = (output, context) => {
    const contents = {};
    if (output[_tIe] != null) {
        contents[_TIe] = smithyClient.expectString(output[_tIe]);
    }
    if (output[_pSKU] != null) {
        contents[_PSKU] = smithyClient.expectString(output[_pSKU]);
    }
    return contents;
};
const de_DeviceTrustProviderTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_DhcpConfiguration = (output, context) => {
    const contents = {};
    if (output[_k] != null) {
        contents[_Ke] = smithyClient.expectString(output[_k]);
    }
    if (String(output.valueSet).trim() === "") {
        contents[_Val] = [];
    }
    else if (output[_vSa] != null && output[_vSa][_i] != null) {
        contents[_Val] = de_DhcpConfigurationValueList(smithyClient.getArrayIfSingleItem(output[_vSa][_i]));
    }
    return contents;
};
const de_DhcpConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DhcpConfiguration(entry);
    });
};
const de_DhcpConfigurationValueList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AttributeValue(entry);
    });
};
const de_DhcpOptions = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_dOI] != null) {
        contents[_DOI] = smithyClient.expectString(output[_dOI]);
    }
    if (String(output.dhcpConfigurationSet).trim() === "") {
        contents[_DCh] = [];
    }
    else if (output[_dCS] != null && output[_dCS][_i] != null) {
        contents[_DCh] = de_DhcpConfigurationList(smithyClient.getArrayIfSingleItem(output[_dCS][_i]));
    }
    return contents;
};
const de_DhcpOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DhcpOptions(entry);
    });
};
const de_DirectoryServiceAuthentication = (output, context) => {
    const contents = {};
    if (output[_dI] != null) {
        contents[_DIir] = smithyClient.expectString(output[_dI]);
    }
    return contents;
};
const de_DisableAddressTransferResult = (output, context) => {
    const contents = {};
    if (output[_aT] != null) {
        contents[_ATdd] = de_AddressTransfer(output[_aT]);
    }
    return contents;
};
const de_DisableAllowedImagesSettingsResult = (output, context) => {
    const contents = {};
    if (output[_aISS] != null) {
        contents[_AISS] = smithyClient.expectString(output[_aISS]);
    }
    return contents;
};
const de_DisableAwsNetworkPerformanceMetricSubscriptionResult = (output, context) => {
    const contents = {};
    if (output[_ou] != null) {
        contents[_Ou] = smithyClient.parseBoolean(output[_ou]);
    }
    return contents;
};
const de_DisableEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {};
    if (output[_eEBD] != null) {
        contents[_EEBD] = smithyClient.parseBoolean(output[_eEBD]);
    }
    return contents;
};
const de_DisableFastLaunchResult = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_sCn] != null) {
        contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn]);
    }
    if (output[_lT] != null) {
        contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT]);
    }
    if (output[_mPL] != null) {
        contents[_MPL] = smithyClient.strictParseInt32(output[_mPL]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sTR] != null) {
        contents[_STRt] = smithyClient.expectString(output[_sTR]);
    }
    if (output[_sTT] != null) {
        contents[_STT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sTT]));
    }
    return contents;
};
const de_DisableFastSnapshotRestoreErrorItem = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (String(output.fastSnapshotRestoreStateErrorSet).trim() === "") {
        contents[_FSRSE] = [];
    }
    else if (output[_fSRSES] != null && output[_fSRSES][_i] != null) {
        contents[_FSRSE] = de_DisableFastSnapshotRestoreStateErrorSet(smithyClient.getArrayIfSingleItem(output[_fSRSES][_i]));
    }
    return contents;
};
const de_DisableFastSnapshotRestoreErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DisableFastSnapshotRestoreErrorItem(entry);
    });
};
const de_DisableFastSnapshotRestoresResult = (output, context) => {
    const contents = {};
    if (String(output.successful).trim() === "") {
        contents[_Suc] = [];
    }
    else if (output[_suc] != null && output[_suc][_i] != null) {
        contents[_Suc] = de_DisableFastSnapshotRestoreSuccessSet(smithyClient.getArrayIfSingleItem(output[_suc][_i]));
    }
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_DisableFastSnapshotRestoreErrorSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_DisableFastSnapshotRestoreStateError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_DisableFastSnapshotRestoreStateErrorItem = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_er] != null) {
        contents[_Er] = de_DisableFastSnapshotRestoreStateError(output[_er]);
    }
    return contents;
};
const de_DisableFastSnapshotRestoreStateErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DisableFastSnapshotRestoreStateErrorItem(entry);
    });
};
const de_DisableFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sTR] != null) {
        contents[_STRt] = smithyClient.expectString(output[_sTR]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_oAw] != null) {
        contents[_OAw] = smithyClient.expectString(output[_oAw]);
    }
    if (output[_eTna] != null) {
        contents[_ETna] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTna]));
    }
    if (output[_oT] != null) {
        contents[_OTpt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_oT]));
    }
    if (output[_eTnab] != null) {
        contents[_ETnab] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTnab]));
    }
    if (output[_dTi] != null) {
        contents[_DTi] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTi]));
    }
    if (output[_dTis] != null) {
        contents[_DTis] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTis]));
    }
    return contents;
};
const de_DisableFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DisableFastSnapshotRestoreSuccessItem(entry);
    });
};
const de_DisableImageBlockPublicAccessResult = (output, context) => {
    const contents = {};
    if (output[_iBPAS] != null) {
        contents[_IBPAS] = smithyClient.expectString(output[_iBPAS]);
    }
    return contents;
};
const de_DisableImageDeprecationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DisableImageDeregistrationProtectionResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.expectString(output[_r]);
    }
    return contents;
};
const de_DisableImageResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DisableIpamOrganizationAdminAccountResult = (output, context) => {
    const contents = {};
    if (output[_succ] != null) {
        contents[_Succ] = smithyClient.parseBoolean(output[_succ]);
    }
    return contents;
};
const de_DisableRouteServerPropagationResult = (output, context) => {
    const contents = {};
    if (output[_rSPo] != null) {
        contents[_RSPou] = de_RouteServerPropagation(output[_rSPo]);
    }
    return contents;
};
const de_DisableSerialConsoleAccessResult = (output, context) => {
    const contents = {};
    if (output[_sCAE] != null) {
        contents[_SCAE] = smithyClient.parseBoolean(output[_sCAE]);
    }
    return contents;
};
const de_DisableSnapshotBlockPublicAccessResult = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_DisableTransitGatewayRouteTablePropagationResult = (output, context) => {
    const contents = {};
    if (output[_prop] != null) {
        contents[_Prop] = de_TransitGatewayPropagation(output[_prop]);
    }
    return contents;
};
const de_DisableVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DisableVpcClassicLinkResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DisassociateCapacityReservationBillingOwnerResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DisassociateClientVpnTargetNetworkResult = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_AssociationStatus(output[_sta]);
    }
    return contents;
};
const de_DisassociateEnclaveCertificateIamRoleResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_DisassociateIamInstanceProfileResult = (output, context) => {
    const contents = {};
    if (output[_iIPA] != null) {
        contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA]);
    }
    return contents;
};
const de_DisassociateInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output[_iEW] != null) {
        contents[_IEW] = de_InstanceEventWindow(output[_iEW]);
    }
    return contents;
};
const de_DisassociateIpamByoasnResult = (output, context) => {
    const contents = {};
    if (output[_aA] != null) {
        contents[_AAsn] = de_AsnAssociation(output[_aA]);
    }
    return contents;
};
const de_DisassociateIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output[_iRDA] != null) {
        contents[_IRDA] = de_IpamResourceDiscoveryAssociation(output[_iRDA]);
    }
    return contents;
};
const de_DisassociateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (String(output.natGatewayAddressSet).trim() === "") {
        contents[_NGA] = [];
    }
    else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
        contents[_NGA] = de_NatGatewayAddressList(smithyClient.getArrayIfSingleItem(output[_nGAS][_i]));
    }
    return contents;
};
const de_DisassociateRouteServerResult = (output, context) => {
    const contents = {};
    if (output[_rSA] != null) {
        contents[_RSAo] = de_RouteServerAssociation(output[_rSA]);
    }
    return contents;
};
const de_DisassociateSecurityGroupVpcResult = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_DisassociateSubnetCidrBlockResult = (output, context) => {
    const contents = {};
    if (output[_iCBA] != null) {
        contents[_ICBA] = de_SubnetIpv6CidrBlockAssociation(output[_iCBA]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    return contents;
};
const de_DisassociateTransitGatewayMulticastDomainResult = (output, context) => {
    const contents = {};
    if (output[_a] != null) {
        contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a]);
    }
    return contents;
};
const de_DisassociateTransitGatewayPolicyTableResult = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_TransitGatewayPolicyTableAssociation(output[_ass]);
    }
    return contents;
};
const de_DisassociateTransitGatewayRouteTableResult = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_TransitGatewayAssociation(output[_ass]);
    }
    return contents;
};
const de_DisassociateTrunkInterfaceResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    return contents;
};
const de_DisassociateVpcCidrBlockResult = (output, context) => {
    const contents = {};
    if (output[_iCBA] != null) {
        contents[_ICBA] = de_VpcIpv6CidrBlockAssociation(output[_iCBA]);
    }
    if (output[_cBA] != null) {
        contents[_CBA] = de_VpcCidrBlockAssociation(output[_cBA]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_DiskImageDescription = (output, context) => {
    const contents = {};
    if (output[_ch] != null) {
        contents[_Ch] = smithyClient.expectString(output[_ch]);
    }
    if (output[_f] != null) {
        contents[_Fo] = smithyClient.expectString(output[_f]);
    }
    if (output[_iMU] != null) {
        contents[_IMU] = smithyClient.expectString(output[_iMU]);
    }
    if (output[_si] != null) {
        contents[_Siz] = smithyClient.strictParseLong(output[_si]);
    }
    return contents;
};
const de_DiskImageVolumeDescription = (output, context) => {
    const contents = {};
    if (output[_id] != null) {
        contents[_Id] = smithyClient.expectString(output[_id]);
    }
    if (output[_si] != null) {
        contents[_Siz] = smithyClient.strictParseLong(output[_si]);
    }
    return contents;
};
const de_DiskInfo = (output, context) => {
    const contents = {};
    if (output[_sIGB] != null) {
        contents[_SIGB] = smithyClient.strictParseLong(output[_sIGB]);
    }
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    return contents;
};
const de_DiskInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DiskInfo(entry);
    });
};
const de_DnsEntry = (output, context) => {
    const contents = {};
    if (output[_dNn] != null) {
        contents[_DNn] = smithyClient.expectString(output[_dNn]);
    }
    if (output[_hZI] != null) {
        contents[_HZI] = smithyClient.expectString(output[_hZI]);
    }
    return contents;
};
const de_DnsEntrySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DnsEntry(entry);
    });
};
const de_DnsOptions = (output, context) => {
    const contents = {};
    if (output[_dRIT] != null) {
        contents[_DRIT] = smithyClient.expectString(output[_dRIT]);
    }
    if (output[_pDOFIRE] != null) {
        contents[_PDOFIRE] = smithyClient.parseBoolean(output[_pDOFIRE]);
    }
    return contents;
};
const de_EbsBlockDevice = (output, context) => {
    const contents = {};
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_io] != null) {
        contents[_Io] = smithyClient.strictParseInt32(output[_io]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_vSo] != null) {
        contents[_VS] = smithyClient.strictParseInt32(output[_vSo]);
    }
    if (output[_vT] != null) {
        contents[_VT] = smithyClient.expectString(output[_vT]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_th] != null) {
        contents[_Th] = smithyClient.strictParseInt32(output[_th]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_VIR] != null) {
        contents[_VIR] = smithyClient.strictParseInt32(output[_VIR]);
    }
    if (output[_AZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_AZI]);
    }
    return contents;
};
const de_EbsBlockDeviceResponse = (output, context) => {
    const contents = {};
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_io] != null) {
        contents[_Io] = smithyClient.strictParseInt32(output[_io]);
    }
    if (output[_th] != null) {
        contents[_Th] = smithyClient.strictParseInt32(output[_th]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_vSo] != null) {
        contents[_VS] = smithyClient.strictParseInt32(output[_vSo]);
    }
    if (output[_vT] != null) {
        contents[_VT] = smithyClient.expectString(output[_vT]);
    }
    return contents;
};
const de_EbsInfo = (output, context) => {
    const contents = {};
    if (output[_eOS] != null) {
        contents[_EOS] = smithyClient.expectString(output[_eOS]);
    }
    if (output[_eSn] != null) {
        contents[_ESnc] = smithyClient.expectString(output[_eSn]);
    }
    if (output[_eOI] != null) {
        contents[_EOI] = de_EbsOptimizedInfo(output[_eOI]);
    }
    if (output[_nS] != null) {
        contents[_NS] = smithyClient.expectString(output[_nS]);
    }
    if (output[_mEA] != null) {
        contents[_MEA] = smithyClient.strictParseInt32(output[_mEA]);
    }
    if (output[_aLT] != null) {
        contents[_ALT] = smithyClient.expectString(output[_aLT]);
    }
    return contents;
};
const de_EbsInstanceBlockDevice = (output, context) => {
    const contents = {};
    if (output[_aTt] != null) {
        contents[_ATtt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_aTt]));
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_aRs] != null) {
        contents[_ARs] = smithyClient.expectString(output[_aRs]);
    }
    if (output[_vOI] != null) {
        contents[_VOI] = smithyClient.expectString(output[_vOI]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    return contents;
};
const de_EbsOptimizedInfo = (output, context) => {
    const contents = {};
    if (output[_bBIM] != null) {
        contents[_BBIM] = smithyClient.strictParseInt32(output[_bBIM]);
    }
    if (output[_bTIMB] != null) {
        contents[_BTIMB] = smithyClient.strictParseFloat(output[_bTIMB]);
    }
    if (output[_bIa] != null) {
        contents[_BIa] = smithyClient.strictParseInt32(output[_bIa]);
    }
    if (output[_mBIM] != null) {
        contents[_MBIM] = smithyClient.strictParseInt32(output[_mBIM]);
    }
    if (output[_mTIMB] != null) {
        contents[_MTIMB] = smithyClient.strictParseFloat(output[_mTIMB]);
    }
    if (output[_mI] != null) {
        contents[_MIa] = smithyClient.strictParseInt32(output[_mI]);
    }
    return contents;
};
const de_EbsStatusDetails = (output, context) => {
    const contents = {};
    if (output[_iSmp] != null) {
        contents[_ISmp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_iSmp]));
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_EbsStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EbsStatusDetails(entry);
    });
};
const de_EbsStatusSummary = (output, context) => {
    const contents = {};
    if (String(output.details).trim() === "") {
        contents[_Det] = [];
    }
    else if (output[_det] != null && output[_det][_i] != null) {
        contents[_Det] = de_EbsStatusDetailsList(smithyClient.getArrayIfSingleItem(output[_det][_i]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_Ec2InstanceConnectEndpoint = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iCEI] != null) {
        contents[_ICEI] = smithyClient.expectString(output[_iCEI]);
    }
    if (output[_iCEA] != null) {
        contents[_ICEA] = smithyClient.expectString(output[_iCEA]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMta] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMta]);
    }
    if (output[_dNn] != null) {
        contents[_DNn] = smithyClient.expectString(output[_dNn]);
    }
    if (output[_fDN] != null) {
        contents[_FDN] = smithyClient.expectString(output[_fDN]);
    }
    if (String(output.networkInterfaceIdSet).trim() === "") {
        contents[_NIIe] = [];
    }
    else if (output[_nIIS] != null && output[_nIIS][_i] != null) {
        contents[_NIIe] = de_NetworkInterfaceIdSet(smithyClient.getArrayIfSingleItem(output[_nIIS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_cAr] != null) {
        contents[_CAr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cAr]));
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_pCI] != null) {
        contents[_PCI] = smithyClient.parseBoolean(output[_pCI]);
    }
    if (String(output.securityGroupIdSet).trim() === "") {
        contents[_SGI] = [];
    }
    else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
        contents[_SGI] = de_SecurityGroupIdSet(smithyClient.getArrayIfSingleItem(output[_sGIS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_iAT] != null) {
        contents[_IAT] = smithyClient.expectString(output[_iAT]);
    }
    if (output[_pDN] != null) {
        contents[_PDNu] = de_InstanceConnectEndpointPublicDnsNames(output[_pDN]);
    }
    return contents;
};
const de_EfaInfo = (output, context) => {
    const contents = {};
    if (output[_mEI] != null) {
        contents[_MEI] = smithyClient.strictParseInt32(output[_mEI]);
    }
    return contents;
};
const de_EgressOnlyInternetGateway = (output, context) => {
    const contents = {};
    if (String(output.attachmentSet).trim() === "") {
        contents[_Atta] = [];
    }
    else if (output[_aSt] != null && output[_aSt][_i] != null) {
        contents[_Atta] = de_InternetGatewayAttachmentList(smithyClient.getArrayIfSingleItem(output[_aSt][_i]));
    }
    if (output[_eOIGI] != null) {
        contents[_EOIGI] = smithyClient.expectString(output[_eOIGI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_EgressOnlyInternetGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EgressOnlyInternetGateway(entry);
    });
};
const de_ElasticGpuAssociation = (output, context) => {
    const contents = {};
    if (output[_eGI] != null) {
        contents[_EGIl] = smithyClient.expectString(output[_eGI]);
    }
    if (output[_eGAI] != null) {
        contents[_EGAI] = smithyClient.expectString(output[_eGAI]);
    }
    if (output[_eGAS] != null) {
        contents[_EGAS] = smithyClient.expectString(output[_eGAS]);
    }
    if (output[_eGAT] != null) {
        contents[_EGAT] = smithyClient.expectString(output[_eGAT]);
    }
    return contents;
};
const de_ElasticGpuAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticGpuAssociation(entry);
    });
};
const de_ElasticGpuHealth = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_ElasticGpus = (output, context) => {
    const contents = {};
    if (output[_eGI] != null) {
        contents[_EGIl] = smithyClient.expectString(output[_eGI]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_eGT] != null) {
        contents[_EGT] = smithyClient.expectString(output[_eGT]);
    }
    if (output[_eGH] != null) {
        contents[_EGH] = de_ElasticGpuHealth(output[_eGH]);
    }
    if (output[_eGSl] != null) {
        contents[_EGSlas] = smithyClient.expectString(output[_eGSl]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ElasticGpuSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticGpus(entry);
    });
};
const de_ElasticGpuSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    return contents;
};
const de_ElasticGpuSpecificationResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticGpuSpecificationResponse(entry);
    });
};
const de_ElasticInferenceAcceleratorAssociation = (output, context) => {
    const contents = {};
    if (output[_eIAA] != null) {
        contents[_EIAA] = smithyClient.expectString(output[_eIAA]);
    }
    if (output[_eIAAI] != null) {
        contents[_EIAAI] = smithyClient.expectString(output[_eIAAI]);
    }
    if (output[_eIAAS] != null) {
        contents[_EIAAS] = smithyClient.expectString(output[_eIAAS]);
    }
    if (output[_eIAAT] != null) {
        contents[_EIAAT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eIAAT]));
    }
    return contents;
};
const de_ElasticInferenceAcceleratorAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ElasticInferenceAcceleratorAssociation(entry);
    });
};
const de_EnableAddressTransferResult = (output, context) => {
    const contents = {};
    if (output[_aT] != null) {
        contents[_ATdd] = de_AddressTransfer(output[_aT]);
    }
    return contents;
};
const de_EnableAllowedImagesSettingsResult = (output, context) => {
    const contents = {};
    if (output[_aISS] != null) {
        contents[_AISS] = smithyClient.expectString(output[_aISS]);
    }
    return contents;
};
const de_EnableAwsNetworkPerformanceMetricSubscriptionResult = (output, context) => {
    const contents = {};
    if (output[_ou] != null) {
        contents[_Ou] = smithyClient.parseBoolean(output[_ou]);
    }
    return contents;
};
const de_EnableEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {};
    if (output[_eEBD] != null) {
        contents[_EEBD] = smithyClient.parseBoolean(output[_eEBD]);
    }
    return contents;
};
const de_EnableFastLaunchResult = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_sCn] != null) {
        contents[_SCn] = de_FastLaunchSnapshotConfigurationResponse(output[_sCn]);
    }
    if (output[_lT] != null) {
        contents[_LTa] = de_FastLaunchLaunchTemplateSpecificationResponse(output[_lT]);
    }
    if (output[_mPL] != null) {
        contents[_MPL] = smithyClient.strictParseInt32(output[_mPL]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sTR] != null) {
        contents[_STRt] = smithyClient.expectString(output[_sTR]);
    }
    if (output[_sTT] != null) {
        contents[_STT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sTT]));
    }
    return contents;
};
const de_EnableFastSnapshotRestoreErrorItem = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (String(output.fastSnapshotRestoreStateErrorSet).trim() === "") {
        contents[_FSRSE] = [];
    }
    else if (output[_fSRSES] != null && output[_fSRSES][_i] != null) {
        contents[_FSRSE] = de_EnableFastSnapshotRestoreStateErrorSet(smithyClient.getArrayIfSingleItem(output[_fSRSES][_i]));
    }
    return contents;
};
const de_EnableFastSnapshotRestoreErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnableFastSnapshotRestoreErrorItem(entry);
    });
};
const de_EnableFastSnapshotRestoresResult = (output, context) => {
    const contents = {};
    if (String(output.successful).trim() === "") {
        contents[_Suc] = [];
    }
    else if (output[_suc] != null && output[_suc][_i] != null) {
        contents[_Suc] = de_EnableFastSnapshotRestoreSuccessSet(smithyClient.getArrayIfSingleItem(output[_suc][_i]));
    }
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_EnableFastSnapshotRestoreErrorSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_EnableFastSnapshotRestoreStateError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_EnableFastSnapshotRestoreStateErrorItem = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_er] != null) {
        contents[_Er] = de_EnableFastSnapshotRestoreStateError(output[_er]);
    }
    return contents;
};
const de_EnableFastSnapshotRestoreStateErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnableFastSnapshotRestoreStateErrorItem(entry);
    });
};
const de_EnableFastSnapshotRestoreSuccessItem = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sTR] != null) {
        contents[_STRt] = smithyClient.expectString(output[_sTR]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_oAw] != null) {
        contents[_OAw] = smithyClient.expectString(output[_oAw]);
    }
    if (output[_eTna] != null) {
        contents[_ETna] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTna]));
    }
    if (output[_oT] != null) {
        contents[_OTpt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_oT]));
    }
    if (output[_eTnab] != null) {
        contents[_ETnab] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTnab]));
    }
    if (output[_dTi] != null) {
        contents[_DTi] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTi]));
    }
    if (output[_dTis] != null) {
        contents[_DTis] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTis]));
    }
    return contents;
};
const de_EnableFastSnapshotRestoreSuccessSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnableFastSnapshotRestoreSuccessItem(entry);
    });
};
const de_EnableImageBlockPublicAccessResult = (output, context) => {
    const contents = {};
    if (output[_iBPAS] != null) {
        contents[_IBPAS] = smithyClient.expectString(output[_iBPAS]);
    }
    return contents;
};
const de_EnableImageDeprecationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_EnableImageDeregistrationProtectionResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.expectString(output[_r]);
    }
    return contents;
};
const de_EnableImageResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_EnableIpamOrganizationAdminAccountResult = (output, context) => {
    const contents = {};
    if (output[_succ] != null) {
        contents[_Succ] = smithyClient.parseBoolean(output[_succ]);
    }
    return contents;
};
const de_EnableReachabilityAnalyzerOrganizationSharingResult = (output, context) => {
    const contents = {};
    if (output[_rV] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_rV]);
    }
    return contents;
};
const de_EnableRouteServerPropagationResult = (output, context) => {
    const contents = {};
    if (output[_rSPo] != null) {
        contents[_RSPou] = de_RouteServerPropagation(output[_rSPo]);
    }
    return contents;
};
const de_EnableSerialConsoleAccessResult = (output, context) => {
    const contents = {};
    if (output[_sCAE] != null) {
        contents[_SCAE] = smithyClient.parseBoolean(output[_sCAE]);
    }
    return contents;
};
const de_EnableSnapshotBlockPublicAccessResult = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_EnableTransitGatewayRouteTablePropagationResult = (output, context) => {
    const contents = {};
    if (output[_prop] != null) {
        contents[_Prop] = de_TransitGatewayPropagation(output[_prop]);
    }
    return contents;
};
const de_EnableVpcClassicLinkDnsSupportResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_EnableVpcClassicLinkResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_EnaSrdSpecificationRequest = (output, context) => {
    const contents = {};
    if (output[_ESE] != null) {
        contents[_ESE] = smithyClient.parseBoolean(output[_ESE]);
    }
    if (output[_ESUS] != null) {
        contents[_ESUS] = de_EnaSrdUdpSpecificationRequest(output[_ESUS]);
    }
    return contents;
};
const de_EnaSrdUdpSpecificationRequest = (output, context) => {
    const contents = {};
    if (output[_ESUE] != null) {
        contents[_ESUE] = smithyClient.parseBoolean(output[_ESUE]);
    }
    return contents;
};
const de_EnclaveOptions = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    return contents;
};
const de_EndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClientVpnEndpoint(entry);
    });
};
const de_ErrorSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ValidationError(entry);
    });
};
const de_EventInformation = (output, context) => {
    const contents = {};
    if (output[_eDv] != null) {
        contents[_EDv] = smithyClient.expectString(output[_eDv]);
    }
    if (output[_eST] != null) {
        contents[_EST] = smithyClient.expectString(output[_eST]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    return contents;
};
const de_ExcludedInstanceTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Explanation = (output, context) => {
    const contents = {};
    if (output[_ac] != null) {
        contents[_Acl] = de_AnalysisComponent(output[_ac]);
    }
    if (output[_aRc] != null) {
        contents[_ARcl] = de_AnalysisAclRule(output[_aRc]);
    }
    if (output[_ad] != null) {
        contents[_Ad] = smithyClient.expectString(output[_ad]);
    }
    if (String(output.addressSet).trim() === "") {
        contents[_Addr] = [];
    }
    else if (output[_aSd] != null && output[_aSd][_i] != null) {
        contents[_Addr] = de_IpAddressList(smithyClient.getArrayIfSingleItem(output[_aSd][_i]));
    }
    if (output[_aTtt] != null) {
        contents[_ATtta] = de_AnalysisComponent(output[_aTtt]);
    }
    if (String(output.availabilityZoneSet).trim() === "") {
        contents[_AZv] = [];
    }
    else if (output[_aZS] != null && output[_aZS][_i] != null) {
        contents[_AZv] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aZS][_i]));
    }
    if (String(output.availabilityZoneIdSet).trim() === "") {
        contents[_AZIv] = [];
    }
    else if (output[_aZIS] != null && output[_aZIS][_i] != null) {
        contents[_AZIv] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aZIS][_i]));
    }
    if (String(output.cidrSet).trim() === "") {
        contents[_Ci] = [];
    }
    else if (output[_cS] != null && output[_cS][_i] != null) {
        contents[_Ci] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_cS][_i]));
    }
    if (output[_c] != null) {
        contents[_Com] = de_AnalysisComponent(output[_c]);
    }
    if (output[_cGu] != null) {
        contents[_CGu] = de_AnalysisComponent(output[_cGu]);
    }
    if (output[_d] != null) {
        contents[_D] = de_AnalysisComponent(output[_d]);
    }
    if (output[_dV] != null) {
        contents[_DVest] = de_AnalysisComponent(output[_dV]);
    }
    if (output[_di] != null) {
        contents[_Di] = smithyClient.expectString(output[_di]);
    }
    if (output[_eCx] != null) {
        contents[_ECx] = smithyClient.expectString(output[_eCx]);
    }
    if (output[_iRT] != null) {
        contents[_IRT] = de_AnalysisComponent(output[_iRT]);
    }
    if (output[_iG] != null) {
        contents[_IGn] = de_AnalysisComponent(output[_iG]);
    }
    if (output[_lBA] != null) {
        contents[_LBAo] = smithyClient.expectString(output[_lBA]);
    }
    if (output[_cLBL] != null) {
        contents[_CLBL] = de_AnalysisLoadBalancerListener(output[_cLBL]);
    }
    if (output[_lBLP] != null) {
        contents[_LBLP] = smithyClient.strictParseInt32(output[_lBLP]);
    }
    if (output[_lBT] != null) {
        contents[_LBT] = de_AnalysisLoadBalancerTarget(output[_lBT]);
    }
    if (output[_lBTG] != null) {
        contents[_LBTG] = de_AnalysisComponent(output[_lBTG]);
    }
    if (String(output.loadBalancerTargetGroupSet).trim() === "") {
        contents[_LBTGo] = [];
    }
    else if (output[_lBTGS] != null && output[_lBTGS][_i] != null) {
        contents[_LBTGo] = de_AnalysisComponentList(smithyClient.getArrayIfSingleItem(output[_lBTGS][_i]));
    }
    if (output[_lBTP] != null) {
        contents[_LBTP] = smithyClient.strictParseInt32(output[_lBTP]);
    }
    if (output[_eLBL] != null) {
        contents[_ELBL] = de_AnalysisComponent(output[_eLBL]);
    }
    if (output[_mC] != null) {
        contents[_MCis] = smithyClient.expectString(output[_mC]);
    }
    if (output[_nG] != null) {
        contents[_NG] = de_AnalysisComponent(output[_nG]);
    }
    if (output[_nIe] != null) {
        contents[_NIet] = de_AnalysisComponent(output[_nIe]);
    }
    if (output[_pF] != null) {
        contents[_PF] = smithyClient.expectString(output[_pF]);
    }
    if (output[_vPC] != null) {
        contents[_VPC] = de_AnalysisComponent(output[_vPC]);
    }
    if (output[_po] != null) {
        contents[_Po] = smithyClient.strictParseInt32(output[_po]);
    }
    if (String(output.portRangeSet).trim() === "") {
        contents[_PRo] = [];
    }
    else if (output[_pRS] != null && output[_pRS][_i] != null) {
        contents[_PRo] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_pRS][_i]));
    }
    if (output[_pL] != null) {
        contents[_PLr] = de_AnalysisComponent(output[_pL]);
    }
    if (String(output.protocolSet).trim() === "") {
        contents[_Pro] = [];
    }
    else if (output[_pSro] != null && output[_pSro][_i] != null) {
        contents[_Pro] = de_StringList(smithyClient.getArrayIfSingleItem(output[_pSro][_i]));
    }
    if (output[_rTR] != null) {
        contents[_RTR] = de_AnalysisRouteTableRoute(output[_rTR]);
    }
    if (output[_rTo] != null) {
        contents[_RTo] = de_AnalysisComponent(output[_rTo]);
    }
    if (output[_sG] != null) {
        contents[_SGe] = de_AnalysisComponent(output[_sG]);
    }
    if (output[_sGR] != null) {
        contents[_SGRe] = de_AnalysisSecurityGroupRule(output[_sGR]);
    }
    if (String(output.securityGroupSet).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_sGS] != null && output[_sGS][_i] != null) {
        contents[_SG] = de_AnalysisComponentList(smithyClient.getArrayIfSingleItem(output[_sGS][_i]));
    }
    if (output[_sV] != null) {
        contents[_SVo] = de_AnalysisComponent(output[_sV]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_su] != null) {
        contents[_Su] = de_AnalysisComponent(output[_su]);
    }
    if (output[_sRT] != null) {
        contents[_SRT] = de_AnalysisComponent(output[_sRT]);
    }
    if (output[_vp] != null) {
        contents[_Vp] = de_AnalysisComponent(output[_vp]);
    }
    if (output[_vE] != null) {
        contents[_VE] = de_AnalysisComponent(output[_vE]);
    }
    if (output[_vC] != null) {
        contents[_VC] = de_AnalysisComponent(output[_vC]);
    }
    if (output[_vG] != null) {
        contents[_VG] = de_AnalysisComponent(output[_vG]);
    }
    if (output[_tG] != null) {
        contents[_TGr] = de_AnalysisComponent(output[_tG]);
    }
    if (output[_tGRT] != null) {
        contents[_TGRT] = de_AnalysisComponent(output[_tGRT]);
    }
    if (output[_tGRTR] != null) {
        contents[_TGRTR] = de_TransitGatewayRouteTableRoute(output[_tGRTR]);
    }
    if (output[_tGAr] != null) {
        contents[_TGAra] = de_AnalysisComponent(output[_tGAr]);
    }
    if (output[_cAo] != null) {
        contents[_CAom] = smithyClient.expectString(output[_cAo]);
    }
    if (output[_cRo] != null) {
        contents[_CRo] = smithyClient.expectString(output[_cRo]);
    }
    if (output[_fSR] != null) {
        contents[_FSRi] = de_FirewallStatelessRule(output[_fSR]);
    }
    if (output[_fSRi] != null) {
        contents[_FSRir] = de_FirewallStatefulRule(output[_fSRi]);
    }
    return contents;
};
const de_ExplanationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Explanation(entry);
    });
};
const de_ExportClientVpnClientCertificateRevocationListResult = (output, context) => {
    const contents = {};
    if (output[_cRL] != null) {
        contents[_CRL] = smithyClient.expectString(output[_cRL]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientCertificateRevocationListStatus(output[_sta]);
    }
    return contents;
};
const de_ExportClientVpnClientConfigurationResult = (output, context) => {
    const contents = {};
    if (output[_cCl] != null) {
        contents[_CCl] = smithyClient.expectString(output[_cCl]);
    }
    return contents;
};
const de_ExportImageResult = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_dIF] != null) {
        contents[_DIFi] = smithyClient.expectString(output[_dIF]);
    }
    if (output[_eITI] != null) {
        contents[_EITIx] = smithyClient.expectString(output[_eITI]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rNo] != null) {
        contents[_RNo] = smithyClient.expectString(output[_rNo]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_sEL] != null) {
        contents[_SEL] = de_ExportTaskS3Location(output[_sEL]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ExportImageTask = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_eITI] != null) {
        contents[_EITIx] = smithyClient.expectString(output[_eITI]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_sEL] != null) {
        contents[_SEL] = de_ExportTaskS3Location(output[_sEL]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ExportImageTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportImageTask(entry);
    });
};
const de_ExportTask = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_eTI] != null) {
        contents[_ETI] = smithyClient.expectString(output[_eTI]);
    }
    if (output[_eTSx] != null) {
        contents[_ETST] = de_ExportToS3Task(output[_eTSx]);
    }
    if (output[_iE] != null) {
        contents[_IED] = de_InstanceExportDetails(output[_iE]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ExportTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExportTask(entry);
    });
};
const de_ExportTaskS3Location = (output, context) => {
    const contents = {};
    if (output[_sB] != null) {
        contents[_SB] = smithyClient.expectString(output[_sB]);
    }
    if (output[_sP] != null) {
        contents[_SP] = smithyClient.expectString(output[_sP]);
    }
    return contents;
};
const de_ExportToS3Task = (output, context) => {
    const contents = {};
    if (output[_cF] != null) {
        contents[_CFo] = smithyClient.expectString(output[_cF]);
    }
    if (output[_dIF] != null) {
        contents[_DIFi] = smithyClient.expectString(output[_dIF]);
    }
    if (output[_sB] != null) {
        contents[_SB] = smithyClient.expectString(output[_sB]);
    }
    if (output[_sK] != null) {
        contents[_SK] = smithyClient.expectString(output[_sK]);
    }
    return contents;
};
const de_ExportTransitGatewayRoutesResult = (output, context) => {
    const contents = {};
    if (output[_sL] != null) {
        contents[_SLo] = smithyClient.expectString(output[_sL]);
    }
    return contents;
};
const de_ExportVerifiedAccessInstanceClientConfigurationResult = (output, context) => {
    const contents = {};
    if (output[_ve] != null) {
        contents[_V] = smithyClient.expectString(output[_ve]);
    }
    if (output[_vAII] != null) {
        contents[_VAII] = smithyClient.expectString(output[_vAII]);
    }
    if (output[_re] != null) {
        contents[_Regi] = smithyClient.expectString(output[_re]);
    }
    if (String(output.deviceTrustProviderSet).trim() === "") {
        contents[_DTP] = [];
    }
    else if (output[_dTPS] != null && output[_dTPS][_i] != null) {
        contents[_DTP] = de_DeviceTrustProviderTypeList(smithyClient.getArrayIfSingleItem(output[_dTPS][_i]));
    }
    if (output[_uTP] != null) {
        contents[_UTP] = de_VerifiedAccessInstanceUserTrustProviderClientConfiguration(output[_uTP]);
    }
    if (String(output.openVpnConfigurationSet).trim() === "") {
        contents[_OVC] = [];
    }
    else if (output[_oVCS] != null && output[_oVCS][_i] != null) {
        contents[_OVC] = de_VerifiedAccessInstanceOpenVpnClientConfigurationList(smithyClient.getArrayIfSingleItem(output[_oVCS][_i]));
    }
    return contents;
};
const de_FailedCapacityReservationFleetCancellationResult = (output, context) => {
    const contents = {};
    if (output[_cRFI] != null) {
        contents[_CRFIa] = smithyClient.expectString(output[_cRFI]);
    }
    if (output[_cCRFE] != null) {
        contents[_CCRFE] = de_CancelCapacityReservationFleetError(output[_cCRFE]);
    }
    return contents;
};
const de_FailedCapacityReservationFleetCancellationResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailedCapacityReservationFleetCancellationResult(entry);
    });
};
const de_FailedQueuedPurchaseDeletion = (output, context) => {
    const contents = {};
    if (output[_er] != null) {
        contents[_Er] = de_DeleteQueuedReservedInstancesError(output[_er]);
    }
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    return contents;
};
const de_FailedQueuedPurchaseDeletionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FailedQueuedPurchaseDeletion(entry);
    });
};
const de_FastLaunchLaunchTemplateSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_lTI] != null) {
        contents[_LTI] = smithyClient.expectString(output[_lTI]);
    }
    if (output[_lTN] != null) {
        contents[_LTN] = smithyClient.expectString(output[_lTN]);
    }
    if (output[_ve] != null) {
        contents[_V] = smithyClient.expectString(output[_ve]);
    }
    return contents;
};
const de_FastLaunchSnapshotConfigurationResponse = (output, context) => {
    const contents = {};
    if (output[_tRC] != null) {
        contents[_TRC] = smithyClient.strictParseInt32(output[_tRC]);
    }
    return contents;
};
const de_FederatedAuthentication = (output, context) => {
    const contents = {};
    if (output[_sPA] != null) {
        contents[_SPA] = smithyClient.expectString(output[_sPA]);
    }
    if (output[_sSSPA] != null) {
        contents[_SSSPA] = smithyClient.expectString(output[_sSSPA]);
    }
    return contents;
};
const de_FilterPortRange = (output, context) => {
    const contents = {};
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    return contents;
};
const de_FirewallStatefulRule = (output, context) => {
    const contents = {};
    if (output[_rGA] != null) {
        contents[_RGA] = smithyClient.expectString(output[_rGA]);
    }
    if (String(output.sourceSet).trim() === "") {
        contents[_So] = [];
    }
    else if (output[_sSo] != null && output[_sSo][_i] != null) {
        contents[_So] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sSo][_i]));
    }
    if (String(output.destinationSet).trim() === "") {
        contents[_Des] = [];
    }
    else if (output[_dSe] != null && output[_dSe][_i] != null) {
        contents[_Des] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dSe][_i]));
    }
    if (String(output.sourcePortSet).trim() === "") {
        contents[_SPo] = [];
    }
    else if (output[_sPS] != null && output[_sPS][_i] != null) {
        contents[_SPo] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_sPS][_i]));
    }
    if (String(output.destinationPortSet).trim() === "") {
        contents[_DPes] = [];
    }
    else if (output[_dPS] != null && output[_dPS][_i] != null) {
        contents[_DPes] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_dPS][_i]));
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_rA] != null) {
        contents[_RAu] = smithyClient.expectString(output[_rA]);
    }
    if (output[_di] != null) {
        contents[_Di] = smithyClient.expectString(output[_di]);
    }
    return contents;
};
const de_FirewallStatelessRule = (output, context) => {
    const contents = {};
    if (output[_rGA] != null) {
        contents[_RGA] = smithyClient.expectString(output[_rGA]);
    }
    if (String(output.sourceSet).trim() === "") {
        contents[_So] = [];
    }
    else if (output[_sSo] != null && output[_sSo][_i] != null) {
        contents[_So] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sSo][_i]));
    }
    if (String(output.destinationSet).trim() === "") {
        contents[_Des] = [];
    }
    else if (output[_dSe] != null && output[_dSe][_i] != null) {
        contents[_Des] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dSe][_i]));
    }
    if (String(output.sourcePortSet).trim() === "") {
        contents[_SPo] = [];
    }
    else if (output[_sPS] != null && output[_sPS][_i] != null) {
        contents[_SPo] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_sPS][_i]));
    }
    if (String(output.destinationPortSet).trim() === "") {
        contents[_DPes] = [];
    }
    else if (output[_dPS] != null && output[_dPS][_i] != null) {
        contents[_DPes] = de_PortRangeList(smithyClient.getArrayIfSingleItem(output[_dPS][_i]));
    }
    if (String(output.protocolSet).trim() === "") {
        contents[_Pro] = [];
    }
    else if (output[_pSro] != null && output[_pSro][_i] != null) {
        contents[_Pro] = de_ProtocolIntList(smithyClient.getArrayIfSingleItem(output[_pSro][_i]));
    }
    if (output[_rA] != null) {
        contents[_RAu] = smithyClient.expectString(output[_rA]);
    }
    if (output[_pri] != null) {
        contents[_Pri] = smithyClient.strictParseInt32(output[_pri]);
    }
    return contents;
};
const de_FleetCapacityReservation = (output, context) => {
    const contents = {};
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_iPn] != null) {
        contents[_IPn] = smithyClient.expectString(output[_iPn]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_tIC] != null) {
        contents[_TICo] = smithyClient.strictParseInt32(output[_tIC]);
    }
    if (output[_fC] != null) {
        contents[_FC] = smithyClient.strictParseFloat(output[_fC]);
    }
    if (output[_eO] != null) {
        contents[_EO] = smithyClient.parseBoolean(output[_eO]);
    }
    if (output[_cD] != null) {
        contents[_CDr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cD]));
    }
    if (output[_we] != null) {
        contents[_W] = smithyClient.strictParseFloat(output[_we]);
    }
    if (output[_pri] != null) {
        contents[_Pri] = smithyClient.strictParseInt32(output[_pri]);
    }
    return contents;
};
const de_FleetCapacityReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetCapacityReservation(entry);
    });
};
const de_FleetData = (output, context) => {
    const contents = {};
    if (output[_aSc] != null) {
        contents[_ASc] = smithyClient.expectString(output[_aSc]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_fIl] != null) {
        contents[_FIl] = smithyClient.expectString(output[_fIl]);
    }
    if (output[_fSl] != null) {
        contents[_FS] = smithyClient.expectString(output[_fSl]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_eCTP] != null) {
        contents[_ECTP] = smithyClient.expectString(output[_eCTP]);
    }
    if (output[_fC] != null) {
        contents[_FC] = smithyClient.strictParseFloat(output[_fC]);
    }
    if (output[_fODC] != null) {
        contents[_FODC] = smithyClient.strictParseFloat(output[_fODC]);
    }
    if (String(output.launchTemplateConfigs).trim() === "") {
        contents[_LTC] = [];
    }
    else if (output[_lTC] != null && output[_lTC][_i] != null) {
        contents[_LTC] = de_FleetLaunchTemplateConfigList(smithyClient.getArrayIfSingleItem(output[_lTC][_i]));
    }
    if (output[_tCS] != null) {
        contents[_TCS] = de_TargetCapacitySpecification(output[_tCS]);
    }
    if (output[_tIWE] != null) {
        contents[_TIWE] = smithyClient.parseBoolean(output[_tIWE]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_vF] != null) {
        contents[_VF] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vF]));
    }
    if (output[_vU] != null) {
        contents[_VU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vU]));
    }
    if (output[_rUI] != null) {
        contents[_RUI] = smithyClient.parseBoolean(output[_rUI]);
    }
    if (output[_sO] != null) {
        contents[_SO] = de_SpotOptions(output[_sO]);
    }
    if (output[_oDO] != null) {
        contents[_ODO] = de_OnDemandOptions(output[_oDO]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.errorSet).trim() === "") {
        contents[_Err] = [];
    }
    else if (output[_eSr] != null && output[_eSr][_i] != null) {
        contents[_Err] = de_DescribeFleetsErrorSet(smithyClient.getArrayIfSingleItem(output[_eSr][_i]));
    }
    if (String(output.fleetInstanceSet).trim() === "") {
        contents[_In] = [];
    }
    else if (output[_fIS] != null && output[_fIS][_i] != null) {
        contents[_In] = de_DescribeFleetsInstancesSet(smithyClient.getArrayIfSingleItem(output[_fIS][_i]));
    }
    if (output[_cont] != null) {
        contents[_Con] = smithyClient.expectString(output[_cont]);
    }
    return contents;
};
const de_FleetLaunchTemplateConfig = (output, context) => {
    const contents = {};
    if (output[_lTS] != null) {
        contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS]);
    }
    if (String(output.overrides).trim() === "") {
        contents[_Ov] = [];
    }
    else if (output[_ov] != null && output[_ov][_i] != null) {
        contents[_Ov] = de_FleetLaunchTemplateOverridesList(smithyClient.getArrayIfSingleItem(output[_ov][_i]));
    }
    return contents;
};
const de_FleetLaunchTemplateConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetLaunchTemplateConfig(entry);
    });
};
const de_FleetLaunchTemplateOverrides = (output, context) => {
    const contents = {};
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_mP] != null) {
        contents[_MPa] = smithyClient.expectString(output[_mP]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_wC] != null) {
        contents[_WCe] = smithyClient.strictParseFloat(output[_wC]);
    }
    if (output[_pri] != null) {
        contents[_Pri] = smithyClient.strictParseFloat(output[_pri]);
    }
    if (output[_pla] != null) {
        contents[_Pl] = de_PlacementResponse(output[_pla]);
    }
    if (output[_iR] != null) {
        contents[_IR] = de_InstanceRequirements(output[_iR]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (String(output.blockDeviceMappingSet).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDMS] != null && output[_bDMS][_i] != null) {
        contents[_BDM] = de_BlockDeviceMappingResponseList(smithyClient.getArrayIfSingleItem(output[_bDMS][_i]));
    }
    return contents;
};
const de_FleetLaunchTemplateOverridesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetLaunchTemplateOverrides(entry);
    });
};
const de_FleetLaunchTemplateSpecification = (output, context) => {
    const contents = {};
    if (output[_lTI] != null) {
        contents[_LTI] = smithyClient.expectString(output[_lTI]);
    }
    if (output[_lTN] != null) {
        contents[_LTN] = smithyClient.expectString(output[_lTN]);
    }
    if (output[_ve] != null) {
        contents[_V] = smithyClient.expectString(output[_ve]);
    }
    return contents;
};
const de_FleetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FleetData(entry);
    });
};
const de_FleetSpotCapacityRebalance = (output, context) => {
    const contents = {};
    if (output[_rSep] != null) {
        contents[_RS] = smithyClient.expectString(output[_rSep]);
    }
    if (output[_tD] != null) {
        contents[_TDe] = smithyClient.strictParseInt32(output[_tD]);
    }
    return contents;
};
const de_FleetSpotMaintenanceStrategies = (output, context) => {
    const contents = {};
    if (output[_cRa] != null) {
        contents[_CRap] = de_FleetSpotCapacityRebalance(output[_cRa]);
    }
    return contents;
};
const de_FlowLog = (output, context) => {
    const contents = {};
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (output[_dLEM] != null) {
        contents[_DLEM] = smithyClient.expectString(output[_dLEM]);
    }
    if (output[_dLPA] != null) {
        contents[_DLPA] = smithyClient.expectString(output[_dLPA]);
    }
    if (output[_dCAR] != null) {
        contents[_DCAR] = smithyClient.expectString(output[_dCAR]);
    }
    if (output[_dLS] != null) {
        contents[_DLSe] = smithyClient.expectString(output[_dLS]);
    }
    if (output[_fLI] != null) {
        contents[_FLIl] = smithyClient.expectString(output[_fLI]);
    }
    if (output[_fLSl] != null) {
        contents[_FLS] = smithyClient.expectString(output[_fLSl]);
    }
    if (output[_lGN] != null) {
        contents[_LGN] = smithyClient.expectString(output[_lGN]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_tT] != null) {
        contents[_TT] = smithyClient.expectString(output[_tT]);
    }
    if (output[_lDT] != null) {
        contents[_LDT] = smithyClient.expectString(output[_lDT]);
    }
    if (output[_lD] != null) {
        contents[_LD] = smithyClient.expectString(output[_lD]);
    }
    if (output[_lF] != null) {
        contents[_LF] = smithyClient.expectString(output[_lF]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_mAI] != null) {
        contents[_MAI] = smithyClient.strictParseInt32(output[_mAI]);
    }
    if (output[_dOe] != null) {
        contents[_DO] = de_DestinationOptionsResponse(output[_dOe]);
    }
    return contents;
};
const de_FlowLogSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowLog(entry);
    });
};
const de_FpgaDeviceInfo = (output, context) => {
    const contents = {};
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_man] != null) {
        contents[_Man] = smithyClient.expectString(output[_man]);
    }
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_mIe] != null) {
        contents[_MIe] = de_FpgaDeviceMemoryInfo(output[_mIe]);
    }
    return contents;
};
const de_FpgaDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FpgaDeviceInfo(entry);
    });
};
const de_FpgaDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output[_sIMB] != null) {
        contents[_SIMB] = smithyClient.strictParseInt32(output[_sIMB]);
    }
    return contents;
};
const de_FpgaImage = (output, context) => {
    const contents = {};
    if (output[_fII] != null) {
        contents[_FII] = smithyClient.expectString(output[_fII]);
    }
    if (output[_fIGI] != null) {
        contents[_FIGI] = smithyClient.expectString(output[_fIGI]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_sVh] != null) {
        contents[_SVh] = smithyClient.expectString(output[_sVh]);
    }
    if (output[_pIc] != null) {
        contents[_PIc] = de_PciId(output[_pIc]);
    }
    if (output[_st] != null) {
        contents[_Stat] = de_FpgaImageState(output[_st]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_uT] != null) {
        contents[_UTp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uT]));
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_oAw] != null) {
        contents[_OAw] = smithyClient.expectString(output[_oAw]);
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (String(output.tags).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_ta] != null && output[_ta][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_ta][_i]));
    }
    if (output[_pu] != null) {
        contents[_Pu] = smithyClient.parseBoolean(output[_pu]);
    }
    if (output[_dRS] != null) {
        contents[_DRSa] = smithyClient.parseBoolean(output[_dRS]);
    }
    if (String(output.instanceTypes).trim() === "") {
        contents[_ITnst] = [];
    }
    else if (output[_iTn] != null && output[_iTn][_i] != null) {
        contents[_ITnst] = de_InstanceTypesList(smithyClient.getArrayIfSingleItem(output[_iTn][_i]));
    }
    return contents;
};
const de_FpgaImageAttribute = (output, context) => {
    const contents = {};
    if (output[_fII] != null) {
        contents[_FII] = smithyClient.expectString(output[_fII]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.loadPermissions).trim() === "") {
        contents[_LPo] = [];
    }
    else if (output[_lP] != null && output[_lP][_i] != null) {
        contents[_LPo] = de_LoadPermissionList(smithyClient.getArrayIfSingleItem(output[_lP][_i]));
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    return contents;
};
const de_FpgaImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FpgaImage(entry);
    });
};
const de_FpgaImageState = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_FpgaInfo = (output, context) => {
    const contents = {};
    if (String(output.fpgas).trim() === "") {
        contents[_Fp] = [];
    }
    else if (output[_fp] != null && output[_fp][_i] != null) {
        contents[_Fp] = de_FpgaDeviceInfoList(smithyClient.getArrayIfSingleItem(output[_fp][_i]));
    }
    if (output[_tFMIMB] != null) {
        contents[_TFMIMB] = smithyClient.strictParseInt32(output[_tFMIMB]);
    }
    return contents;
};
const de_GetActiveVpnTunnelStatusResult = (output, context) => {
    const contents = {};
    if (output[_aVTS] != null) {
        contents[_AVTS] = de_ActiveVpnTunnelStatus(output[_aVTS]);
    }
    return contents;
};
const de_GetAllowedImagesSettingsResult = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.imageCriterionSet).trim() === "") {
        contents[_ICm] = [];
    }
    else if (output[_iCS] != null && output[_iCS][_i] != null) {
        contents[_ICm] = de_ImageCriterionList(smithyClient.getArrayIfSingleItem(output[_iCS][_i]));
    }
    if (output[_mB] != null) {
        contents[_MB] = smithyClient.expectString(output[_mB]);
    }
    return contents;
};
const de_GetAssociatedEnclaveCertificateIamRolesResult = (output, context) => {
    const contents = {};
    if (String(output.associatedRoleSet).trim() === "") {
        contents[_ARss] = [];
    }
    else if (output[_aRS] != null && output[_aRS][_i] != null) {
        contents[_ARss] = de_AssociatedRolesList(smithyClient.getArrayIfSingleItem(output[_aRS][_i]));
    }
    return contents;
};
const de_GetAssociatedIpv6PoolCidrsResult = (output, context) => {
    const contents = {};
    if (String(output.ipv6CidrAssociationSet).trim() === "") {
        contents[_ICA] = [];
    }
    else if (output[_iCAS] != null && output[_iCAS][_i] != null) {
        contents[_ICA] = de_Ipv6CidrAssociationSet(smithyClient.getArrayIfSingleItem(output[_iCAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetAwsNetworkPerformanceDataResult = (output, context) => {
    const contents = {};
    if (String(output.dataResponseSet).trim() === "") {
        contents[_DRa] = [];
    }
    else if (output[_dRSa] != null && output[_dRSa][_i] != null) {
        contents[_DRa] = de_DataResponses(smithyClient.getArrayIfSingleItem(output[_dRSa][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetCapacityReservationUsageResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_tIC] != null) {
        contents[_TICo] = smithyClient.strictParseInt32(output[_tIC]);
    }
    if (output[_aICv] != null) {
        contents[_AICv] = smithyClient.strictParseInt32(output[_aICv]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.instanceUsageSet).trim() === "") {
        contents[_IU] = [];
    }
    else if (output[_iUS] != null && output[_iUS][_i] != null) {
        contents[_IU] = de_InstanceUsageSet(smithyClient.getArrayIfSingleItem(output[_iUS][_i]));
    }
    return contents;
};
const de_GetCoipPoolUsageResult = (output, context) => {
    const contents = {};
    if (output[_cPI] != null) {
        contents[_CPIo] = smithyClient.expectString(output[_cPI]);
    }
    if (String(output.coipAddressUsageSet).trim() === "") {
        contents[_CAU] = [];
    }
    else if (output[_cAUS] != null && output[_cAUS][_i] != null) {
        contents[_CAU] = de_CoipAddressUsageSet(smithyClient.getArrayIfSingleItem(output[_cAUS][_i]));
    }
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetConsoleOutputResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ti]));
    }
    if (output[_ou] != null) {
        contents[_Ou] = smithyClient.expectString(output[_ou]);
    }
    return contents;
};
const de_GetConsoleScreenshotResult = (output, context) => {
    const contents = {};
    if (output[_iD] != null) {
        contents[_IDm] = smithyClient.expectString(output[_iD]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    return contents;
};
const de_GetDeclarativePoliciesReportSummaryResult = (output, context) => {
    const contents = {};
    if (output[_rI] != null) {
        contents[_RIep] = smithyClient.expectString(output[_rI]);
    }
    if (output[_sB] != null) {
        contents[_SB] = smithyClient.expectString(output[_sB]);
    }
    if (output[_sP] != null) {
        contents[_SP] = smithyClient.expectString(output[_sP]);
    }
    if (output[_tI] != null) {
        contents[_TIa] = smithyClient.expectString(output[_tI]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_eTn] != null) {
        contents[_ETn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTn]));
    }
    if (output[_nOA] != null) {
        contents[_NOA] = smithyClient.strictParseInt32(output[_nOA]);
    }
    if (output[_nOFA] != null) {
        contents[_NOFA] = smithyClient.strictParseInt32(output[_nOFA]);
    }
    if (String(output.attributeSummarySet).trim() === "") {
        contents[_ASt] = [];
    }
    else if (output[_aSSt] != null && output[_aSSt][_i] != null) {
        contents[_ASt] = de_AttributeSummaryList(smithyClient.getArrayIfSingleItem(output[_aSSt][_i]));
    }
    return contents;
};
const de_GetDefaultCreditSpecificationResult = (output, context) => {
    const contents = {};
    if (output[_iFCS] != null) {
        contents[_IFCS] = de_InstanceFamilyCreditSpecification(output[_iFCS]);
    }
    return contents;
};
const de_GetEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {};
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    return contents;
};
const de_GetEbsEncryptionByDefaultResult = (output, context) => {
    const contents = {};
    if (output[_eEBD] != null) {
        contents[_EEBD] = smithyClient.parseBoolean(output[_eEBD]);
    }
    if (output[_sTs] != null) {
        contents[_STs] = smithyClient.expectString(output[_sTs]);
    }
    return contents;
};
const de_GetFlowLogsIntegrationTemplateResult = (output, context) => {
    const contents = {};
    if (output[_res] != null) {
        contents[_Resu] = smithyClient.expectString(output[_res]);
    }
    return contents;
};
const de_GetGroupsForCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.capacityReservationGroupSet).trim() === "") {
        contents[_CRG] = [];
    }
    else if (output[_cRGS] != null && output[_cRGS][_i] != null) {
        contents[_CRG] = de_CapacityReservationGroupSet(smithyClient.getArrayIfSingleItem(output[_cRGS][_i]));
    }
    return contents;
};
const de_GetHostReservationPurchasePreviewResult = (output, context) => {
    const contents = {};
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (String(output.purchase).trim() === "") {
        contents[_Pur] = [];
    }
    else if (output[_pur] != null && output[_pur][_i] != null) {
        contents[_Pur] = de_PurchaseSet(smithyClient.getArrayIfSingleItem(output[_pur][_i]));
    }
    if (output[_tHP] != null) {
        contents[_THP] = smithyClient.expectString(output[_tHP]);
    }
    if (output[_tUP] != null) {
        contents[_TUP] = smithyClient.expectString(output[_tUP]);
    }
    return contents;
};
const de_GetImageBlockPublicAccessStateResult = (output, context) => {
    const contents = {};
    if (output[_iBPAS] != null) {
        contents[_IBPAS] = smithyClient.expectString(output[_iBPAS]);
    }
    if (output[_mB] != null) {
        contents[_MB] = smithyClient.expectString(output[_mB]);
    }
    return contents;
};
const de_GetInstanceMetadataDefaultsResult = (output, context) => {
    const contents = {};
    if (output[_aL] != null) {
        contents[_ALc] = de_InstanceMetadataDefaultsResponse(output[_aL]);
    }
    return contents;
};
const de_GetInstanceTpmEkPubResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_kT] != null) {
        contents[_KT] = smithyClient.expectString(output[_kT]);
    }
    if (output[_kF] != null) {
        contents[_KF] = smithyClient.expectString(output[_kF]);
    }
    if (output[_kV] != null) {
        contents[_KV] = smithyClient.expectString(output[_kV]);
    }
    return contents;
};
const de_GetInstanceTypesFromInstanceRequirementsResult = (output, context) => {
    const contents = {};
    if (String(output.instanceTypeSet).trim() === "") {
        contents[_ITnst] = [];
    }
    else if (output[_iTS] != null && output[_iTS][_i] != null) {
        contents[_ITnst] = de_InstanceTypeInfoFromInstanceRequirementsSet(smithyClient.getArrayIfSingleItem(output[_iTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetInstanceUefiDataResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_uD] != null) {
        contents[_UDe] = smithyClient.expectString(output[_uD]);
    }
    return contents;
};
const de_GetIpamAddressHistoryResult = (output, context) => {
    const contents = {};
    if (String(output.historyRecordSet).trim() === "") {
        contents[_HRi] = [];
    }
    else if (output[_hRS] != null && output[_hRS][_i] != null) {
        contents[_HRi] = de_IpamAddressHistoryRecordSet(smithyClient.getArrayIfSingleItem(output[_hRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetIpamDiscoveredAccountsResult = (output, context) => {
    const contents = {};
    if (String(output.ipamDiscoveredAccountSet).trim() === "") {
        contents[_IDA] = [];
    }
    else if (output[_iDAS] != null && output[_iDAS][_i] != null) {
        contents[_IDA] = de_IpamDiscoveredAccountSet(smithyClient.getArrayIfSingleItem(output[_iDAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetIpamDiscoveredPublicAddressesResult = (output, context) => {
    const contents = {};
    if (String(output.ipamDiscoveredPublicAddressSet).trim() === "") {
        contents[_IDPA] = [];
    }
    else if (output[_iDPAS] != null && output[_iDPAS][_i] != null) {
        contents[_IDPA] = de_IpamDiscoveredPublicAddressSet(smithyClient.getArrayIfSingleItem(output[_iDPAS][_i]));
    }
    if (output[_oST] != null) {
        contents[_OST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_oST]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetIpamDiscoveredResourceCidrsResult = (output, context) => {
    const contents = {};
    if (String(output.ipamDiscoveredResourceCidrSet).trim() === "") {
        contents[_IDRC] = [];
    }
    else if (output[_iDRCS] != null && output[_iDRCS][_i] != null) {
        contents[_IDRC] = de_IpamDiscoveredResourceCidrSet(smithyClient.getArrayIfSingleItem(output[_iDRCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetIpamPoolAllocationsResult = (output, context) => {
    const contents = {};
    if (String(output.ipamPoolAllocationSet).trim() === "") {
        contents[_IPAp] = [];
    }
    else if (output[_iPAS] != null && output[_iPAS][_i] != null) {
        contents[_IPAp] = de_IpamPoolAllocationSet(smithyClient.getArrayIfSingleItem(output[_iPAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetIpamPoolCidrsResult = (output, context) => {
    const contents = {};
    if (String(output.ipamPoolCidrSet).trim() === "") {
        contents[_IPCpam] = [];
    }
    else if (output[_iPCS] != null && output[_iPCS][_i] != null) {
        contents[_IPCpam] = de_IpamPoolCidrSet(smithyClient.getArrayIfSingleItem(output[_iPCS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetIpamResourceCidrsResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.ipamResourceCidrSet).trim() === "") {
        contents[_IRC] = [];
    }
    else if (output[_iRCS] != null && output[_iRCS][_i] != null) {
        contents[_IRC] = de_IpamResourceCidrSet(smithyClient.getArrayIfSingleItem(output[_iRCS][_i]));
    }
    return contents;
};
const de_GetLaunchTemplateDataResult = (output, context) => {
    const contents = {};
    if (output[_lTD] != null) {
        contents[_LTD] = de_ResponseLaunchTemplateData(output[_lTD]);
    }
    return contents;
};
const de_GetManagedPrefixListAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.prefixListAssociationSet).trim() === "") {
        contents[_PLA] = [];
    }
    else if (output[_pLAS] != null && output[_pLAS][_i] != null) {
        contents[_PLA] = de_PrefixListAssociationSet(smithyClient.getArrayIfSingleItem(output[_pLAS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetManagedPrefixListEntriesResult = (output, context) => {
    const contents = {};
    if (String(output.entrySet).trim() === "") {
        contents[_Ent] = [];
    }
    else if (output[_eSnt] != null && output[_eSnt][_i] != null) {
        contents[_Ent] = de_PrefixListEntrySet(smithyClient.getArrayIfSingleItem(output[_eSnt][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetNetworkInsightsAccessScopeAnalysisFindingsResult = (output, context) => {
    const contents = {};
    if (output[_nIASAI] != null) {
        contents[_NIASAI] = smithyClient.expectString(output[_nIASAI]);
    }
    if (output[_aSn] != null) {
        contents[_ASn] = smithyClient.expectString(output[_aSn]);
    }
    if (String(output.analysisFindingSet).trim() === "") {
        contents[_AFn] = [];
    }
    else if (output[_aFS] != null && output[_aFS][_i] != null) {
        contents[_AFn] = de_AccessScopeAnalysisFindingList(smithyClient.getArrayIfSingleItem(output[_aFS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetNetworkInsightsAccessScopeContentResult = (output, context) => {
    const contents = {};
    if (output[_nIASC] != null) {
        contents[_NIASC] = de_NetworkInsightsAccessScopeContent(output[_nIASC]);
    }
    return contents;
};
const de_GetPasswordDataResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ti]));
    }
    if (output[_pD] != null) {
        contents[_PDa] = smithyClient.expectString(output[_pD]);
    }
    return contents;
};
const de_GetReservedInstancesExchangeQuoteResult = (output, context) => {
    const contents = {};
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_iVE] != null) {
        contents[_IVE] = smithyClient.parseBoolean(output[_iVE]);
    }
    if (output[_oRIWEA] != null) {
        contents[_ORIWEA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_oRIWEA]));
    }
    if (output[_pDa] != null) {
        contents[_PDay] = smithyClient.expectString(output[_pDa]);
    }
    if (output[_rIVR] != null) {
        contents[_RIVR] = de_ReservationValue(output[_rIVR]);
    }
    if (String(output.reservedInstanceValueSet).trim() === "") {
        contents[_RIVS] = [];
    }
    else if (output[_rIVS] != null && output[_rIVS][_i] != null) {
        contents[_RIVS] = de_ReservedInstanceReservationValueSet(smithyClient.getArrayIfSingleItem(output[_rIVS][_i]));
    }
    if (output[_tCVR] != null) {
        contents[_TCVR] = de_ReservationValue(output[_tCVR]);
    }
    if (String(output.targetConfigurationValueSet).trim() === "") {
        contents[_TCVS] = [];
    }
    else if (output[_tCVS] != null && output[_tCVS][_i] != null) {
        contents[_TCVS] = de_TargetReservationValueSet(smithyClient.getArrayIfSingleItem(output[_tCVS][_i]));
    }
    if (output[_vFR] != null) {
        contents[_VFR] = smithyClient.expectString(output[_vFR]);
    }
    return contents;
};
const de_GetRouteServerAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.routeServerAssociationSet).trim() === "") {
        contents[_RSAou] = [];
    }
    else if (output[_rSAS] != null && output[_rSAS][_i] != null) {
        contents[_RSAou] = de_RouteServerAssociationsList(smithyClient.getArrayIfSingleItem(output[_rSAS][_i]));
    }
    return contents;
};
const de_GetRouteServerPropagationsResult = (output, context) => {
    const contents = {};
    if (String(output.routeServerPropagationSet).trim() === "") {
        contents[_RSPout] = [];
    }
    else if (output[_rSPSo] != null && output[_rSPSo][_i] != null) {
        contents[_RSPout] = de_RouteServerPropagationsList(smithyClient.getArrayIfSingleItem(output[_rSPSo][_i]));
    }
    return contents;
};
const de_GetRouteServerRoutingDatabaseResult = (output, context) => {
    const contents = {};
    if (output[_aRP] != null) {
        contents[_ARP] = smithyClient.parseBoolean(output[_aRP]);
    }
    if (String(output.routeSet).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rSou] != null && output[_rSou][_i] != null) {
        contents[_Rout] = de_RouteServerRouteList(smithyClient.getArrayIfSingleItem(output[_rSou][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetSecurityGroupsForVpcResult = (output, context) => {
    const contents = {};
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    if (String(output.securityGroupForVpcSet).trim() === "") {
        contents[_SGFV] = [];
    }
    else if (output[_sGFVS] != null && output[_sGFVS][_i] != null) {
        contents[_SGFV] = de_SecurityGroupForVpcList(smithyClient.getArrayIfSingleItem(output[_sGFVS][_i]));
    }
    return contents;
};
const de_GetSerialConsoleAccessStatusResult = (output, context) => {
    const contents = {};
    if (output[_sCAE] != null) {
        contents[_SCAE] = smithyClient.parseBoolean(output[_sCAE]);
    }
    if (output[_mB] != null) {
        contents[_MB] = smithyClient.expectString(output[_mB]);
    }
    return contents;
};
const de_GetSnapshotBlockPublicAccessStateResult = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_mB] != null) {
        contents[_MB] = smithyClient.expectString(output[_mB]);
    }
    return contents;
};
const de_GetSpotPlacementScoresResult = (output, context) => {
    const contents = {};
    if (String(output.spotPlacementScoreSet).trim() === "") {
        contents[_SPS] = [];
    }
    else if (output[_sPSS] != null && output[_sPSS][_i] != null) {
        contents[_SPS] = de_SpotPlacementScores(smithyClient.getArrayIfSingleItem(output[_sPSS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetSubnetCidrReservationsResult = (output, context) => {
    const contents = {};
    if (String(output.subnetIpv4CidrReservationSet).trim() === "") {
        contents[_SICR] = [];
    }
    else if (output[_sICRS] != null && output[_sICRS][_i] != null) {
        contents[_SICR] = de_SubnetCidrReservationList(smithyClient.getArrayIfSingleItem(output[_sICRS][_i]));
    }
    if (String(output.subnetIpv6CidrReservationSet).trim() === "") {
        contents[_SICRu] = [];
    }
    else if (output[_sICRSu] != null && output[_sICRSu][_i] != null) {
        contents[_SICRu] = de_SubnetCidrReservationList(smithyClient.getArrayIfSingleItem(output[_sICRSu][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetTransitGatewayAttachmentPropagationsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayAttachmentPropagations).trim() === "") {
        contents[_TGAP] = [];
    }
    else if (output[_tGAP] != null && output[_tGAP][_i] != null) {
        contents[_TGAP] = de_TransitGatewayAttachmentPropagationList(smithyClient.getArrayIfSingleItem(output[_tGAP][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.multicastDomainAssociations).trim() === "") {
        contents[_MDA] = [];
    }
    else if (output[_mDA] != null && output[_mDA][_i] != null) {
        contents[_MDA] = de_TransitGatewayMulticastDomainAssociationList(smithyClient.getArrayIfSingleItem(output[_mDA][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetTransitGatewayPolicyTableAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.associations).trim() === "") {
        contents[_Ass] = [];
    }
    else if (output[_a] != null && output[_a][_i] != null) {
        contents[_Ass] = de_TransitGatewayPolicyTableAssociationList(smithyClient.getArrayIfSingleItem(output[_a][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetTransitGatewayPolicyTableEntriesResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayPolicyTableEntries).trim() === "") {
        contents[_TGPTE] = [];
    }
    else if (output[_tGPTE] != null && output[_tGPTE][_i] != null) {
        contents[_TGPTE] = de_TransitGatewayPolicyTableEntryList(smithyClient.getArrayIfSingleItem(output[_tGPTE][_i]));
    }
    return contents;
};
const de_GetTransitGatewayPrefixListReferencesResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayPrefixListReferenceSet).trim() === "") {
        contents[_TGPLRr] = [];
    }
    else if (output[_tGPLRS] != null && output[_tGPLRS][_i] != null) {
        contents[_TGPLRr] = de_TransitGatewayPrefixListReferenceSet(smithyClient.getArrayIfSingleItem(output[_tGPLRS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetTransitGatewayRouteTableAssociationsResult = (output, context) => {
    const contents = {};
    if (String(output.associations).trim() === "") {
        contents[_Ass] = [];
    }
    else if (output[_a] != null && output[_a][_i] != null) {
        contents[_Ass] = de_TransitGatewayRouteTableAssociationList(smithyClient.getArrayIfSingleItem(output[_a][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetTransitGatewayRouteTablePropagationsResult = (output, context) => {
    const contents = {};
    if (String(output.transitGatewayRouteTablePropagations).trim() === "") {
        contents[_TGRTP] = [];
    }
    else if (output[_tGRTP] != null && output[_tGRTP][_i] != null) {
        contents[_TGRTP] = de_TransitGatewayRouteTablePropagationList(smithyClient.getArrayIfSingleItem(output[_tGRTP][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetVerifiedAccessEndpointPolicyResult = (output, context) => {
    const contents = {};
    if (output[_pE] != null) {
        contents[_PE] = smithyClient.parseBoolean(output[_pE]);
    }
    if (output[_pDo] != null) {
        contents[_PD] = smithyClient.expectString(output[_pDo]);
    }
    return contents;
};
const de_GetVerifiedAccessEndpointTargetsResult = (output, context) => {
    const contents = {};
    if (String(output.verifiedAccessEndpointTargetSet).trim() === "") {
        contents[_VAET] = [];
    }
    else if (output[_vAETS] != null && output[_vAETS][_i] != null) {
        contents[_VAET] = de_VerifiedAccessEndpointTargetList(smithyClient.getArrayIfSingleItem(output[_vAETS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetVerifiedAccessGroupPolicyResult = (output, context) => {
    const contents = {};
    if (output[_pE] != null) {
        contents[_PE] = smithyClient.parseBoolean(output[_pE]);
    }
    if (output[_pDo] != null) {
        contents[_PD] = smithyClient.expectString(output[_pDo]);
    }
    return contents;
};
const de_GetVpnConnectionDeviceSampleConfigurationResult = (output, context) => {
    const contents = {};
    if (output[_vCDSC] != null) {
        contents[_VCDSC] = smithyClient.expectString(output[_vCDSC]);
    }
    return contents;
};
const de_GetVpnConnectionDeviceTypesResult = (output, context) => {
    const contents = {};
    if (String(output.vpnConnectionDeviceTypeSet).trim() === "") {
        contents[_VCDT] = [];
    }
    else if (output[_vCDTS] != null && output[_vCDTS][_i] != null) {
        contents[_VCDT] = de_VpnConnectionDeviceTypeList(smithyClient.getArrayIfSingleItem(output[_vCDTS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_GetVpnTunnelReplacementStatusResult = (output, context) => {
    const contents = {};
    if (output[_vCI] != null) {
        contents[_VCI] = smithyClient.expectString(output[_vCI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_cGIu] != null) {
        contents[_CGIu] = smithyClient.expectString(output[_cGIu]);
    }
    if (output[_vGI] != null) {
        contents[_VGI] = smithyClient.expectString(output[_vGI]);
    }
    if (output[_vTOIA] != null) {
        contents[_VTOIA] = smithyClient.expectString(output[_vTOIA]);
    }
    if (output[_mD] != null) {
        contents[_MDa] = de_MaintenanceDetails(output[_mD]);
    }
    return contents;
};
const de_GpuDeviceInfo = (output, context) => {
    const contents = {};
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_man] != null) {
        contents[_Man] = smithyClient.expectString(output[_man]);
    }
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_mIe] != null) {
        contents[_MIe] = de_GpuDeviceMemoryInfo(output[_mIe]);
    }
    return contents;
};
const de_GpuDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GpuDeviceInfo(entry);
    });
};
const de_GpuDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output[_sIMB] != null) {
        contents[_SIMB] = smithyClient.strictParseInt32(output[_sIMB]);
    }
    return contents;
};
const de_GpuInfo = (output, context) => {
    const contents = {};
    if (String(output.gpus).trim() === "") {
        contents[_Gp] = [];
    }
    else if (output[_gp] != null && output[_gp][_i] != null) {
        contents[_Gp] = de_GpuDeviceInfoList(smithyClient.getArrayIfSingleItem(output[_gp][_i]));
    }
    if (output[_tGMIMB] != null) {
        contents[_TGMIMB] = smithyClient.strictParseInt32(output[_tGMIMB]);
    }
    return contents;
};
const de_GroupIdentifier = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    return contents;
};
const de_GroupIdentifierList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_GroupIdentifier(entry);
    });
};
const de_GroupIdentifierSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupIdentifier(entry);
    });
};
const de_GroupIdStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_HibernationOptions = (output, context) => {
    const contents = {};
    if (output[_conf] != null) {
        contents[_Conf] = smithyClient.parseBoolean(output[_conf]);
    }
    return contents;
};
const de_HistoryRecord = (output, context) => {
    const contents = {};
    if (output[_eIv] != null) {
        contents[_EIv] = de_EventInformation(output[_eIv]);
    }
    if (output[_eTv] != null) {
        contents[_ETv] = smithyClient.expectString(output[_eTv]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ti]));
    }
    return contents;
};
const de_HistoryRecordEntry = (output, context) => {
    const contents = {};
    if (output[_eIv] != null) {
        contents[_EIv] = de_EventInformation(output[_eIv]);
    }
    if (output[_eTv] != null) {
        contents[_ETv] = smithyClient.expectString(output[_eTv]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ti]));
    }
    return contents;
};
const de_HistoryRecords = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoryRecord(entry);
    });
};
const de_HistoryRecordSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HistoryRecordEntry(entry);
    });
};
const de_Host = (output, context) => {
    const contents = {};
    if (output[_aPu] != null) {
        contents[_AP] = smithyClient.expectString(output[_aPu]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aC] != null) {
        contents[_ACv] = de_AvailableCapacity(output[_aC]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_hI] != null) {
        contents[_HIo] = smithyClient.expectString(output[_hI]);
    }
    if (output[_hP] != null) {
        contents[_HP] = de_HostProperties(output[_hP]);
    }
    if (output[_hRI] != null) {
        contents[_HRI] = smithyClient.expectString(output[_hRI]);
    }
    if (String(output.instances).trim() === "") {
        contents[_In] = [];
    }
    else if (output[_ins] != null && output[_ins][_i] != null) {
        contents[_In] = de_HostInstanceList(smithyClient.getArrayIfSingleItem(output[_ins][_i]));
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_aTll] != null) {
        contents[_ATll] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_aTll]));
    }
    if (output[_rTel] != null) {
        contents[_RTel] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rTel]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_hR] != null) {
        contents[_HR] = smithyClient.expectString(output[_hR]);
    }
    if (output[_aMIT] != null) {
        contents[_AMIT] = smithyClient.expectString(output[_aMIT]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_mOSLRG] != null) {
        contents[_MOSLRG] = smithyClient.parseBoolean(output[_mOSLRG]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_hM] != null) {
        contents[_HM] = smithyClient.expectString(output[_hM]);
    }
    if (output[_aIss] != null) {
        contents[_AIsse] = smithyClient.expectString(output[_aIss]);
    }
    return contents;
};
const de_HostInstance = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    return contents;
};
const de_HostInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostInstance(entry);
    });
};
const de_HostList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Host(entry);
    });
};
const de_HostOffering = (output, context) => {
    const contents = {};
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_du] != null) {
        contents[_Du] = smithyClient.strictParseInt32(output[_du]);
    }
    if (output[_hPo] != null) {
        contents[_HPo] = smithyClient.expectString(output[_hPo]);
    }
    if (output[_iF] != null) {
        contents[_IF] = smithyClient.expectString(output[_iF]);
    }
    if (output[_oIf] != null) {
        contents[_OI] = smithyClient.expectString(output[_oIf]);
    }
    if (output[_pO] != null) {
        contents[_PO] = smithyClient.expectString(output[_pO]);
    }
    if (output[_uP] != null) {
        contents[_UPp] = smithyClient.expectString(output[_uP]);
    }
    return contents;
};
const de_HostOfferingSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostOffering(entry);
    });
};
const de_HostProperties = (output, context) => {
    const contents = {};
    if (output[_cor] != null) {
        contents[_Cor] = smithyClient.strictParseInt32(output[_cor]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_iF] != null) {
        contents[_IF] = smithyClient.expectString(output[_iF]);
    }
    if (output[_so] != null) {
        contents[_Soc] = smithyClient.strictParseInt32(output[_so]);
    }
    if (output[_tVC] != null) {
        contents[_TVC] = smithyClient.strictParseInt32(output[_tVC]);
    }
    return contents;
};
const de_HostReservation = (output, context) => {
    const contents = {};
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_du] != null) {
        contents[_Du] = smithyClient.strictParseInt32(output[_du]);
    }
    if (output[_end] != null) {
        contents[_End] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_end]));
    }
    if (String(output.hostIdSet).trim() === "") {
        contents[_HIS] = [];
    }
    else if (output[_hIS] != null && output[_hIS][_i] != null) {
        contents[_HIS] = de_ResponseHostIdSet(smithyClient.getArrayIfSingleItem(output[_hIS][_i]));
    }
    if (output[_hRI] != null) {
        contents[_HRI] = smithyClient.expectString(output[_hRI]);
    }
    if (output[_hPo] != null) {
        contents[_HPo] = smithyClient.expectString(output[_hPo]);
    }
    if (output[_iF] != null) {
        contents[_IF] = smithyClient.expectString(output[_iF]);
    }
    if (output[_oIf] != null) {
        contents[_OI] = smithyClient.expectString(output[_oIf]);
    }
    if (output[_pO] != null) {
        contents[_PO] = smithyClient.expectString(output[_pO]);
    }
    if (output[_star] != null) {
        contents[_Star] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_star]));
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_uP] != null) {
        contents[_UPp] = smithyClient.expectString(output[_uP]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_HostReservationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HostReservation(entry);
    });
};
const de_IamInstanceProfile = (output, context) => {
    const contents = {};
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    if (output[_id] != null) {
        contents[_Id] = smithyClient.expectString(output[_id]);
    }
    return contents;
};
const de_IamInstanceProfileAssociation = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iIP] != null) {
        contents[_IIP] = de_IamInstanceProfile(output[_iIP]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ti]));
    }
    return contents;
};
const de_IamInstanceProfileAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IamInstanceProfileAssociation(entry);
    });
};
const de_IamInstanceProfileSpecification = (output, context) => {
    const contents = {};
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    return contents;
};
const de_IcmpTypeCode = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.strictParseInt32(output[_co]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.strictParseInt32(output[_ty]);
    }
    return contents;
};
const de_IdFormat = (output, context) => {
    const contents = {};
    if (output[_dea] != null) {
        contents[_Dea] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dea]));
    }
    if (output[_reso] != null) {
        contents[_Res] = smithyClient.expectString(output[_reso]);
    }
    if (output[_uLI] != null) {
        contents[_ULI] = smithyClient.parseBoolean(output[_uLI]);
    }
    return contents;
};
const de_IdFormatList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IdFormat(entry);
    });
};
const de_IKEVersionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IKEVersionsListValue(entry);
    });
};
const de_IKEVersionsListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_Image = (output, context) => {
    const contents = {};
    if (output[_pDl] != null) {
        contents[_PDl] = smithyClient.expectString(output[_pDl]);
    }
    if (output[_uO] != null) {
        contents[_UO] = smithyClient.expectString(output[_uO]);
    }
    if (String(output.blockDeviceMapping).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDM] != null && output[_bDM][_i] != null) {
        contents[_BDM] = de_BlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDM][_i]));
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_eSna] != null) {
        contents[_ESn] = smithyClient.parseBoolean(output[_eSna]);
    }
    if (output[_h] != null) {
        contents[_H] = smithyClient.expectString(output[_h]);
    }
    if (output[_iOA] != null) {
        contents[_IOA] = smithyClient.expectString(output[_iOA]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_rDN] != null) {
        contents[_RDN] = smithyClient.expectString(output[_rDN]);
    }
    if (output[_rDT] != null) {
        contents[_RDT] = smithyClient.expectString(output[_rDT]);
    }
    if (output[_sNSr] != null) {
        contents[_SNS] = smithyClient.expectString(output[_sNSr]);
    }
    if (output[_sRt] != null) {
        contents[_SRt] = de_StateReason(output[_sRt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vTi] != null) {
        contents[_VTir] = smithyClient.expectString(output[_vTi]);
    }
    if (output[_bM] != null) {
        contents[_BM] = smithyClient.expectString(output[_bM]);
    }
    if (output[_tSp] != null) {
        contents[_TSp] = smithyClient.expectString(output[_tSp]);
    }
    if (output[_dTe] != null) {
        contents[_DTep] = smithyClient.expectString(output[_dTe]);
    }
    if (output[_iSmd] != null) {
        contents[_ISm] = smithyClient.expectString(output[_iSmd]);
    }
    if (output[_sII] != null) {
        contents[_SIIo] = smithyClient.expectString(output[_sII]);
    }
    if (output[_dPe] != null) {
        contents[_DPer] = smithyClient.expectString(output[_dPe]);
    }
    if (output[_lLT] != null) {
        contents[_LLT] = smithyClient.expectString(output[_lLT]);
    }
    if (output[_iAm] != null) {
        contents[_IAm] = smithyClient.parseBoolean(output[_iAm]);
    }
    if (output[_sIIo] != null) {
        contents[_SII] = smithyClient.expectString(output[_sIIo]);
    }
    if (output[_sIR] != null) {
        contents[_SIRo] = smithyClient.expectString(output[_sIR]);
    }
    if (output[_fTE] != null) {
        contents[_FTE] = smithyClient.parseBoolean(output[_fTE]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iL] != null) {
        contents[_IL] = smithyClient.expectString(output[_iL]);
    }
    if (output[_iSma] != null) {
        contents[_Stat] = smithyClient.expectString(output[_iSma]);
    }
    if (output[_iOI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_iOI]);
    }
    if (output[_cDr] != null) {
        contents[_CDre] = smithyClient.expectString(output[_cDr]);
    }
    if (output[_iPs] != null) {
        contents[_Pu] = smithyClient.parseBoolean(output[_iPs]);
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (output[_arc] != null) {
        contents[_Arc] = smithyClient.expectString(output[_arc]);
    }
    if (output[_iTm] != null) {
        contents[_ITm] = smithyClient.expectString(output[_iTm]);
    }
    if (output[_kI] != null) {
        contents[_KI] = smithyClient.expectString(output[_kI]);
    }
    if (output[_rIa] != null) {
        contents[_RIa] = smithyClient.expectString(output[_rIa]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    return contents;
};
const de_ImageAttribute = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = de_AttributeValue(output[_de]);
    }
    if (output[_ke] != null) {
        contents[_KI] = de_AttributeValue(output[_ke]);
    }
    if (output[_ra] != null) {
        contents[_RIa] = de_AttributeValue(output[_ra]);
    }
    if (output[_sNSr] != null) {
        contents[_SNS] = de_AttributeValue(output[_sNSr]);
    }
    if (output[_bM] != null) {
        contents[_BM] = de_AttributeValue(output[_bM]);
    }
    if (output[_tSp] != null) {
        contents[_TSp] = de_AttributeValue(output[_tSp]);
    }
    if (output[_uD] != null) {
        contents[_UDe] = de_AttributeValue(output[_uD]);
    }
    if (output[_lLT] != null) {
        contents[_LLT] = de_AttributeValue(output[_lLT]);
    }
    if (output[_iSmd] != null) {
        contents[_ISm] = de_AttributeValue(output[_iSmd]);
    }
    if (output[_dPe] != null) {
        contents[_DPer] = de_AttributeValue(output[_dPe]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (String(output.launchPermission).trim() === "") {
        contents[_LPau] = [];
    }
    else if (output[_lPa] != null && output[_lPa][_i] != null) {
        contents[_LPau] = de_LaunchPermissionList(smithyClient.getArrayIfSingleItem(output[_lPa][_i]));
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (String(output.blockDeviceMapping).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDM] != null && output[_bDM][_i] != null) {
        contents[_BDM] = de_BlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDM][_i]));
    }
    return contents;
};
const de_ImageCriterion = (output, context) => {
    const contents = {};
    if (String(output.imageProviderSet).trim() === "") {
        contents[_IPm] = [];
    }
    else if (output[_iPSm] != null && output[_iPSm][_i] != null) {
        contents[_IPm] = de_ImageProviderList(smithyClient.getArrayIfSingleItem(output[_iPSm][_i]));
    }
    if (String(output.marketplaceProductCodeSet).trim() === "") {
        contents[_MPC] = [];
    }
    else if (output[_mPCS] != null && output[_mPCS][_i] != null) {
        contents[_MPC] = de_MarketplaceProductCodeList(smithyClient.getArrayIfSingleItem(output[_mPCS][_i]));
    }
    if (String(output.imageNameSet).trim() === "") {
        contents[_INm] = [];
    }
    else if (output[_iNS] != null && output[_iNS][_i] != null) {
        contents[_INm] = de_ImageNameList(smithyClient.getArrayIfSingleItem(output[_iNS][_i]));
    }
    if (output[_dTC] != null) {
        contents[_DTC] = de_DeprecationTimeCondition(output[_dTC]);
    }
    if (output[_cDC] != null) {
        contents[_CDC] = de_CreationDateCondition(output[_cDC]);
    }
    return contents;
};
const de_ImageCriterionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageCriterion(entry);
    });
};
const de_ImageList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Image(entry);
    });
};
const de_ImageMetadata = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_iOI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_iOI]);
    }
    if (output[_iSma] != null) {
        contents[_Stat] = smithyClient.expectString(output[_iSma]);
    }
    if (output[_iOA] != null) {
        contents[_IOA] = smithyClient.expectString(output[_iOA]);
    }
    if (output[_cDr] != null) {
        contents[_CDre] = smithyClient.expectString(output[_cDr]);
    }
    if (output[_dTe] != null) {
        contents[_DTep] = smithyClient.expectString(output[_dTe]);
    }
    if (output[_iAm] != null) {
        contents[_IAm] = smithyClient.parseBoolean(output[_iAm]);
    }
    if (output[_iPs] != null) {
        contents[_IPs] = smithyClient.parseBoolean(output[_iPs]);
    }
    return contents;
};
const de_ImageNameList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ImageProviderList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ImageRecycleBinInfo = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_rBET] != null) {
        contents[_RBET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rBET]));
    }
    if (output[_rBETe] != null) {
        contents[_RBETe] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rBETe]));
    }
    return contents;
};
const de_ImageRecycleBinInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageRecycleBinInfo(entry);
    });
};
const de_ImageReference = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    return contents;
};
const de_ImageReferenceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageReference(entry);
    });
};
const de_ImageUsageReport = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rI] != null) {
        contents[_RIep] = smithyClient.expectString(output[_rI]);
    }
    if (String(output.resourceTypeSet).trim() === "") {
        contents[_RTe] = [];
    }
    else if (output[_rTSe] != null && output[_rTSe][_i] != null) {
        contents[_RTe] = de_ImageUsageResourceTypeList(smithyClient.getArrayIfSingleItem(output[_rTSe][_i]));
    }
    if (String(output.accountIdSet).trim() === "") {
        contents[_AIc] = [];
    }
    else if (output[_aISc] != null && output[_aISc][_i] != null) {
        contents[_AIc] = de_UserIdList(smithyClient.getArrayIfSingleItem(output[_aISc][_i]));
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_sRt]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (output[_eT] != null) {
        contents[_ETx] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eT]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ImageUsageReportEntry = (output, context) => {
    const contents = {};
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rI] != null) {
        contents[_RIep] = smithyClient.expectString(output[_rI]);
    }
    if (output[_uCs] != null) {
        contents[_UCs] = smithyClient.strictParseLong(output[_uCs]);
    }
    if (output[_aIc] != null) {
        contents[_AIcc] = smithyClient.expectString(output[_aIc]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_rCT] != null) {
        contents[_RCT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rCT]));
    }
    return contents;
};
const de_ImageUsageReportEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageUsageReportEntry(entry);
    });
};
const de_ImageUsageReportList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageUsageReport(entry);
    });
};
const de_ImageUsageResourceType = (output, context) => {
    const contents = {};
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (String(output.resourceTypeOptionSet).trim() === "") {
        contents[_RTO] = [];
    }
    else if (output[_rTOS] != null && output[_rTOS][_i] != null) {
        contents[_RTO] = de_ImageUsageResourceTypeOptionList(smithyClient.getArrayIfSingleItem(output[_rTOS][_i]));
    }
    return contents;
};
const de_ImageUsageResourceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageUsageResourceType(entry);
    });
};
const de_ImageUsageResourceTypeOption = (output, context) => {
    const contents = {};
    if (output[_oN] != null) {
        contents[_ON] = smithyClient.expectString(output[_oN]);
    }
    if (String(output.optionValueSet).trim() === "") {
        contents[_OV] = [];
    }
    else if (output[_oVS] != null && output[_oVS][_i] != null) {
        contents[_OV] = de_ImageUsageResourceTypeOptionValuesList(smithyClient.getArrayIfSingleItem(output[_oVS][_i]));
    }
    return contents;
};
const de_ImageUsageResourceTypeOptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageUsageResourceTypeOption(entry);
    });
};
const de_ImageUsageResourceTypeOptionValuesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ImportClientVpnClientCertificateRevocationListResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ImportImageLicenseConfigurationResponse = (output, context) => {
    const contents = {};
    if (output[_lCA] != null) {
        contents[_LCA] = smithyClient.expectString(output[_lCA]);
    }
    return contents;
};
const de_ImportImageLicenseSpecificationListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportImageLicenseConfigurationResponse(entry);
    });
};
const de_ImportImageResult = (output, context) => {
    const contents = {};
    if (output[_arc] != null) {
        contents[_Arc] = smithyClient.expectString(output[_arc]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_h] != null) {
        contents[_H] = smithyClient.expectString(output[_h]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iTI] != null) {
        contents[_ITI] = smithyClient.expectString(output[_iTI]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_lTi] != null) {
        contents[_LTi] = smithyClient.expectString(output[_lTi]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (String(output.snapshotDetailSet).trim() === "") {
        contents[_SDn] = [];
    }
    else if (output[_sDSn] != null && output[_sDSn][_i] != null) {
        contents[_SDn] = de_SnapshotDetailList(smithyClient.getArrayIfSingleItem(output[_sDSn][_i]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.licenseSpecifications).trim() === "") {
        contents[_LSi] = [];
    }
    else if (output[_lS] != null && output[_lS][_i] != null) {
        contents[_LSi] = de_ImportImageLicenseSpecificationListResponse(smithyClient.getArrayIfSingleItem(output[_lS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_uO] != null) {
        contents[_UO] = smithyClient.expectString(output[_uO]);
    }
    return contents;
};
const de_ImportImageTask = (output, context) => {
    const contents = {};
    if (output[_arc] != null) {
        contents[_Arc] = smithyClient.expectString(output[_arc]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_h] != null) {
        contents[_H] = smithyClient.expectString(output[_h]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iTI] != null) {
        contents[_ITI] = smithyClient.expectString(output[_iTI]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_lTi] != null) {
        contents[_LTi] = smithyClient.expectString(output[_lTi]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (String(output.snapshotDetailSet).trim() === "") {
        contents[_SDn] = [];
    }
    else if (output[_sDSn] != null && output[_sDSn][_i] != null) {
        contents[_SDn] = de_SnapshotDetailList(smithyClient.getArrayIfSingleItem(output[_sDSn][_i]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.licenseSpecifications).trim() === "") {
        contents[_LSi] = [];
    }
    else if (output[_lS] != null && output[_lS][_i] != null) {
        contents[_LSi] = de_ImportImageLicenseSpecificationListResponse(smithyClient.getArrayIfSingleItem(output[_lS][_i]));
    }
    if (output[_uO] != null) {
        contents[_UO] = smithyClient.expectString(output[_uO]);
    }
    if (output[_bM] != null) {
        contents[_BM] = smithyClient.expectString(output[_bM]);
    }
    return contents;
};
const de_ImportImageTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportImageTask(entry);
    });
};
const de_ImportInstanceResult = (output, context) => {
    const contents = {};
    if (output[_cTon] != null) {
        contents[_CTonv] = de_ConversionTask(output[_cTon]);
    }
    return contents;
};
const de_ImportInstanceTaskDetails = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (String(output.volumes).trim() === "") {
        contents[_Vol] = [];
    }
    else if (output[_vo] != null && output[_vo][_i] != null) {
        contents[_Vol] = de_ImportInstanceVolumeDetailSet(smithyClient.getArrayIfSingleItem(output[_vo][_i]));
    }
    return contents;
};
const de_ImportInstanceVolumeDetailItem = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_bCy] != null) {
        contents[_BCyt] = smithyClient.strictParseLong(output[_bCy]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_im] != null) {
        contents[_Im] = de_DiskImageDescription(output[_im]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_vol] != null) {
        contents[_Vo] = de_DiskImageVolumeDescription(output[_vol]);
    }
    return contents;
};
const de_ImportInstanceVolumeDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportInstanceVolumeDetailItem(entry);
    });
};
const de_ImportKeyPairResult = (output, context) => {
    const contents = {};
    if (output[_kFe] != null) {
        contents[_KFe] = smithyClient.expectString(output[_kFe]);
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (output[_kPI] != null) {
        contents[_KPI] = smithyClient.expectString(output[_kPI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ImportSnapshotResult = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_iTI] != null) {
        contents[_ITI] = smithyClient.expectString(output[_iTI]);
    }
    if (output[_sTD] != null) {
        contents[_STD] = de_SnapshotTaskDetail(output[_sTD]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ImportSnapshotTask = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_iTI] != null) {
        contents[_ITI] = smithyClient.expectString(output[_iTI]);
    }
    if (output[_sTD] != null) {
        contents[_STD] = de_SnapshotTaskDetail(output[_sTD]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_ImportSnapshotTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImportSnapshotTask(entry);
    });
};
const de_ImportVolumeResult = (output, context) => {
    const contents = {};
    if (output[_cTon] != null) {
        contents[_CTonv] = de_ConversionTask(output[_cTon]);
    }
    return contents;
};
const de_ImportVolumeTaskDetails = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_bCy] != null) {
        contents[_BCyt] = smithyClient.strictParseLong(output[_bCy]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_im] != null) {
        contents[_Im] = de_DiskImageDescription(output[_im]);
    }
    if (output[_vol] != null) {
        contents[_Vo] = de_DiskImageVolumeDescription(output[_vol]);
    }
    return contents;
};
const de_InferenceAcceleratorInfo = (output, context) => {
    const contents = {};
    if (String(output.accelerators).trim() === "") {
        contents[_Acc] = [];
    }
    else if (output[_acc] != null && output[_acc][_mem] != null) {
        contents[_Acc] = de_InferenceDeviceInfoList(smithyClient.getArrayIfSingleItem(output[_acc][_mem]));
    }
    if (output[_tIMIMB] != null) {
        contents[_TIMIMB] = smithyClient.strictParseInt32(output[_tIMIMB]);
    }
    return contents;
};
const de_InferenceDeviceInfo = (output, context) => {
    const contents = {};
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_man] != null) {
        contents[_Man] = smithyClient.expectString(output[_man]);
    }
    if (output[_mIe] != null) {
        contents[_MIe] = de_InferenceDeviceMemoryInfo(output[_mIe]);
    }
    return contents;
};
const de_InferenceDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceDeviceInfo(entry);
    });
};
const de_InferenceDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output[_sIMB] != null) {
        contents[_SIMB] = smithyClient.strictParseInt32(output[_sIMB]);
    }
    return contents;
};
const de_InitializationStatusDetails = (output, context) => {
    const contents = {};
    if (output[_iTni] != null) {
        contents[_ITni] = smithyClient.expectString(output[_iTni]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.strictParseLong(output[_pro]);
    }
    if (output[_eTTCIS] != null) {
        contents[_ETTCIS] = smithyClient.strictParseLong(output[_eTTCIS]);
    }
    return contents;
};
const de_InsideCidrBlocksStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Instance = (output, context) => {
    const contents = {};
    if (output[_arc] != null) {
        contents[_Arc] = smithyClient.expectString(output[_arc]);
    }
    if (String(output.blockDeviceMapping).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDM] != null && output[_bDM][_i] != null) {
        contents[_BDM] = de_InstanceBlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDM][_i]));
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_eO] != null) {
        contents[_EO] = smithyClient.parseBoolean(output[_eO]);
    }
    if (output[_eSna] != null) {
        contents[_ESn] = smithyClient.parseBoolean(output[_eSna]);
    }
    if (output[_h] != null) {
        contents[_H] = smithyClient.expectString(output[_h]);
    }
    if (output[_iIP] != null) {
        contents[_IIP] = de_IamInstanceProfile(output[_iIP]);
    }
    if (output[_iLn] != null) {
        contents[_ILn] = smithyClient.expectString(output[_iLn]);
    }
    if (String(output.elasticGpuAssociationSet).trim() === "") {
        contents[_EGA] = [];
    }
    else if (output[_eGASl] != null && output[_eGASl][_i] != null) {
        contents[_EGA] = de_ElasticGpuAssociationList(smithyClient.getArrayIfSingleItem(output[_eGASl][_i]));
    }
    if (String(output.elasticInferenceAcceleratorAssociationSet).trim() === "") {
        contents[_EIAAl] = [];
    }
    else if (output[_eIAASl] != null && output[_eIAASl][_i] != null) {
        contents[_EIAAl] = de_ElasticInferenceAcceleratorAssociationList(smithyClient.getArrayIfSingleItem(output[_eIAASl][_i]));
    }
    if (String(output.networkInterfaceSet).trim() === "") {
        contents[_NI] = [];
    }
    else if (output[_nIS] != null && output[_nIS][_i] != null) {
        contents[_NI] = de_InstanceNetworkInterfaceList(smithyClient.getArrayIfSingleItem(output[_nIS][_i]));
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_rDN] != null) {
        contents[_RDN] = smithyClient.expectString(output[_rDN]);
    }
    if (output[_rDT] != null) {
        contents[_RDT] = smithyClient.expectString(output[_rDT]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_SG] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (output[_sDC] != null) {
        contents[_SDC] = smithyClient.parseBoolean(output[_sDC]);
    }
    if (output[_sIRI] != null) {
        contents[_SIRIp] = smithyClient.expectString(output[_sIRI]);
    }
    if (output[_sNSr] != null) {
        contents[_SNS] = smithyClient.expectString(output[_sNSr]);
    }
    if (output[_sRt] != null) {
        contents[_SRt] = de_StateReason(output[_sRt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vTi] != null) {
        contents[_VTir] = smithyClient.expectString(output[_vTi]);
    }
    if (output[_cO] != null) {
        contents[_COp] = de_CpuOptions(output[_cO]);
    }
    if (output[_cBI] != null) {
        contents[_CBIa] = smithyClient.expectString(output[_cBI]);
    }
    if (output[_cRI] != null) {
        contents[_CRI] = smithyClient.expectString(output[_cRI]);
    }
    if (output[_cRSa] != null) {
        contents[_CRSa] = de_CapacityReservationSpecificationResponse(output[_cRSa]);
    }
    if (output[_hO] != null) {
        contents[_HO] = de_HibernationOptions(output[_hO]);
    }
    if (String(output.licenseSet).trim() === "") {
        contents[_Lic] = [];
    }
    else if (output[_lSi] != null && output[_lSi][_i] != null) {
        contents[_Lic] = de_LicenseList(smithyClient.getArrayIfSingleItem(output[_lSi][_i]));
    }
    if (output[_mO] != null) {
        contents[_MO] = de_InstanceMetadataOptionsResponse(output[_mO]);
    }
    if (output[_eOn] != null) {
        contents[_EOn] = de_EnclaveOptions(output[_eOn]);
    }
    if (output[_bM] != null) {
        contents[_BM] = smithyClient.expectString(output[_bM]);
    }
    if (output[_pDl] != null) {
        contents[_PDl] = smithyClient.expectString(output[_pDl]);
    }
    if (output[_uO] != null) {
        contents[_UO] = smithyClient.expectString(output[_uO]);
    }
    if (output[_uOUT] != null) {
        contents[_UOUT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uOUT]));
    }
    if (output[_pDNO] != null) {
        contents[_PDNO] = de_PrivateDnsNameOptionsResponse(output[_pDNO]);
    }
    if (output[_iApv] != null) {
        contents[_IApv] = smithyClient.expectString(output[_iApv]);
    }
    if (output[_tSp] != null) {
        contents[_TSp] = smithyClient.expectString(output[_tSp]);
    }
    if (output[_mOa] != null) {
        contents[_MOa] = de_InstanceMaintenanceOptions(output[_mOa]);
    }
    if (output[_cIBM] != null) {
        contents[_CIBM] = smithyClient.expectString(output[_cIBM]);
    }
    if (output[_nPO] != null) {
        contents[_NPO] = de_InstanceNetworkPerformanceOptions(output[_nPO]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iSnst] != null) {
        contents[_Stat] = de_InstanceState(output[_iSnst]);
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (output[_dNn] != null) {
        contents[_PDNub] = smithyClient.expectString(output[_dNn]);
    }
    if (output[_rea] != null) {
        contents[_STRt] = smithyClient.expectString(output[_rea]);
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (output[_aLI] != null) {
        contents[_ALI] = smithyClient.strictParseInt32(output[_aLI]);
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_lTau] != null) {
        contents[_LTaun] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lTau]));
    }
    if (output[_pla] != null) {
        contents[_Pl] = de_Placement(output[_pla]);
    }
    if (output[_kI] != null) {
        contents[_KI] = smithyClient.expectString(output[_kI]);
    }
    if (output[_rIa] != null) {
        contents[_RIa] = smithyClient.expectString(output[_rIa]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_mo] != null) {
        contents[_Mon] = de_Monitoring(output[_mo]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    if (output[_iAp] != null) {
        contents[_PIAu] = smithyClient.expectString(output[_iAp]);
    }
    return contents;
};
const de_InstanceAttachmentEnaSrdSpecification = (output, context) => {
    const contents = {};
    if (output[_eSE] != null) {
        contents[_ESE] = smithyClient.parseBoolean(output[_eSE]);
    }
    if (output[_eSUS] != null) {
        contents[_ESUS] = de_InstanceAttachmentEnaSrdUdpSpecification(output[_eSUS]);
    }
    return contents;
};
const de_InstanceAttachmentEnaSrdUdpSpecification = (output, context) => {
    const contents = {};
    if (output[_eSUE] != null) {
        contents[_ESUE] = smithyClient.parseBoolean(output[_eSUE]);
    }
    return contents;
};
const de_InstanceAttribute = (output, context) => {
    const contents = {};
    if (String(output.blockDeviceMapping).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDM] != null && output[_bDM][_i] != null) {
        contents[_BDM] = de_InstanceBlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDM][_i]));
    }
    if (output[_dAT] != null) {
        contents[_DATis] = de_AttributeBooleanValue(output[_dAT]);
    }
    if (output[_eSna] != null) {
        contents[_ESn] = de_AttributeBooleanValue(output[_eSna]);
    }
    if (output[_eOn] != null) {
        contents[_EOn] = de_EnclaveOptions(output[_eOn]);
    }
    if (output[_eO] != null) {
        contents[_EO] = de_AttributeBooleanValue(output[_eO]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iISB] != null) {
        contents[_IISB] = de_AttributeValue(output[_iISB]);
    }
    if (output[_iT] != null) {
        contents[_IT] = de_AttributeValue(output[_iT]);
    }
    if (output[_ke] != null) {
        contents[_KI] = de_AttributeValue(output[_ke]);
    }
    if (String(output.productCodes).trim() === "") {
        contents[_PCr] = [];
    }
    else if (output[_pC] != null && output[_pC][_i] != null) {
        contents[_PCr] = de_ProductCodeList(smithyClient.getArrayIfSingleItem(output[_pC][_i]));
    }
    if (output[_ra] != null) {
        contents[_RIa] = de_AttributeValue(output[_ra]);
    }
    if (output[_rDN] != null) {
        contents[_RDN] = de_AttributeValue(output[_rDN]);
    }
    if (output[_sDC] != null) {
        contents[_SDC] = de_AttributeBooleanValue(output[_sDC]);
    }
    if (output[_sNSr] != null) {
        contents[_SNS] = de_AttributeValue(output[_sNSr]);
    }
    if (output[_uDs] != null) {
        contents[_UD] = de_AttributeValue(output[_uDs]);
    }
    if (output[_dASi] != null) {
        contents[_DASi] = de_AttributeBooleanValue(output[_dASi]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    return contents;
};
const de_InstanceBlockDeviceMapping = (output, context) => {
    const contents = {};
    if (output[_dN] != null) {
        contents[_DN] = smithyClient.expectString(output[_dN]);
    }
    if (output[_eb] != null) {
        contents[_E] = de_EbsInstanceBlockDevice(output[_eb]);
    }
    return contents;
};
const de_InstanceBlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceBlockDeviceMapping(entry);
    });
};
const de_InstanceCapacity = (output, context) => {
    const contents = {};
    if (output[_aC] != null) {
        contents[_ACv] = smithyClient.strictParseInt32(output[_aC]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_tC] != null) {
        contents[_TCo] = smithyClient.strictParseInt32(output[_tC]);
    }
    return contents;
};
const de_InstanceConnectEndpointDnsNames = (output, context) => {
    const contents = {};
    if (output[_dNn] != null) {
        contents[_DNn] = smithyClient.expectString(output[_dNn]);
    }
    if (output[_fDN] != null) {
        contents[_FDN] = smithyClient.expectString(output[_fDN]);
    }
    return contents;
};
const de_InstanceConnectEndpointPublicDnsNames = (output, context) => {
    const contents = {};
    if (output[_ipv] != null) {
        contents[_Ip] = de_InstanceConnectEndpointDnsNames(output[_ipv]);
    }
    if (output[_dua] != null) {
        contents[_Dua] = de_InstanceConnectEndpointDnsNames(output[_dua]);
    }
    return contents;
};
const de_InstanceConnectEndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ec2InstanceConnectEndpoint(entry);
    });
};
const de_InstanceCount = (output, context) => {
    const contents = {};
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_InstanceCountList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceCount(entry);
    });
};
const de_InstanceCreditSpecification = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_cCp] != null) {
        contents[_CCp] = smithyClient.expectString(output[_cCp]);
    }
    return contents;
};
const de_InstanceCreditSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceCreditSpecification(entry);
    });
};
const de_InstanceEventWindow = (output, context) => {
    const contents = {};
    if (output[_iEWI] != null) {
        contents[_IEWI] = smithyClient.expectString(output[_iEWI]);
    }
    if (String(output.timeRangeSet).trim() === "") {
        contents[_TRi] = [];
    }
    else if (output[_tRSi] != null && output[_tRSi][_i] != null) {
        contents[_TRi] = de_InstanceEventWindowTimeRangeList(smithyClient.getArrayIfSingleItem(output[_tRSi][_i]));
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_cEr] != null) {
        contents[_CE] = smithyClient.expectString(output[_cEr]);
    }
    if (output[_aTs] != null) {
        contents[_AT] = de_InstanceEventWindowAssociationTarget(output[_aTs]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_InstanceEventWindowAssociationTarget = (output, context) => {
    const contents = {};
    if (String(output.instanceIdSet).trim() === "") {
        contents[_IIns] = [];
    }
    else if (output[_iIS] != null && output[_iIS][_i] != null) {
        contents[_IIns] = de_InstanceIdList(smithyClient.getArrayIfSingleItem(output[_iIS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.dedicatedHostIdSet).trim() === "") {
        contents[_DHI] = [];
    }
    else if (output[_dHIS] != null && output[_dHIS][_i] != null) {
        contents[_DHI] = de_DedicatedHostIdList(smithyClient.getArrayIfSingleItem(output[_dHIS][_i]));
    }
    return contents;
};
const de_InstanceEventWindowSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceEventWindow(entry);
    });
};
const de_InstanceEventWindowStateChange = (output, context) => {
    const contents = {};
    if (output[_iEWI] != null) {
        contents[_IEWI] = smithyClient.expectString(output[_iEWI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_InstanceEventWindowTimeRange = (output, context) => {
    const contents = {};
    if (output[_sWD] != null) {
        contents[_SWD] = smithyClient.expectString(output[_sWD]);
    }
    if (output[_sH] != null) {
        contents[_SH] = smithyClient.strictParseInt32(output[_sH]);
    }
    if (output[_eWD] != null) {
        contents[_EWD] = smithyClient.expectString(output[_eWD]);
    }
    if (output[_eH] != null) {
        contents[_EH] = smithyClient.strictParseInt32(output[_eH]);
    }
    return contents;
};
const de_InstanceEventWindowTimeRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceEventWindowTimeRange(entry);
    });
};
const de_InstanceExportDetails = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_tE] != null) {
        contents[_TE] = smithyClient.expectString(output[_tE]);
    }
    return contents;
};
const de_InstanceFamilyCreditSpecification = (output, context) => {
    const contents = {};
    if (output[_iF] != null) {
        contents[_IF] = smithyClient.expectString(output[_iF]);
    }
    if (output[_cCp] != null) {
        contents[_CCp] = smithyClient.expectString(output[_cCp]);
    }
    return contents;
};
const de_InstanceGenerationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceIdsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceImageMetadata = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_lTau] != null) {
        contents[_LTaun] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lTau]));
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_zI] != null) {
        contents[_ZIo] = smithyClient.expectString(output[_zI]);
    }
    if (output[_iSnst] != null) {
        contents[_Stat] = de_InstanceState(output[_iSnst]);
    }
    if (output[_iOIn] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_iOIn]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_iM] != null) {
        contents[_IMm] = de_ImageMetadata(output[_iM]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    return contents;
};
const de_InstanceImageMetadataList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceImageMetadata(entry);
    });
};
const de_InstanceIpv4Prefix = (output, context) => {
    const contents = {};
    if (output[_iPpv] != null) {
        contents[_IPpvr] = smithyClient.expectString(output[_iPpv]);
    }
    return contents;
};
const de_InstanceIpv4PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceIpv4Prefix(entry);
    });
};
const de_InstanceIpv6Address = (output, context) => {
    const contents = {};
    if (output[_iApv] != null) {
        contents[_IApv] = smithyClient.expectString(output[_iApv]);
    }
    if (output[_iPI] != null) {
        contents[_IPIs] = smithyClient.parseBoolean(output[_iPI]);
    }
    return contents;
};
const de_InstanceIpv6AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceIpv6Address(entry);
    });
};
const de_InstanceIpv6Prefix = (output, context) => {
    const contents = {};
    if (output[_iPpvr] != null) {
        contents[_IPpvre] = smithyClient.expectString(output[_iPpvr]);
    }
    return contents;
};
const de_InstanceIpv6PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceIpv6Prefix(entry);
    });
};
const de_InstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Instance(entry);
    });
};
const de_InstanceMaintenanceOptions = (output, context) => {
    const contents = {};
    if (output[_aRu] != null) {
        contents[_ARu] = smithyClient.expectString(output[_aRu]);
    }
    if (output[_rM] != null) {
        contents[_RMe] = smithyClient.expectString(output[_rM]);
    }
    return contents;
};
const de_InstanceMetadataDefaultsResponse = (output, context) => {
    const contents = {};
    if (output[_hT] != null) {
        contents[_HT] = smithyClient.expectString(output[_hT]);
    }
    if (output[_hPRHL] != null) {
        contents[_HPRHL] = smithyClient.strictParseInt32(output[_hPRHL]);
    }
    if (output[_hE] != null) {
        contents[_HE] = smithyClient.expectString(output[_hE]);
    }
    if (output[_iMT] != null) {
        contents[_IMT] = smithyClient.expectString(output[_iMT]);
    }
    if (output[_mB] != null) {
        contents[_MB] = smithyClient.expectString(output[_mB]);
    }
    if (output[_mEM] != null) {
        contents[_MEM] = smithyClient.expectString(output[_mEM]);
    }
    return contents;
};
const de_InstanceMetadataOptionsResponse = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_hT] != null) {
        contents[_HT] = smithyClient.expectString(output[_hT]);
    }
    if (output[_hPRHL] != null) {
        contents[_HPRHL] = smithyClient.strictParseInt32(output[_hPRHL]);
    }
    if (output[_hE] != null) {
        contents[_HE] = smithyClient.expectString(output[_hE]);
    }
    if (output[_hPI] != null) {
        contents[_HPI] = smithyClient.expectString(output[_hPI]);
    }
    if (output[_iMT] != null) {
        contents[_IMT] = smithyClient.expectString(output[_iMT]);
    }
    return contents;
};
const de_InstanceMonitoring = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_mo] != null) {
        contents[_Mon] = de_Monitoring(output[_mo]);
    }
    return contents;
};
const de_InstanceMonitoringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceMonitoring(entry);
    });
};
const de_InstanceNetworkInterface = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_InstanceNetworkInterfaceAssociation(output[_ass]);
    }
    if (output[_at] != null) {
        contents[_Att] = de_InstanceNetworkInterfaceAttachment(output[_at]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (String(output.ipv6AddressesSet).trim() === "") {
        contents[_IA] = [];
    }
    else if (output[_iASp] != null && output[_iASp][_i] != null) {
        contents[_IA] = de_InstanceIpv6AddressList(smithyClient.getArrayIfSingleItem(output[_iASp][_i]));
    }
    if (output[_mAa] != null) {
        contents[_MAa] = smithyClient.expectString(output[_mAa]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    if (String(output.privateIpAddressesSet).trim() === "") {
        contents[_PIA] = [];
    }
    else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
        contents[_PIA] = de_InstancePrivateIpAddressList(smithyClient.getArrayIfSingleItem(output[_pIAS][_i]));
    }
    if (output[_sDC] != null) {
        contents[_SDC] = smithyClient.parseBoolean(output[_sDC]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_iTnt] != null) {
        contents[_ITn] = smithyClient.expectString(output[_iTnt]);
    }
    if (String(output.ipv4PrefixSet).trim() === "") {
        contents[_IPp] = [];
    }
    else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
        contents[_IPp] = de_InstanceIpv4PrefixList(smithyClient.getArrayIfSingleItem(output[_iPSpv][_i]));
    }
    if (String(output.ipv6PrefixSet).trim() === "") {
        contents[_IP] = [];
    }
    else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
        contents[_IP] = de_InstanceIpv6PrefixList(smithyClient.getArrayIfSingleItem(output[_iPSpvr][_i]));
    }
    if (output[_cTC] != null) {
        contents[_CTC] = de_ConnectionTrackingSpecificationResponse(output[_cTC]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceAssociation = (output, context) => {
    const contents = {};
    if (output[_cI] != null) {
        contents[_CIa] = smithyClient.expectString(output[_cI]);
    }
    if (output[_cOI] != null) {
        contents[_COI] = smithyClient.expectString(output[_cOI]);
    }
    if (output[_iOIp] != null) {
        contents[_IOI] = smithyClient.expectString(output[_iOIp]);
    }
    if (output[_pDNu] != null) {
        contents[_PDNub] = smithyClient.expectString(output[_pDNu]);
    }
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceAttachment = (output, context) => {
    const contents = {};
    if (output[_aTt] != null) {
        contents[_ATtt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_aTt]));
    }
    if (output[_aIt] != null) {
        contents[_AIt] = smithyClient.expectString(output[_aIt]);
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_dIe] != null) {
        contents[_DIev] = smithyClient.strictParseInt32(output[_dIe]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_nCI] != null) {
        contents[_NCI] = smithyClient.strictParseInt32(output[_nCI]);
    }
    if (output[_eSS] != null) {
        contents[_ESS] = de_InstanceAttachmentEnaSrdSpecification(output[_eSS]);
    }
    if (output[_eQC] != null) {
        contents[_EQC] = smithyClient.strictParseInt32(output[_eQC]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceNetworkInterface(entry);
    });
};
const de_InstanceNetworkInterfaceSpecification = (output, context) => {
    const contents = {};
    if (output[_aPIA] != null) {
        contents[_APIAs] = smithyClient.parseBoolean(output[_aPIA]);
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_dIe] != null) {
        contents[_DIev] = smithyClient.strictParseInt32(output[_dIe]);
    }
    if (String(output.SecurityGroupId).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_SGIe] != null && output[_SGIe][_SGIe] != null) {
        contents[_G] = de_SecurityGroupIdStringList(smithyClient.getArrayIfSingleItem(output[_SGIe][_SGIe]));
    }
    if (output[_iAC] != null) {
        contents[_IAC] = smithyClient.strictParseInt32(output[_iAC]);
    }
    if (String(output.ipv6AddressesSet).trim() === "") {
        contents[_IA] = [];
    }
    else if (output[_iASp] != null && output[_iASp][_i] != null) {
        contents[_IA] = de_InstanceIpv6AddressList(smithyClient.getArrayIfSingleItem(output[_iASp][_i]));
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    if (String(output.privateIpAddressesSet).trim() === "") {
        contents[_PIA] = [];
    }
    else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
        contents[_PIA] = de_PrivateIpAddressSpecificationList(smithyClient.getArrayIfSingleItem(output[_pIAS][_i]));
    }
    if (output[_sPIAC] != null) {
        contents[_SPIAC] = smithyClient.strictParseInt32(output[_sPIAC]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_ACIA] != null) {
        contents[_ACIA] = smithyClient.parseBoolean(output[_ACIA]);
    }
    if (output[_ITn] != null) {
        contents[_ITn] = smithyClient.expectString(output[_ITn]);
    }
    if (output[_NCI] != null) {
        contents[_NCI] = smithyClient.strictParseInt32(output[_NCI]);
    }
    if (String(output.Ipv4Prefix).trim() === "") {
        contents[_IPp] = [];
    }
    else if (output[_IPpvr] != null && output[_IPpvr][_i] != null) {
        contents[_IPp] = de_Ipv4PrefixList(smithyClient.getArrayIfSingleItem(output[_IPpvr][_i]));
    }
    if (output[_IPCp] != null) {
        contents[_IPCp] = smithyClient.strictParseInt32(output[_IPCp]);
    }
    if (String(output.Ipv6Prefix).trim() === "") {
        contents[_IP] = [];
    }
    else if (output[_IPpvre] != null && output[_IPpvre][_i] != null) {
        contents[_IP] = de_Ipv6PrefixList(smithyClient.getArrayIfSingleItem(output[_IPpvre][_i]));
    }
    if (output[_IPC] != null) {
        contents[_IPC] = smithyClient.strictParseInt32(output[_IPC]);
    }
    if (output[_PIr] != null) {
        contents[_PIr] = smithyClient.parseBoolean(output[_PIr]);
    }
    if (output[_ESS] != null) {
        contents[_ESS] = de_EnaSrdSpecificationRequest(output[_ESS]);
    }
    if (output[_CTS] != null) {
        contents[_CTS] = de_ConnectionTrackingSpecificationRequest(output[_CTS]);
    }
    if (output[_EQC] != null) {
        contents[_EQC] = smithyClient.strictParseInt32(output[_EQC]);
    }
    return contents;
};
const de_InstanceNetworkInterfaceSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceNetworkInterfaceSpecification(entry);
    });
};
const de_InstanceNetworkPerformanceOptions = (output, context) => {
    const contents = {};
    if (output[_bW] != null) {
        contents[_BW] = smithyClient.expectString(output[_bW]);
    }
    return contents;
};
const de_InstancePrivateIpAddress = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_InstanceNetworkInterfaceAssociation(output[_ass]);
    }
    if (output[_prim] != null) {
        contents[_Prim] = smithyClient.parseBoolean(output[_prim]);
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    return contents;
};
const de_InstancePrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstancePrivateIpAddress(entry);
    });
};
const de_InstanceRequirements = (output, context) => {
    const contents = {};
    if (output[_vCC] != null) {
        contents[_VCC] = de_VCpuCountRange(output[_vCC]);
    }
    if (output[_mMB] != null) {
        contents[_MMB] = de_MemoryMiB(output[_mMB]);
    }
    if (String(output.cpuManufacturerSet).trim() === "") {
        contents[_CM] = [];
    }
    else if (output[_cMS] != null && output[_cMS][_i] != null) {
        contents[_CM] = de_CpuManufacturerSet(smithyClient.getArrayIfSingleItem(output[_cMS][_i]));
    }
    if (output[_mGBPVC] != null) {
        contents[_MGBPVC] = de_MemoryGiBPerVCpu(output[_mGBPVC]);
    }
    if (String(output.excludedInstanceTypeSet).trim() === "") {
        contents[_EIT] = [];
    }
    else if (output[_eITSx] != null && output[_eITSx][_i] != null) {
        contents[_EIT] = de_ExcludedInstanceTypeSet(smithyClient.getArrayIfSingleItem(output[_eITSx][_i]));
    }
    if (String(output.instanceGenerationSet).trim() === "") {
        contents[_IG] = [];
    }
    else if (output[_iGSn] != null && output[_iGSn][_i] != null) {
        contents[_IG] = de_InstanceGenerationSet(smithyClient.getArrayIfSingleItem(output[_iGSn][_i]));
    }
    if (output[_sMPPOLP] != null) {
        contents[_SMPPOLP] = smithyClient.strictParseInt32(output[_sMPPOLP]);
    }
    if (output[_oDMPPOLP] != null) {
        contents[_ODMPPOLP] = smithyClient.strictParseInt32(output[_oDMPPOLP]);
    }
    if (output[_bMa] != null) {
        contents[_BMa] = smithyClient.expectString(output[_bMa]);
    }
    if (output[_bP] != null) {
        contents[_BP] = smithyClient.expectString(output[_bP]);
    }
    if (output[_rHS] != null) {
        contents[_RHS] = smithyClient.parseBoolean(output[_rHS]);
    }
    if (output[_nIC] != null) {
        contents[_NIC] = de_NetworkInterfaceCount(output[_nIC]);
    }
    if (output[_lSo] != null) {
        contents[_LSo] = smithyClient.expectString(output[_lSo]);
    }
    if (String(output.localStorageTypeSet).trim() === "") {
        contents[_LST] = [];
    }
    else if (output[_lSTS] != null && output[_lSTS][_i] != null) {
        contents[_LST] = de_LocalStorageTypeSet(smithyClient.getArrayIfSingleItem(output[_lSTS][_i]));
    }
    if (output[_tLSGB] != null) {
        contents[_TLSGB] = de_TotalLocalStorageGB(output[_tLSGB]);
    }
    if (output[_bEBM] != null) {
        contents[_BEBM] = de_BaselineEbsBandwidthMbps(output[_bEBM]);
    }
    if (String(output.acceleratorTypeSet).trim() === "") {
        contents[_ATc] = [];
    }
    else if (output[_aTSc] != null && output[_aTSc][_i] != null) {
        contents[_ATc] = de_AcceleratorTypeSet(smithyClient.getArrayIfSingleItem(output[_aTSc][_i]));
    }
    if (output[_aCc] != null) {
        contents[_ACc] = de_AcceleratorCount(output[_aCc]);
    }
    if (String(output.acceleratorManufacturerSet).trim() === "") {
        contents[_AM] = [];
    }
    else if (output[_aMS] != null && output[_aMS][_i] != null) {
        contents[_AM] = de_AcceleratorManufacturerSet(smithyClient.getArrayIfSingleItem(output[_aMS][_i]));
    }
    if (String(output.acceleratorNameSet).trim() === "") {
        contents[_ANc] = [];
    }
    else if (output[_aNS] != null && output[_aNS][_i] != null) {
        contents[_ANc] = de_AcceleratorNameSet(smithyClient.getArrayIfSingleItem(output[_aNS][_i]));
    }
    if (output[_aTMMB] != null) {
        contents[_ATMMB] = de_AcceleratorTotalMemoryMiB(output[_aTMMB]);
    }
    if (output[_nBGe] != null) {
        contents[_NBGe] = de_NetworkBandwidthGbps(output[_nBGe]);
    }
    if (String(output.allowedInstanceTypeSet).trim() === "") {
        contents[_AIT] = [];
    }
    else if (output[_aITS] != null && output[_aITS][_i] != null) {
        contents[_AIT] = de_AllowedInstanceTypeSet(smithyClient.getArrayIfSingleItem(output[_aITS][_i]));
    }
    if (output[_mSPAPOOODP] != null) {
        contents[_MSPAPOOODP] = smithyClient.strictParseInt32(output[_mSPAPOOODP]);
    }
    if (output[_bPF] != null) {
        contents[_BPF] = de_BaselinePerformanceFactors(output[_bPF]);
    }
    return contents;
};
const de_InstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTopology(entry);
    });
};
const de_InstanceState = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.strictParseInt32(output[_co]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    return contents;
};
const de_InstanceStateChange = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_cSu] != null) {
        contents[_CSu] = de_InstanceState(output[_cSu]);
    }
    if (output[_pSr] != null) {
        contents[_PSre] = de_InstanceState(output[_pSr]);
    }
    return contents;
};
const de_InstanceStateChangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStateChange(entry);
    });
};
const de_InstanceStatus = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    if (String(output.eventsSet).trim() === "") {
        contents[_Ev] = [];
    }
    else if (output[_eSv] != null && output[_eSv][_i] != null) {
        contents[_Ev] = de_InstanceStatusEventList(smithyClient.getArrayIfSingleItem(output[_eSv][_i]));
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iSnst] != null) {
        contents[_ISnst] = de_InstanceState(output[_iSnst]);
    }
    if (output[_iSnsta] != null) {
        contents[_ISnsta] = de_InstanceStatusSummary(output[_iSnsta]);
    }
    if (output[_sSy] != null) {
        contents[_SSy] = de_InstanceStatusSummary(output[_sSy]);
    }
    if (output[_aES] != null) {
        contents[_AES] = de_EbsStatusSummary(output[_aES]);
    }
    return contents;
};
const de_InstanceStatusDetails = (output, context) => {
    const contents = {};
    if (output[_iSmp] != null) {
        contents[_ISmp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_iSmp]));
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_InstanceStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStatusDetails(entry);
    });
};
const de_InstanceStatusEvent = (output, context) => {
    const contents = {};
    if (output[_iEI] != null) {
        contents[_IEI] = smithyClient.expectString(output[_iEI]);
    }
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_nAo] != null) {
        contents[_NAo] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nAo]));
    }
    if (output[_nB] != null) {
        contents[_NB] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nB]));
    }
    if (output[_nBD] != null) {
        contents[_NBD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nBD]));
    }
    return contents;
};
const de_InstanceStatusEventList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStatusEvent(entry);
    });
};
const de_InstanceStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceStatus(entry);
    });
};
const de_InstanceStatusSummary = (output, context) => {
    const contents = {};
    if (String(output.details).trim() === "") {
        contents[_Det] = [];
    }
    else if (output[_det] != null && output[_det][_i] != null) {
        contents[_Det] = de_InstanceStatusDetailsList(smithyClient.getArrayIfSingleItem(output[_det][_i]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_InstanceStorageInfo = (output, context) => {
    const contents = {};
    if (output[_tSIGB] != null) {
        contents[_TSIGB] = smithyClient.strictParseLong(output[_tSIGB]);
    }
    if (String(output.disks).trim() === "") {
        contents[_Dis] = [];
    }
    else if (output[_dis] != null && output[_dis][_i] != null) {
        contents[_Dis] = de_DiskInfoList(smithyClient.getArrayIfSingleItem(output[_dis][_i]));
    }
    if (output[_nS] != null) {
        contents[_NS] = smithyClient.expectString(output[_nS]);
    }
    if (output[_eSn] != null) {
        contents[_ESnc] = smithyClient.expectString(output[_eSn]);
    }
    return contents;
};
const de_InstanceTagKeySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceTagNotificationAttribute = (output, context) => {
    const contents = {};
    if (String(output.instanceTagKeySet).trim() === "") {
        contents[_ITK] = [];
    }
    else if (output[_iTKS] != null && output[_iTKS][_i] != null) {
        contents[_ITK] = de_InstanceTagKeySet(smithyClient.getArrayIfSingleItem(output[_iTKS][_i]));
    }
    if (output[_iATOI] != null) {
        contents[_IATOI] = smithyClient.parseBoolean(output[_iATOI]);
    }
    return contents;
};
const de_InstanceTopology = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (String(output.networkNodeSet).trim() === "") {
        contents[_NN] = [];
    }
    else if (output[_nNS] != null && output[_nNS][_i] != null) {
        contents[_NN] = de_NetworkNodesList(smithyClient.getArrayIfSingleItem(output[_nNS][_i]));
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_zI] != null) {
        contents[_ZIo] = smithyClient.expectString(output[_zI]);
    }
    if (output[_cBI] != null) {
        contents[_CBIa] = smithyClient.expectString(output[_cBI]);
    }
    return contents;
};
const de_InstanceTypeInfo = (output, context) => {
    const contents = {};
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_cGur] != null) {
        contents[_CGur] = smithyClient.parseBoolean(output[_cGur]);
    }
    if (output[_fTE] != null) {
        contents[_FTE] = smithyClient.parseBoolean(output[_fTE]);
    }
    if (String(output.supportedUsageClasses).trim() === "") {
        contents[_SUC] = [];
    }
    else if (output[_sUC] != null && output[_sUC][_i] != null) {
        contents[_SUC] = de_UsageClassTypeList(smithyClient.getArrayIfSingleItem(output[_sUC][_i]));
    }
    if (String(output.supportedRootDeviceTypes).trim() === "") {
        contents[_SRDT] = [];
    }
    else if (output[_sRDT] != null && output[_sRDT][_i] != null) {
        contents[_SRDT] = de_RootDeviceTypeList(smithyClient.getArrayIfSingleItem(output[_sRDT][_i]));
    }
    if (String(output.supportedVirtualizationTypes).trim() === "") {
        contents[_SVT] = [];
    }
    else if (output[_sVT] != null && output[_sVT][_i] != null) {
        contents[_SVT] = de_VirtualizationTypeList(smithyClient.getArrayIfSingleItem(output[_sVT][_i]));
    }
    if (output[_bMa] != null) {
        contents[_BMa] = smithyClient.parseBoolean(output[_bMa]);
    }
    if (output[_h] != null) {
        contents[_H] = smithyClient.expectString(output[_h]);
    }
    if (output[_pIr] != null) {
        contents[_PIro] = de_ProcessorInfo(output[_pIr]);
    }
    if (output[_vCIp] != null) {
        contents[_VCIpu] = de_VCpuInfo(output[_vCIp]);
    }
    if (output[_mIe] != null) {
        contents[_MIe] = de_MemoryInfo(output[_mIe]);
    }
    if (output[_iSSn] != null) {
        contents[_ISS] = smithyClient.parseBoolean(output[_iSSn]);
    }
    if (output[_iSI] != null) {
        contents[_ISIn] = de_InstanceStorageInfo(output[_iSI]);
    }
    if (output[_eIb] != null) {
        contents[_EIb] = de_EbsInfo(output[_eIb]);
    }
    if (output[_nIet] != null) {
        contents[_NIetw] = de_NetworkInfo(output[_nIet]);
    }
    if (output[_gIp] != null) {
        contents[_GIp] = de_GpuInfo(output[_gIp]);
    }
    if (output[_fIp] != null) {
        contents[_FIpg] = de_FpgaInfo(output[_fIp]);
    }
    if (output[_pGI] != null) {
        contents[_PGI] = de_PlacementGroupInfo(output[_pGI]);
    }
    if (output[_iAI] != null) {
        contents[_IAIn] = de_InferenceAcceleratorInfo(output[_iAI]);
    }
    if (output[_hSi] != null) {
        contents[_HS] = smithyClient.parseBoolean(output[_hSi]);
    }
    if (output[_bPS] != null) {
        contents[_BPS] = smithyClient.parseBoolean(output[_bPS]);
    }
    if (output[_dHS] != null) {
        contents[_DHS] = smithyClient.parseBoolean(output[_dHS]);
    }
    if (output[_aRSu] != null) {
        contents[_ARSu] = smithyClient.parseBoolean(output[_aRSu]);
    }
    if (String(output.supportedBootModes).trim() === "") {
        contents[_SBM] = [];
    }
    else if (output[_sBM] != null && output[_sBM][_i] != null) {
        contents[_SBM] = de_BootModeTypeList(smithyClient.getArrayIfSingleItem(output[_sBM][_i]));
    }
    if (output[_nES] != null) {
        contents[_NES] = smithyClient.expectString(output[_nES]);
    }
    if (output[_nTS] != null) {
        contents[_NTS] = smithyClient.expectString(output[_nTS]);
    }
    if (output[_nTI] != null) {
        contents[_NTI] = de_NitroTpmInfo(output[_nTI]);
    }
    if (output[_mAIe] != null) {
        contents[_MAIe] = de_MediaAcceleratorInfo(output[_mAIe]);
    }
    if (output[_nIeu] != null) {
        contents[_NIeu] = de_NeuronInfo(output[_nIeu]);
    }
    if (output[_pSh] != null) {
        contents[_PSh] = smithyClient.expectString(output[_pSh]);
    }
    if (output[_rMS] != null) {
        contents[_RMS] = smithyClient.expectString(output[_rMS]);
    }
    return contents;
};
const de_InstanceTypeInfoFromInstanceRequirements = (output, context) => {
    const contents = {};
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    return contents;
};
const de_InstanceTypeInfoFromInstanceRequirementsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeInfoFromInstanceRequirements(entry);
    });
};
const de_InstanceTypeInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeInfo(entry);
    });
};
const de_InstanceTypeOffering = (output, context) => {
    const contents = {};
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_lTo] != null) {
        contents[_LT] = smithyClient.expectString(output[_lTo]);
    }
    if (output[_lo] != null) {
        contents[_Lo] = smithyClient.expectString(output[_lo]);
    }
    return contents;
};
const de_InstanceTypeOfferingsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceTypeOffering(entry);
    });
};
const de_InstanceTypesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_InstanceUsage = (output, context) => {
    const contents = {};
    if (output[_aIc] != null) {
        contents[_AIcc] = smithyClient.expectString(output[_aIc]);
    }
    if (output[_uIC] != null) {
        contents[_UIC] = smithyClient.strictParseInt32(output[_uIC]);
    }
    return contents;
};
const de_InstanceUsageSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceUsage(entry);
    });
};
const de_InternetGateway = (output, context) => {
    const contents = {};
    if (String(output.attachmentSet).trim() === "") {
        contents[_Atta] = [];
    }
    else if (output[_aSt] != null && output[_aSt][_i] != null) {
        contents[_Atta] = de_InternetGatewayAttachmentList(smithyClient.getArrayIfSingleItem(output[_aSt][_i]));
    }
    if (output[_iGI] != null) {
        contents[_IGI] = smithyClient.expectString(output[_iGI]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_InternetGatewayAttachment = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_InternetGatewayAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InternetGatewayAttachment(entry);
    });
};
const de_InternetGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InternetGateway(entry);
    });
};
const de_IpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Ipam = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iIp] != null) {
        contents[_IIp] = smithyClient.expectString(output[_iIp]);
    }
    if (output[_iApa] != null) {
        contents[_IApa] = smithyClient.expectString(output[_iApa]);
    }
    if (output[_iRp] != null) {
        contents[_IRpa] = smithyClient.expectString(output[_iRp]);
    }
    if (output[_pDSI] != null) {
        contents[_PDSI] = smithyClient.expectString(output[_pDSI]);
    }
    if (output[_pDSIr] != null) {
        contents[_PDSIr] = smithyClient.expectString(output[_pDSIr]);
    }
    if (output[_sCc] != null) {
        contents[_SCc] = smithyClient.strictParseInt32(output[_sCc]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.operatingRegionSet).trim() === "") {
        contents[_OR] = [];
    }
    else if (output[_oRS] != null && output[_oRS][_i] != null) {
        contents[_OR] = de_IpamOperatingRegionSet(smithyClient.getArrayIfSingleItem(output[_oRS][_i]));
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_dRDI] != null) {
        contents[_DRDI] = smithyClient.expectString(output[_dRDI]);
    }
    if (output[_dRDAI] != null) {
        contents[_DRDAI] = smithyClient.expectString(output[_dRDAI]);
    }
    if (output[_rDAC] != null) {
        contents[_RDAC] = smithyClient.strictParseInt32(output[_rDAC]);
    }
    if (output[_sMta] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMta]);
    }
    if (output[_tie] != null) {
        contents[_Ti] = smithyClient.expectString(output[_tie]);
    }
    if (output[_ePG] != null) {
        contents[_EPG] = smithyClient.parseBoolean(output[_ePG]);
    }
    if (output[_mAe] != null) {
        contents[_MAe] = smithyClient.expectString(output[_mAe]);
    }
    return contents;
};
const de_IpamAddressHistoryRecord = (output, context) => {
    const contents = {};
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (output[_rR] != null) {
        contents[_RRe] = smithyClient.expectString(output[_rR]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rCe] != null) {
        contents[_RC] = smithyClient.expectString(output[_rCe]);
    }
    if (output[_rNes] != null) {
        contents[_RNes] = smithyClient.expectString(output[_rNes]);
    }
    if (output[_rCS] != null) {
        contents[_RCS] = smithyClient.expectString(output[_rCS]);
    }
    if (output[_rOSe] != null) {
        contents[_ROS] = smithyClient.expectString(output[_rOSe]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sST] != null) {
        contents[_SST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sST]));
    }
    if (output[_sET] != null) {
        contents[_SET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sET]));
    }
    return contents;
};
const de_IpamAddressHistoryRecordSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamAddressHistoryRecord(entry);
    });
};
const de_IpamDiscoveredAccount = (output, context) => {
    const contents = {};
    if (output[_aIc] != null) {
        contents[_AIcc] = smithyClient.expectString(output[_aIc]);
    }
    if (output[_dR] != null) {
        contents[_DRi] = smithyClient.expectString(output[_dR]);
    }
    if (output[_fR] != null) {
        contents[_FR] = de_IpamDiscoveryFailureReason(output[_fR]);
    }
    if (output[_lADT] != null) {
        contents[_LADT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lADT]));
    }
    if (output[_lSDT] != null) {
        contents[_LSDT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lSDT]));
    }
    if (output[_oUI] != null) {
        contents[_OUI] = smithyClient.expectString(output[_oUI]);
    }
    return contents;
};
const de_IpamDiscoveredAccountSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamDiscoveredAccount(entry);
    });
};
const de_IpamDiscoveredPublicAddress = (output, context) => {
    const contents = {};
    if (output[_iRDI] != null) {
        contents[_IRDI] = smithyClient.expectString(output[_iRDI]);
    }
    if (output[_aRd] != null) {
        contents[_ARd] = smithyClient.expectString(output[_aRd]);
    }
    if (output[_ad] != null) {
        contents[_Ad] = smithyClient.expectString(output[_ad]);
    }
    if (output[_aOI] != null) {
        contents[_AOI] = smithyClient.expectString(output[_aOI]);
    }
    if (output[_aAId] != null) {
        contents[_AAId] = smithyClient.expectString(output[_aAId]);
    }
    if (output[_aSs] != null) {
        contents[_ASss] = smithyClient.expectString(output[_aSs]);
    }
    if (output[_aTd] != null) {
        contents[_ATddre] = smithyClient.expectString(output[_aTd]);
    }
    if (output[_se] != null) {
        contents[_Se] = smithyClient.expectString(output[_se]);
    }
    if (output[_sRe] != null) {
        contents[_SRerv] = smithyClient.expectString(output[_sRe]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_pIPI] != null) {
        contents[_PIPI] = smithyClient.expectString(output[_pIPI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_nID] != null) {
        contents[_NID] = smithyClient.expectString(output[_nID]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_ta] != null) {
        contents[_Ta] = de_IpamPublicAddressTags(output[_ta]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    if (String(output.securityGroupSet).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_sGS] != null && output[_sGS][_i] != null) {
        contents[_SG] = de_IpamPublicAddressSecurityGroupList(smithyClient.getArrayIfSingleItem(output[_sGS][_i]));
    }
    if (output[_sTa] != null) {
        contents[_STam] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sTa]));
    }
    return contents;
};
const de_IpamDiscoveredPublicAddressSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamDiscoveredPublicAddress(entry);
    });
};
const de_IpamDiscoveredResourceCidr = (output, context) => {
    const contents = {};
    if (output[_iRDI] != null) {
        contents[_IRDI] = smithyClient.expectString(output[_iRDI]);
    }
    if (output[_rR] != null) {
        contents[_RRe] = smithyClient.expectString(output[_rR]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (output[_rCe] != null) {
        contents[_RC] = smithyClient.expectString(output[_rCe]);
    }
    if (output[_iSpo] != null) {
        contents[_ISpo] = smithyClient.expectString(output[_iSpo]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (String(output.resourceTagSet).trim() === "") {
        contents[_RTesou] = [];
    }
    else if (output[_rTSes] != null && output[_rTSes][_i] != null) {
        contents[_RTesou] = de_IpamResourceTagList(smithyClient.getArrayIfSingleItem(output[_rTSes][_i]));
    }
    if (output[_iU] != null) {
        contents[_IUp] = smithyClient.strictParseFloat(output[_iU]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_nIASet] != null) {
        contents[_NIASet] = smithyClient.expectString(output[_nIASet]);
    }
    if (output[_sTa] != null) {
        contents[_STam] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sTa]));
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    return contents;
};
const de_IpamDiscoveredResourceCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamDiscoveredResourceCidr(entry);
    });
};
const de_IpamDiscoveryFailureReason = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_IpamExternalResourceVerificationToken = (output, context) => {
    const contents = {};
    if (output[_iERVTI] != null) {
        contents[_IERVTI] = smithyClient.expectString(output[_iERVTI]);
    }
    if (output[_iERVTA] != null) {
        contents[_IERVTA] = smithyClient.expectString(output[_iERVTA]);
    }
    if (output[_iIp] != null) {
        contents[_IIp] = smithyClient.expectString(output[_iIp]);
    }
    if (output[_iApa] != null) {
        contents[_IApa] = smithyClient.expectString(output[_iApa]);
    }
    if (output[_iRp] != null) {
        contents[_IRpa] = smithyClient.expectString(output[_iRp]);
    }
    if (output[_tV] != null) {
        contents[_TVo] = smithyClient.expectString(output[_tV]);
    }
    if (output[_tN] != null) {
        contents[_TN] = smithyClient.expectString(output[_tN]);
    }
    if (output[_nAo] != null) {
        contents[_NAo] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nAo]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_IpamExternalResourceVerificationTokenSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamExternalResourceVerificationToken(entry);
    });
};
const de_IpamOperatingRegion = (output, context) => {
    const contents = {};
    if (output[_rNe] != null) {
        contents[_RN] = smithyClient.expectString(output[_rNe]);
    }
    return contents;
};
const de_IpamOperatingRegionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamOperatingRegion(entry);
    });
};
const de_IpamOrganizationalUnitExclusion = (output, context) => {
    const contents = {};
    if (output[_oEP] != null) {
        contents[_OEP] = smithyClient.expectString(output[_oEP]);
    }
    return contents;
};
const de_IpamOrganizationalUnitExclusionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamOrganizationalUnitExclusion(entry);
    });
};
const de_IpamPool = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iPIp] != null) {
        contents[_IPI] = smithyClient.expectString(output[_iPIp]);
    }
    if (output[_sIPI] != null) {
        contents[_SIPI] = smithyClient.expectString(output[_sIPI]);
    }
    if (output[_iPAp] != null) {
        contents[_IPApa] = smithyClient.expectString(output[_iPAp]);
    }
    if (output[_iSA] != null) {
        contents[_ISA] = smithyClient.expectString(output[_iSA]);
    }
    if (output[_iST] != null) {
        contents[_ISTp] = smithyClient.expectString(output[_iST]);
    }
    if (output[_iApa] != null) {
        contents[_IApa] = smithyClient.expectString(output[_iApa]);
    }
    if (output[_iRp] != null) {
        contents[_IRpa] = smithyClient.expectString(output[_iRp]);
    }
    if (output[_loc] != null) {
        contents[_L] = smithyClient.expectString(output[_loc]);
    }
    if (output[_pDoo] != null) {
        contents[_PDo] = smithyClient.strictParseInt32(output[_pDoo]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMta] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMta]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_aIu] != null) {
        contents[_AIu] = smithyClient.parseBoolean(output[_aIu]);
    }
    if (output[_pAu] != null) {
        contents[_PA] = smithyClient.parseBoolean(output[_pAu]);
    }
    if (output[_aF] != null) {
        contents[_AF] = smithyClient.expectString(output[_aF]);
    }
    if (output[_aMNL] != null) {
        contents[_AMNL] = smithyClient.strictParseInt32(output[_aMNL]);
    }
    if (output[_aMNLl] != null) {
        contents[_AMNLl] = smithyClient.strictParseInt32(output[_aMNLl]);
    }
    if (output[_aDNL] != null) {
        contents[_ADNL] = smithyClient.strictParseInt32(output[_aDNL]);
    }
    if (String(output.allocationResourceTagSet).trim() === "") {
        contents[_ARTl] = [];
    }
    else if (output[_aRTS] != null && output[_aRTS][_i] != null) {
        contents[_ARTl] = de_IpamResourceTagList(smithyClient.getArrayIfSingleItem(output[_aRTS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_aSw] != null) {
        contents[_ASw] = smithyClient.expectString(output[_aSw]);
    }
    if (output[_pIS] != null) {
        contents[_PIS] = smithyClient.expectString(output[_pIS]);
    }
    if (output[_sRo] != null) {
        contents[_SRo] = de_IpamPoolSourceResource(output[_sRo]);
    }
    return contents;
};
const de_IpamPoolAllocation = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_iPAI] != null) {
        contents[_IPAI] = smithyClient.expectString(output[_iPAI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rR] != null) {
        contents[_RRe] = smithyClient.expectString(output[_rR]);
    }
    if (output[_rO] != null) {
        contents[_ROe] = smithyClient.expectString(output[_rO]);
    }
    return contents;
};
const de_IpamPoolAllocationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPoolAllocation(entry);
    });
};
const de_IpamPoolCidr = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_fR] != null) {
        contents[_FR] = de_IpamPoolCidrFailureReason(output[_fR]);
    }
    if (output[_iPCI] != null) {
        contents[_IPCI] = smithyClient.expectString(output[_iPCI]);
    }
    if (output[_nL] != null) {
        contents[_NL] = smithyClient.strictParseInt32(output[_nL]);
    }
    return contents;
};
const de_IpamPoolCidrFailureReason = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_IpamPoolCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPoolCidr(entry);
    });
};
const de_IpamPoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPool(entry);
    });
};
const de_IpamPoolSourceResource = (output, context) => {
    const contents = {};
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rR] != null) {
        contents[_RRe] = smithyClient.expectString(output[_rR]);
    }
    if (output[_rO] != null) {
        contents[_ROe] = smithyClient.expectString(output[_rO]);
    }
    return contents;
};
const de_IpamPublicAddressSecurityGroup = (output, context) => {
    const contents = {};
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    return contents;
};
const de_IpamPublicAddressSecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPublicAddressSecurityGroup(entry);
    });
};
const de_IpamPublicAddressTag = (output, context) => {
    const contents = {};
    if (output[_k] != null) {
        contents[_Ke] = smithyClient.expectString(output[_k]);
    }
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_IpamPublicAddressTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamPublicAddressTag(entry);
    });
};
const de_IpamPublicAddressTags = (output, context) => {
    const contents = {};
    if (String(output.eipTagSet).trim() === "") {
        contents[_ETi] = [];
    }
    else if (output[_eTSi] != null && output[_eTSi][_i] != null) {
        contents[_ETi] = de_IpamPublicAddressTagList(smithyClient.getArrayIfSingleItem(output[_eTSi][_i]));
    }
    return contents;
};
const de_IpamResourceCidr = (output, context) => {
    const contents = {};
    if (output[_iIp] != null) {
        contents[_IIp] = smithyClient.expectString(output[_iIp]);
    }
    if (output[_iSIp] != null) {
        contents[_ISI] = smithyClient.expectString(output[_iSIp]);
    }
    if (output[_iPIp] != null) {
        contents[_IPI] = smithyClient.expectString(output[_iPIp]);
    }
    if (output[_rR] != null) {
        contents[_RRe] = smithyClient.expectString(output[_rR]);
    }
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rNes] != null) {
        contents[_RNes] = smithyClient.expectString(output[_rNes]);
    }
    if (output[_rCe] != null) {
        contents[_RC] = smithyClient.expectString(output[_rCe]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (String(output.resourceTagSet).trim() === "") {
        contents[_RTesou] = [];
    }
    else if (output[_rTSes] != null && output[_rTSes][_i] != null) {
        contents[_RTesou] = de_IpamResourceTagList(smithyClient.getArrayIfSingleItem(output[_rTSes][_i]));
    }
    if (output[_iU] != null) {
        contents[_IUp] = smithyClient.strictParseFloat(output[_iU]);
    }
    if (output[_cSo] != null) {
        contents[_CSo] = smithyClient.expectString(output[_cSo]);
    }
    if (output[_mSa] != null) {
        contents[_MSa] = smithyClient.expectString(output[_mSa]);
    }
    if (output[_oSv] != null) {
        contents[_OSv] = smithyClient.expectString(output[_oSv]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    return contents;
};
const de_IpamResourceCidrSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceCidr(entry);
    });
};
const de_IpamResourceDiscovery = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iRDI] != null) {
        contents[_IRDI] = smithyClient.expectString(output[_iRDI]);
    }
    if (output[_iRDAp] != null) {
        contents[_IRDApa] = smithyClient.expectString(output[_iRDAp]);
    }
    if (output[_iRDR] != null) {
        contents[_IRDR] = smithyClient.expectString(output[_iRDR]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.operatingRegionSet).trim() === "") {
        contents[_OR] = [];
    }
    else if (output[_oRS] != null && output[_oRS][_i] != null) {
        contents[_OR] = de_IpamOperatingRegionSet(smithyClient.getArrayIfSingleItem(output[_oRS][_i]));
    }
    if (output[_iDs] != null) {
        contents[_IDs] = smithyClient.parseBoolean(output[_iDs]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.organizationalUnitExclusionSet).trim() === "") {
        contents[_OUE] = [];
    }
    else if (output[_oUES] != null && output[_oUES][_i] != null) {
        contents[_OUE] = de_IpamOrganizationalUnitExclusionSet(smithyClient.getArrayIfSingleItem(output[_oUES][_i]));
    }
    return contents;
};
const de_IpamResourceDiscoveryAssociation = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iRDAI] != null) {
        contents[_IRDAIp] = smithyClient.expectString(output[_iRDAI]);
    }
    if (output[_iRDAA] != null) {
        contents[_IRDAA] = smithyClient.expectString(output[_iRDAA]);
    }
    if (output[_iRDI] != null) {
        contents[_IRDI] = smithyClient.expectString(output[_iRDI]);
    }
    if (output[_iIp] != null) {
        contents[_IIp] = smithyClient.expectString(output[_iIp]);
    }
    if (output[_iApa] != null) {
        contents[_IApa] = smithyClient.expectString(output[_iApa]);
    }
    if (output[_iRp] != null) {
        contents[_IRpa] = smithyClient.expectString(output[_iRp]);
    }
    if (output[_iDs] != null) {
        contents[_IDs] = smithyClient.parseBoolean(output[_iDs]);
    }
    if (output[_rDS] != null) {
        contents[_RDS] = smithyClient.expectString(output[_rDS]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_IpamResourceDiscoveryAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceDiscoveryAssociation(entry);
    });
};
const de_IpamResourceDiscoverySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceDiscovery(entry);
    });
};
const de_IpamResourceTag = (output, context) => {
    const contents = {};
    if (output[_k] != null) {
        contents[_Ke] = smithyClient.expectString(output[_k]);
    }
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_IpamResourceTagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamResourceTag(entry);
    });
};
const de_IpamScope = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iSIp] != null) {
        contents[_ISI] = smithyClient.expectString(output[_iSIp]);
    }
    if (output[_iSA] != null) {
        contents[_ISA] = smithyClient.expectString(output[_iSA]);
    }
    if (output[_iApa] != null) {
        contents[_IApa] = smithyClient.expectString(output[_iApa]);
    }
    if (output[_iRp] != null) {
        contents[_IRpa] = smithyClient.expectString(output[_iRp]);
    }
    if (output[_iST] != null) {
        contents[_ISTp] = smithyClient.expectString(output[_iST]);
    }
    if (output[_iDs] != null) {
        contents[_IDs] = smithyClient.parseBoolean(output[_iDs]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_pCo] != null) {
        contents[_PCoo] = smithyClient.strictParseInt32(output[_pCo]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_IpamScopeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpamScope(entry);
    });
};
const de_IpamSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipam(entry);
    });
};
const de_IpPermission = (output, context) => {
    const contents = {};
    if (output[_iPpr] != null) {
        contents[_IPpr] = smithyClient.expectString(output[_iPpr]);
    }
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    if (String(output.groups).trim() === "") {
        contents[_UIGP] = [];
    }
    else if (output[_gr] != null && output[_gr][_i] != null) {
        contents[_UIGP] = de_UserIdGroupPairList(smithyClient.getArrayIfSingleItem(output[_gr][_i]));
    }
    if (String(output.ipRanges).trim() === "") {
        contents[_IRp] = [];
    }
    else if (output[_iRpa] != null && output[_iRpa][_i] != null) {
        contents[_IRp] = de_IpRangeList(smithyClient.getArrayIfSingleItem(output[_iRpa][_i]));
    }
    if (String(output.ipv6Ranges).trim() === "") {
        contents[_IRpv] = [];
    }
    else if (output[_iRpv] != null && output[_iRpv][_i] != null) {
        contents[_IRpv] = de_Ipv6RangeList(smithyClient.getArrayIfSingleItem(output[_iRpv][_i]));
    }
    if (String(output.prefixListIds).trim() === "") {
        contents[_PLIr] = [];
    }
    else if (output[_pLIr] != null && output[_pLIr][_i] != null) {
        contents[_PLIr] = de_PrefixListIdList(smithyClient.getArrayIfSingleItem(output[_pLIr][_i]));
    }
    return contents;
};
const de_IpPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpPermission(entry);
    });
};
const de_IpPrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_IpRange = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_cIi] != null) {
        contents[_CIi] = smithyClient.expectString(output[_cIi]);
    }
    return contents;
};
const de_IpRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IpRange(entry);
    });
};
const de_IpRanges = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Ipv4PrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv4PrefixSpecification(entry);
    });
};
const de_Ipv4PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv4PrefixSpecificationRequest(entry);
    });
};
const de_Ipv4PrefixListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv4PrefixSpecificationResponse(entry);
    });
};
const de_Ipv4PrefixSpecification = (output, context) => {
    const contents = {};
    if (output[_iPpv] != null) {
        contents[_IPpvr] = smithyClient.expectString(output[_iPpv]);
    }
    return contents;
};
const de_Ipv4PrefixSpecificationRequest = (output, context) => {
    const contents = {};
    if (output[_IPpvr] != null) {
        contents[_IPpvr] = smithyClient.expectString(output[_IPpvr]);
    }
    return contents;
};
const de_Ipv4PrefixSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_iPpv] != null) {
        contents[_IPpvr] = smithyClient.expectString(output[_iPpv]);
    }
    return contents;
};
const de_Ipv6AddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Ipv6CidrAssociation = (output, context) => {
    const contents = {};
    if (output[_iCp] != null) {
        contents[_ICp] = smithyClient.expectString(output[_iCp]);
    }
    if (output[_aRs] != null) {
        contents[_ARs] = smithyClient.expectString(output[_aRs]);
    }
    return contents;
};
const de_Ipv6CidrAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6CidrAssociation(entry);
    });
};
const de_Ipv6CidrBlock = (output, context) => {
    const contents = {};
    if (output[_iCB] != null) {
        contents[_ICB] = smithyClient.expectString(output[_iCB]);
    }
    return contents;
};
const de_Ipv6CidrBlockSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6CidrBlock(entry);
    });
};
const de_Ipv6Pool = (output, context) => {
    const contents = {};
    if (output[_pIo] != null) {
        contents[_PIo] = smithyClient.expectString(output[_pIo]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.poolCidrBlockSet).trim() === "") {
        contents[_PCBo] = [];
    }
    else if (output[_pCBS] != null && output[_pCBS][_i] != null) {
        contents[_PCBo] = de_PoolCidrBlocksSet(smithyClient.getArrayIfSingleItem(output[_pCBS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_Ipv6PoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6Pool(entry);
    });
};
const de_Ipv6PrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6PrefixSpecification(entry);
    });
};
const de_Ipv6PrefixList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6PrefixSpecificationRequest(entry);
    });
};
const de_Ipv6PrefixListResponse = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6PrefixSpecificationResponse(entry);
    });
};
const de_Ipv6PrefixSpecification = (output, context) => {
    const contents = {};
    if (output[_iPpvr] != null) {
        contents[_IPpvre] = smithyClient.expectString(output[_iPpvr]);
    }
    return contents;
};
const de_Ipv6PrefixSpecificationRequest = (output, context) => {
    const contents = {};
    if (output[_IPpvre] != null) {
        contents[_IPpvre] = smithyClient.expectString(output[_IPpvre]);
    }
    return contents;
};
const de_Ipv6PrefixSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_iPpvr] != null) {
        contents[_IPpvre] = smithyClient.expectString(output[_iPpvr]);
    }
    return contents;
};
const de_Ipv6Range = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_cIid] != null) {
        contents[_CIid] = smithyClient.expectString(output[_cIid]);
    }
    return contents;
};
const de_Ipv6RangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ipv6Range(entry);
    });
};
const de_KeyPair = (output, context) => {
    const contents = {};
    if (output[_kPI] != null) {
        contents[_KPI] = smithyClient.expectString(output[_kPI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (output[_kFe] != null) {
        contents[_KFe] = smithyClient.expectString(output[_kFe]);
    }
    if (output[_kM] != null) {
        contents[_KM] = smithyClient.expectString(output[_kM]);
    }
    return contents;
};
const de_KeyPairInfo = (output, context) => {
    const contents = {};
    if (output[_kPI] != null) {
        contents[_KPI] = smithyClient.expectString(output[_kPI]);
    }
    if (output[_kT] != null) {
        contents[_KT] = smithyClient.expectString(output[_kT]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_pK] != null) {
        contents[_PK] = smithyClient.expectString(output[_pK]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (output[_kFe] != null) {
        contents[_KFe] = smithyClient.expectString(output[_kFe]);
    }
    return contents;
};
const de_KeyPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KeyPairInfo(entry);
    });
};
const de_LastError = (output, context) => {
    const contents = {};
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    return contents;
};
const de_LaunchPermission = (output, context) => {
    const contents = {};
    if (output[_oAr] != null) {
        contents[_OAr] = smithyClient.expectString(output[_oAr]);
    }
    if (output[_oUA] != null) {
        contents[_OUA] = smithyClient.expectString(output[_oUA]);
    }
    if (output[_uI] != null) {
        contents[_UIs] = smithyClient.expectString(output[_uI]);
    }
    if (output[_g] != null) {
        contents[_Gr] = smithyClient.expectString(output[_g]);
    }
    return contents;
};
const de_LaunchPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchPermission(entry);
    });
};
const de_LaunchSpecification = (output, context) => {
    const contents = {};
    if (output[_uDs] != null) {
        contents[_UD] = smithyClient.expectString(output[_uDs]);
    }
    if (output[_aTdd] != null) {
        contents[_ATd] = smithyClient.expectString(output[_aTdd]);
    }
    if (String(output.blockDeviceMapping).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDM] != null && output[_bDM][_i] != null) {
        contents[_BDM] = de_BlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDM][_i]));
    }
    if (output[_eO] != null) {
        contents[_EO] = smithyClient.parseBoolean(output[_eO]);
    }
    if (output[_iIP] != null) {
        contents[_IIP] = de_IamInstanceProfileSpecification(output[_iIP]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_kI] != null) {
        contents[_KI] = smithyClient.expectString(output[_kI]);
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (String(output.networkInterfaceSet).trim() === "") {
        contents[_NI] = [];
    }
    else if (output[_nIS] != null && output[_nIS][_i] != null) {
        contents[_NI] = de_InstanceNetworkInterfaceSpecificationList(smithyClient.getArrayIfSingleItem(output[_nIS][_i]));
    }
    if (output[_pla] != null) {
        contents[_Pl] = de_SpotPlacement(output[_pla]);
    }
    if (output[_rIa] != null) {
        contents[_RIa] = smithyClient.expectString(output[_rIa]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_SG] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (output[_mo] != null) {
        contents[_Mon] = de_RunInstancesMonitoringEnabled(output[_mo]);
    }
    return contents;
};
const de_LaunchSpecsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotFleetLaunchSpecification(entry);
    });
};
const de_LaunchTemplate = (output, context) => {
    const contents = {};
    if (output[_lTI] != null) {
        contents[_LTI] = smithyClient.expectString(output[_lTI]);
    }
    if (output[_lTN] != null) {
        contents[_LTN] = smithyClient.expectString(output[_lTN]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_cBr] != null) {
        contents[_CBr] = smithyClient.expectString(output[_cBr]);
    }
    if (output[_dVN] != null) {
        contents[_DVN] = smithyClient.strictParseLong(output[_dVN]);
    }
    if (output[_lVN] != null) {
        contents[_LVN] = smithyClient.strictParseLong(output[_lVN]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    return contents;
};
const de_LaunchTemplateAndOverridesResponse = (output, context) => {
    const contents = {};
    if (output[_lTS] != null) {
        contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS]);
    }
    if (output[_ov] != null) {
        contents[_Ov] = de_FleetLaunchTemplateOverrides(output[_ov]);
    }
    return contents;
};
const de_LaunchTemplateBlockDeviceMapping = (output, context) => {
    const contents = {};
    if (output[_dN] != null) {
        contents[_DN] = smithyClient.expectString(output[_dN]);
    }
    if (output[_vN] != null) {
        contents[_VN] = smithyClient.expectString(output[_vN]);
    }
    if (output[_eb] != null) {
        contents[_E] = de_LaunchTemplateEbsBlockDevice(output[_eb]);
    }
    if (output[_nD] != null) {
        contents[_ND] = smithyClient.expectString(output[_nD]);
    }
    return contents;
};
const de_LaunchTemplateBlockDeviceMappingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateBlockDeviceMapping(entry);
    });
};
const de_LaunchTemplateCapacityReservationSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_cRP] != null) {
        contents[_CRP] = smithyClient.expectString(output[_cRP]);
    }
    if (output[_cRT] != null) {
        contents[_CRTa] = de_CapacityReservationTargetResponse(output[_cRT]);
    }
    return contents;
};
const de_LaunchTemplateConfig = (output, context) => {
    const contents = {};
    if (output[_lTS] != null) {
        contents[_LTS] = de_FleetLaunchTemplateSpecification(output[_lTS]);
    }
    if (String(output.overrides).trim() === "") {
        contents[_Ov] = [];
    }
    else if (output[_ov] != null && output[_ov][_i] != null) {
        contents[_Ov] = de_LaunchTemplateOverridesList(smithyClient.getArrayIfSingleItem(output[_ov][_i]));
    }
    return contents;
};
const de_LaunchTemplateConfigList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateConfig(entry);
    });
};
const de_LaunchTemplateCpuOptions = (output, context) => {
    const contents = {};
    if (output[_cCo] != null) {
        contents[_CC] = smithyClient.strictParseInt32(output[_cCo]);
    }
    if (output[_tPC] != null) {
        contents[_TPC] = smithyClient.strictParseInt32(output[_tPC]);
    }
    if (output[_aSS] != null) {
        contents[_ASS] = smithyClient.expectString(output[_aSS]);
    }
    return contents;
};
const de_LaunchTemplateEbsBlockDevice = (output, context) => {
    const contents = {};
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_io] != null) {
        contents[_Io] = smithyClient.strictParseInt32(output[_io]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_vSo] != null) {
        contents[_VS] = smithyClient.strictParseInt32(output[_vSo]);
    }
    if (output[_vT] != null) {
        contents[_VT] = smithyClient.expectString(output[_vT]);
    }
    if (output[_th] != null) {
        contents[_Th] = smithyClient.strictParseInt32(output[_th]);
    }
    if (output[_vIR] != null) {
        contents[_VIR] = smithyClient.strictParseInt32(output[_vIR]);
    }
    return contents;
};
const de_LaunchTemplateElasticInferenceAcceleratorResponse = (output, context) => {
    const contents = {};
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    return contents;
};
const de_LaunchTemplateElasticInferenceAcceleratorResponseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateElasticInferenceAcceleratorResponse(entry);
    });
};
const de_LaunchTemplateEnaSrdSpecification = (output, context) => {
    const contents = {};
    if (output[_eSE] != null) {
        contents[_ESE] = smithyClient.parseBoolean(output[_eSE]);
    }
    if (output[_eSUS] != null) {
        contents[_ESUS] = de_LaunchTemplateEnaSrdUdpSpecification(output[_eSUS]);
    }
    return contents;
};
const de_LaunchTemplateEnaSrdUdpSpecification = (output, context) => {
    const contents = {};
    if (output[_eSUE] != null) {
        contents[_ESUE] = smithyClient.parseBoolean(output[_eSUE]);
    }
    return contents;
};
const de_LaunchTemplateEnclaveOptions = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    return contents;
};
const de_LaunchTemplateHibernationOptions = (output, context) => {
    const contents = {};
    if (output[_conf] != null) {
        contents[_Conf] = smithyClient.parseBoolean(output[_conf]);
    }
    return contents;
};
const de_LaunchTemplateIamInstanceProfileSpecification = (output, context) => {
    const contents = {};
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    return contents;
};
const de_LaunchTemplateInstanceMaintenanceOptions = (output, context) => {
    const contents = {};
    if (output[_aRu] != null) {
        contents[_ARu] = smithyClient.expectString(output[_aRu]);
    }
    return contents;
};
const de_LaunchTemplateInstanceMarketOptions = (output, context) => {
    const contents = {};
    if (output[_mT] != null) {
        contents[_MT] = smithyClient.expectString(output[_mT]);
    }
    if (output[_sO] != null) {
        contents[_SO] = de_LaunchTemplateSpotMarketOptions(output[_sO]);
    }
    return contents;
};
const de_LaunchTemplateInstanceMetadataOptions = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_hT] != null) {
        contents[_HT] = smithyClient.expectString(output[_hT]);
    }
    if (output[_hPRHL] != null) {
        contents[_HPRHL] = smithyClient.strictParseInt32(output[_hPRHL]);
    }
    if (output[_hE] != null) {
        contents[_HE] = smithyClient.expectString(output[_hE]);
    }
    if (output[_hPI] != null) {
        contents[_HPI] = smithyClient.expectString(output[_hPI]);
    }
    if (output[_iMT] != null) {
        contents[_IMT] = smithyClient.expectString(output[_iMT]);
    }
    return contents;
};
const de_LaunchTemplateInstanceNetworkInterfaceSpecification = (output, context) => {
    const contents = {};
    if (output[_aCIA] != null) {
        contents[_ACIA] = smithyClient.parseBoolean(output[_aCIA]);
    }
    if (output[_aPIA] != null) {
        contents[_APIAs] = smithyClient.parseBoolean(output[_aPIA]);
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_dIe] != null) {
        contents[_DIev] = smithyClient.strictParseInt32(output[_dIe]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_gIr] != null) {
        contents[_G] = de_GroupIdStringList(smithyClient.getArrayIfSingleItem(output[_gS][_gIr]));
    }
    if (output[_iTnt] != null) {
        contents[_ITn] = smithyClient.expectString(output[_iTnt]);
    }
    if (output[_iAC] != null) {
        contents[_IAC] = smithyClient.strictParseInt32(output[_iAC]);
    }
    if (String(output.ipv6AddressesSet).trim() === "") {
        contents[_IA] = [];
    }
    else if (output[_iASp] != null && output[_iASp][_i] != null) {
        contents[_IA] = de_InstanceIpv6AddressList(smithyClient.getArrayIfSingleItem(output[_iASp][_i]));
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    if (String(output.privateIpAddressesSet).trim() === "") {
        contents[_PIA] = [];
    }
    else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
        contents[_PIA] = de_PrivateIpAddressSpecificationList(smithyClient.getArrayIfSingleItem(output[_pIAS][_i]));
    }
    if (output[_sPIAC] != null) {
        contents[_SPIAC] = smithyClient.strictParseInt32(output[_sPIAC]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_nCI] != null) {
        contents[_NCI] = smithyClient.strictParseInt32(output[_nCI]);
    }
    if (String(output.ipv4PrefixSet).trim() === "") {
        contents[_IPp] = [];
    }
    else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
        contents[_IPp] = de_Ipv4PrefixListResponse(smithyClient.getArrayIfSingleItem(output[_iPSpv][_i]));
    }
    if (output[_iPCp] != null) {
        contents[_IPCp] = smithyClient.strictParseInt32(output[_iPCp]);
    }
    if (String(output.ipv6PrefixSet).trim() === "") {
        contents[_IP] = [];
    }
    else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
        contents[_IP] = de_Ipv6PrefixListResponse(smithyClient.getArrayIfSingleItem(output[_iPSpvr][_i]));
    }
    if (output[_iPCpv] != null) {
        contents[_IPC] = smithyClient.strictParseInt32(output[_iPCpv]);
    }
    if (output[_pIri] != null) {
        contents[_PIr] = smithyClient.parseBoolean(output[_pIri]);
    }
    if (output[_eSS] != null) {
        contents[_ESS] = de_LaunchTemplateEnaSrdSpecification(output[_eSS]);
    }
    if (output[_cTS] != null) {
        contents[_CTS] = de_ConnectionTrackingSpecification(output[_cTS]);
    }
    if (output[_eQC] != null) {
        contents[_EQC] = smithyClient.strictParseInt32(output[_eQC]);
    }
    return contents;
};
const de_LaunchTemplateInstanceNetworkInterfaceSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateInstanceNetworkInterfaceSpecification(entry);
    });
};
const de_LaunchTemplateLicenseConfiguration = (output, context) => {
    const contents = {};
    if (output[_lCA] != null) {
        contents[_LCA] = smithyClient.expectString(output[_lCA]);
    }
    return contents;
};
const de_LaunchTemplateLicenseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateLicenseConfiguration(entry);
    });
};
const de_LaunchTemplateNetworkPerformanceOptions = (output, context) => {
    const contents = {};
    if (output[_bW] != null) {
        contents[_BW] = smithyClient.expectString(output[_bW]);
    }
    return contents;
};
const de_LaunchTemplateOverrides = (output, context) => {
    const contents = {};
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_sPp] != null) {
        contents[_SPp] = smithyClient.expectString(output[_sPp]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_wC] != null) {
        contents[_WCe] = smithyClient.strictParseFloat(output[_wC]);
    }
    if (output[_pri] != null) {
        contents[_Pri] = smithyClient.strictParseFloat(output[_pri]);
    }
    if (output[_iR] != null) {
        contents[_IR] = de_InstanceRequirements(output[_iR]);
    }
    return contents;
};
const de_LaunchTemplateOverridesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateOverrides(entry);
    });
};
const de_LaunchTemplatePlacement = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_af] != null) {
        contents[_Af] = smithyClient.expectString(output[_af]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_hI] != null) {
        contents[_HIo] = smithyClient.expectString(output[_hI]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (output[_sDp] != null) {
        contents[_SDp] = smithyClient.expectString(output[_sDp]);
    }
    if (output[_hRGA] != null) {
        contents[_HRGA] = smithyClient.expectString(output[_hRGA]);
    }
    if (output[_pN] != null) {
        contents[_PN] = smithyClient.strictParseInt32(output[_pN]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    return contents;
};
const de_LaunchTemplatePrivateDnsNameOptions = (output, context) => {
    const contents = {};
    if (output[_hTo] != null) {
        contents[_HTo] = smithyClient.expectString(output[_hTo]);
    }
    if (output[_eRNDAR] != null) {
        contents[_ERNDAR] = smithyClient.parseBoolean(output[_eRNDAR]);
    }
    if (output[_eRNDAAAAR] != null) {
        contents[_ERNDAAAAR] = smithyClient.parseBoolean(output[_eRNDAAAAR]);
    }
    return contents;
};
const de_LaunchTemplateSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplate(entry);
    });
};
const de_LaunchTemplatesMonitoring = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    return contents;
};
const de_LaunchTemplateSpotMarketOptions = (output, context) => {
    const contents = {};
    if (output[_mP] != null) {
        contents[_MPa] = smithyClient.expectString(output[_mP]);
    }
    if (output[_sIT] != null) {
        contents[_SIT] = smithyClient.expectString(output[_sIT]);
    }
    if (output[_bDMl] != null) {
        contents[_BDMl] = smithyClient.strictParseInt32(output[_bDMl]);
    }
    if (output[_vU] != null) {
        contents[_VU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vU]));
    }
    if (output[_iIB] != null) {
        contents[_IIB] = smithyClient.expectString(output[_iIB]);
    }
    return contents;
};
const de_LaunchTemplateTagSpecification = (output, context) => {
    const contents = {};
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_LaunchTemplateTagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateTagSpecification(entry);
    });
};
const de_LaunchTemplateVersion = (output, context) => {
    const contents = {};
    if (output[_lTI] != null) {
        contents[_LTI] = smithyClient.expectString(output[_lTI]);
    }
    if (output[_lTN] != null) {
        contents[_LTN] = smithyClient.expectString(output[_lTN]);
    }
    if (output[_vNe] != null) {
        contents[_VNe] = smithyClient.strictParseLong(output[_vNe]);
    }
    if (output[_vD] != null) {
        contents[_VD] = smithyClient.expectString(output[_vD]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_cBr] != null) {
        contents[_CBr] = smithyClient.expectString(output[_cBr]);
    }
    if (output[_dVe] != null) {
        contents[_DVef] = smithyClient.parseBoolean(output[_dVe]);
    }
    if (output[_lTD] != null) {
        contents[_LTD] = de_ResponseLaunchTemplateData(output[_lTD]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    return contents;
};
const de_LaunchTemplateVersionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LaunchTemplateVersion(entry);
    });
};
const de_LicenseConfiguration = (output, context) => {
    const contents = {};
    if (output[_lCA] != null) {
        contents[_LCA] = smithyClient.expectString(output[_lCA]);
    }
    return contents;
};
const de_LicenseList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LicenseConfiguration(entry);
    });
};
const de_ListImagesInRecycleBinResult = (output, context) => {
    const contents = {};
    if (String(output.imageSet).trim() === "") {
        contents[_Ima] = [];
    }
    else if (output[_iSmag] != null && output[_iSmag][_i] != null) {
        contents[_Ima] = de_ImageRecycleBinInfoList(smithyClient.getArrayIfSingleItem(output[_iSmag][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_ListSnapshotsInRecycleBinResult = (output, context) => {
    const contents = {};
    if (String(output.snapshotSet).trim() === "") {
        contents[_Sn] = [];
    }
    else if (output[_sS] != null && output[_sS][_i] != null) {
        contents[_Sn] = de_SnapshotRecycleBinInfoList(smithyClient.getArrayIfSingleItem(output[_sS][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_LoadBalancersConfig = (output, context) => {
    const contents = {};
    if (output[_cLBC] != null) {
        contents[_CLBC] = de_ClassicLoadBalancersConfig(output[_cLBC]);
    }
    if (output[_tGCa] != null) {
        contents[_TGC] = de_TargetGroupsConfig(output[_tGCa]);
    }
    return contents;
};
const de_LoadPermission = (output, context) => {
    const contents = {};
    if (output[_uI] != null) {
        contents[_UIs] = smithyClient.expectString(output[_uI]);
    }
    if (output[_g] != null) {
        contents[_Gr] = smithyClient.expectString(output[_g]);
    }
    return contents;
};
const de_LoadPermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LoadPermission(entry);
    });
};
const de_LocalGateway = (output, context) => {
    const contents = {};
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_LocalGatewayRoute = (output, context) => {
    const contents = {};
    if (output[_dCB] != null) {
        contents[_DCBe] = smithyClient.expectString(output[_dCB]);
    }
    if (output[_lGVIGI] != null) {
        contents[_LGVIGI] = smithyClient.expectString(output[_lGVIGI]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    if (output[_lGRTA] != null) {
        contents[_LGRTA] = smithyClient.expectString(output[_lGRTA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_cPI] != null) {
        contents[_CPIo] = smithyClient.expectString(output[_cPI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_dPLI] != null) {
        contents[_DPLI] = smithyClient.expectString(output[_dPLI]);
    }
    return contents;
};
const de_LocalGatewayRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRoute(entry);
    });
};
const de_LocalGatewayRouteTable = (output, context) => {
    const contents = {};
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    if (output[_lGRTA] != null) {
        contents[_LGRTA] = smithyClient.expectString(output[_lGRTA]);
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_mod] != null) {
        contents[_Mo] = smithyClient.expectString(output[_mod]);
    }
    if (output[_sRt] != null) {
        contents[_SRt] = de_StateReason(output[_sRt]);
    }
    return contents;
};
const de_LocalGatewayRouteTableSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRouteTable(entry);
    });
};
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation = (output, context) => {
    const contents = {};
    if (output[_lGRTVIGAI] != null) {
        contents[_LGRTVIGAI] = smithyClient.expectString(output[_lGRTVIGAI]);
    }
    if (output[_lGVIGI] != null) {
        contents[_LGVIGI] = smithyClient.expectString(output[_lGVIGI]);
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    if (output[_lGRTA] != null) {
        contents[_LGRTA] = smithyClient.expectString(output[_lGRTA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_LocalGatewayRouteTableVirtualInterfaceGroupAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRouteTableVirtualInterfaceGroupAssociation(entry);
    });
};
const de_LocalGatewayRouteTableVpcAssociation = (output, context) => {
    const contents = {};
    if (output[_lGRTVAI] != null) {
        contents[_LGRTVAI] = smithyClient.expectString(output[_lGRTVAI]);
    }
    if (output[_lGRTI] != null) {
        contents[_LGRTI] = smithyClient.expectString(output[_lGRTI]);
    }
    if (output[_lGRTA] != null) {
        contents[_LGRTA] = smithyClient.expectString(output[_lGRTA]);
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_LocalGatewayRouteTableVpcAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayRouteTableVpcAssociation(entry);
    });
};
const de_LocalGatewaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGateway(entry);
    });
};
const de_LocalGatewayVirtualInterface = (output, context) => {
    const contents = {};
    if (output[_lGVII] != null) {
        contents[_LGVII] = smithyClient.expectString(output[_lGVII]);
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_lGVIGI] != null) {
        contents[_LGVIGI] = smithyClient.expectString(output[_lGVIGI]);
    }
    if (output[_lGVIA] != null) {
        contents[_LGVIA] = smithyClient.expectString(output[_lGVIA]);
    }
    if (output[_oLI] != null) {
        contents[_OLI] = smithyClient.expectString(output[_oLI]);
    }
    if (output[_vl] != null) {
        contents[_Vl] = smithyClient.strictParseInt32(output[_vl]);
    }
    if (output[_lA] != null) {
        contents[_LA] = smithyClient.expectString(output[_lA]);
    }
    if (output[_pAe] != null) {
        contents[_PAe] = smithyClient.expectString(output[_pAe]);
    }
    if (output[_lBAo] != null) {
        contents[_LBA] = smithyClient.strictParseInt32(output[_lBAo]);
    }
    if (output[_pBA] != null) {
        contents[_PBA] = smithyClient.strictParseInt32(output[_pBA]);
    }
    if (output[_pBAE] != null) {
        contents[_PBAE] = smithyClient.strictParseLong(output[_pBAE]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_cSon] != null) {
        contents[_CSon] = smithyClient.expectString(output[_cSon]);
    }
    return contents;
};
const de_LocalGatewayVirtualInterfaceGroup = (output, context) => {
    const contents = {};
    if (output[_lGVIGI] != null) {
        contents[_LGVIGI] = smithyClient.expectString(output[_lGVIGI]);
    }
    if (String(output.localGatewayVirtualInterfaceIdSet).trim() === "") {
        contents[_LGVIIo] = [];
    }
    else if (output[_lGVIIS] != null && output[_lGVIIS][_i] != null) {
        contents[_LGVIIo] = de_LocalGatewayVirtualInterfaceIdSet(smithyClient.getArrayIfSingleItem(output[_lGVIIS][_i]));
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_lBAo] != null) {
        contents[_LBA] = smithyClient.strictParseInt32(output[_lBAo]);
    }
    if (output[_lBAE] != null) {
        contents[_LBAE] = smithyClient.strictParseLong(output[_lBAE]);
    }
    if (output[_lGVIGA] != null) {
        contents[_LGVIGA] = smithyClient.expectString(output[_lGVIGA]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_cSon] != null) {
        contents[_CSon] = smithyClient.expectString(output[_cSon]);
    }
    return contents;
};
const de_LocalGatewayVirtualInterfaceGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayVirtualInterfaceGroup(entry);
    });
};
const de_LocalGatewayVirtualInterfaceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_LocalGatewayVirtualInterfaceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LocalGatewayVirtualInterface(entry);
    });
};
const de_LocalStorageTypeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_LockedSnapshotsInfo = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_lSoc] != null) {
        contents[_LSoc] = smithyClient.expectString(output[_lSoc]);
    }
    if (output[_lDo] != null) {
        contents[_LDo] = smithyClient.strictParseInt32(output[_lDo]);
    }
    if (output[_cOP] != null) {
        contents[_COP] = smithyClient.strictParseInt32(output[_cOP]);
    }
    if (output[_cOPEO] != null) {
        contents[_COPEO] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cOPEO]));
    }
    if (output[_lCO] != null) {
        contents[_LCO] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lCO]));
    }
    if (output[_lDST] != null) {
        contents[_LDST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lDST]));
    }
    if (output[_lEO] != null) {
        contents[_LEO] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lEO]));
    }
    return contents;
};
const de_LockedSnapshotsInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LockedSnapshotsInfo(entry);
    });
};
const de_LockSnapshotResult = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_lSoc] != null) {
        contents[_LSoc] = smithyClient.expectString(output[_lSoc]);
    }
    if (output[_lDo] != null) {
        contents[_LDo] = smithyClient.strictParseInt32(output[_lDo]);
    }
    if (output[_cOP] != null) {
        contents[_COP] = smithyClient.strictParseInt32(output[_cOP]);
    }
    if (output[_cOPEO] != null) {
        contents[_COPEO] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cOPEO]));
    }
    if (output[_lCO] != null) {
        contents[_LCO] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lCO]));
    }
    if (output[_lEO] != null) {
        contents[_LEO] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lEO]));
    }
    if (output[_lDST] != null) {
        contents[_LDST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lDST]));
    }
    return contents;
};
const de_MacHost = (output, context) => {
    const contents = {};
    if (output[_hI] != null) {
        contents[_HIo] = smithyClient.expectString(output[_hI]);
    }
    if (String(output.macOSLatestSupportedVersionSet).trim() === "") {
        contents[_MOSLSV] = [];
    }
    else if (output[_mOSLSVS] != null && output[_mOSLSVS][_i] != null) {
        contents[_MOSLSV] = de_MacOSVersionStringList(smithyClient.getArrayIfSingleItem(output[_mOSLSVS][_i]));
    }
    return contents;
};
const de_MacHostList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MacHost(entry);
    });
};
const de_MacModificationTask = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_mMTI] != null) {
        contents[_MMTIa] = smithyClient.expectString(output[_mMTI]);
    }
    if (output[_mSIPC] != null) {
        contents[_MSIPCa] = de_MacSystemIntegrityProtectionConfiguration(output[_mSIPC]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_tSas] != null) {
        contents[_TSas] = smithyClient.expectString(output[_tSas]);
    }
    if (output[_tTa] != null) {
        contents[_TTa] = smithyClient.expectString(output[_tTa]);
    }
    return contents;
};
const de_MacModificationTaskList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MacModificationTask(entry);
    });
};
const de_MacOSVersionStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_MacSystemIntegrityProtectionConfiguration = (output, context) => {
    const contents = {};
    if (output[_aIp] != null) {
        contents[_AIp] = smithyClient.expectString(output[_aIp]);
    }
    if (output[_bSa] != null) {
        contents[_BS] = smithyClient.expectString(output[_bSa]);
    }
    if (output[_dRe] != null) {
        contents[_DReb] = smithyClient.expectString(output[_dRe]);
    }
    if (output[_dTR] != null) {
        contents[_DTR] = smithyClient.expectString(output[_dTR]);
    }
    if (output[_fPi] != null) {
        contents[_FPi] = smithyClient.expectString(output[_fPi]);
    }
    if (output[_kSe] != null) {
        contents[_KS] = smithyClient.expectString(output[_kSe]);
    }
    if (output[_nP] != null) {
        contents[_NP] = smithyClient.expectString(output[_nP]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_MaintenanceDetails = (output, context) => {
    const contents = {};
    if (output[_pM] != null) {
        contents[_PM] = smithyClient.expectString(output[_pM]);
    }
    if (output[_mAAA] != null) {
        contents[_MAAA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_mAAA]));
    }
    if (output[_lMA] != null) {
        contents[_LMA] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lMA]));
    }
    return contents;
};
const de_ManagedPrefixList = (output, context) => {
    const contents = {};
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_aF] != null) {
        contents[_AF] = smithyClient.expectString(output[_aF]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMta] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMta]);
    }
    if (output[_pLA] != null) {
        contents[_PLAr] = smithyClient.expectString(output[_pLA]);
    }
    if (output[_pLN] != null) {
        contents[_PLN] = smithyClient.expectString(output[_pLN]);
    }
    if (output[_mE] != null) {
        contents[_ME] = smithyClient.strictParseInt32(output[_mE]);
    }
    if (output[_ve] != null) {
        contents[_V] = smithyClient.strictParseLong(output[_ve]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    return contents;
};
const de_ManagedPrefixListSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ManagedPrefixList(entry);
    });
};
const de_MarketplaceProductCodeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_MediaAcceleratorInfo = (output, context) => {
    const contents = {};
    if (String(output.accelerators).trim() === "") {
        contents[_Acc] = [];
    }
    else if (output[_acc] != null && output[_acc][_i] != null) {
        contents[_Acc] = de_MediaDeviceInfoList(smithyClient.getArrayIfSingleItem(output[_acc][_i]));
    }
    if (output[_tMMIMB] != null) {
        contents[_TMMIMB] = smithyClient.strictParseInt32(output[_tMMIMB]);
    }
    return contents;
};
const de_MediaDeviceInfo = (output, context) => {
    const contents = {};
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_man] != null) {
        contents[_Man] = smithyClient.expectString(output[_man]);
    }
    if (output[_mIe] != null) {
        contents[_MIe] = de_MediaDeviceMemoryInfo(output[_mIe]);
    }
    return contents;
};
const de_MediaDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MediaDeviceInfo(entry);
    });
};
const de_MediaDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output[_sIMB] != null) {
        contents[_SIMB] = smithyClient.strictParseInt32(output[_sIMB]);
    }
    return contents;
};
const de_MemoryGiBPerVCpu = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseFloat(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseFloat(output[_ma]);
    }
    return contents;
};
const de_MemoryInfo = (output, context) => {
    const contents = {};
    if (output[_sIMB] != null) {
        contents[_SIMB] = smithyClient.strictParseLong(output[_sIMB]);
    }
    return contents;
};
const de_MemoryMiB = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseInt32(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseInt32(output[_ma]);
    }
    return contents;
};
const de_MetricPoint = (output, context) => {
    const contents = {};
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_v] != null) {
        contents[_Va] = smithyClient.strictParseFloat(output[_v]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_MetricPoints = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricPoint(entry);
    });
};
const de_ModifyAddressAttributeResult = (output, context) => {
    const contents = {};
    if (output[_ad] != null) {
        contents[_Ad] = de_AddressAttribute(output[_ad]);
    }
    return contents;
};
const de_ModifyAvailabilityZoneGroupResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyCapacityReservationFleetResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyCapacityReservationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyClientVpnEndpointResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyDefaultCreditSpecificationResult = (output, context) => {
    const contents = {};
    if (output[_iFCS] != null) {
        contents[_IFCS] = de_InstanceFamilyCreditSpecification(output[_iFCS]);
    }
    return contents;
};
const de_ModifyEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {};
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    return contents;
};
const de_ModifyFleetResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyFpgaImageAttributeResult = (output, context) => {
    const contents = {};
    if (output[_fIA] != null) {
        contents[_FIAp] = de_FpgaImageAttribute(output[_fIA]);
    }
    return contents;
};
const de_ModifyHostsResult = (output, context) => {
    const contents = {};
    if (String(output.successful).trim() === "") {
        contents[_Suc] = [];
    }
    else if (output[_suc] != null && output[_suc][_i] != null) {
        contents[_Suc] = de_ResponseHostIdList(smithyClient.getArrayIfSingleItem(output[_suc][_i]));
    }
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemList(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_ModifyInstanceCapacityReservationAttributesResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyInstanceConnectEndpointResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyInstanceCpuOptionsResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_cCo] != null) {
        contents[_CC] = smithyClient.strictParseInt32(output[_cCo]);
    }
    if (output[_tPC] != null) {
        contents[_TPC] = smithyClient.strictParseInt32(output[_tPC]);
    }
    return contents;
};
const de_ModifyInstanceCreditSpecificationResult = (output, context) => {
    const contents = {};
    if (String(output.successfulInstanceCreditSpecificationSet).trim() === "") {
        contents[_SICS] = [];
    }
    else if (output[_sICSS] != null && output[_sICSS][_i] != null) {
        contents[_SICS] = de_SuccessfulInstanceCreditSpecificationSet(smithyClient.getArrayIfSingleItem(output[_sICSS][_i]));
    }
    if (String(output.unsuccessfulInstanceCreditSpecificationSet).trim() === "") {
        contents[_UICS] = [];
    }
    else if (output[_uICSS] != null && output[_uICSS][_i] != null) {
        contents[_UICS] = de_UnsuccessfulInstanceCreditSpecificationSet(smithyClient.getArrayIfSingleItem(output[_uICSS][_i]));
    }
    return contents;
};
const de_ModifyInstanceEventStartTimeResult = (output, context) => {
    const contents = {};
    if (output[_ev] != null) {
        contents[_Eve] = de_InstanceStatusEvent(output[_ev]);
    }
    return contents;
};
const de_ModifyInstanceEventWindowResult = (output, context) => {
    const contents = {};
    if (output[_iEW] != null) {
        contents[_IEW] = de_InstanceEventWindow(output[_iEW]);
    }
    return contents;
};
const de_ModifyInstanceMaintenanceOptionsResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_aRu] != null) {
        contents[_ARu] = smithyClient.expectString(output[_aRu]);
    }
    if (output[_rM] != null) {
        contents[_RMe] = smithyClient.expectString(output[_rM]);
    }
    return contents;
};
const de_ModifyInstanceMetadataDefaultsResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyInstanceMetadataOptionsResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iMO] != null) {
        contents[_IMOn] = de_InstanceMetadataOptionsResponse(output[_iMO]);
    }
    return contents;
};
const de_ModifyInstanceNetworkPerformanceResult = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_bW] != null) {
        contents[_BW] = smithyClient.expectString(output[_bW]);
    }
    return contents;
};
const de_ModifyInstancePlacementResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyIpamPoolResult = (output, context) => {
    const contents = {};
    if (output[_iPp] != null) {
        contents[_IPpa] = de_IpamPool(output[_iPp]);
    }
    return contents;
};
const de_ModifyIpamResourceCidrResult = (output, context) => {
    const contents = {};
    if (output[_iRC] != null) {
        contents[_IRCp] = de_IpamResourceCidr(output[_iRC]);
    }
    return contents;
};
const de_ModifyIpamResourceDiscoveryResult = (output, context) => {
    const contents = {};
    if (output[_iRD] != null) {
        contents[_IRD] = de_IpamResourceDiscovery(output[_iRD]);
    }
    return contents;
};
const de_ModifyIpamResult = (output, context) => {
    const contents = {};
    if (output[_ip] != null) {
        contents[_Ipa] = de_Ipam(output[_ip]);
    }
    return contents;
};
const de_ModifyIpamScopeResult = (output, context) => {
    const contents = {};
    if (output[_iSp] != null) {
        contents[_ISpa] = de_IpamScope(output[_iSp]);
    }
    return contents;
};
const de_ModifyLaunchTemplateResult = (output, context) => {
    const contents = {};
    if (output[_lT] != null) {
        contents[_LTa] = de_LaunchTemplate(output[_lT]);
    }
    return contents;
};
const de_ModifyLocalGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output[_ro] != null) {
        contents[_Rou] = de_LocalGatewayRoute(output[_ro]);
    }
    return contents;
};
const de_ModifyManagedPrefixListResult = (output, context) => {
    const contents = {};
    if (output[_pL] != null) {
        contents[_PLr] = de_ManagedPrefixList(output[_pL]);
    }
    return contents;
};
const de_ModifyPrivateDnsNameOptionsResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyPublicIpDnsNameOptionsResult = (output, context) => {
    const contents = {};
    if (output[_suc] != null) {
        contents[_Suc] = smithyClient.parseBoolean(output[_suc]);
    }
    return contents;
};
const de_ModifyReservedInstancesResult = (output, context) => {
    const contents = {};
    if (output[_rIMI] != null) {
        contents[_RIMIe] = smithyClient.expectString(output[_rIMI]);
    }
    return contents;
};
const de_ModifyRouteServerResult = (output, context) => {
    const contents = {};
    if (output[_rSo] != null) {
        contents[_RSo] = de_RouteServer(output[_rSo]);
    }
    return contents;
};
const de_ModifySecurityGroupRulesResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifySnapshotTierResult = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_tST] != null) {
        contents[_TST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_tST]));
    }
    return contents;
};
const de_ModifySpotFleetRequestResponse = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyTrafficMirrorFilterNetworkServicesResult = (output, context) => {
    const contents = {};
    if (output[_tMF] != null) {
        contents[_TMF] = de_TrafficMirrorFilter(output[_tMF]);
    }
    return contents;
};
const de_ModifyTrafficMirrorFilterRuleResult = (output, context) => {
    const contents = {};
    if (output[_tMFR] != null) {
        contents[_TMFR] = de_TrafficMirrorFilterRule(output[_tMFR]);
    }
    return contents;
};
const de_ModifyTrafficMirrorSessionResult = (output, context) => {
    const contents = {};
    if (output[_tMS] != null) {
        contents[_TMS] = de_TrafficMirrorSession(output[_tMS]);
    }
    return contents;
};
const de_ModifyTransitGatewayPrefixListReferenceResult = (output, context) => {
    const contents = {};
    if (output[_tGPLR] != null) {
        contents[_TGPLR] = de_TransitGatewayPrefixListReference(output[_tGPLR]);
    }
    return contents;
};
const de_ModifyTransitGatewayResult = (output, context) => {
    const contents = {};
    if (output[_tG] != null) {
        contents[_TGr] = de_TransitGateway(output[_tG]);
    }
    return contents;
};
const de_ModifyTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGVA] != null) {
        contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA]);
    }
    return contents;
};
const de_ModifyVerifiedAccessEndpointPolicyResult = (output, context) => {
    const contents = {};
    if (output[_pE] != null) {
        contents[_PE] = smithyClient.parseBoolean(output[_pE]);
    }
    if (output[_pDo] != null) {
        contents[_PD] = smithyClient.expectString(output[_pDo]);
    }
    if (output[_sSs] != null) {
        contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs]);
    }
    return contents;
};
const de_ModifyVerifiedAccessEndpointResult = (output, context) => {
    const contents = {};
    if (output[_vAE] != null) {
        contents[_VAE] = de_VerifiedAccessEndpoint(output[_vAE]);
    }
    return contents;
};
const de_ModifyVerifiedAccessGroupPolicyResult = (output, context) => {
    const contents = {};
    if (output[_pE] != null) {
        contents[_PE] = smithyClient.parseBoolean(output[_pE]);
    }
    if (output[_pDo] != null) {
        contents[_PD] = smithyClient.expectString(output[_pDo]);
    }
    if (output[_sSs] != null) {
        contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs]);
    }
    return contents;
};
const de_ModifyVerifiedAccessGroupResult = (output, context) => {
    const contents = {};
    if (output[_vAG] != null) {
        contents[_VAG] = de_VerifiedAccessGroup(output[_vAG]);
    }
    return contents;
};
const de_ModifyVerifiedAccessInstanceLoggingConfigurationResult = (output, context) => {
    const contents = {};
    if (output[_lC] != null) {
        contents[_LCo] = de_VerifiedAccessInstanceLoggingConfiguration(output[_lC]);
    }
    return contents;
};
const de_ModifyVerifiedAccessInstanceResult = (output, context) => {
    const contents = {};
    if (output[_vAI] != null) {
        contents[_VAI] = de_VerifiedAccessInstance(output[_vAI]);
    }
    return contents;
};
const de_ModifyVerifiedAccessTrustProviderResult = (output, context) => {
    const contents = {};
    if (output[_vATP] != null) {
        contents[_VATP] = de_VerifiedAccessTrustProvider(output[_vATP]);
    }
    return contents;
};
const de_ModifyVolumeResult = (output, context) => {
    const contents = {};
    if (output[_vM] != null) {
        contents[_VMol] = de_VolumeModification(output[_vM]);
    }
    return contents;
};
const de_ModifyVpcBlockPublicAccessExclusionResult = (output, context) => {
    const contents = {};
    if (output[_vBPAE] != null) {
        contents[_VBPAE] = de_VpcBlockPublicAccessExclusion(output[_vBPAE]);
    }
    return contents;
};
const de_ModifyVpcBlockPublicAccessOptionsResult = (output, context) => {
    const contents = {};
    if (output[_vBPAO] != null) {
        contents[_VBPAO] = de_VpcBlockPublicAccessOptions(output[_vBPAO]);
    }
    return contents;
};
const de_ModifyVpcEndpointConnectionNotificationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyVpcEndpointResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyVpcEndpointServiceConfigurationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyVpcEndpointServicePayerResponsibilityResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyVpcEndpointServicePermissionsResult = (output, context) => {
    const contents = {};
    if (String(output.addedPrincipalSet).trim() === "") {
        contents[_APd] = [];
    }
    else if (output[_aPS] != null && output[_aPS][_i] != null) {
        contents[_APd] = de_AddedPrincipalSet(smithyClient.getArrayIfSingleItem(output[_aPS][_i]));
    }
    if (output[_r] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyVpcPeeringConnectionOptionsResult = (output, context) => {
    const contents = {};
    if (output[_aPCO] != null) {
        contents[_APCO] = de_PeeringConnectionOptions(output[_aPCO]);
    }
    if (output[_rPCO] != null) {
        contents[_RPCO] = de_PeeringConnectionOptions(output[_rPCO]);
    }
    return contents;
};
const de_ModifyVpcTenancyResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ModifyVpnConnectionOptionsResult = (output, context) => {
    const contents = {};
    if (output[_vC] != null) {
        contents[_VC] = de_VpnConnection(output[_vC]);
    }
    return contents;
};
const de_ModifyVpnConnectionResult = (output, context) => {
    const contents = {};
    if (output[_vC] != null) {
        contents[_VC] = de_VpnConnection(output[_vC]);
    }
    return contents;
};
const de_ModifyVpnTunnelCertificateResult = (output, context) => {
    const contents = {};
    if (output[_vC] != null) {
        contents[_VC] = de_VpnConnection(output[_vC]);
    }
    return contents;
};
const de_ModifyVpnTunnelOptionsResult = (output, context) => {
    const contents = {};
    if (output[_vC] != null) {
        contents[_VC] = de_VpnConnection(output[_vC]);
    }
    return contents;
};
const de_Monitoring = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_MonitorInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instancesSet).trim() === "") {
        contents[_IMn] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_IMn] = de_InstanceMonitoringList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    return contents;
};
const de_MoveAddressToVpcResult = (output, context) => {
    const contents = {};
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_MoveByoipCidrToIpamResult = (output, context) => {
    const contents = {};
    if (output[_bC] != null) {
        contents[_BC] = de_ByoipCidr(output[_bC]);
    }
    return contents;
};
const de_MoveCapacityReservationInstancesResult = (output, context) => {
    const contents = {};
    if (output[_sCR] != null) {
        contents[_SCR] = de_CapacityReservation(output[_sCR]);
    }
    if (output[_dCR] != null) {
        contents[_DCRe] = de_CapacityReservation(output[_dCR]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    return contents;
};
const de_MovingAddressStatus = (output, context) => {
    const contents = {};
    if (output[_mSo] != null) {
        contents[_MSo] = smithyClient.expectString(output[_mSo]);
    }
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    return contents;
};
const de_MovingAddressStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MovingAddressStatus(entry);
    });
};
const de_NatGateway = (output, context) => {
    const contents = {};
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_dTel] != null) {
        contents[_DTele] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTel]));
    }
    if (output[_fCa] != null) {
        contents[_FCa] = smithyClient.expectString(output[_fCa]);
    }
    if (output[_fM] != null) {
        contents[_FM] = smithyClient.expectString(output[_fM]);
    }
    if (String(output.natGatewayAddressSet).trim() === "") {
        contents[_NGA] = [];
    }
    else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
        contents[_NGA] = de_NatGatewayAddressList(smithyClient.getArrayIfSingleItem(output[_nGAS][_i]));
    }
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (output[_pB] != null) {
        contents[_PB] = de_ProvisionedBandwidth(output[_pB]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_cTonn] != null) {
        contents[_CTo] = smithyClient.expectString(output[_cTonn]);
    }
    return contents;
};
const de_NatGatewayAddress = (output, context) => {
    const contents = {};
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_pIriv] != null) {
        contents[_PIri] = smithyClient.expectString(output[_pIriv]);
    }
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_iPsr] != null) {
        contents[_IPsr] = smithyClient.parseBoolean(output[_iPsr]);
    }
    if (output[_fM] != null) {
        contents[_FM] = smithyClient.expectString(output[_fM]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_NatGatewayAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NatGatewayAddress(entry);
    });
};
const de_NatGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NatGateway(entry);
    });
};
const de_NativeApplicationOidcOptions = (output, context) => {
    const contents = {};
    if (output[_pSKE] != null) {
        contents[_PSKE] = smithyClient.expectString(output[_pSKE]);
    }
    if (output[_is] != null) {
        contents[_I] = smithyClient.expectString(output[_is]);
    }
    if (output[_aE] != null) {
        contents[_AE] = smithyClient.expectString(output[_aE]);
    }
    if (output[_tEo] != null) {
        contents[_TEo] = smithyClient.expectString(output[_tEo]);
    }
    if (output[_uIE] != null) {
        contents[_UIE] = smithyClient.expectString(output[_uIE]);
    }
    if (output[_cIli] != null) {
        contents[_CIl] = smithyClient.expectString(output[_cIli]);
    }
    if (output[_sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_sc]);
    }
    return contents;
};
const de_NetworkAcl = (output, context) => {
    const contents = {};
    if (String(output.associationSet).trim() === "") {
        contents[_Ass] = [];
    }
    else if (output[_aSss] != null && output[_aSss][_i] != null) {
        contents[_Ass] = de_NetworkAclAssociationList(smithyClient.getArrayIfSingleItem(output[_aSss][_i]));
    }
    if (String(output.entrySet).trim() === "") {
        contents[_Ent] = [];
    }
    else if (output[_eSnt] != null && output[_eSnt][_i] != null) {
        contents[_Ent] = de_NetworkAclEntryList(smithyClient.getArrayIfSingleItem(output[_eSnt][_i]));
    }
    if (output[_def] != null) {
        contents[_IDs] = smithyClient.parseBoolean(output[_def]);
    }
    if (output[_nAI] != null) {
        contents[_NAI] = smithyClient.expectString(output[_nAI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    return contents;
};
const de_NetworkAclAssociation = (output, context) => {
    const contents = {};
    if (output[_nAAI] != null) {
        contents[_NAAI] = smithyClient.expectString(output[_nAAI]);
    }
    if (output[_nAI] != null) {
        contents[_NAI] = smithyClient.expectString(output[_nAI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    return contents;
};
const de_NetworkAclAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkAclAssociation(entry);
    });
};
const de_NetworkAclEntry = (output, context) => {
    const contents = {};
    if (output[_cB] != null) {
        contents[_CB] = smithyClient.expectString(output[_cB]);
    }
    if (output[_e] != null) {
        contents[_Eg] = smithyClient.parseBoolean(output[_e]);
    }
    if (output[_iTC] != null) {
        contents[_ITC] = de_IcmpTypeCode(output[_iTC]);
    }
    if (output[_iCB] != null) {
        contents[_ICB] = smithyClient.expectString(output[_iCB]);
    }
    if (output[_pRo] != null) {
        contents[_PR] = de_PortRange(output[_pRo]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_rA] != null) {
        contents[_RAu] = smithyClient.expectString(output[_rA]);
    }
    if (output[_rN] != null) {
        contents[_RNu] = smithyClient.strictParseInt32(output[_rN]);
    }
    return contents;
};
const de_NetworkAclEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkAclEntry(entry);
    });
};
const de_NetworkAclList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkAcl(entry);
    });
};
const de_NetworkBandwidthGbps = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseFloat(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseFloat(output[_ma]);
    }
    return contents;
};
const de_NetworkCardInfo = (output, context) => {
    const contents = {};
    if (output[_nCI] != null) {
        contents[_NCI] = smithyClient.strictParseInt32(output[_nCI]);
    }
    if (output[_nPe] != null) {
        contents[_NPe] = smithyClient.expectString(output[_nPe]);
    }
    if (output[_mNI] != null) {
        contents[_MNI] = smithyClient.strictParseInt32(output[_mNI]);
    }
    if (output[_bBIG] != null) {
        contents[_BBIG] = smithyClient.strictParseFloat(output[_bBIG]);
    }
    if (output[_pBIG] != null) {
        contents[_PBIG] = smithyClient.strictParseFloat(output[_pBIG]);
    }
    if (output[_dEQCPI] != null) {
        contents[_DEQCPI] = smithyClient.strictParseInt32(output[_dEQCPI]);
    }
    if (output[_mEQC] != null) {
        contents[_MEQC] = smithyClient.strictParseInt32(output[_mEQC]);
    }
    if (output[_mEQCPI] != null) {
        contents[_MEQCPI] = smithyClient.strictParseInt32(output[_mEQCPI]);
    }
    return contents;
};
const de_NetworkCardInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkCardInfo(entry);
    });
};
const de_NetworkInfo = (output, context) => {
    const contents = {};
    if (output[_nPe] != null) {
        contents[_NPe] = smithyClient.expectString(output[_nPe]);
    }
    if (output[_mNI] != null) {
        contents[_MNI] = smithyClient.strictParseInt32(output[_mNI]);
    }
    if (output[_mNC] != null) {
        contents[_MNC] = smithyClient.strictParseInt32(output[_mNC]);
    }
    if (output[_dNCI] != null) {
        contents[_DNCI] = smithyClient.strictParseInt32(output[_dNCI]);
    }
    if (String(output.networkCards).trim() === "") {
        contents[_NC] = [];
    }
    else if (output[_nC] != null && output[_nC][_i] != null) {
        contents[_NC] = de_NetworkCardInfoList(smithyClient.getArrayIfSingleItem(output[_nC][_i]));
    }
    if (output[_iAPI] != null) {
        contents[_IAPI] = smithyClient.strictParseInt32(output[_iAPI]);
    }
    if (output[_iAPIp] != null) {
        contents[_IAPIp] = smithyClient.strictParseInt32(output[_iAPIp]);
    }
    if (output[_iSpv] != null) {
        contents[_ISpv] = smithyClient.parseBoolean(output[_iSpv]);
    }
    if (output[_eSna] != null) {
        contents[_ESn] = smithyClient.expectString(output[_eSna]);
    }
    if (output[_eSf] != null) {
        contents[_ESf] = smithyClient.parseBoolean(output[_eSf]);
    }
    if (output[_eIf] != null) {
        contents[_EIf] = de_EfaInfo(output[_eIf]);
    }
    if (output[_eITSn] != null) {
        contents[_EITS] = smithyClient.parseBoolean(output[_eITSn]);
    }
    if (output[_eSSn] != null) {
        contents[_ESSn] = smithyClient.parseBoolean(output[_eSSn]);
    }
    if (String(output.bandwidthWeightings).trim() === "") {
        contents[_BWa] = [];
    }
    else if (output[_bWa] != null && output[_bWa][_i] != null) {
        contents[_BWa] = de_BandwidthWeightingTypeList(smithyClient.getArrayIfSingleItem(output[_bWa][_i]));
    }
    if (output[_fEQS] != null) {
        contents[_FEQS] = smithyClient.expectString(output[_fEQS]);
    }
    return contents;
};
const de_NetworkInsightsAccessScope = (output, context) => {
    const contents = {};
    if (output[_nIASI] != null) {
        contents[_NIASI] = smithyClient.expectString(output[_nIASI]);
    }
    if (output[_nIASA] != null) {
        contents[_NIASAe] = smithyClient.expectString(output[_nIASA]);
    }
    if (output[_cDre] != null) {
        contents[_CDrea] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cDre]));
    }
    if (output[_uDp] != null) {
        contents[_UDp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uDp]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_NetworkInsightsAccessScopeAnalysis = (output, context) => {
    const contents = {};
    if (output[_nIASAI] != null) {
        contents[_NIASAI] = smithyClient.expectString(output[_nIASAI]);
    }
    if (output[_nIASAA] != null) {
        contents[_NIASAA] = smithyClient.expectString(output[_nIASAA]);
    }
    if (output[_nIASI] != null) {
        contents[_NIASI] = smithyClient.expectString(output[_nIASI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_wM] != null) {
        contents[_WM] = smithyClient.expectString(output[_wM]);
    }
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_eD] != null) {
        contents[_ED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eD]));
    }
    if (output[_fFi] != null) {
        contents[_FFi] = smithyClient.expectString(output[_fFi]);
    }
    if (output[_aEC] != null) {
        contents[_AEC] = smithyClient.strictParseInt32(output[_aEC]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_NetworkInsightsAccessScopeAnalysisList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsAccessScopeAnalysis(entry);
    });
};
const de_NetworkInsightsAccessScopeContent = (output, context) => {
    const contents = {};
    if (output[_nIASI] != null) {
        contents[_NIASI] = smithyClient.expectString(output[_nIASI]);
    }
    if (String(output.matchPathSet).trim() === "") {
        contents[_MP] = [];
    }
    else if (output[_mPSa] != null && output[_mPSa][_i] != null) {
        contents[_MP] = de_AccessScopePathList(smithyClient.getArrayIfSingleItem(output[_mPSa][_i]));
    }
    if (String(output.excludePathSet).trim() === "") {
        contents[_EP] = [];
    }
    else if (output[_ePS] != null && output[_ePS][_i] != null) {
        contents[_EP] = de_AccessScopePathList(smithyClient.getArrayIfSingleItem(output[_ePS][_i]));
    }
    return contents;
};
const de_NetworkInsightsAccessScopeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsAccessScope(entry);
    });
};
const de_NetworkInsightsAnalysis = (output, context) => {
    const contents = {};
    if (output[_nIAI] != null) {
        contents[_NIAI] = smithyClient.expectString(output[_nIAI]);
    }
    if (output[_nIAA] != null) {
        contents[_NIAA] = smithyClient.expectString(output[_nIAA]);
    }
    if (output[_nIPI] != null) {
        contents[_NIPI] = smithyClient.expectString(output[_nIPI]);
    }
    if (String(output.additionalAccountSet).trim() === "") {
        contents[_AAd] = [];
    }
    else if (output[_aASd] != null && output[_aASd][_i] != null) {
        contents[_AAd] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aASd][_i]));
    }
    if (String(output.filterInArnSet).trim() === "") {
        contents[_FIA] = [];
    }
    else if (output[_fIAS] != null && output[_fIAS][_i] != null) {
        contents[_FIA] = de_ArnList(smithyClient.getArrayIfSingleItem(output[_fIAS][_i]));
    }
    if (String(output.filterOutArnSet).trim() === "") {
        contents[_FOA] = [];
    }
    else if (output[_fOAS] != null && output[_fOAS][_i] != null) {
        contents[_FOA] = de_ArnList(smithyClient.getArrayIfSingleItem(output[_fOAS][_i]));
    }
    if (output[_sD] != null) {
        contents[_SD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sD]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_wM] != null) {
        contents[_WM] = smithyClient.expectString(output[_wM]);
    }
    if (output[_nPF] != null) {
        contents[_NPF] = smithyClient.parseBoolean(output[_nPF]);
    }
    if (String(output.forwardPathComponentSet).trim() === "") {
        contents[_FPC] = [];
    }
    else if (output[_fPCS] != null && output[_fPCS][_i] != null) {
        contents[_FPC] = de_PathComponentList(smithyClient.getArrayIfSingleItem(output[_fPCS][_i]));
    }
    if (String(output.returnPathComponentSet).trim() === "") {
        contents[_RPC] = [];
    }
    else if (output[_rPCS] != null && output[_rPCS][_i] != null) {
        contents[_RPC] = de_PathComponentList(smithyClient.getArrayIfSingleItem(output[_rPCS][_i]));
    }
    if (String(output.explanationSet).trim() === "") {
        contents[_Ex] = [];
    }
    else if (output[_eSx] != null && output[_eSx][_i] != null) {
        contents[_Ex] = de_ExplanationList(smithyClient.getArrayIfSingleItem(output[_eSx][_i]));
    }
    if (String(output.alternatePathHintSet).trim() === "") {
        contents[_APH] = [];
    }
    else if (output[_aPHS] != null && output[_aPHS][_i] != null) {
        contents[_APH] = de_AlternatePathHintList(smithyClient.getArrayIfSingleItem(output[_aPHS][_i]));
    }
    if (String(output.suggestedAccountSet).trim() === "") {
        contents[_SAu] = [];
    }
    else if (output[_sASu] != null && output[_sASu][_i] != null) {
        contents[_SAu] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sASu][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_NetworkInsightsAnalysisList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsAnalysis(entry);
    });
};
const de_NetworkInsightsPath = (output, context) => {
    const contents = {};
    if (output[_nIPI] != null) {
        contents[_NIPI] = smithyClient.expectString(output[_nIPI]);
    }
    if (output[_nIPA] != null) {
        contents[_NIPA] = smithyClient.expectString(output[_nIPA]);
    }
    if (output[_cDre] != null) {
        contents[_CDrea] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cDre]));
    }
    if (output[_s] != null) {
        contents[_S] = smithyClient.expectString(output[_s]);
    }
    if (output[_d] != null) {
        contents[_D] = smithyClient.expectString(output[_d]);
    }
    if (output[_sA] != null) {
        contents[_SAour] = smithyClient.expectString(output[_sA]);
    }
    if (output[_dA] != null) {
        contents[_DAesti] = smithyClient.expectString(output[_dA]);
    }
    if (output[_sIo] != null) {
        contents[_SIo] = smithyClient.expectString(output[_sIo]);
    }
    if (output[_dIes] != null) {
        contents[_DIest] = smithyClient.expectString(output[_dIes]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_dPes] != null) {
        contents[_DPe] = smithyClient.strictParseInt32(output[_dPes]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_fAS] != null) {
        contents[_FAS] = de_PathFilter(output[_fAS]);
    }
    if (output[_fAD] != null) {
        contents[_FAD] = de_PathFilter(output[_fAD]);
    }
    return contents;
};
const de_NetworkInsightsPathList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInsightsPath(entry);
    });
};
const de_NetworkInterface = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_NetworkInterfaceAssociation(output[_ass]);
    }
    if (output[_at] != null) {
        contents[_Att] = de_NetworkInterfaceAttachment(output[_at]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_cTC] != null) {
        contents[_CTC] = de_ConnectionTrackingConfiguration(output[_cTC]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (output[_iTnt] != null) {
        contents[_ITn] = smithyClient.expectString(output[_iTnt]);
    }
    if (String(output.ipv6AddressesSet).trim() === "") {
        contents[_IA] = [];
    }
    else if (output[_iASp] != null && output[_iASp][_i] != null) {
        contents[_IA] = de_NetworkInterfaceIpv6AddressesList(smithyClient.getArrayIfSingleItem(output[_iASp][_i]));
    }
    if (output[_mAa] != null) {
        contents[_MAa] = smithyClient.expectString(output[_mAa]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (output[_pDNu] != null) {
        contents[_PDNub] = smithyClient.expectString(output[_pDNu]);
    }
    if (output[_pIDNO] != null) {
        contents[_PIDNO] = de_PublicIpDnsNameOptions(output[_pIDNO]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    if (String(output.privateIpAddressesSet).trim() === "") {
        contents[_PIA] = [];
    }
    else if (output[_pIAS] != null && output[_pIAS][_i] != null) {
        contents[_PIA] = de_NetworkInterfacePrivateIpAddressList(smithyClient.getArrayIfSingleItem(output[_pIAS][_i]));
    }
    if (String(output.ipv4PrefixSet).trim() === "") {
        contents[_IPp] = [];
    }
    else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
        contents[_IPp] = de_Ipv4PrefixesList(smithyClient.getArrayIfSingleItem(output[_iPSpv][_i]));
    }
    if (String(output.ipv6PrefixSet).trim() === "") {
        contents[_IP] = [];
    }
    else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
        contents[_IP] = de_Ipv6PrefixesList(smithyClient.getArrayIfSingleItem(output[_iPSpvr][_i]));
    }
    if (output[_rIeq] != null) {
        contents[_RIeq] = smithyClient.expectString(output[_rIeq]);
    }
    if (output[_rMe] != null) {
        contents[_RMeq] = smithyClient.parseBoolean(output[_rMe]);
    }
    if (output[_sDC] != null) {
        contents[_SDC] = smithyClient.parseBoolean(output[_sDC]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_TSag] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_TSag] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_dAIT] != null) {
        contents[_DAIT] = smithyClient.parseBoolean(output[_dAIT]);
    }
    if (output[_iN] != null) {
        contents[_IN] = smithyClient.parseBoolean(output[_iN]);
    }
    if (output[_iApv] != null) {
        contents[_IApv] = smithyClient.expectString(output[_iApv]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    if (String(output.associatedSubnetSet).trim() === "") {
        contents[_ASsso] = [];
    }
    else if (output[_aSSs] != null && output[_aSSs][_i] != null) {
        contents[_ASsso] = de_AssociatedSubnetList(smithyClient.getArrayIfSingleItem(output[_aSSs][_i]));
    }
    return contents;
};
const de_NetworkInterfaceAssociation = (output, context) => {
    const contents = {};
    if (output[_aI] != null) {
        contents[_AIl] = smithyClient.expectString(output[_aI]);
    }
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_iOIp] != null) {
        contents[_IOI] = smithyClient.expectString(output[_iOIp]);
    }
    if (output[_pDNu] != null) {
        contents[_PDNub] = smithyClient.expectString(output[_pDNu]);
    }
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    if (output[_cOI] != null) {
        contents[_COI] = smithyClient.expectString(output[_cOI]);
    }
    if (output[_cI] != null) {
        contents[_CIa] = smithyClient.expectString(output[_cI]);
    }
    return contents;
};
const de_NetworkInterfaceAttachment = (output, context) => {
    const contents = {};
    if (output[_aTt] != null) {
        contents[_ATtt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_aTt]));
    }
    if (output[_aIt] != null) {
        contents[_AIt] = smithyClient.expectString(output[_aIt]);
    }
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_dIe] != null) {
        contents[_DIev] = smithyClient.strictParseInt32(output[_dIe]);
    }
    if (output[_nCI] != null) {
        contents[_NCI] = smithyClient.strictParseInt32(output[_nCI]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iOIn] != null) {
        contents[_IOIn] = smithyClient.expectString(output[_iOIn]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_eSS] != null) {
        contents[_ESS] = de_AttachmentEnaSrdSpecification(output[_eSS]);
    }
    if (output[_eQC] != null) {
        contents[_EQC] = smithyClient.strictParseInt32(output[_eQC]);
    }
    return contents;
};
const de_NetworkInterfaceCount = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseInt32(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseInt32(output[_ma]);
    }
    return contents;
};
const de_NetworkInterfaceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_NetworkInterfaceIpv6Address = (output, context) => {
    const contents = {};
    if (output[_iApv] != null) {
        contents[_IApv] = smithyClient.expectString(output[_iApv]);
    }
    if (output[_pIDN] != null) {
        contents[_PIDN] = smithyClient.expectString(output[_pIDN]);
    }
    if (output[_iPI] != null) {
        contents[_IPIs] = smithyClient.parseBoolean(output[_iPI]);
    }
    return contents;
};
const de_NetworkInterfaceIpv6AddressesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterfaceIpv6Address(entry);
    });
};
const de_NetworkInterfaceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterface(entry);
    });
};
const de_NetworkInterfacePermission = (output, context) => {
    const contents = {};
    if (output[_nIPIe] != null) {
        contents[_NIPIe] = smithyClient.expectString(output[_nIPIe]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_aAI] != null) {
        contents[_AAI] = smithyClient.expectString(output[_aAI]);
    }
    if (output[_aSw] != null) {
        contents[_ASw] = smithyClient.expectString(output[_aSw]);
    }
    if (output[_per] != null) {
        contents[_Pe] = smithyClient.expectString(output[_per]);
    }
    if (output[_pSe] != null) {
        contents[_PSer] = de_NetworkInterfacePermissionState(output[_pSe]);
    }
    return contents;
};
const de_NetworkInterfacePermissionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterfacePermission(entry);
    });
};
const de_NetworkInterfacePermissionState = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    return contents;
};
const de_NetworkInterfacePrivateIpAddress = (output, context) => {
    const contents = {};
    if (output[_ass] != null) {
        contents[_Asso] = de_NetworkInterfaceAssociation(output[_ass]);
    }
    if (output[_prim] != null) {
        contents[_Prim] = smithyClient.parseBoolean(output[_prim]);
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    return contents;
};
const de_NetworkInterfacePrivateIpAddressList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NetworkInterfacePrivateIpAddress(entry);
    });
};
const de_NetworkNodesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_NeuronDeviceCoreInfo = (output, context) => {
    const contents = {};
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_ve] != null) {
        contents[_V] = smithyClient.strictParseInt32(output[_ve]);
    }
    return contents;
};
const de_NeuronDeviceInfo = (output, context) => {
    const contents = {};
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_cIor] != null) {
        contents[_CIor] = de_NeuronDeviceCoreInfo(output[_cIor]);
    }
    if (output[_mIe] != null) {
        contents[_MIe] = de_NeuronDeviceMemoryInfo(output[_mIe]);
    }
    return contents;
};
const de_NeuronDeviceInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NeuronDeviceInfo(entry);
    });
};
const de_NeuronDeviceMemoryInfo = (output, context) => {
    const contents = {};
    if (output[_sIMB] != null) {
        contents[_SIMB] = smithyClient.strictParseInt32(output[_sIMB]);
    }
    return contents;
};
const de_NeuronInfo = (output, context) => {
    const contents = {};
    if (String(output.neuronDevices).trim() === "") {
        contents[_NDe] = [];
    }
    else if (output[_nDe] != null && output[_nDe][_i] != null) {
        contents[_NDe] = de_NeuronDeviceInfoList(smithyClient.getArrayIfSingleItem(output[_nDe][_i]));
    }
    if (output[_tNDMIMB] != null) {
        contents[_TNDMIMB] = smithyClient.strictParseInt32(output[_tNDMIMB]);
    }
    return contents;
};
const de_NitroTpmInfo = (output, context) => {
    const contents = {};
    if (String(output.supportedVersions).trim() === "") {
        contents[_SVu] = [];
    }
    else if (output[_sVu] != null && output[_sVu][_i] != null) {
        contents[_SVu] = de_NitroTpmSupportedVersionsList(smithyClient.getArrayIfSingleItem(output[_sVu][_i]));
    }
    return contents;
};
const de_NitroTpmSupportedVersionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_OccurrenceDaySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.strictParseInt32(entry);
    });
};
const de_OidcOptions = (output, context) => {
    const contents = {};
    if (output[_is] != null) {
        contents[_I] = smithyClient.expectString(output[_is]);
    }
    if (output[_aE] != null) {
        contents[_AE] = smithyClient.expectString(output[_aE]);
    }
    if (output[_tEo] != null) {
        contents[_TEo] = smithyClient.expectString(output[_tEo]);
    }
    if (output[_uIE] != null) {
        contents[_UIE] = smithyClient.expectString(output[_uIE]);
    }
    if (output[_cIli] != null) {
        contents[_CIl] = smithyClient.expectString(output[_cIli]);
    }
    if (output[_cSl] != null) {
        contents[_CSl] = smithyClient.expectString(output[_cSl]);
    }
    if (output[_sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_sc]);
    }
    return contents;
};
const de_OnDemandOptions = (output, context) => {
    const contents = {};
    if (output[_aSl] != null) {
        contents[_AS] = smithyClient.expectString(output[_aSl]);
    }
    if (output[_cRO] != null) {
        contents[_CRO] = de_CapacityReservationOptions(output[_cRO]);
    }
    if (output[_sITi] != null) {
        contents[_SITi] = smithyClient.parseBoolean(output[_sITi]);
    }
    if (output[_sAZ] != null) {
        contents[_SAZ] = smithyClient.parseBoolean(output[_sAZ]);
    }
    if (output[_mTC] != null) {
        contents[_MTC] = smithyClient.strictParseInt32(output[_mTC]);
    }
    if (output[_mTP] != null) {
        contents[_MTP] = smithyClient.expectString(output[_mTP]);
    }
    return contents;
};
const de_OperatorResponse = (output, context) => {
    const contents = {};
    if (output[_mana] != null) {
        contents[_Mana] = smithyClient.parseBoolean(output[_mana]);
    }
    if (output[_p] != null) {
        contents[_Prin] = smithyClient.expectString(output[_p]);
    }
    return contents;
};
const de_OutpostLag = (output, context) => {
    const contents = {};
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_oLI] != null) {
        contents[_OLI] = smithyClient.expectString(output[_oLI]);
    }
    if (String(output.localGatewayVirtualInterfaceIdSet).trim() === "") {
        contents[_LGVIIo] = [];
    }
    else if (output[_lGVIIS] != null && output[_lGVIIS][_i] != null) {
        contents[_LGVIIo] = de_LocalGatewayVirtualInterfaceIdSet(smithyClient.getArrayIfSingleItem(output[_lGVIIS][_i]));
    }
    if (String(output.serviceLinkVirtualInterfaceIdSet).trim() === "") {
        contents[_SLVII] = [];
    }
    else if (output[_sLVIIS] != null && output[_sLVIIS][_i] != null) {
        contents[_SLVII] = de_ServiceLinkVirtualInterfaceIdSet(smithyClient.getArrayIfSingleItem(output[_sLVIIS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_OutpostLagSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutpostLag(entry);
    });
};
const de_PacketHeaderStatement = (output, context) => {
    const contents = {};
    if (String(output.sourceAddressSet).trim() === "") {
        contents[_SAo] = [];
    }
    else if (output[_sAS] != null && output[_sAS][_i] != null) {
        contents[_SAo] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sAS][_i]));
    }
    if (String(output.destinationAddressSet).trim() === "") {
        contents[_DAes] = [];
    }
    else if (output[_dAS] != null && output[_dAS][_i] != null) {
        contents[_DAes] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dAS][_i]));
    }
    if (String(output.sourcePortSet).trim() === "") {
        contents[_SPo] = [];
    }
    else if (output[_sPS] != null && output[_sPS][_i] != null) {
        contents[_SPo] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sPS][_i]));
    }
    if (String(output.destinationPortSet).trim() === "") {
        contents[_DPes] = [];
    }
    else if (output[_dPS] != null && output[_dPS][_i] != null) {
        contents[_DPes] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dPS][_i]));
    }
    if (String(output.sourcePrefixListSet).trim() === "") {
        contents[_SPL] = [];
    }
    else if (output[_sPLS] != null && output[_sPLS][_i] != null) {
        contents[_SPL] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sPLS][_i]));
    }
    if (String(output.destinationPrefixListSet).trim() === "") {
        contents[_DPLe] = [];
    }
    else if (output[_dPLS] != null && output[_dPLS][_i] != null) {
        contents[_DPLe] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dPLS][_i]));
    }
    if (String(output.protocolSet).trim() === "") {
        contents[_Pro] = [];
    }
    else if (output[_pSro] != null && output[_pSro][_i] != null) {
        contents[_Pro] = de_ProtocolList(smithyClient.getArrayIfSingleItem(output[_pSro][_i]));
    }
    return contents;
};
const de_PathComponent = (output, context) => {
    const contents = {};
    if (output[_sNe] != null) {
        contents[_SNeq] = smithyClient.strictParseInt32(output[_sNe]);
    }
    if (output[_aRc] != null) {
        contents[_ARcl] = de_AnalysisAclRule(output[_aRc]);
    }
    if (output[_aTtt] != null) {
        contents[_ATtta] = de_AnalysisComponent(output[_aTtt]);
    }
    if (output[_c] != null) {
        contents[_Com] = de_AnalysisComponent(output[_c]);
    }
    if (output[_dV] != null) {
        contents[_DVest] = de_AnalysisComponent(output[_dV]);
    }
    if (output[_oH] != null) {
        contents[_OH] = de_AnalysisPacketHeader(output[_oH]);
    }
    if (output[_iHn] != null) {
        contents[_IHn] = de_AnalysisPacketHeader(output[_iHn]);
    }
    if (output[_rTR] != null) {
        contents[_RTR] = de_AnalysisRouteTableRoute(output[_rTR]);
    }
    if (output[_sGR] != null) {
        contents[_SGRe] = de_AnalysisSecurityGroupRule(output[_sGR]);
    }
    if (output[_sV] != null) {
        contents[_SVo] = de_AnalysisComponent(output[_sV]);
    }
    if (output[_su] != null) {
        contents[_Su] = de_AnalysisComponent(output[_su]);
    }
    if (output[_vp] != null) {
        contents[_Vp] = de_AnalysisComponent(output[_vp]);
    }
    if (String(output.additionalDetailSet).trim() === "") {
        contents[_ADd] = [];
    }
    else if (output[_aDS] != null && output[_aDS][_i] != null) {
        contents[_ADd] = de_AdditionalDetailList(smithyClient.getArrayIfSingleItem(output[_aDS][_i]));
    }
    if (output[_tG] != null) {
        contents[_TGr] = de_AnalysisComponent(output[_tG]);
    }
    if (output[_tGRTR] != null) {
        contents[_TGRTR] = de_TransitGatewayRouteTableRoute(output[_tGRTR]);
    }
    if (String(output.explanationSet).trim() === "") {
        contents[_Ex] = [];
    }
    else if (output[_eSx] != null && output[_eSx][_i] != null) {
        contents[_Ex] = de_ExplanationList(smithyClient.getArrayIfSingleItem(output[_eSx][_i]));
    }
    if (output[_eLBL] != null) {
        contents[_ELBL] = de_AnalysisComponent(output[_eLBL]);
    }
    if (output[_fSR] != null) {
        contents[_FSRi] = de_FirewallStatelessRule(output[_fSR]);
    }
    if (output[_fSRi] != null) {
        contents[_FSRir] = de_FirewallStatefulRule(output[_fSRi]);
    }
    if (output[_sN] != null) {
        contents[_SNe] = smithyClient.expectString(output[_sN]);
    }
    return contents;
};
const de_PathComponentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PathComponent(entry);
    });
};
const de_PathFilter = (output, context) => {
    const contents = {};
    if (output[_sAo] != null) {
        contents[_SAou] = smithyClient.expectString(output[_sAo]);
    }
    if (output[_sPR] != null) {
        contents[_SPR] = de_FilterPortRange(output[_sPR]);
    }
    if (output[_dAe] != null) {
        contents[_DAest] = smithyClient.expectString(output[_dAe]);
    }
    if (output[_dPR] != null) {
        contents[_DPR] = de_FilterPortRange(output[_dPR]);
    }
    return contents;
};
const de_PathStatement = (output, context) => {
    const contents = {};
    if (output[_pHS] != null) {
        contents[_PHS] = de_PacketHeaderStatement(output[_pHS]);
    }
    if (output[_rSeso] != null) {
        contents[_RSe] = de_ResourceStatement(output[_rSeso]);
    }
    return contents;
};
const de_PciId = (output, context) => {
    const contents = {};
    if (output[_DIevi] != null) {
        contents[_DIevi] = smithyClient.expectString(output[_DIevi]);
    }
    if (output[_VIe] != null) {
        contents[_VIe] = smithyClient.expectString(output[_VIe]);
    }
    if (output[_SIubs] != null) {
        contents[_SIubs] = smithyClient.expectString(output[_SIubs]);
    }
    if (output[_SVI] != null) {
        contents[_SVI] = smithyClient.expectString(output[_SVI]);
    }
    return contents;
};
const de_PeeringAttachmentStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_PeeringConnectionOptions = (output, context) => {
    const contents = {};
    if (output[_aDRFRV] != null) {
        contents[_ADRFRV] = smithyClient.parseBoolean(output[_aDRFRV]);
    }
    if (output[_aEFLCLTRV] != null) {
        contents[_AEFLCLTRV] = smithyClient.parseBoolean(output[_aEFLCLTRV]);
    }
    if (output[_aEFLVTRCL] != null) {
        contents[_AEFLVTRCL] = smithyClient.parseBoolean(output[_aEFLVTRCL]);
    }
    return contents;
};
const de_PeeringTgwInfo = (output, context) => {
    const contents = {};
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_cNIo] != null) {
        contents[_CNIor] = smithyClient.expectString(output[_cNIo]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_re] != null) {
        contents[_Regi] = smithyClient.expectString(output[_re]);
    }
    return contents;
};
const de_PerformanceFactorReference = (output, context) => {
    const contents = {};
    if (output[_iF] != null) {
        contents[_IF] = smithyClient.expectString(output[_iF]);
    }
    return contents;
};
const de_PerformanceFactorReferenceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PerformanceFactorReference(entry);
    });
};
const de_Phase1DHGroupNumbersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase1DHGroupNumbersListValue(entry);
    });
};
const de_Phase1DHGroupNumbersListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.strictParseInt32(output[_v]);
    }
    return contents;
};
const de_Phase1EncryptionAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase1EncryptionAlgorithmsListValue(entry);
    });
};
const de_Phase1EncryptionAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_Phase1IntegrityAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase1IntegrityAlgorithmsListValue(entry);
    });
};
const de_Phase1IntegrityAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_Phase2DHGroupNumbersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase2DHGroupNumbersListValue(entry);
    });
};
const de_Phase2DHGroupNumbersListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.strictParseInt32(output[_v]);
    }
    return contents;
};
const de_Phase2EncryptionAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase2EncryptionAlgorithmsListValue(entry);
    });
};
const de_Phase2EncryptionAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_Phase2IntegrityAlgorithmsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase2IntegrityAlgorithmsListValue(entry);
    });
};
const de_Phase2IntegrityAlgorithmsListValue = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_Placement = (output, context) => {
    const contents = {};
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_af] != null) {
        contents[_Af] = smithyClient.expectString(output[_af]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_pN] != null) {
        contents[_PN] = smithyClient.strictParseInt32(output[_pN]);
    }
    if (output[_hI] != null) {
        contents[_HIo] = smithyClient.expectString(output[_hI]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    if (output[_sDp] != null) {
        contents[_SDp] = smithyClient.expectString(output[_sDp]);
    }
    if (output[_hRGA] != null) {
        contents[_HRGA] = smithyClient.expectString(output[_hRGA]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    return contents;
};
const de_PlacementGroup = (output, context) => {
    const contents = {};
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_str] != null) {
        contents[_Str] = smithyClient.expectString(output[_str]);
    }
    if (output[_pCa] != null) {
        contents[_PCa] = smithyClient.strictParseInt32(output[_pCa]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_gA] != null) {
        contents[_GA] = smithyClient.expectString(output[_gA]);
    }
    if (output[_sLp] != null) {
        contents[_SLp] = smithyClient.expectString(output[_sLp]);
    }
    return contents;
};
const de_PlacementGroupInfo = (output, context) => {
    const contents = {};
    if (String(output.supportedStrategies).trim() === "") {
        contents[_SSu] = [];
    }
    else if (output[_sSup] != null && output[_sSup][_i] != null) {
        contents[_SSu] = de_PlacementGroupStrategyList(smithyClient.getArrayIfSingleItem(output[_sSup][_i]));
    }
    return contents;
};
const de_PlacementGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlacementGroup(entry);
    });
};
const de_PlacementGroupStrategyList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_PlacementResponse = (output, context) => {
    const contents = {};
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    return contents;
};
const de_PoolCidrBlock = (output, context) => {
    const contents = {};
    if (output[_pCB] != null) {
        contents[_C] = smithyClient.expectString(output[_pCB]);
    }
    return contents;
};
const de_PoolCidrBlocksSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PoolCidrBlock(entry);
    });
};
const de_PortRange = (output, context) => {
    const contents = {};
    if (output[_fr] != null) {
        contents[_Fr] = smithyClient.strictParseInt32(output[_fr]);
    }
    if (output[_to] != null) {
        contents[_To] = smithyClient.strictParseInt32(output[_to]);
    }
    return contents;
};
const de_PortRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PortRange(entry);
    });
};
const de_PrefixList = (output, context) => {
    const contents = {};
    if (String(output.cidrSet).trim() === "") {
        contents[_Ci] = [];
    }
    else if (output[_cS] != null && output[_cS][_i] != null) {
        contents[_Ci] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_cS][_i]));
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_pLN] != null) {
        contents[_PLN] = smithyClient.expectString(output[_pLN]);
    }
    return contents;
};
const de_PrefixListAssociation = (output, context) => {
    const contents = {};
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rO] != null) {
        contents[_ROe] = smithyClient.expectString(output[_rO]);
    }
    return contents;
};
const de_PrefixListAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixListAssociation(entry);
    });
};
const de_PrefixListEntry = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    return contents;
};
const de_PrefixListEntrySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixListEntry(entry);
    });
};
const de_PrefixListId = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    return contents;
};
const de_PrefixListIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixListId(entry);
    });
};
const de_PrefixListIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_PrefixListSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrefixList(entry);
    });
};
const de_PriceSchedule = (output, context) => {
    const contents = {};
    if (output[_act] != null) {
        contents[_Act] = smithyClient.parseBoolean(output[_act]);
    }
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_pric] != null) {
        contents[_Pric] = smithyClient.strictParseFloat(output[_pric]);
    }
    if (output[_te] != null) {
        contents[_Ter] = smithyClient.strictParseLong(output[_te]);
    }
    return contents;
};
const de_PriceScheduleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PriceSchedule(entry);
    });
};
const de_PricingDetail = (output, context) => {
    const contents = {};
    if (output[_cou] != null) {
        contents[_Cou] = smithyClient.strictParseInt32(output[_cou]);
    }
    if (output[_pric] != null) {
        contents[_Pric] = smithyClient.strictParseFloat(output[_pric]);
    }
    return contents;
};
const de_PricingDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PricingDetail(entry);
    });
};
const de_PrincipalIdFormat = (output, context) => {
    const contents = {};
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    if (String(output.statusSet).trim() === "") {
        contents[_Status] = [];
    }
    else if (output[_sSt] != null && output[_sSt][_i] != null) {
        contents[_Status] = de_IdFormatList(smithyClient.getArrayIfSingleItem(output[_sSt][_i]));
    }
    return contents;
};
const de_PrincipalIdFormatList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrincipalIdFormat(entry);
    });
};
const de_PrivateDnsDetails = (output, context) => {
    const contents = {};
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    return contents;
};
const de_PrivateDnsDetailsSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrivateDnsDetails(entry);
    });
};
const de_PrivateDnsNameConfiguration = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    return contents;
};
const de_PrivateDnsNameOptionsOnLaunch = (output, context) => {
    const contents = {};
    if (output[_hTo] != null) {
        contents[_HTo] = smithyClient.expectString(output[_hTo]);
    }
    if (output[_eRNDAR] != null) {
        contents[_ERNDAR] = smithyClient.parseBoolean(output[_eRNDAR]);
    }
    if (output[_eRNDAAAAR] != null) {
        contents[_ERNDAAAAR] = smithyClient.parseBoolean(output[_eRNDAAAAR]);
    }
    return contents;
};
const de_PrivateDnsNameOptionsResponse = (output, context) => {
    const contents = {};
    if (output[_hTo] != null) {
        contents[_HTo] = smithyClient.expectString(output[_hTo]);
    }
    if (output[_eRNDAR] != null) {
        contents[_ERNDAR] = smithyClient.parseBoolean(output[_eRNDAR]);
    }
    if (output[_eRNDAAAAR] != null) {
        contents[_ERNDAAAAR] = smithyClient.parseBoolean(output[_eRNDAAAAR]);
    }
    return contents;
};
const de_PrivateIpAddressSpecification = (output, context) => {
    const contents = {};
    if (output[_prim] != null) {
        contents[_Prim] = smithyClient.parseBoolean(output[_prim]);
    }
    if (output[_pIAr] != null) {
        contents[_PIAr] = smithyClient.expectString(output[_pIAr]);
    }
    return contents;
};
const de_PrivateIpAddressSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PrivateIpAddressSpecification(entry);
    });
};
const de_ProcessorInfo = (output, context) => {
    const contents = {};
    if (String(output.supportedArchitectures).trim() === "") {
        contents[_SAup] = [];
    }
    else if (output[_sAu] != null && output[_sAu][_i] != null) {
        contents[_SAup] = de_ArchitectureTypeList(smithyClient.getArrayIfSingleItem(output[_sAu][_i]));
    }
    if (output[_sCSIG] != null) {
        contents[_SCSIG] = smithyClient.strictParseFloat(output[_sCSIG]);
    }
    if (String(output.supportedFeatures).trim() === "") {
        contents[_SF] = [];
    }
    else if (output[_sF] != null && output[_sF][_i] != null) {
        contents[_SF] = de_SupportedAdditionalProcessorFeatureList(smithyClient.getArrayIfSingleItem(output[_sF][_i]));
    }
    if (output[_man] != null) {
        contents[_Man] = smithyClient.expectString(output[_man]);
    }
    return contents;
};
const de_ProductCode = (output, context) => {
    const contents = {};
    if (output[_pCr] != null) {
        contents[_PCIr] = smithyClient.expectString(output[_pCr]);
    }
    if (output[_ty] != null) {
        contents[_PCT] = smithyClient.expectString(output[_ty]);
    }
    return contents;
};
const de_ProductCodeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductCode(entry);
    });
};
const de_PropagatingVgw = (output, context) => {
    const contents = {};
    if (output[_gI] != null) {
        contents[_GI] = smithyClient.expectString(output[_gI]);
    }
    return contents;
};
const de_PropagatingVgwList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PropagatingVgw(entry);
    });
};
const de_ProtocolIntList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.strictParseInt32(entry);
    });
};
const de_ProtocolList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ProvisionByoipCidrResult = (output, context) => {
    const contents = {};
    if (output[_bC] != null) {
        contents[_BC] = de_ByoipCidr(output[_bC]);
    }
    return contents;
};
const de_ProvisionedBandwidth = (output, context) => {
    const contents = {};
    if (output[_pTr] != null) {
        contents[_PTro] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_pTr]));
    }
    if (output[_prov] != null) {
        contents[_Prov] = smithyClient.expectString(output[_prov]);
    }
    if (output[_rTeq] != null) {
        contents[_RTeq] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rTeq]));
    }
    if (output[_req] != null) {
        contents[_Req] = smithyClient.expectString(output[_req]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_ProvisionIpamByoasnResult = (output, context) => {
    const contents = {};
    if (output[_b] != null) {
        contents[_Byo] = de_Byoasn(output[_b]);
    }
    return contents;
};
const de_ProvisionIpamPoolCidrResult = (output, context) => {
    const contents = {};
    if (output[_iPC] != null) {
        contents[_IPCpa] = de_IpamPoolCidr(output[_iPC]);
    }
    return contents;
};
const de_ProvisionPublicIpv4PoolCidrResult = (output, context) => {
    const contents = {};
    if (output[_pIo] != null) {
        contents[_PIo] = smithyClient.expectString(output[_pIo]);
    }
    if (output[_pAR] != null) {
        contents[_PAR] = de_PublicIpv4PoolRange(output[_pAR]);
    }
    return contents;
};
const de_PtrUpdateStatus = (output, context) => {
    const contents = {};
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_rea] != null) {
        contents[_Rea] = smithyClient.expectString(output[_rea]);
    }
    return contents;
};
const de_PublicIpDnsNameOptions = (output, context) => {
    const contents = {};
    if (output[_dHT] != null) {
        contents[_DHT] = smithyClient.expectString(output[_dHT]);
    }
    if (output[_pIDNu] != null) {
        contents[_PIDNu] = smithyClient.expectString(output[_pIDNu]);
    }
    if (output[_pIDN] != null) {
        contents[_PIDN] = smithyClient.expectString(output[_pIDN]);
    }
    if (output[_pDSDN] != null) {
        contents[_PDSDN] = smithyClient.expectString(output[_pDSDN]);
    }
    return contents;
};
const de_PublicIpv4Pool = (output, context) => {
    const contents = {};
    if (output[_pIo] != null) {
        contents[_PIo] = smithyClient.expectString(output[_pIo]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.poolAddressRangeSet).trim() === "") {
        contents[_PARo] = [];
    }
    else if (output[_pARS] != null && output[_pARS][_i] != null) {
        contents[_PARo] = de_PublicIpv4PoolRangeSet(smithyClient.getArrayIfSingleItem(output[_pARS][_i]));
    }
    if (output[_tACo] != null) {
        contents[_TACo] = smithyClient.strictParseInt32(output[_tACo]);
    }
    if (output[_tAAC] != null) {
        contents[_TAAC] = smithyClient.strictParseInt32(output[_tAAC]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_PublicIpv4PoolRange = (output, context) => {
    const contents = {};
    if (output[_fAi] != null) {
        contents[_FAi] = smithyClient.expectString(output[_fAi]);
    }
    if (output[_lAa] != null) {
        contents[_LAa] = smithyClient.expectString(output[_lAa]);
    }
    if (output[_aCd] != null) {
        contents[_ACd] = smithyClient.strictParseInt32(output[_aCd]);
    }
    if (output[_aAC] != null) {
        contents[_AACv] = smithyClient.strictParseInt32(output[_aAC]);
    }
    return contents;
};
const de_PublicIpv4PoolRangeSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PublicIpv4PoolRange(entry);
    });
};
const de_PublicIpv4PoolSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PublicIpv4Pool(entry);
    });
};
const de_Purchase = (output, context) => {
    const contents = {};
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_du] != null) {
        contents[_Du] = smithyClient.strictParseInt32(output[_du]);
    }
    if (String(output.hostIdSet).trim() === "") {
        contents[_HIS] = [];
    }
    else if (output[_hIS] != null && output[_hIS][_i] != null) {
        contents[_HIS] = de_ResponseHostIdSet(smithyClient.getArrayIfSingleItem(output[_hIS][_i]));
    }
    if (output[_hRI] != null) {
        contents[_HRI] = smithyClient.expectString(output[_hRI]);
    }
    if (output[_hPo] != null) {
        contents[_HPo] = smithyClient.expectString(output[_hPo]);
    }
    if (output[_iF] != null) {
        contents[_IF] = smithyClient.expectString(output[_iF]);
    }
    if (output[_pO] != null) {
        contents[_PO] = smithyClient.expectString(output[_pO]);
    }
    if (output[_uP] != null) {
        contents[_UPp] = smithyClient.expectString(output[_uP]);
    }
    return contents;
};
const de_PurchaseCapacityBlockExtensionResult = (output, context) => {
    const contents = {};
    if (String(output.capacityBlockExtensionSet).trim() === "") {
        contents[_CBE] = [];
    }
    else if (output[_cBESa] != null && output[_cBESa][_i] != null) {
        contents[_CBE] = de_CapacityBlockExtensionSet(smithyClient.getArrayIfSingleItem(output[_cBESa][_i]));
    }
    return contents;
};
const de_PurchaseCapacityBlockResult = (output, context) => {
    const contents = {};
    if (output[_cR] != null) {
        contents[_CRapa] = de_CapacityReservation(output[_cR]);
    }
    if (String(output.capacityBlockSet).trim() === "") {
        contents[_CBa] = [];
    }
    else if (output[_cBS] != null && output[_cBS][_i] != null) {
        contents[_CBa] = de_CapacityBlockSet(smithyClient.getArrayIfSingleItem(output[_cBS][_i]));
    }
    return contents;
};
const de_PurchasedScheduledInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledInstance(entry);
    });
};
const de_PurchaseHostReservationResult = (output, context) => {
    const contents = {};
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (String(output.purchase).trim() === "") {
        contents[_Pur] = [];
    }
    else if (output[_pur] != null && output[_pur][_i] != null) {
        contents[_Pur] = de_PurchaseSet(smithyClient.getArrayIfSingleItem(output[_pur][_i]));
    }
    if (output[_tHP] != null) {
        contents[_THP] = smithyClient.expectString(output[_tHP]);
    }
    if (output[_tUP] != null) {
        contents[_TUP] = smithyClient.expectString(output[_tUP]);
    }
    return contents;
};
const de_PurchaseReservedInstancesOfferingResult = (output, context) => {
    const contents = {};
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    return contents;
};
const de_PurchaseScheduledInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.scheduledInstanceSet).trim() === "") {
        contents[_SIS] = [];
    }
    else if (output[_sIS] != null && output[_sIS][_i] != null) {
        contents[_SIS] = de_PurchasedScheduledInstanceSet(smithyClient.getArrayIfSingleItem(output[_sIS][_i]));
    }
    return contents;
};
const de_PurchaseSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Purchase(entry);
    });
};
const de_RecurringCharge = (output, context) => {
    const contents = {};
    if (output[_am] != null) {
        contents[_Am] = smithyClient.strictParseFloat(output[_am]);
    }
    if (output[_fre] != null) {
        contents[_Fre] = smithyClient.expectString(output[_fre]);
    }
    return contents;
};
const de_RecurringChargesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RecurringCharge(entry);
    });
};
const de_ReferencedSecurityGroup = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_pSee] != null) {
        contents[_PSe] = smithyClient.expectString(output[_pSee]);
    }
    if (output[_uI] != null) {
        contents[_UIs] = smithyClient.expectString(output[_uI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_vPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_vPCI]);
    }
    return contents;
};
const de_Region = (output, context) => {
    const contents = {};
    if (output[_oIS] != null) {
        contents[_OIS] = smithyClient.expectString(output[_oIS]);
    }
    if (output[_rNe] != null) {
        contents[_RN] = smithyClient.expectString(output[_rNe]);
    }
    if (output[_rEe] != null) {
        contents[_Endp] = smithyClient.expectString(output[_rEe]);
    }
    return contents;
};
const de_RegionalSummary = (output, context) => {
    const contents = {};
    if (output[_rNe] != null) {
        contents[_RN] = smithyClient.expectString(output[_rNe]);
    }
    if (output[_nOMA] != null) {
        contents[_NOMA] = smithyClient.strictParseInt32(output[_nOMA]);
    }
    if (output[_nOUA] != null) {
        contents[_NOUA] = smithyClient.strictParseInt32(output[_nOUA]);
    }
    return contents;
};
const de_RegionalSummaryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RegionalSummary(entry);
    });
};
const de_RegionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Region(entry);
    });
};
const de_RegisterImageResult = (output, context) => {
    const contents = {};
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    return contents;
};
const de_RegisterInstanceEventNotificationAttributesResult = (output, context) => {
    const contents = {};
    if (output[_iTA] != null) {
        contents[_ITA] = de_InstanceTagNotificationAttribute(output[_iTA]);
    }
    return contents;
};
const de_RegisterTransitGatewayMulticastGroupMembersResult = (output, context) => {
    const contents = {};
    if (output[_rMGM] != null) {
        contents[_RMGM] = de_TransitGatewayMulticastRegisteredGroupMembers(output[_rMGM]);
    }
    return contents;
};
const de_RegisterTransitGatewayMulticastGroupSourcesResult = (output, context) => {
    const contents = {};
    if (output[_rMGS] != null) {
        contents[_RMGS] = de_TransitGatewayMulticastRegisteredGroupSources(output[_rMGS]);
    }
    return contents;
};
const de_RejectCapacityReservationBillingOwnershipResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_RejectTransitGatewayMulticastDomainAssociationsResult = (output, context) => {
    const contents = {};
    if (output[_a] != null) {
        contents[_Ass] = de_TransitGatewayMulticastDomainAssociations(output[_a]);
    }
    return contents;
};
const de_RejectTransitGatewayPeeringAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGPA] != null) {
        contents[_TGPA] = de_TransitGatewayPeeringAttachment(output[_tGPA]);
    }
    return contents;
};
const de_RejectTransitGatewayVpcAttachmentResult = (output, context) => {
    const contents = {};
    if (output[_tGVA] != null) {
        contents[_TGVA] = de_TransitGatewayVpcAttachment(output[_tGVA]);
    }
    return contents;
};
const de_RejectVpcEndpointConnectionsResult = (output, context) => {
    const contents = {};
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemSet(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_RejectVpcPeeringConnectionResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ReleaseHostsResult = (output, context) => {
    const contents = {};
    if (String(output.successful).trim() === "") {
        contents[_Suc] = [];
    }
    else if (output[_suc] != null && output[_suc][_i] != null) {
        contents[_Suc] = de_ResponseHostIdList(smithyClient.getArrayIfSingleItem(output[_suc][_i]));
    }
    if (String(output.unsuccessful).trim() === "") {
        contents[_Un] = [];
    }
    else if (output[_u] != null && output[_u][_i] != null) {
        contents[_Un] = de_UnsuccessfulItemList(smithyClient.getArrayIfSingleItem(output[_u][_i]));
    }
    return contents;
};
const de_ReleaseIpamPoolAllocationResult = (output, context) => {
    const contents = {};
    if (output[_succ] != null) {
        contents[_Succ] = smithyClient.parseBoolean(output[_succ]);
    }
    return contents;
};
const de_ReplaceIamInstanceProfileAssociationResult = (output, context) => {
    const contents = {};
    if (output[_iIPA] != null) {
        contents[_IIPA] = de_IamInstanceProfileAssociation(output[_iIPA]);
    }
    return contents;
};
const de_ReplaceImageCriteriaInAllowedImagesSettingsResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ReplaceNetworkAclAssociationResult = (output, context) => {
    const contents = {};
    if (output[_nAIe] != null) {
        contents[_NAIew] = smithyClient.expectString(output[_nAIe]);
    }
    return contents;
};
const de_ReplaceRootVolumeTask = (output, context) => {
    const contents = {};
    if (output[_rRVTI] != null) {
        contents[_RRVTIe] = smithyClient.expectString(output[_rRVTI]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_tSas] != null) {
        contents[_TSas] = smithyClient.expectString(output[_tSas]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectString(output[_sT]);
    }
    if (output[_cTom] != null) {
        contents[_CTom] = smithyClient.expectString(output[_cTom]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_dRRV] != null) {
        contents[_DRRV] = smithyClient.parseBoolean(output[_dRRV]);
    }
    return contents;
};
const de_ReplaceRootVolumeTasks = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReplaceRootVolumeTask(entry);
    });
};
const de_ReplaceRouteTableAssociationResult = (output, context) => {
    const contents = {};
    if (output[_nAIe] != null) {
        contents[_NAIew] = smithyClient.expectString(output[_nAIe]);
    }
    if (output[_aS] != null) {
        contents[_ASs] = de_RouteTableAssociationState(output[_aS]);
    }
    return contents;
};
const de_ReplaceTransitGatewayRouteResult = (output, context) => {
    const contents = {};
    if (output[_ro] != null) {
        contents[_Rou] = de_TransitGatewayRoute(output[_ro]);
    }
    return contents;
};
const de_ReplaceVpnTunnelResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_RequestSpotFleetResponse = (output, context) => {
    const contents = {};
    if (output[_sFRI] != null) {
        contents[_SFRIp] = smithyClient.expectString(output[_sFRI]);
    }
    return contents;
};
const de_RequestSpotInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.spotInstanceRequestSet).trim() === "") {
        contents[_SIR] = [];
    }
    else if (output[_sIRS] != null && output[_sIRS][_i] != null) {
        contents[_SIR] = de_SpotInstanceRequestList(smithyClient.getArrayIfSingleItem(output[_sIRS][_i]));
    }
    return contents;
};
const de_Reservation = (output, context) => {
    const contents = {};
    if (output[_rIese] != null) {
        contents[_RIeser] = smithyClient.expectString(output[_rIese]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_rIeq] != null) {
        contents[_RIeq] = smithyClient.expectString(output[_rIeq]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (String(output.instancesSet).trim() === "") {
        contents[_In] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_In] = de_InstanceList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    return contents;
};
const de_ReservationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Reservation(entry);
    });
};
const de_ReservationValue = (output, context) => {
    const contents = {};
    if (output[_hPo] != null) {
        contents[_HPo] = smithyClient.expectString(output[_hPo]);
    }
    if (output[_rTV] != null) {
        contents[_RTV] = smithyClient.expectString(output[_rTV]);
    }
    if (output[_rUV] != null) {
        contents[_RUV] = smithyClient.expectString(output[_rUV]);
    }
    return contents;
};
const de_ReservedInstanceReservationValue = (output, context) => {
    const contents = {};
    if (output[_rVe] != null) {
        contents[_RVe] = de_ReservationValue(output[_rVe]);
    }
    if (output[_rIIe] != null) {
        contents[_RIIese] = smithyClient.expectString(output[_rIIe]);
    }
    return contents;
};
const de_ReservedInstanceReservationValueSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstanceReservationValue(entry);
    });
};
const de_ReservedInstances = (output, context) => {
    const contents = {};
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_iTns] != null) {
        contents[_ITns] = smithyClient.expectString(output[_iTns]);
    }
    if (output[_oC] != null) {
        contents[_OC] = smithyClient.expectString(output[_oC]);
    }
    if (output[_oTf] != null) {
        contents[_OT] = smithyClient.expectString(output[_oTf]);
    }
    if (String(output.recurringCharges).trim() === "") {
        contents[_RCec] = [];
    }
    else if (output[_rCec] != null && output[_rCec][_i] != null) {
        contents[_RCec] = de_RecurringChargesList(smithyClient.getArrayIfSingleItem(output[_rCec][_i]));
    }
    if (output[_sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_sc]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_star] != null) {
        contents[_Star] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_star]));
    }
    if (output[_end] != null) {
        contents[_End] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_end]));
    }
    if (output[_du] != null) {
        contents[_Du] = smithyClient.strictParseLong(output[_du]);
    }
    if (output[_uPs] != null) {
        contents[_UPs] = smithyClient.strictParseFloat(output[_uPs]);
    }
    if (output[_fPix] != null) {
        contents[_FPix] = smithyClient.strictParseFloat(output[_fPix]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_pDr] != null) {
        contents[_PDr] = smithyClient.expectString(output[_pDr]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_ReservedInstancesConfiguration = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_sc]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    return contents;
};
const de_ReservedInstancesId = (output, context) => {
    const contents = {};
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    return contents;
};
const de_ReservedInstancesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstances(entry);
    });
};
const de_ReservedInstancesListing = (output, context) => {
    const contents = {};
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_cD] != null) {
        contents[_CDr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cD]));
    }
    if (String(output.instanceCounts).trim() === "") {
        contents[_ICn] = [];
    }
    else if (output[_iCn] != null && output[_iCn][_i] != null) {
        contents[_ICn] = de_InstanceCountList(smithyClient.getArrayIfSingleItem(output[_iCn][_i]));
    }
    if (String(output.priceSchedules).trim() === "") {
        contents[_PS] = [];
    }
    else if (output[_pSric] != null && output[_pSric][_i] != null) {
        contents[_PS] = de_PriceScheduleList(smithyClient.getArrayIfSingleItem(output[_pSric][_i]));
    }
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    if (output[_rILI] != null) {
        contents[_RILI] = smithyClient.expectString(output[_rILI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_uDpd] != null) {
        contents[_UDpd] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uDpd]));
    }
    return contents;
};
const de_ReservedInstancesListingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesListing(entry);
    });
};
const de_ReservedInstancesModification = (output, context) => {
    const contents = {};
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_cD] != null) {
        contents[_CDr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cD]));
    }
    if (output[_eDf] != null) {
        contents[_EDf] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eDf]));
    }
    if (String(output.modificationResultSet).trim() === "") {
        contents[_MRo] = [];
    }
    else if (output[_mRS] != null && output[_mRS][_i] != null) {
        contents[_MRo] = de_ReservedInstancesModificationResultList(smithyClient.getArrayIfSingleItem(output[_mRS][_i]));
    }
    if (String(output.reservedInstancesSet).trim() === "") {
        contents[_RIIes] = [];
    }
    else if (output[_rIS] != null && output[_rIS][_i] != null) {
        contents[_RIIes] = de_ReservedIntancesIds(smithyClient.getArrayIfSingleItem(output[_rIS][_i]));
    }
    if (output[_rIMI] != null) {
        contents[_RIMIe] = smithyClient.expectString(output[_rIMI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_uDpd] != null) {
        contents[_UDpd] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uDpd]));
    }
    return contents;
};
const de_ReservedInstancesModificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesModification(entry);
    });
};
const de_ReservedInstancesModificationResult = (output, context) => {
    const contents = {};
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    if (output[_tCa] != null) {
        contents[_TCar] = de_ReservedInstancesConfiguration(output[_tCa]);
    }
    return contents;
};
const de_ReservedInstancesModificationResultList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesModificationResult(entry);
    });
};
const de_ReservedInstancesOffering = (output, context) => {
    const contents = {};
    if (output[_cC] != null) {
        contents[_CCu] = smithyClient.expectString(output[_cC]);
    }
    if (output[_iTns] != null) {
        contents[_ITns] = smithyClient.expectString(output[_iTns]);
    }
    if (output[_mar] != null) {
        contents[_Mar] = smithyClient.parseBoolean(output[_mar]);
    }
    if (output[_oC] != null) {
        contents[_OC] = smithyClient.expectString(output[_oC]);
    }
    if (output[_oTf] != null) {
        contents[_OT] = smithyClient.expectString(output[_oTf]);
    }
    if (String(output.pricingDetailsSet).trim() === "") {
        contents[_PDri] = [];
    }
    else if (output[_pDS] != null && output[_pDS][_i] != null) {
        contents[_PDri] = de_PricingDetailsList(smithyClient.getArrayIfSingleItem(output[_pDS][_i]));
    }
    if (String(output.recurringCharges).trim() === "") {
        contents[_RCec] = [];
    }
    else if (output[_rCec] != null && output[_rCec][_i] != null) {
        contents[_RCec] = de_RecurringChargesList(smithyClient.getArrayIfSingleItem(output[_rCec][_i]));
    }
    if (output[_sc] != null) {
        contents[_Sc] = smithyClient.expectString(output[_sc]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_rIOI] != null) {
        contents[_RIOIe] = smithyClient.expectString(output[_rIOI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_du] != null) {
        contents[_Du] = smithyClient.strictParseLong(output[_du]);
    }
    if (output[_uPs] != null) {
        contents[_UPs] = smithyClient.strictParseFloat(output[_uPs]);
    }
    if (output[_fPix] != null) {
        contents[_FPix] = smithyClient.strictParseFloat(output[_fPix]);
    }
    if (output[_pDr] != null) {
        contents[_PDr] = smithyClient.expectString(output[_pDr]);
    }
    return contents;
};
const de_ReservedInstancesOfferingList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesOffering(entry);
    });
};
const de_ReservedIntancesIds = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedInstancesId(entry);
    });
};
const de_ResetAddressAttributeResult = (output, context) => {
    const contents = {};
    if (output[_ad] != null) {
        contents[_Ad] = de_AddressAttribute(output[_ad]);
    }
    return contents;
};
const de_ResetEbsDefaultKmsKeyIdResult = (output, context) => {
    const contents = {};
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    return contents;
};
const de_ResetFpgaImageAttributeResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_ResourceStatement = (output, context) => {
    const contents = {};
    if (String(output.resourceSet).trim() === "") {
        contents[_Re] = [];
    }
    else if (output[_rSesou] != null && output[_rSesou][_i] != null) {
        contents[_Re] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_rSesou][_i]));
    }
    if (String(output.resourceTypeSet).trim() === "") {
        contents[_RTe] = [];
    }
    else if (output[_rTSe] != null && output[_rTSe][_i] != null) {
        contents[_RTe] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_rTSe][_i]));
    }
    return contents;
};
const de_ResponseError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ResponseHostIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ResponseHostIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ResponseLaunchTemplateData = (output, context) => {
    const contents = {};
    if (output[_kI] != null) {
        contents[_KI] = smithyClient.expectString(output[_kI]);
    }
    if (output[_eO] != null) {
        contents[_EO] = smithyClient.parseBoolean(output[_eO]);
    }
    if (output[_iIP] != null) {
        contents[_IIP] = de_LaunchTemplateIamInstanceProfileSpecification(output[_iIP]);
    }
    if (String(output.blockDeviceMappingSet).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDMS] != null && output[_bDMS][_i] != null) {
        contents[_BDM] = de_LaunchTemplateBlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDMS][_i]));
    }
    if (String(output.networkInterfaceSet).trim() === "") {
        contents[_NI] = [];
    }
    else if (output[_nIS] != null && output[_nIS][_i] != null) {
        contents[_NI] = de_LaunchTemplateInstanceNetworkInterfaceSpecificationList(smithyClient.getArrayIfSingleItem(output[_nIS][_i]));
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (output[_mo] != null) {
        contents[_Mon] = de_LaunchTemplatesMonitoring(output[_mo]);
    }
    if (output[_pla] != null) {
        contents[_Pl] = de_LaunchTemplatePlacement(output[_pla]);
    }
    if (output[_rDI] != null) {
        contents[_RDI] = smithyClient.expectString(output[_rDI]);
    }
    if (output[_dAT] != null) {
        contents[_DATis] = smithyClient.parseBoolean(output[_dAT]);
    }
    if (output[_iISB] != null) {
        contents[_IISB] = smithyClient.expectString(output[_iISB]);
    }
    if (output[_uDs] != null) {
        contents[_UD] = smithyClient.expectString(output[_uDs]);
    }
    if (String(output.tagSpecificationSet).trim() === "") {
        contents[_TS] = [];
    }
    else if (output[_tSS] != null && output[_tSS][_i] != null) {
        contents[_TS] = de_LaunchTemplateTagSpecificationList(smithyClient.getArrayIfSingleItem(output[_tSS][_i]));
    }
    if (String(output.elasticGpuSpecificationSet).trim() === "") {
        contents[_EGS] = [];
    }
    else if (output[_eGSS] != null && output[_eGSS][_i] != null) {
        contents[_EGS] = de_ElasticGpuSpecificationResponseList(smithyClient.getArrayIfSingleItem(output[_eGSS][_i]));
    }
    if (String(output.elasticInferenceAcceleratorSet).trim() === "") {
        contents[_EIA] = [];
    }
    else if (output[_eIAS] != null && output[_eIAS][_i] != null) {
        contents[_EIA] = de_LaunchTemplateElasticInferenceAcceleratorResponseList(smithyClient.getArrayIfSingleItem(output[_eIAS][_i]));
    }
    if (String(output.securityGroupIdSet).trim() === "") {
        contents[_SGI] = [];
    }
    else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
        contents[_SGI] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sGIS][_i]));
    }
    if (String(output.securityGroupSet).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_sGS] != null && output[_sGS][_i] != null) {
        contents[_SG] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sGS][_i]));
    }
    if (output[_iMOn] != null) {
        contents[_IMO] = de_LaunchTemplateInstanceMarketOptions(output[_iMOn]);
    }
    if (output[_cSr] != null) {
        contents[_CSred] = de_CreditSpecification(output[_cSr]);
    }
    if (output[_cO] != null) {
        contents[_COp] = de_LaunchTemplateCpuOptions(output[_cO]);
    }
    if (output[_cRSa] != null) {
        contents[_CRSa] = de_LaunchTemplateCapacityReservationSpecificationResponse(output[_cRSa]);
    }
    if (String(output.licenseSet).trim() === "") {
        contents[_LSi] = [];
    }
    else if (output[_lSi] != null && output[_lSi][_i] != null) {
        contents[_LSi] = de_LaunchTemplateLicenseList(smithyClient.getArrayIfSingleItem(output[_lSi][_i]));
    }
    if (output[_hO] != null) {
        contents[_HO] = de_LaunchTemplateHibernationOptions(output[_hO]);
    }
    if (output[_mO] != null) {
        contents[_MO] = de_LaunchTemplateInstanceMetadataOptions(output[_mO]);
    }
    if (output[_eOn] != null) {
        contents[_EOn] = de_LaunchTemplateEnclaveOptions(output[_eOn]);
    }
    if (output[_iR] != null) {
        contents[_IR] = de_InstanceRequirements(output[_iR]);
    }
    if (output[_pDNO] != null) {
        contents[_PDNO] = de_LaunchTemplatePrivateDnsNameOptions(output[_pDNO]);
    }
    if (output[_mOa] != null) {
        contents[_MOa] = de_LaunchTemplateInstanceMaintenanceOptions(output[_mOa]);
    }
    if (output[_dASi] != null) {
        contents[_DASi] = smithyClient.parseBoolean(output[_dASi]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    if (output[_nPO] != null) {
        contents[_NPO] = de_LaunchTemplateNetworkPerformanceOptions(output[_nPO]);
    }
    return contents;
};
const de_RestoreAddressToClassicResult = (output, context) => {
    const contents = {};
    if (output[_pI] != null) {
        contents[_PI] = smithyClient.expectString(output[_pI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_RestoreImageFromRecycleBinResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_RestoreManagedPrefixListVersionResult = (output, context) => {
    const contents = {};
    if (output[_pL] != null) {
        contents[_PLr] = de_ManagedPrefixList(output[_pL]);
    }
    return contents;
};
const de_RestoreSnapshotFromRecycleBinResult = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_sta] != null) {
        contents[_Stat] = smithyClient.expectString(output[_sta]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_vSo] != null) {
        contents[_VS] = smithyClient.strictParseInt32(output[_vSo]);
    }
    if (output[_sTs] != null) {
        contents[_STs] = smithyClient.expectString(output[_sTs]);
    }
    return contents;
};
const de_RestoreSnapshotTierResult = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_rST] != null) {
        contents[_RSTe] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rST]));
    }
    if (output[_rD] != null) {
        contents[_RD] = smithyClient.strictParseInt32(output[_rD]);
    }
    if (output[_iPR] != null) {
        contents[_IPR] = smithyClient.parseBoolean(output[_iPR]);
    }
    return contents;
};
const de_RevokeClientVpnIngressResult = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = de_ClientVpnAuthorizationRuleStatus(output[_sta]);
    }
    return contents;
};
const de_RevokedSecurityGroupRule = (output, context) => {
    const contents = {};
    if (output[_sGRI] != null) {
        contents[_SGRIe] = smithyClient.expectString(output[_sGRI]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_iEs] != null) {
        contents[_IE] = smithyClient.parseBoolean(output[_iEs]);
    }
    if (output[_iPpr] != null) {
        contents[_IPpr] = smithyClient.expectString(output[_iPpr]);
    }
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    if (output[_cIidr] != null) {
        contents[_CIidr] = smithyClient.expectString(output[_cIidr]);
    }
    if (output[_cIid] != null) {
        contents[_CIid] = smithyClient.expectString(output[_cIid]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_rGI] != null) {
        contents[_RGI] = smithyClient.expectString(output[_rGI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    return contents;
};
const de_RevokedSecurityGroupRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RevokedSecurityGroupRule(entry);
    });
};
const de_RevokeSecurityGroupEgressResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (String(output.unknownIpPermissionSet).trim() === "") {
        contents[_UIP] = [];
    }
    else if (output[_uIPS] != null && output[_uIPS][_i] != null) {
        contents[_UIP] = de_IpPermissionList(smithyClient.getArrayIfSingleItem(output[_uIPS][_i]));
    }
    if (String(output.revokedSecurityGroupRuleSet).trim() === "") {
        contents[_RSGR] = [];
    }
    else if (output[_rSGRS] != null && output[_rSGRS][_i] != null) {
        contents[_RSGR] = de_RevokedSecurityGroupRuleList(smithyClient.getArrayIfSingleItem(output[_rSGRS][_i]));
    }
    return contents;
};
const de_RevokeSecurityGroupIngressResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    if (String(output.unknownIpPermissionSet).trim() === "") {
        contents[_UIP] = [];
    }
    else if (output[_uIPS] != null && output[_uIPS][_i] != null) {
        contents[_UIP] = de_IpPermissionList(smithyClient.getArrayIfSingleItem(output[_uIPS][_i]));
    }
    if (String(output.revokedSecurityGroupRuleSet).trim() === "") {
        contents[_RSGR] = [];
    }
    else if (output[_rSGRS] != null && output[_rSGRS][_i] != null) {
        contents[_RSGR] = de_RevokedSecurityGroupRuleList(smithyClient.getArrayIfSingleItem(output[_rSGRS][_i]));
    }
    return contents;
};
const de_RootDeviceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Route = (output, context) => {
    const contents = {};
    if (output[_dCB] != null) {
        contents[_DCBe] = smithyClient.expectString(output[_dCB]);
    }
    if (output[_dICB] != null) {
        contents[_DICB] = smithyClient.expectString(output[_dICB]);
    }
    if (output[_dPLI] != null) {
        contents[_DPLI] = smithyClient.expectString(output[_dPLI]);
    }
    if (output[_eOIGI] != null) {
        contents[_EOIGI] = smithyClient.expectString(output[_eOIGI]);
    }
    if (output[_gI] != null) {
        contents[_GI] = smithyClient.expectString(output[_gI]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_iOIn] != null) {
        contents[_IOIn] = smithyClient.expectString(output[_iOIn]);
    }
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_lGI] != null) {
        contents[_LGI] = smithyClient.expectString(output[_lGI]);
    }
    if (output[_cGI] != null) {
        contents[_CGI] = smithyClient.expectString(output[_cGI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_o] != null) {
        contents[_Or] = smithyClient.expectString(output[_o]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_vPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_vPCI]);
    }
    if (output[_cNA] != null) {
        contents[_CNAo] = smithyClient.expectString(output[_cNA]);
    }
    if (output[_oNA] != null) {
        contents[_ONA] = smithyClient.expectString(output[_oNA]);
    }
    if (output[_iAp] != null) {
        contents[_IAp] = smithyClient.expectString(output[_iAp]);
    }
    return contents;
};
const de_RouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Route(entry);
    });
};
const de_RouteServer = (output, context) => {
    const contents = {};
    if (output[_rSI] != null) {
        contents[_RSIo] = smithyClient.expectString(output[_rSI]);
    }
    if (output[_aSA] != null) {
        contents[_ASA] = smithyClient.strictParseLong(output[_aSA]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_pRSe] != null) {
        contents[_PRS] = smithyClient.expectString(output[_pRSe]);
    }
    if (output[_pRD] != null) {
        contents[_PRD] = smithyClient.strictParseLong(output[_pRD]);
    }
    if (output[_sNE] != null) {
        contents[_SNE] = smithyClient.parseBoolean(output[_sNE]);
    }
    if (output[_sTA] != null) {
        contents[_STA] = smithyClient.expectString(output[_sTA]);
    }
    return contents;
};
const de_RouteServerAssociation = (output, context) => {
    const contents = {};
    if (output[_rSI] != null) {
        contents[_RSIo] = smithyClient.expectString(output[_rSI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_RouteServerAssociationsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServerAssociation(entry);
    });
};
const de_RouteServerBfdStatus = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_RouteServerBgpOptions = (output, context) => {
    const contents = {};
    if (output[_pAee] != null) {
        contents[_PAee] = smithyClient.strictParseLong(output[_pAee]);
    }
    if (output[_pLD] != null) {
        contents[_PLD] = smithyClient.expectString(output[_pLD]);
    }
    return contents;
};
const de_RouteServerBgpStatus = (output, context) => {
    const contents = {};
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_RouteServerEndpoint = (output, context) => {
    const contents = {};
    if (output[_rSI] != null) {
        contents[_RSIo] = smithyClient.expectString(output[_rSI]);
    }
    if (output[_rSEI] != null) {
        contents[_RSEI] = smithyClient.expectString(output[_rSEI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_eIn] != null) {
        contents[_EIn] = smithyClient.expectString(output[_eIn]);
    }
    if (output[_eA] != null) {
        contents[_EAn] = smithyClient.expectString(output[_eA]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_fR] != null) {
        contents[_FR] = smithyClient.expectString(output[_fR]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_RouteServerEndpointsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServerEndpoint(entry);
    });
};
const de_RouteServerPeer = (output, context) => {
    const contents = {};
    if (output[_rSPI] != null) {
        contents[_RSPI] = smithyClient.expectString(output[_rSPI]);
    }
    if (output[_rSEI] != null) {
        contents[_RSEI] = smithyClient.expectString(output[_rSEI]);
    }
    if (output[_rSI] != null) {
        contents[_RSIo] = smithyClient.expectString(output[_rSI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_fR] != null) {
        contents[_FR] = smithyClient.expectString(output[_fR]);
    }
    if (output[_eEI] != null) {
        contents[_EEI] = smithyClient.expectString(output[_eEI]);
    }
    if (output[_eEA] != null) {
        contents[_EEA] = smithyClient.expectString(output[_eEA]);
    }
    if (output[_pAe] != null) {
        contents[_PAe] = smithyClient.expectString(output[_pAe]);
    }
    if (output[_bO] != null) {
        contents[_BO] = de_RouteServerBgpOptions(output[_bO]);
    }
    if (output[_bSg] != null) {
        contents[_BSg] = de_RouteServerBgpStatus(output[_bSg]);
    }
    if (output[_bSf] != null) {
        contents[_BSf] = de_RouteServerBfdStatus(output[_bSf]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_RouteServerPeersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServerPeer(entry);
    });
};
const de_RouteServerPropagation = (output, context) => {
    const contents = {};
    if (output[_rSI] != null) {
        contents[_RSIo] = smithyClient.expectString(output[_rSI]);
    }
    if (output[_rTI] != null) {
        contents[_RTI] = smithyClient.expectString(output[_rTI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_RouteServerPropagationsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServerPropagation(entry);
    });
};
const de_RouteServerRoute = (output, context) => {
    const contents = {};
    if (output[_rSEI] != null) {
        contents[_RSEI] = smithyClient.expectString(output[_rSEI]);
    }
    if (output[_rSPI] != null) {
        contents[_RSPI] = smithyClient.expectString(output[_rSPI]);
    }
    if (String(output.routeInstallationDetailSet).trim() === "") {
        contents[_RID] = [];
    }
    else if (output[_rIDS] != null && output[_rIDS][_i] != null) {
        contents[_RID] = de_RouteServerRouteInstallationDetails(smithyClient.getArrayIfSingleItem(output[_rIDS][_i]));
    }
    if (output[_rSout] != null) {
        contents[_RSout] = smithyClient.expectString(output[_rSout]);
    }
    if (output[_pre] != null) {
        contents[_Pr] = smithyClient.expectString(output[_pre]);
    }
    if (String(output.asPathSet).trim() === "") {
        contents[_APs] = [];
    }
    else if (output[_aPSs] != null && output[_aPSs][_i] != null) {
        contents[_APs] = de_AsPath(smithyClient.getArrayIfSingleItem(output[_aPSs][_i]));
    }
    if (output[_med] != null) {
        contents[_Med] = smithyClient.strictParseInt32(output[_med]);
    }
    if (output[_nHI] != null) {
        contents[_NHI] = smithyClient.expectString(output[_nHI]);
    }
    return contents;
};
const de_RouteServerRouteInstallationDetail = (output, context) => {
    const contents = {};
    if (output[_rTI] != null) {
        contents[_RTI] = smithyClient.expectString(output[_rTI]);
    }
    if (output[_rISo] != null) {
        contents[_RISo] = smithyClient.expectString(output[_rISo]);
    }
    if (output[_rISR] != null) {
        contents[_RISR] = smithyClient.expectString(output[_rISR]);
    }
    return contents;
};
const de_RouteServerRouteInstallationDetails = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServerRouteInstallationDetail(entry);
    });
};
const de_RouteServerRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServerRoute(entry);
    });
};
const de_RouteServersList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteServer(entry);
    });
};
const de_RouteTable = (output, context) => {
    const contents = {};
    if (String(output.associationSet).trim() === "") {
        contents[_Ass] = [];
    }
    else if (output[_aSss] != null && output[_aSss][_i] != null) {
        contents[_Ass] = de_RouteTableAssociationList(smithyClient.getArrayIfSingleItem(output[_aSss][_i]));
    }
    if (String(output.propagatingVgwSet).trim() === "") {
        contents[_PVr] = [];
    }
    else if (output[_pVS] != null && output[_pVS][_i] != null) {
        contents[_PVr] = de_PropagatingVgwList(smithyClient.getArrayIfSingleItem(output[_pVS][_i]));
    }
    if (output[_rTI] != null) {
        contents[_RTI] = smithyClient.expectString(output[_rTI]);
    }
    if (String(output.routeSet).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rSou] != null && output[_rSou][_i] != null) {
        contents[_Rout] = de_RouteList(smithyClient.getArrayIfSingleItem(output[_rSou][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    return contents;
};
const de_RouteTableAssociation = (output, context) => {
    const contents = {};
    if (output[_mai] != null) {
        contents[_Mai] = smithyClient.parseBoolean(output[_mai]);
    }
    if (output[_rTAI] != null) {
        contents[_RTAI] = smithyClient.expectString(output[_rTAI]);
    }
    if (output[_rTI] != null) {
        contents[_RTI] = smithyClient.expectString(output[_rTI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_gI] != null) {
        contents[_GI] = smithyClient.expectString(output[_gI]);
    }
    if (output[_pIP] != null) {
        contents[_PIP] = smithyClient.expectString(output[_pIP]);
    }
    if (output[_aS] != null) {
        contents[_ASs] = de_RouteTableAssociationState(output[_aS]);
    }
    return contents;
};
const de_RouteTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteTableAssociation(entry);
    });
};
const de_RouteTableAssociationState = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    return contents;
};
const de_RouteTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RouteTable(entry);
    });
};
const de_RuleGroupRuleOptionsPair = (output, context) => {
    const contents = {};
    if (output[_rGA] != null) {
        contents[_RGA] = smithyClient.expectString(output[_rGA]);
    }
    if (String(output.ruleOptionSet).trim() === "") {
        contents[_ROu] = [];
    }
    else if (output[_rOS] != null && output[_rOS][_i] != null) {
        contents[_ROu] = de_RuleOptionList(smithyClient.getArrayIfSingleItem(output[_rOS][_i]));
    }
    return contents;
};
const de_RuleGroupRuleOptionsPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleGroupRuleOptionsPair(entry);
    });
};
const de_RuleGroupTypePair = (output, context) => {
    const contents = {};
    if (output[_rGA] != null) {
        contents[_RGA] = smithyClient.expectString(output[_rGA]);
    }
    if (output[_rGT] != null) {
        contents[_RGT] = smithyClient.expectString(output[_rGT]);
    }
    return contents;
};
const de_RuleGroupTypePairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleGroupTypePair(entry);
    });
};
const de_RuleOption = (output, context) => {
    const contents = {};
    if (output[_key] != null) {
        contents[_Key] = smithyClient.expectString(output[_key]);
    }
    if (String(output.settingSet).trim() === "") {
        contents[_Set] = [];
    }
    else if (output[_sSe] != null && output[_sSe][_i] != null) {
        contents[_Set] = de_StringList(smithyClient.getArrayIfSingleItem(output[_sSe][_i]));
    }
    return contents;
};
const de_RuleOptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RuleOption(entry);
    });
};
const de_RunInstancesMonitoringEnabled = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    return contents;
};
const de_RunScheduledInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instanceIdSet).trim() === "") {
        contents[_IIS] = [];
    }
    else if (output[_iIS] != null && output[_iIS][_i] != null) {
        contents[_IIS] = de_InstanceIdSet(smithyClient.getArrayIfSingleItem(output[_iIS][_i]));
    }
    return contents;
};
const de_S3Storage = (output, context) => {
    const contents = {};
    if (output[_AWSAKI] != null) {
        contents[_AWSAKI] = smithyClient.expectString(output[_AWSAKI]);
    }
    if (output[_bu] != null) {
        contents[_B] = smithyClient.expectString(output[_bu]);
    }
    if (output[_pre] != null) {
        contents[_Pr] = smithyClient.expectString(output[_pre]);
    }
    if (output[_uPp] != null) {
        contents[_UP] = context.base64Decoder(output[_uPp]);
    }
    if (output[_uPS] != null) {
        contents[_UPS] = smithyClient.expectString(output[_uPS]);
    }
    return contents;
};
const de_ScheduledInstance = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_cD] != null) {
        contents[_CDr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cD]));
    }
    if (output[_hPo] != null) {
        contents[_HPo] = smithyClient.expectString(output[_hPo]);
    }
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_nPet] != null) {
        contents[_NPet] = smithyClient.expectString(output[_nPet]);
    }
    if (output[_nSST] != null) {
        contents[_NSST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nSST]));
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_pSET] != null) {
        contents[_PSET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_pSET]));
    }
    if (output[_rec] != null) {
        contents[_Rec] = de_ScheduledInstanceRecurrence(output[_rec]);
    }
    if (output[_sIIc] != null) {
        contents[_SIIch] = smithyClient.expectString(output[_sIIc]);
    }
    if (output[_sDIH] != null) {
        contents[_SDIH] = smithyClient.strictParseInt32(output[_sDIH]);
    }
    if (output[_tED] != null) {
        contents[_TED] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_tED]));
    }
    if (output[_tSD] != null) {
        contents[_TSD] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_tSD]));
    }
    if (output[_tSIH] != null) {
        contents[_TSIH] = smithyClient.strictParseInt32(output[_tSIH]);
    }
    return contents;
};
const de_ScheduledInstanceAvailability = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aICv] != null) {
        contents[_AICv] = smithyClient.strictParseInt32(output[_aICv]);
    }
    if (output[_fSST] != null) {
        contents[_FSST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_fSST]));
    }
    if (output[_hPo] != null) {
        contents[_HPo] = smithyClient.expectString(output[_hPo]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_mTDID] != null) {
        contents[_MTDID] = smithyClient.strictParseInt32(output[_mTDID]);
    }
    if (output[_mTDIDi] != null) {
        contents[_MTDIDi] = smithyClient.strictParseInt32(output[_mTDIDi]);
    }
    if (output[_nPet] != null) {
        contents[_NPet] = smithyClient.expectString(output[_nPet]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_pTu] != null) {
        contents[_PT] = smithyClient.expectString(output[_pTu]);
    }
    if (output[_rec] != null) {
        contents[_Rec] = de_ScheduledInstanceRecurrence(output[_rec]);
    }
    if (output[_sDIH] != null) {
        contents[_SDIH] = smithyClient.strictParseInt32(output[_sDIH]);
    }
    if (output[_tSIH] != null) {
        contents[_TSIH] = smithyClient.strictParseInt32(output[_tSIH]);
    }
    return contents;
};
const de_ScheduledInstanceAvailabilitySet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledInstanceAvailability(entry);
    });
};
const de_ScheduledInstanceRecurrence = (output, context) => {
    const contents = {};
    if (output[_fre] != null) {
        contents[_Fre] = smithyClient.expectString(output[_fre]);
    }
    if (output[_int] != null) {
        contents[_Int] = smithyClient.strictParseInt32(output[_int]);
    }
    if (String(output.occurrenceDaySet).trim() === "") {
        contents[_ODS] = [];
    }
    else if (output[_oDS] != null && output[_oDS][_i] != null) {
        contents[_ODS] = de_OccurrenceDaySet(smithyClient.getArrayIfSingleItem(output[_oDS][_i]));
    }
    if (output[_oRTE] != null) {
        contents[_ORTE] = smithyClient.parseBoolean(output[_oRTE]);
    }
    if (output[_oU] != null) {
        contents[_OU] = smithyClient.expectString(output[_oU]);
    }
    return contents;
};
const de_ScheduledInstanceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScheduledInstance(entry);
    });
};
const de_SearchLocalGatewayRoutesResult = (output, context) => {
    const contents = {};
    if (String(output.routeSet).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rSou] != null && output[_rSou][_i] != null) {
        contents[_Rout] = de_LocalGatewayRouteList(smithyClient.getArrayIfSingleItem(output[_rSou][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_SearchTransitGatewayMulticastGroupsResult = (output, context) => {
    const contents = {};
    if (String(output.multicastGroups).trim() === "") {
        contents[_MG] = [];
    }
    else if (output[_mG] != null && output[_mG][_i] != null) {
        contents[_MG] = de_TransitGatewayMulticastGroupList(smithyClient.getArrayIfSingleItem(output[_mG][_i]));
    }
    if (output[_nTe] != null) {
        contents[_NT] = smithyClient.expectString(output[_nTe]);
    }
    return contents;
};
const de_SearchTransitGatewayRoutesResult = (output, context) => {
    const contents = {};
    if (String(output.routeSet).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rSou] != null && output[_rSou][_i] != null) {
        contents[_Rout] = de_TransitGatewayRouteList(smithyClient.getArrayIfSingleItem(output[_rSou][_i]));
    }
    if (output[_aRAd] != null) {
        contents[_ARAd] = smithyClient.parseBoolean(output[_aRAd]);
    }
    return contents;
};
const de_SecurityGroup = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (String(output.ipPermissionsEgress).trim() === "") {
        contents[_IPE] = [];
    }
    else if (output[_iPE] != null && output[_iPE][_i] != null) {
        contents[_IPE] = de_IpPermissionList(smithyClient.getArrayIfSingleItem(output[_iPE][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sGA] != null) {
        contents[_SGA] = smithyClient.expectString(output[_sGA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_gD] != null) {
        contents[_De] = smithyClient.expectString(output[_gD]);
    }
    if (String(output.ipPermissions).trim() === "") {
        contents[_IPpe] = [];
    }
    else if (output[_iPpe] != null && output[_iPpe][_i] != null) {
        contents[_IPpe] = de_IpPermissionList(smithyClient.getArrayIfSingleItem(output[_iPpe][_i]));
    }
    return contents;
};
const de_SecurityGroupForVpc = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_pVI] != null) {
        contents[_PVIr] = smithyClient.expectString(output[_pVI]);
    }
    return contents;
};
const de_SecurityGroupForVpcList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupForVpc(entry);
    });
};
const de_SecurityGroupIdentifier = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    return contents;
};
const de_SecurityGroupIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_SecurityGroupIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_SecurityGroupIdStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_SecurityGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroup(entry);
    });
};
const de_SecurityGroupReference = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_rVI] != null) {
        contents[_RVI] = smithyClient.expectString(output[_rVI]);
    }
    if (output[_vPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_vPCI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    return contents;
};
const de_SecurityGroupReferences = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupReference(entry);
    });
};
const de_SecurityGroupRule = (output, context) => {
    const contents = {};
    if (output[_sGRI] != null) {
        contents[_SGRIe] = smithyClient.expectString(output[_sGRI]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_gOI] != null) {
        contents[_GOI] = smithyClient.expectString(output[_gOI]);
    }
    if (output[_iEs] != null) {
        contents[_IE] = smithyClient.parseBoolean(output[_iEs]);
    }
    if (output[_iPpr] != null) {
        contents[_IPpr] = smithyClient.expectString(output[_iPpr]);
    }
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    if (output[_cIidr] != null) {
        contents[_CIidr] = smithyClient.expectString(output[_cIidr]);
    }
    if (output[_cIid] != null) {
        contents[_CIid] = smithyClient.expectString(output[_cIid]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_rGIe] != null) {
        contents[_RGIe] = de_ReferencedSecurityGroup(output[_rGIe]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sGRA] != null) {
        contents[_SGRA] = smithyClient.expectString(output[_sGRA]);
    }
    return contents;
};
const de_SecurityGroupRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupRule(entry);
    });
};
const de_SecurityGroupVpcAssociation = (output, context) => {
    const contents = {};
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_vOIp] != null) {
        contents[_VOIp] = smithyClient.expectString(output[_vOIp]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sRt] != null) {
        contents[_SRt] = smithyClient.expectString(output[_sRt]);
    }
    if (output[_gOI] != null) {
        contents[_GOI] = smithyClient.expectString(output[_gOI]);
    }
    return contents;
};
const de_SecurityGroupVpcAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecurityGroupVpcAssociation(entry);
    });
};
const de_ServiceConfiguration = (output, context) => {
    const contents = {};
    if (String(output.serviceType).trim() === "") {
        contents[_STe] = [];
    }
    else if (output[_sTe] != null && output[_sTe][_i] != null) {
        contents[_STe] = de_ServiceTypeDetailSet(smithyClient.getArrayIfSingleItem(output[_sTe][_i]));
    }
    if (output[_sI] != null) {
        contents[_SIe] = smithyClient.expectString(output[_sI]);
    }
    if (output[_sN] != null) {
        contents[_SNe] = smithyClient.expectString(output[_sN]);
    }
    if (output[_sSer] != null) {
        contents[_SSe] = smithyClient.expectString(output[_sSer]);
    }
    if (String(output.availabilityZoneIdSet).trim() === "") {
        contents[_AZIv] = [];
    }
    else if (output[_aZIS] != null && output[_aZIS][_i] != null) {
        contents[_AZIv] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aZIS][_i]));
    }
    if (String(output.availabilityZoneSet).trim() === "") {
        contents[_AZv] = [];
    }
    else if (output[_aZS] != null && output[_aZS][_i] != null) {
        contents[_AZv] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aZS][_i]));
    }
    if (output[_aRcc] != null) {
        contents[_ARc] = smithyClient.parseBoolean(output[_aRcc]);
    }
    if (output[_mVE] != null) {
        contents[_MVEa] = smithyClient.parseBoolean(output[_mVE]);
    }
    if (String(output.networkLoadBalancerArnSet).trim() === "") {
        contents[_NLBAe] = [];
    }
    else if (output[_nLBAS] != null && output[_nLBAS][_i] != null) {
        contents[_NLBAe] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_nLBAS][_i]));
    }
    if (String(output.gatewayLoadBalancerArnSet).trim() === "") {
        contents[_GLBA] = [];
    }
    else if (output[_gLBAS] != null && output[_gLBAS][_i] != null) {
        contents[_GLBA] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_gLBAS][_i]));
    }
    if (String(output.supportedIpAddressTypeSet).trim() === "") {
        contents[_SIAT] = [];
    }
    else if (output[_sIATS] != null && output[_sIATS][_i] != null) {
        contents[_SIAT] = de_SupportedIpAddressTypes(smithyClient.getArrayIfSingleItem(output[_sIATS][_i]));
    }
    if (String(output.baseEndpointDnsNameSet).trim() === "") {
        contents[_BEDN] = [];
    }
    else if (output[_bEDNS] != null && output[_bEDNS][_i] != null) {
        contents[_BEDN] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_bEDNS][_i]));
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (output[_pDNC] != null) {
        contents[_PDNC] = de_PrivateDnsNameConfiguration(output[_pDNC]);
    }
    if (output[_pRa] != null) {
        contents[_PRa] = smithyClient.expectString(output[_pRa]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.supportedRegionSet).trim() === "") {
        contents[_SRu] = [];
    }
    else if (output[_sRS] != null && output[_sRS][_i] != null) {
        contents[_SRu] = de_SupportedRegionSet(smithyClient.getArrayIfSingleItem(output[_sRS][_i]));
    }
    if (output[_rAE] != null) {
        contents[_RAE] = smithyClient.parseBoolean(output[_rAE]);
    }
    return contents;
};
const de_ServiceConfigurationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceConfiguration(entry);
    });
};
const de_ServiceDetail = (output, context) => {
    const contents = {};
    if (output[_sN] != null) {
        contents[_SNe] = smithyClient.expectString(output[_sN]);
    }
    if (output[_sI] != null) {
        contents[_SIe] = smithyClient.expectString(output[_sI]);
    }
    if (String(output.serviceType).trim() === "") {
        contents[_STe] = [];
    }
    else if (output[_sTe] != null && output[_sTe][_i] != null) {
        contents[_STe] = de_ServiceTypeDetailSet(smithyClient.getArrayIfSingleItem(output[_sTe][_i]));
    }
    if (output[_sR] != null) {
        contents[_SRe] = smithyClient.expectString(output[_sR]);
    }
    if (String(output.availabilityZoneIdSet).trim() === "") {
        contents[_AZIv] = [];
    }
    else if (output[_aZIS] != null && output[_aZIS][_i] != null) {
        contents[_AZIv] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aZIS][_i]));
    }
    if (String(output.availabilityZoneSet).trim() === "") {
        contents[_AZv] = [];
    }
    else if (output[_aZS] != null && output[_aZS][_i] != null) {
        contents[_AZv] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_aZS][_i]));
    }
    if (output[_ow] != null) {
        contents[_Own] = smithyClient.expectString(output[_ow]);
    }
    if (String(output.baseEndpointDnsNameSet).trim() === "") {
        contents[_BEDN] = [];
    }
    else if (output[_bEDNS] != null && output[_bEDNS][_i] != null) {
        contents[_BEDN] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_bEDNS][_i]));
    }
    if (output[_pDNr] != null) {
        contents[_PDN] = smithyClient.expectString(output[_pDNr]);
    }
    if (String(output.privateDnsNameSet).trim() === "") {
        contents[_PDNr] = [];
    }
    else if (output[_pDNS] != null && output[_pDNS][_i] != null) {
        contents[_PDNr] = de_PrivateDnsDetailsSet(smithyClient.getArrayIfSingleItem(output[_pDNS][_i]));
    }
    if (output[_vEPS] != null) {
        contents[_VEPS] = smithyClient.parseBoolean(output[_vEPS]);
    }
    if (output[_aRcc] != null) {
        contents[_ARc] = smithyClient.parseBoolean(output[_aRcc]);
    }
    if (output[_mVE] != null) {
        contents[_MVEa] = smithyClient.parseBoolean(output[_mVE]);
    }
    if (output[_pRa] != null) {
        contents[_PRa] = smithyClient.expectString(output[_pRa]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_pDNVS] != null) {
        contents[_PDNVS] = smithyClient.expectString(output[_pDNVS]);
    }
    if (String(output.supportedIpAddressTypeSet).trim() === "") {
        contents[_SIAT] = [];
    }
    else if (output[_sIATS] != null && output[_sIATS][_i] != null) {
        contents[_SIAT] = de_SupportedIpAddressTypes(smithyClient.getArrayIfSingleItem(output[_sIATS][_i]));
    }
    return contents;
};
const de_ServiceDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceDetail(entry);
    });
};
const de_ServiceLinkVirtualInterface = (output, context) => {
    const contents = {};
    if (output[_sLVII] != null) {
        contents[_SLVIIe] = smithyClient.expectString(output[_sLVII]);
    }
    if (output[_sLVIA] != null) {
        contents[_SLVIA] = smithyClient.expectString(output[_sLVIA]);
    }
    if (output[_oIu] != null) {
        contents[_OIu] = smithyClient.expectString(output[_oIu]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_lA] != null) {
        contents[_LA] = smithyClient.expectString(output[_lA]);
    }
    if (output[_pAe] != null) {
        contents[_PAe] = smithyClient.expectString(output[_pAe]);
    }
    if (output[_pBA] != null) {
        contents[_PBA] = smithyClient.strictParseLong(output[_pBA]);
    }
    if (output[_vl] != null) {
        contents[_Vl] = smithyClient.strictParseInt32(output[_vl]);
    }
    if (output[_oLI] != null) {
        contents[_OLI] = smithyClient.expectString(output[_oLI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_cSon] != null) {
        contents[_CSon] = smithyClient.expectString(output[_cSon]);
    }
    return contents;
};
const de_ServiceLinkVirtualInterfaceIdSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ServiceLinkVirtualInterfaceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceLinkVirtualInterface(entry);
    });
};
const de_ServiceTypeDetail = (output, context) => {
    const contents = {};
    if (output[_sTe] != null) {
        contents[_STe] = smithyClient.expectString(output[_sTe]);
    }
    return contents;
};
const de_ServiceTypeDetailSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ServiceTypeDetail(entry);
    });
};
const de_Snapshot = (output, context) => {
    const contents = {};
    if (output[_oAw] != null) {
        contents[_OAw] = smithyClient.expectString(output[_oAw]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sTt] != null) {
        contents[_STto] = smithyClient.expectString(output[_sTt]);
    }
    if (output[_rET] != null) {
        contents[_RET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rET]));
    }
    if (output[_sTs] != null) {
        contents[_STs] = smithyClient.expectString(output[_sTs]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_tTr] != null) {
        contents[_TTr] = smithyClient.expectString(output[_tTr]);
    }
    if (output[_cDM] != null) {
        contents[_CDM] = smithyClient.strictParseInt32(output[_cDM]);
    }
    if (output[_cTomp] != null) {
        contents[_CTomp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTomp]));
    }
    if (output[_fSSIB] != null) {
        contents[_FSSIB] = smithyClient.strictParseLong(output[_fSSIB]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_sta] != null) {
        contents[_Stat] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_vSo] != null) {
        contents[_VS] = smithyClient.strictParseInt32(output[_vSo]);
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_dEKI] != null) {
        contents[_DEKI] = smithyClient.expectString(output[_dEKI]);
    }
    return contents;
};
const de_SnapshotDetail = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_dN] != null) {
        contents[_DN] = smithyClient.expectString(output[_dN]);
    }
    if (output[_dIS] != null) {
        contents[_DISi] = smithyClient.strictParseFloat(output[_dIS]);
    }
    if (output[_f] != null) {
        contents[_Fo] = smithyClient.expectString(output[_f]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_ur] != null) {
        contents[_U] = smithyClient.expectString(output[_ur]);
    }
    if (output[_uB] != null) {
        contents[_UB] = de_UserBucketDetails(output[_uB]);
    }
    return contents;
};
const de_SnapshotDetailList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotDetail(entry);
    });
};
const de_SnapshotInfo = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_vSo] != null) {
        contents[_VS] = smithyClient.strictParseInt32(output[_vSo]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_sTs] != null) {
        contents[_STs] = smithyClient.expectString(output[_sTs]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    return contents;
};
const de_SnapshotList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Snapshot(entry);
    });
};
const de_SnapshotRecycleBinInfo = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_rBET] != null) {
        contents[_RBET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rBET]));
    }
    if (output[_rBETe] != null) {
        contents[_RBETe] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rBETe]));
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    return contents;
};
const de_SnapshotRecycleBinInfoList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotRecycleBinInfo(entry);
    });
};
const de_SnapshotSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotInfo(entry);
    });
};
const de_SnapshotTaskDetail = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_dIS] != null) {
        contents[_DISi] = smithyClient.strictParseFloat(output[_dIS]);
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_f] != null) {
        contents[_Fo] = smithyClient.expectString(output[_f]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.expectString(output[_pro]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_ur] != null) {
        contents[_U] = smithyClient.expectString(output[_ur]);
    }
    if (output[_uB] != null) {
        contents[_UB] = de_UserBucketDetails(output[_uB]);
    }
    return contents;
};
const de_SnapshotTierStatus = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sTt] != null) {
        contents[_STto] = smithyClient.expectString(output[_sTt]);
    }
    if (output[_lTST] != null) {
        contents[_LTST] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lTST]));
    }
    if (output[_lTP] != null) {
        contents[_LTP] = smithyClient.strictParseInt32(output[_lTP]);
    }
    if (output[_lTOS] != null) {
        contents[_LTOS] = smithyClient.expectString(output[_lTOS]);
    }
    if (output[_lTOSD] != null) {
        contents[_LTOSD] = smithyClient.expectString(output[_lTOSD]);
    }
    if (output[_aCT] != null) {
        contents[_ACT] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_aCT]));
    }
    if (output[_rET] != null) {
        contents[_RET] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_rET]));
    }
    return contents;
};
const de_snapshotTierStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SnapshotTierStatus(entry);
    });
};
const de_SpotCapacityRebalance = (output, context) => {
    const contents = {};
    if (output[_rSep] != null) {
        contents[_RS] = smithyClient.expectString(output[_rSep]);
    }
    if (output[_tD] != null) {
        contents[_TDe] = smithyClient.strictParseInt32(output[_tD]);
    }
    return contents;
};
const de_SpotDatafeedSubscription = (output, context) => {
    const contents = {};
    if (output[_bu] != null) {
        contents[_B] = smithyClient.expectString(output[_bu]);
    }
    if (output[_fa] != null) {
        contents[_Fa] = de_SpotInstanceStateFault(output[_fa]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_pre] != null) {
        contents[_Pr] = smithyClient.expectString(output[_pre]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_SpotFleetLaunchSpecification = (output, context) => {
    const contents = {};
    if (output[_aTdd] != null) {
        contents[_ATd] = smithyClient.expectString(output[_aTdd]);
    }
    if (String(output.blockDeviceMapping).trim() === "") {
        contents[_BDM] = [];
    }
    else if (output[_bDM] != null && output[_bDM][_i] != null) {
        contents[_BDM] = de_BlockDeviceMappingList(smithyClient.getArrayIfSingleItem(output[_bDM][_i]));
    }
    if (output[_eO] != null) {
        contents[_EO] = smithyClient.parseBoolean(output[_eO]);
    }
    if (output[_iIP] != null) {
        contents[_IIP] = de_IamInstanceProfileSpecification(output[_iIP]);
    }
    if (output[_iIma] != null) {
        contents[_IIma] = smithyClient.expectString(output[_iIma]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_kI] != null) {
        contents[_KI] = smithyClient.expectString(output[_kI]);
    }
    if (output[_kN] != null) {
        contents[_KN] = smithyClient.expectString(output[_kN]);
    }
    if (output[_mo] != null) {
        contents[_Mon] = de_SpotFleetMonitoring(output[_mo]);
    }
    if (String(output.networkInterfaceSet).trim() === "") {
        contents[_NI] = [];
    }
    else if (output[_nIS] != null && output[_nIS][_i] != null) {
        contents[_NI] = de_InstanceNetworkInterfaceSpecificationList(smithyClient.getArrayIfSingleItem(output[_nIS][_i]));
    }
    if (output[_pla] != null) {
        contents[_Pl] = de_SpotPlacement(output[_pla]);
    }
    if (output[_rIa] != null) {
        contents[_RIa] = smithyClient.expectString(output[_rIa]);
    }
    if (output[_sPp] != null) {
        contents[_SPp] = smithyClient.expectString(output[_sPp]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_uDs] != null) {
        contents[_UD] = smithyClient.expectString(output[_uDs]);
    }
    if (output[_wC] != null) {
        contents[_WCe] = smithyClient.strictParseFloat(output[_wC]);
    }
    if (String(output.tagSpecificationSet).trim() === "") {
        contents[_TS] = [];
    }
    else if (output[_tSS] != null && output[_tSS][_i] != null) {
        contents[_TS] = de_SpotFleetTagSpecificationList(smithyClient.getArrayIfSingleItem(output[_tSS][_i]));
    }
    if (output[_iR] != null) {
        contents[_IR] = de_InstanceRequirements(output[_iR]);
    }
    if (String(output.groupSet).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_SG] = de_GroupIdentifierList(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    return contents;
};
const de_SpotFleetMonitoring = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    return contents;
};
const de_SpotFleetRequestConfig = (output, context) => {
    const contents = {};
    if (output[_aSc] != null) {
        contents[_ASc] = smithyClient.expectString(output[_aSc]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_sFRC] != null) {
        contents[_SFRC] = de_SpotFleetRequestConfigData(output[_sFRC]);
    }
    if (output[_sFRI] != null) {
        contents[_SFRIp] = smithyClient.expectString(output[_sFRI]);
    }
    if (output[_sFRSp] != null) {
        contents[_SFRS] = smithyClient.expectString(output[_sFRSp]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_SpotFleetRequestConfigData = (output, context) => {
    const contents = {};
    if (output[_aSl] != null) {
        contents[_AS] = smithyClient.expectString(output[_aSl]);
    }
    if (output[_oDAS] != null) {
        contents[_ODAS] = smithyClient.expectString(output[_oDAS]);
    }
    if (output[_sMS] != null) {
        contents[_SMS] = de_SpotMaintenanceStrategies(output[_sMS]);
    }
    if (output[_cT] != null) {
        contents[_CTl] = smithyClient.expectString(output[_cT]);
    }
    if (output[_eCTP] != null) {
        contents[_ECTP] = smithyClient.expectString(output[_eCTP]);
    }
    if (output[_fC] != null) {
        contents[_FC] = smithyClient.strictParseFloat(output[_fC]);
    }
    if (output[_oDFC] != null) {
        contents[_ODFC] = smithyClient.strictParseFloat(output[_oDFC]);
    }
    if (output[_iFR] != null) {
        contents[_IFR] = smithyClient.expectString(output[_iFR]);
    }
    if (String(output.launchSpecifications).trim() === "") {
        contents[_LSau] = [];
    }
    else if (output[_lSa] != null && output[_lSa][_i] != null) {
        contents[_LSau] = de_LaunchSpecsList(smithyClient.getArrayIfSingleItem(output[_lSa][_i]));
    }
    if (String(output.launchTemplateConfigs).trim() === "") {
        contents[_LTC] = [];
    }
    else if (output[_lTC] != null && output[_lTC][_i] != null) {
        contents[_LTC] = de_LaunchTemplateConfigList(smithyClient.getArrayIfSingleItem(output[_lTC][_i]));
    }
    if (output[_sPp] != null) {
        contents[_SPp] = smithyClient.expectString(output[_sPp]);
    }
    if (output[_tCar] != null) {
        contents[_TCa] = smithyClient.strictParseInt32(output[_tCar]);
    }
    if (output[_oDTC] != null) {
        contents[_ODTC] = smithyClient.strictParseInt32(output[_oDTC]);
    }
    if (output[_oDMTP] != null) {
        contents[_ODMTP] = smithyClient.expectString(output[_oDMTP]);
    }
    if (output[_sMTP] != null) {
        contents[_SMTP] = smithyClient.expectString(output[_sMTP]);
    }
    if (output[_tIWE] != null) {
        contents[_TIWE] = smithyClient.parseBoolean(output[_tIWE]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_vF] != null) {
        contents[_VF] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vF]));
    }
    if (output[_vU] != null) {
        contents[_VU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vU]));
    }
    if (output[_rUI] != null) {
        contents[_RUI] = smithyClient.parseBoolean(output[_rUI]);
    }
    if (output[_iIB] != null) {
        contents[_IIB] = smithyClient.expectString(output[_iIB]);
    }
    if (output[_lBC] != null) {
        contents[_LBC] = de_LoadBalancersConfig(output[_lBC]);
    }
    if (output[_iPTUC] != null) {
        contents[_IPTUC] = smithyClient.strictParseInt32(output[_iPTUC]);
    }
    if (output[_cont] != null) {
        contents[_Con] = smithyClient.expectString(output[_cont]);
    }
    if (output[_tCUT] != null) {
        contents[_TCUT] = smithyClient.expectString(output[_tCUT]);
    }
    if (String(output.TagSpecification).trim() === "") {
        contents[_TS] = [];
    }
    else if (output[_TSagp] != null && output[_TSagp][_i] != null) {
        contents[_TS] = de_TagSpecificationList(smithyClient.getArrayIfSingleItem(output[_TSagp][_i]));
    }
    return contents;
};
const de_SpotFleetRequestConfigSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotFleetRequestConfig(entry);
    });
};
const de_SpotFleetTagSpecification = (output, context) => {
    const contents = {};
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (String(output.tag).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tag] != null && output[_tag][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tag][_i]));
    }
    return contents;
};
const de_SpotFleetTagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotFleetTagSpecification(entry);
    });
};
const de_SpotInstanceRequest = (output, context) => {
    const contents = {};
    if (output[_aBHP] != null) {
        contents[_ABHP] = smithyClient.expectString(output[_aBHP]);
    }
    if (output[_aZG] != null) {
        contents[_AZG] = smithyClient.expectString(output[_aZG]);
    }
    if (output[_bDMl] != null) {
        contents[_BDMl] = smithyClient.strictParseInt32(output[_bDMl]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (output[_fa] != null) {
        contents[_Fa] = de_SpotInstanceStateFault(output[_fa]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_lG] != null) {
        contents[_LG] = smithyClient.expectString(output[_lG]);
    }
    if (output[_lSau] != null) {
        contents[_LSa] = de_LaunchSpecification(output[_lSau]);
    }
    if (output[_lAZ] != null) {
        contents[_LAZ] = smithyClient.expectString(output[_lAZ]);
    }
    if (output[_lAZI] != null) {
        contents[_LAZI] = smithyClient.expectString(output[_lAZI]);
    }
    if (output[_pDr] != null) {
        contents[_PDr] = smithyClient.expectString(output[_pDr]);
    }
    if (output[_sIRI] != null) {
        contents[_SIRIp] = smithyClient.expectString(output[_sIRI]);
    }
    if (output[_sPp] != null) {
        contents[_SPp] = smithyClient.expectString(output[_sPp]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_SpotInstanceStatus(output[_sta]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_vF] != null) {
        contents[_VF] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vF]));
    }
    if (output[_vU] != null) {
        contents[_VU] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_vU]));
    }
    if (output[_iIB] != null) {
        contents[_IIB] = smithyClient.expectString(output[_iIB]);
    }
    return contents;
};
const de_SpotInstanceRequestList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotInstanceRequest(entry);
    });
};
const de_SpotInstanceStateFault = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_SpotInstanceStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    if (output[_uT] != null) {
        contents[_UTp] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_uT]));
    }
    return contents;
};
const de_SpotMaintenanceStrategies = (output, context) => {
    const contents = {};
    if (output[_cRa] != null) {
        contents[_CRap] = de_SpotCapacityRebalance(output[_cRa]);
    }
    return contents;
};
const de_SpotOptions = (output, context) => {
    const contents = {};
    if (output[_aSl] != null) {
        contents[_AS] = smithyClient.expectString(output[_aSl]);
    }
    if (output[_mSai] != null) {
        contents[_MS] = de_FleetSpotMaintenanceStrategies(output[_mSai]);
    }
    if (output[_iIB] != null) {
        contents[_IIB] = smithyClient.expectString(output[_iIB]);
    }
    if (output[_iPTUC] != null) {
        contents[_IPTUC] = smithyClient.strictParseInt32(output[_iPTUC]);
    }
    if (output[_sITi] != null) {
        contents[_SITi] = smithyClient.parseBoolean(output[_sITi]);
    }
    if (output[_sAZ] != null) {
        contents[_SAZ] = smithyClient.parseBoolean(output[_sAZ]);
    }
    if (output[_mTC] != null) {
        contents[_MTC] = smithyClient.strictParseInt32(output[_mTC]);
    }
    if (output[_mTP] != null) {
        contents[_MTP] = smithyClient.expectString(output[_mTP]);
    }
    return contents;
};
const de_SpotPlacement = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_t] != null) {
        contents[_Te] = smithyClient.expectString(output[_t]);
    }
    return contents;
};
const de_SpotPlacementScore = (output, context) => {
    const contents = {};
    if (output[_re] != null) {
        contents[_Regi] = smithyClient.expectString(output[_re]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_sco] != null) {
        contents[_Sco] = smithyClient.strictParseInt32(output[_sco]);
    }
    return contents;
};
const de_SpotPlacementScores = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotPlacementScore(entry);
    });
};
const de_SpotPrice = (output, context) => {
    const contents = {};
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_iT] != null) {
        contents[_IT] = smithyClient.expectString(output[_iT]);
    }
    if (output[_pDr] != null) {
        contents[_PDr] = smithyClient.expectString(output[_pDr]);
    }
    if (output[_sPp] != null) {
        contents[_SPp] = smithyClient.expectString(output[_sPp]);
    }
    if (output[_ti] != null) {
        contents[_Tim] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_ti]));
    }
    return contents;
};
const de_SpotPriceHistoryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpotPrice(entry);
    });
};
const de_StaleIpPermission = (output, context) => {
    const contents = {};
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_iPpr] != null) {
        contents[_IPpr] = smithyClient.expectString(output[_iPpr]);
    }
    if (String(output.ipRanges).trim() === "") {
        contents[_IRp] = [];
    }
    else if (output[_iRpa] != null && output[_iRpa][_i] != null) {
        contents[_IRp] = de_IpRanges(smithyClient.getArrayIfSingleItem(output[_iRpa][_i]));
    }
    if (String(output.prefixListIds).trim() === "") {
        contents[_PLIr] = [];
    }
    else if (output[_pLIr] != null && output[_pLIr][_i] != null) {
        contents[_PLIr] = de_PrefixListIdSet(smithyClient.getArrayIfSingleItem(output[_pLIr][_i]));
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    if (String(output.groups).trim() === "") {
        contents[_UIGP] = [];
    }
    else if (output[_gr] != null && output[_gr][_i] != null) {
        contents[_UIGP] = de_UserIdGroupPairSet(smithyClient.getArrayIfSingleItem(output[_gr][_i]));
    }
    return contents;
};
const de_StaleIpPermissionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StaleIpPermission(entry);
    });
};
const de_StaleSecurityGroup = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (String(output.staleIpPermissions).trim() === "") {
        contents[_SIP] = [];
    }
    else if (output[_sIP] != null && output[_sIP][_i] != null) {
        contents[_SIP] = de_StaleIpPermissionSet(smithyClient.getArrayIfSingleItem(output[_sIP][_i]));
    }
    if (String(output.staleIpPermissionsEgress).trim() === "") {
        contents[_SIPE] = [];
    }
    else if (output[_sIPE] != null && output[_sIPE][_i] != null) {
        contents[_SIPE] = de_StaleIpPermissionSet(smithyClient.getArrayIfSingleItem(output[_sIPE][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_StaleSecurityGroupSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StaleSecurityGroup(entry);
    });
};
const de_StartDeclarativePoliciesReportResult = (output, context) => {
    const contents = {};
    if (output[_rI] != null) {
        contents[_RIep] = smithyClient.expectString(output[_rI]);
    }
    return contents;
};
const de_StartInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instancesSet).trim() === "") {
        contents[_SIta] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_SIta] = de_InstanceStateChangeList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    return contents;
};
const de_StartNetworkInsightsAccessScopeAnalysisResult = (output, context) => {
    const contents = {};
    if (output[_nIASAe] != null) {
        contents[_NIASAet] = de_NetworkInsightsAccessScopeAnalysis(output[_nIASAe]);
    }
    return contents;
};
const de_StartNetworkInsightsAnalysisResult = (output, context) => {
    const contents = {};
    if (output[_nIA] != null) {
        contents[_NIAe] = de_NetworkInsightsAnalysis(output[_nIA]);
    }
    return contents;
};
const de_StartVpcEndpointServicePrivateDnsVerificationResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_RV] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_StateReason = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_StopInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instancesSet).trim() === "") {
        contents[_SIto] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_SIto] = de_InstanceStateChangeList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    return contents;
};
const de_Storage = (output, context) => {
    const contents = {};
    if (output[_S_] != null) {
        contents[_S_] = de_S3Storage(output[_S_], context);
    }
    return contents;
};
const de_StoreImageTaskResult = (output, context) => {
    const contents = {};
    if (output[_aIm] != null) {
        contents[_AIm] = smithyClient.expectString(output[_aIm]);
    }
    if (output[_tSTa] != null) {
        contents[_TSTa] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_tSTa]));
    }
    if (output[_bu] != null) {
        contents[_B] = smithyClient.expectString(output[_bu]);
    }
    if (output[_sKo] != null) {
        contents[_SKo] = smithyClient.expectString(output[_sKo]);
    }
    if (output[_pP] != null) {
        contents[_PP] = smithyClient.strictParseInt32(output[_pP]);
    }
    if (output[_sTS] != null) {
        contents[_STSt] = smithyClient.expectString(output[_sTS]);
    }
    if (output[_sTFR] != null) {
        contents[_STFR] = smithyClient.expectString(output[_sTFR]);
    }
    return contents;
};
const de_StoreImageTaskResultSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StoreImageTaskResult(entry);
    });
};
const de_StringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Subnet = (output, context) => {
    const contents = {};
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_eLADI] != null) {
        contents[_ELADI] = smithyClient.strictParseInt32(output[_eLADI]);
    }
    if (output[_mCOIOL] != null) {
        contents[_MCOIOL] = smithyClient.parseBoolean(output[_mCOIOL]);
    }
    if (output[_cOIP] != null) {
        contents[_COIP] = smithyClient.expectString(output[_cOIP]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_aIAOC] != null) {
        contents[_AIAOC] = smithyClient.parseBoolean(output[_aIAOC]);
    }
    if (String(output.ipv6CidrBlockAssociationSet).trim() === "") {
        contents[_ICBAS] = [];
    }
    else if (output[_iCBAS] != null && output[_iCBAS][_i] != null) {
        contents[_ICBAS] = de_SubnetIpv6CidrBlockAssociationSet(smithyClient.getArrayIfSingleItem(output[_iCBAS][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sAub] != null) {
        contents[_SAub] = smithyClient.expectString(output[_sAub]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_eDn] != null) {
        contents[_EDn] = smithyClient.parseBoolean(output[_eDn]);
    }
    if (output[_iN] != null) {
        contents[_IN] = smithyClient.parseBoolean(output[_iN]);
    }
    if (output[_pDNOOL] != null) {
        contents[_PDNOOL] = de_PrivateDnsNameOptionsOnLaunch(output[_pDNOOL]);
    }
    if (output[_bPAS] != null) {
        contents[_BPAS] = de_BlockPublicAccessStates(output[_bPAS]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_cB] != null) {
        contents[_CB] = smithyClient.expectString(output[_cB]);
    }
    if (output[_aIAC] != null) {
        contents[_AIAC] = smithyClient.strictParseInt32(output[_aIAC]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_dFA] != null) {
        contents[_DFA] = smithyClient.parseBoolean(output[_dFA]);
    }
    if (output[_mPIOL] != null) {
        contents[_MPIOL] = smithyClient.parseBoolean(output[_mPIOL]);
    }
    return contents;
};
const de_SubnetAssociation = (output, context) => {
    const contents = {};
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_SubnetAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetAssociation(entry);
    });
};
const de_SubnetCidrBlockState = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    return contents;
};
const de_SubnetCidrReservation = (output, context) => {
    const contents = {};
    if (output[_sCRI] != null) {
        contents[_SCRIu] = smithyClient.expectString(output[_sCRI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (output[_rT] != null) {
        contents[_RTes] = smithyClient.expectString(output[_rT]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_SubnetCidrReservationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetCidrReservation(entry);
    });
};
const de_SubnetIpPrefixes = (output, context) => {
    const contents = {};
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (String(output.ipPrefixSet).trim() === "") {
        contents[_IPpre] = [];
    }
    else if (output[_iPSpr] != null && output[_iPSpr][_i] != null) {
        contents[_IPpre] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_iPSpr][_i]));
    }
    return contents;
};
const de_SubnetIpPrefixesList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetIpPrefixes(entry);
    });
};
const de_SubnetIpv6CidrBlockAssociation = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_iCB] != null) {
        contents[_ICB] = smithyClient.expectString(output[_iCB]);
    }
    if (output[_iCBS] != null) {
        contents[_ICBS] = de_SubnetCidrBlockState(output[_iCBS]);
    }
    if (output[_iAA] != null) {
        contents[_IAA] = smithyClient.expectString(output[_iAA]);
    }
    if (output[_iSpo] != null) {
        contents[_ISpo] = smithyClient.expectString(output[_iSpo]);
    }
    return contents;
};
const de_SubnetIpv6CidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubnetIpv6CidrBlockAssociation(entry);
    });
};
const de_SubnetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subnet(entry);
    });
};
const de_Subscription = (output, context) => {
    const contents = {};
    if (output[_s] != null) {
        contents[_S] = smithyClient.expectString(output[_s]);
    }
    if (output[_d] != null) {
        contents[_D] = smithyClient.expectString(output[_d]);
    }
    if (output[_met] != null) {
        contents[_Met] = smithyClient.expectString(output[_met]);
    }
    if (output[_stat] != null) {
        contents[_Sta] = smithyClient.expectString(output[_stat]);
    }
    if (output[_pe] != null) {
        contents[_Per] = smithyClient.expectString(output[_pe]);
    }
    return contents;
};
const de_SubscriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Subscription(entry);
    });
};
const de_SuccessfulInstanceCreditSpecificationItem = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    return contents;
};
const de_SuccessfulInstanceCreditSpecificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuccessfulInstanceCreditSpecificationItem(entry);
    });
};
const de_SuccessfulQueuedPurchaseDeletion = (output, context) => {
    const contents = {};
    if (output[_rII] != null) {
        contents[_RIIe] = smithyClient.expectString(output[_rII]);
    }
    return contents;
};
const de_SuccessfulQueuedPurchaseDeletionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SuccessfulQueuedPurchaseDeletion(entry);
    });
};
const de_SupportedAdditionalProcessorFeatureList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_SupportedIpAddressTypes = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_SupportedRegionDetail = (output, context) => {
    const contents = {};
    if (output[_re] != null) {
        contents[_Regi] = smithyClient.expectString(output[_re]);
    }
    if (output[_sSer] != null) {
        contents[_SSe] = smithyClient.expectString(output[_sSer]);
    }
    return contents;
};
const de_SupportedRegionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SupportedRegionDetail(entry);
    });
};
const de_Tag = (output, context) => {
    const contents = {};
    if (output[_k] != null) {
        contents[_Ke] = smithyClient.expectString(output[_k]);
    }
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_TagDescription = (output, context) => {
    const contents = {};
    if (output[_k] != null) {
        contents[_Ke] = smithyClient.expectString(output[_k]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_v] != null) {
        contents[_Va] = smithyClient.expectString(output[_v]);
    }
    return contents;
};
const de_TagDescriptionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TagDescription(entry);
    });
};
const de_TagList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
};
const de_TagSpecification = (output, context) => {
    const contents = {};
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (String(output.Tag).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_Tag] != null && output[_Tag][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_Tag][_i]));
    }
    return contents;
};
const de_TagSpecificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TagSpecification(entry);
    });
};
const de_TargetCapacitySpecification = (output, context) => {
    const contents = {};
    if (output[_tTC] != null) {
        contents[_TTC] = smithyClient.strictParseInt32(output[_tTC]);
    }
    if (output[_oDTC] != null) {
        contents[_ODTC] = smithyClient.strictParseInt32(output[_oDTC]);
    }
    if (output[_sTC] != null) {
        contents[_STC] = smithyClient.strictParseInt32(output[_sTC]);
    }
    if (output[_dTCT] != null) {
        contents[_DTCT] = smithyClient.expectString(output[_dTCT]);
    }
    if (output[_tCUT] != null) {
        contents[_TCUT] = smithyClient.expectString(output[_tCUT]);
    }
    return contents;
};
const de_TargetConfiguration = (output, context) => {
    const contents = {};
    if (output[_iC] != null) {
        contents[_IC] = smithyClient.strictParseInt32(output[_iC]);
    }
    if (output[_oIf] != null) {
        contents[_OI] = smithyClient.expectString(output[_oIf]);
    }
    return contents;
};
const de_TargetGroup = (output, context) => {
    const contents = {};
    if (output[_ar] != null) {
        contents[_Ar] = smithyClient.expectString(output[_ar]);
    }
    return contents;
};
const de_TargetGroups = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetGroup(entry);
    });
};
const de_TargetGroupsConfig = (output, context) => {
    const contents = {};
    if (String(output.targetGroups).trim() === "") {
        contents[_TG] = [];
    }
    else if (output[_tGa] != null && output[_tGa][_i] != null) {
        contents[_TG] = de_TargetGroups(smithyClient.getArrayIfSingleItem(output[_tGa][_i]));
    }
    return contents;
};
const de_TargetNetwork = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_tNI] != null) {
        contents[_TNI] = smithyClient.expectString(output[_tNI]);
    }
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_AssociationStatus(output[_sta]);
    }
    if (String(output.securityGroups).trim() === "") {
        contents[_SG] = [];
    }
    else if (output[_sGe] != null && output[_sGe][_i] != null) {
        contents[_SG] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sGe][_i]));
    }
    return contents;
};
const de_TargetNetworkSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetNetwork(entry);
    });
};
const de_TargetReservationValue = (output, context) => {
    const contents = {};
    if (output[_rVe] != null) {
        contents[_RVe] = de_ReservationValue(output[_rVe]);
    }
    if (output[_tCa] != null) {
        contents[_TCar] = de_TargetConfiguration(output[_tCa]);
    }
    return contents;
};
const de_TargetReservationValueSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TargetReservationValue(entry);
    });
};
const de_TerminateClientVpnConnectionsResult = (output, context) => {
    const contents = {};
    if (output[_cVEI] != null) {
        contents[_CVEI] = smithyClient.expectString(output[_cVEI]);
    }
    if (output[_us] != null) {
        contents[_Us] = smithyClient.expectString(output[_us]);
    }
    if (String(output.connectionStatuses).trim() === "") {
        contents[_CSonn] = [];
    }
    else if (output[_cSonn] != null && output[_cSonn][_i] != null) {
        contents[_CSonn] = de_TerminateConnectionStatusSet(smithyClient.getArrayIfSingleItem(output[_cSonn][_i]));
    }
    return contents;
};
const de_TerminateConnectionStatus = (output, context) => {
    const contents = {};
    if (output[_cIon] != null) {
        contents[_CIo] = smithyClient.expectString(output[_cIon]);
    }
    if (output[_pSre] != null) {
        contents[_PSrev] = de_ClientVpnConnectionStatus(output[_pSre]);
    }
    if (output[_cSur] != null) {
        contents[_CSur] = de_ClientVpnConnectionStatus(output[_cSur]);
    }
    return contents;
};
const de_TerminateConnectionStatusSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TerminateConnectionStatus(entry);
    });
};
const de_TerminateInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instancesSet).trim() === "") {
        contents[_TIer] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_TIer] = de_InstanceStateChangeList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    return contents;
};
const de_ThreadsPerCoreList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.strictParseInt32(entry);
    });
};
const de_ThroughResourcesStatement = (output, context) => {
    const contents = {};
    if (output[_rSeso] != null) {
        contents[_RSe] = de_ResourceStatement(output[_rSeso]);
    }
    return contents;
};
const de_ThroughResourcesStatementList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ThroughResourcesStatement(entry);
    });
};
const de_TotalLocalStorageGB = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseFloat(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseFloat(output[_ma]);
    }
    return contents;
};
const de_TrafficMirrorFilter = (output, context) => {
    const contents = {};
    if (output[_tMFI] != null) {
        contents[_TMFI] = smithyClient.expectString(output[_tMFI]);
    }
    if (String(output.ingressFilterRuleSet).trim() === "") {
        contents[_IFRn] = [];
    }
    else if (output[_iFRS] != null && output[_iFRS][_i] != null) {
        contents[_IFRn] = de_TrafficMirrorFilterRuleList(smithyClient.getArrayIfSingleItem(output[_iFRS][_i]));
    }
    if (String(output.egressFilterRuleSet).trim() === "") {
        contents[_EFR] = [];
    }
    else if (output[_eFRS] != null && output[_eFRS][_i] != null) {
        contents[_EFR] = de_TrafficMirrorFilterRuleList(smithyClient.getArrayIfSingleItem(output[_eFRS][_i]));
    }
    if (String(output.networkServiceSet).trim() === "") {
        contents[_NSe] = [];
    }
    else if (output[_nSS] != null && output[_nSS][_i] != null) {
        contents[_NSe] = de_TrafficMirrorNetworkServiceList(smithyClient.getArrayIfSingleItem(output[_nSS][_i]));
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TrafficMirrorFilterRule = (output, context) => {
    const contents = {};
    if (output[_tMFRI] != null) {
        contents[_TMFRI] = smithyClient.expectString(output[_tMFRI]);
    }
    if (output[_tMFI] != null) {
        contents[_TMFI] = smithyClient.expectString(output[_tMFI]);
    }
    if (output[_tDr] != null) {
        contents[_TD] = smithyClient.expectString(output[_tDr]);
    }
    if (output[_rN] != null) {
        contents[_RNu] = smithyClient.strictParseInt32(output[_rN]);
    }
    if (output[_rA] != null) {
        contents[_RAu] = smithyClient.expectString(output[_rA]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.strictParseInt32(output[_pr]);
    }
    if (output[_dPR] != null) {
        contents[_DPR] = de_TrafficMirrorPortRange(output[_dPR]);
    }
    if (output[_sPR] != null) {
        contents[_SPR] = de_TrafficMirrorPortRange(output[_sPR]);
    }
    if (output[_dCB] != null) {
        contents[_DCBe] = smithyClient.expectString(output[_dCB]);
    }
    if (output[_sCB] != null) {
        contents[_SCB] = smithyClient.expectString(output[_sCB]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TrafficMirrorFilterRuleList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorFilterRule(entry);
    });
};
const de_TrafficMirrorFilterRuleSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorFilterRule(entry);
    });
};
const de_TrafficMirrorFilterSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorFilter(entry);
    });
};
const de_TrafficMirrorNetworkServiceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_TrafficMirrorPortRange = (output, context) => {
    const contents = {};
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    return contents;
};
const de_TrafficMirrorSession = (output, context) => {
    const contents = {};
    if (output[_tMSI] != null) {
        contents[_TMSI] = smithyClient.expectString(output[_tMSI]);
    }
    if (output[_tMTI] != null) {
        contents[_TMTI] = smithyClient.expectString(output[_tMTI]);
    }
    if (output[_tMFI] != null) {
        contents[_TMFI] = smithyClient.expectString(output[_tMFI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_pLa] != null) {
        contents[_PL] = smithyClient.strictParseInt32(output[_pLa]);
    }
    if (output[_sNes] != null) {
        contents[_SN] = smithyClient.strictParseInt32(output[_sNes]);
    }
    if (output[_vNI] != null) {
        contents[_VNI] = smithyClient.strictParseInt32(output[_vNI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TrafficMirrorSessionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorSession(entry);
    });
};
const de_TrafficMirrorTarget = (output, context) => {
    const contents = {};
    if (output[_tMTI] != null) {
        contents[_TMTI] = smithyClient.expectString(output[_tMTI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_nLBA] != null) {
        contents[_NLBA] = smithyClient.expectString(output[_nLBA]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_gLBEI] != null) {
        contents[_GLBEI] = smithyClient.expectString(output[_gLBEI]);
    }
    return contents;
};
const de_TrafficMirrorTargetSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrafficMirrorTarget(entry);
    });
};
const de_TransitGateway = (output, context) => {
    const contents = {};
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_tGAra] != null) {
        contents[_TGAran] = smithyClient.expectString(output[_tGAra]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (output[_opt] != null) {
        contents[_Op] = de_TransitGatewayOptions(output[_opt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayAssociation = (output, context) => {
    const contents = {};
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_TransitGatewayAttachment = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_tGOI] != null) {
        contents[_TGOI] = smithyClient.expectString(output[_tGOI]);
    }
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_ass] != null) {
        contents[_Asso] = de_TransitGatewayAttachmentAssociation(output[_ass]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayAttachmentAssociation = (output, context) => {
    const contents = {};
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_TransitGatewayAttachmentBgpConfiguration = (output, context) => {
    const contents = {};
    if (output[_tGAran] != null) {
        contents[_TGArans] = smithyClient.strictParseLong(output[_tGAran]);
    }
    if (output[_pAee] != null) {
        contents[_PAee] = smithyClient.strictParseLong(output[_pAee]);
    }
    if (output[_tGArans] != null) {
        contents[_TGA] = smithyClient.expectString(output[_tGArans]);
    }
    if (output[_pAe] != null) {
        contents[_PAe] = smithyClient.expectString(output[_pAe]);
    }
    if (output[_bSg] != null) {
        contents[_BSg] = smithyClient.expectString(output[_bSg]);
    }
    return contents;
};
const de_TransitGatewayAttachmentBgpConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayAttachmentBgpConfiguration(entry);
    });
};
const de_TransitGatewayAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayAttachment(entry);
    });
};
const de_TransitGatewayAttachmentPropagation = (output, context) => {
    const contents = {};
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_TransitGatewayAttachmentPropagationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayAttachmentPropagation(entry);
    });
};
const de_TransitGatewayConnect = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_tTGAI] != null) {
        contents[_TTGAI] = smithyClient.expectString(output[_tTGAI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (output[_opt] != null) {
        contents[_Op] = de_TransitGatewayConnectOptions(output[_opt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayConnectList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayConnect(entry);
    });
};
const de_TransitGatewayConnectOptions = (output, context) => {
    const contents = {};
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    return contents;
};
const de_TransitGatewayConnectPeer = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_tGCPI] != null) {
        contents[_TGCPI] = smithyClient.expectString(output[_tGCPI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (output[_cPC] != null) {
        contents[_CPC] = de_TransitGatewayConnectPeerConfiguration(output[_cPC]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayConnectPeerConfiguration = (output, context) => {
    const contents = {};
    if (output[_tGArans] != null) {
        contents[_TGA] = smithyClient.expectString(output[_tGArans]);
    }
    if (output[_pAe] != null) {
        contents[_PAe] = smithyClient.expectString(output[_pAe]);
    }
    if (String(output.insideCidrBlocks).trim() === "") {
        contents[_ICBn] = [];
    }
    else if (output[_iCBn] != null && output[_iCBn][_i] != null) {
        contents[_ICBn] = de_InsideCidrBlocksStringList(smithyClient.getArrayIfSingleItem(output[_iCBn][_i]));
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (String(output.bgpConfigurations).trim() === "") {
        contents[_BCg] = [];
    }
    else if (output[_bCg] != null && output[_bCg][_i] != null) {
        contents[_BCg] = de_TransitGatewayAttachmentBgpConfigurationList(smithyClient.getArrayIfSingleItem(output[_bCg][_i]));
    }
    return contents;
};
const de_TransitGatewayConnectPeerList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayConnectPeer(entry);
    });
};
const de_TransitGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGateway(entry);
    });
};
const de_TransitGatewayMulticastDeregisteredGroupMembers = (output, context) => {
    const contents = {};
    if (output[_tGMDI] != null) {
        contents[_TGMDI] = smithyClient.expectString(output[_tGMDI]);
    }
    if (String(output.deregisteredNetworkInterfaceIds).trim() === "") {
        contents[_DNII] = [];
    }
    else if (output[_dNII] != null && output[_dNII][_i] != null) {
        contents[_DNII] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dNII][_i]));
    }
    if (output[_gIA] != null) {
        contents[_GIA] = smithyClient.expectString(output[_gIA]);
    }
    return contents;
};
const de_TransitGatewayMulticastDeregisteredGroupSources = (output, context) => {
    const contents = {};
    if (output[_tGMDI] != null) {
        contents[_TGMDI] = smithyClient.expectString(output[_tGMDI]);
    }
    if (String(output.deregisteredNetworkInterfaceIds).trim() === "") {
        contents[_DNII] = [];
    }
    else if (output[_dNII] != null && output[_dNII][_i] != null) {
        contents[_DNII] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_dNII][_i]));
    }
    if (output[_gIA] != null) {
        contents[_GIA] = smithyClient.expectString(output[_gIA]);
    }
    return contents;
};
const de_TransitGatewayMulticastDomain = (output, context) => {
    const contents = {};
    if (output[_tGMDI] != null) {
        contents[_TGMDI] = smithyClient.expectString(output[_tGMDI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_tGMDA] != null) {
        contents[_TGMDA] = smithyClient.expectString(output[_tGMDA]);
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_opt] != null) {
        contents[_Op] = de_TransitGatewayMulticastDomainOptions(output[_opt]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayMulticastDomainAssociation = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (output[_su] != null) {
        contents[_Su] = de_SubnetAssociation(output[_su]);
    }
    return contents;
};
const de_TransitGatewayMulticastDomainAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayMulticastDomainAssociation(entry);
    });
};
const de_TransitGatewayMulticastDomainAssociations = (output, context) => {
    const contents = {};
    if (output[_tGMDI] != null) {
        contents[_TGMDI] = smithyClient.expectString(output[_tGMDI]);
    }
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (String(output.subnets).trim() === "") {
        contents[_Subn] = [];
    }
    else if (output[_sub] != null && output[_sub][_i] != null) {
        contents[_Subn] = de_SubnetAssociationList(smithyClient.getArrayIfSingleItem(output[_sub][_i]));
    }
    return contents;
};
const de_TransitGatewayMulticastDomainList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayMulticastDomain(entry);
    });
};
const de_TransitGatewayMulticastDomainOptions = (output, context) => {
    const contents = {};
    if (output[_iSg] != null) {
        contents[_ISg] = smithyClient.expectString(output[_iSg]);
    }
    if (output[_sSS] != null) {
        contents[_SSS] = smithyClient.expectString(output[_sSS]);
    }
    if (output[_aASA] != null) {
        contents[_AASA] = smithyClient.expectString(output[_aASA]);
    }
    return contents;
};
const de_TransitGatewayMulticastGroup = (output, context) => {
    const contents = {};
    if (output[_gIA] != null) {
        contents[_GIA] = smithyClient.expectString(output[_gIA]);
    }
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_sIu] != null) {
        contents[_SIub] = smithyClient.expectString(output[_sIu]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rOI] != null) {
        contents[_ROI] = smithyClient.expectString(output[_rOI]);
    }
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_gM] != null) {
        contents[_GM] = smithyClient.parseBoolean(output[_gM]);
    }
    if (output[_gSr] != null) {
        contents[_GS] = smithyClient.parseBoolean(output[_gSr]);
    }
    if (output[_mTe] != null) {
        contents[_MTe] = smithyClient.expectString(output[_mTe]);
    }
    if (output[_sTo] != null) {
        contents[_STo] = smithyClient.expectString(output[_sTo]);
    }
    return contents;
};
const de_TransitGatewayMulticastGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayMulticastGroup(entry);
    });
};
const de_TransitGatewayMulticastRegisteredGroupMembers = (output, context) => {
    const contents = {};
    if (output[_tGMDI] != null) {
        contents[_TGMDI] = smithyClient.expectString(output[_tGMDI]);
    }
    if (String(output.registeredNetworkInterfaceIds).trim() === "") {
        contents[_RNII] = [];
    }
    else if (output[_rNII] != null && output[_rNII][_i] != null) {
        contents[_RNII] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_rNII][_i]));
    }
    if (output[_gIA] != null) {
        contents[_GIA] = smithyClient.expectString(output[_gIA]);
    }
    return contents;
};
const de_TransitGatewayMulticastRegisteredGroupSources = (output, context) => {
    const contents = {};
    if (output[_tGMDI] != null) {
        contents[_TGMDI] = smithyClient.expectString(output[_tGMDI]);
    }
    if (String(output.registeredNetworkInterfaceIds).trim() === "") {
        contents[_RNII] = [];
    }
    else if (output[_rNII] != null && output[_rNII][_i] != null) {
        contents[_RNII] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_rNII][_i]));
    }
    if (output[_gIA] != null) {
        contents[_GIA] = smithyClient.expectString(output[_gIA]);
    }
    return contents;
};
const de_TransitGatewayOptions = (output, context) => {
    const contents = {};
    if (output[_aSA] != null) {
        contents[_ASA] = smithyClient.strictParseLong(output[_aSA]);
    }
    if (String(output.transitGatewayCidrBlocks).trim() === "") {
        contents[_TGCB] = [];
    }
    else if (output[_tGCB] != null && output[_tGCB][_i] != null) {
        contents[_TGCB] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_tGCB][_i]));
    }
    if (output[_aASAu] != null) {
        contents[_AASAu] = smithyClient.expectString(output[_aASAu]);
    }
    if (output[_dRTA] != null) {
        contents[_DRTA] = smithyClient.expectString(output[_dRTA]);
    }
    if (output[_aDRTI] != null) {
        contents[_ADRTI] = smithyClient.expectString(output[_aDRTI]);
    }
    if (output[_dRTP] != null) {
        contents[_DRTP] = smithyClient.expectString(output[_dRTP]);
    }
    if (output[_pDRTI] != null) {
        contents[_PDRTI] = smithyClient.expectString(output[_pDRTI]);
    }
    if (output[_vESpn] != null) {
        contents[_VES] = smithyClient.expectString(output[_vESpn]);
    }
    if (output[_dSn] != null) {
        contents[_DSns] = smithyClient.expectString(output[_dSn]);
    }
    if (output[_sGRSec] != null) {
        contents[_SGRS] = smithyClient.expectString(output[_sGRSec]);
    }
    if (output[_mSu] != null) {
        contents[_MSu] = smithyClient.expectString(output[_mSu]);
    }
    return contents;
};
const de_TransitGatewayPeeringAttachment = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_aTGAI] != null) {
        contents[_ATGAI] = smithyClient.expectString(output[_aTGAI]);
    }
    if (output[_rTIe] != null) {
        contents[_RTIe] = de_PeeringTgwInfo(output[_rTIe]);
    }
    if (output[_aTI] != null) {
        contents[_ATIc] = de_PeeringTgwInfo(output[_aTI]);
    }
    if (output[_opt] != null) {
        contents[_Op] = de_TransitGatewayPeeringAttachmentOptions(output[_opt]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_PeeringAttachmentStatus(output[_sta]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayPeeringAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPeeringAttachment(entry);
    });
};
const de_TransitGatewayPeeringAttachmentOptions = (output, context) => {
    const contents = {};
    if (output[_dRy] != null) {
        contents[_DRy] = smithyClient.expectString(output[_dRy]);
    }
    return contents;
};
const de_TransitGatewayPolicyRule = (output, context) => {
    const contents = {};
    if (output[_sCB] != null) {
        contents[_SCB] = smithyClient.expectString(output[_sCB]);
    }
    if (output[_sPR] != null) {
        contents[_SPR] = smithyClient.expectString(output[_sPR]);
    }
    if (output[_dCB] != null) {
        contents[_DCBe] = smithyClient.expectString(output[_dCB]);
    }
    if (output[_dPR] != null) {
        contents[_DPR] = smithyClient.expectString(output[_dPR]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_mDe] != null) {
        contents[_MDe] = de_TransitGatewayPolicyRuleMetaData(output[_mDe]);
    }
    return contents;
};
const de_TransitGatewayPolicyRuleMetaData = (output, context) => {
    const contents = {};
    if (output[_mDK] != null) {
        contents[_MDK] = smithyClient.expectString(output[_mDK]);
    }
    if (output[_mDV] != null) {
        contents[_MDV] = smithyClient.expectString(output[_mDV]);
    }
    return contents;
};
const de_TransitGatewayPolicyTable = (output, context) => {
    const contents = {};
    if (output[_tGPTI] != null) {
        contents[_TGPTI] = smithyClient.expectString(output[_tGPTI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayPolicyTableAssociation = (output, context) => {
    const contents = {};
    if (output[_tGPTI] != null) {
        contents[_TGPTI] = smithyClient.expectString(output[_tGPTI]);
    }
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_TransitGatewayPolicyTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPolicyTableAssociation(entry);
    });
};
const de_TransitGatewayPolicyTableEntry = (output, context) => {
    const contents = {};
    if (output[_pRN] != null) {
        contents[_PRNo] = smithyClient.expectString(output[_pRN]);
    }
    if (output[_pRol] != null) {
        contents[_PRol] = de_TransitGatewayPolicyRule(output[_pRol]);
    }
    if (output[_tRTI] != null) {
        contents[_TRTI] = smithyClient.expectString(output[_tRTI]);
    }
    return contents;
};
const de_TransitGatewayPolicyTableEntryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPolicyTableEntry(entry);
    });
};
const de_TransitGatewayPolicyTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPolicyTable(entry);
    });
};
const de_TransitGatewayPrefixListAttachment = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    return contents;
};
const de_TransitGatewayPrefixListReference = (output, context) => {
    const contents = {};
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_pLOI] != null) {
        contents[_PLOI] = smithyClient.expectString(output[_pLOI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_bl] != null) {
        contents[_Bl] = smithyClient.parseBoolean(output[_bl]);
    }
    if (output[_tGAr] != null) {
        contents[_TGAra] = de_TransitGatewayPrefixListAttachment(output[_tGAr]);
    }
    return contents;
};
const de_TransitGatewayPrefixListReferenceSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayPrefixListReference(entry);
    });
};
const de_TransitGatewayPropagation = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_tGRTAI] != null) {
        contents[_TGRTAI] = smithyClient.expectString(output[_tGRTAI]);
    }
    return contents;
};
const de_TransitGatewayRoute = (output, context) => {
    const contents = {};
    if (output[_dCB] != null) {
        contents[_DCBe] = smithyClient.expectString(output[_dCB]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_tGRTAI] != null) {
        contents[_TGRTAI] = smithyClient.expectString(output[_tGRTAI]);
    }
    if (String(output.transitGatewayAttachments).trim() === "") {
        contents[_TGAr] = [];
    }
    else if (output[_tGA] != null && output[_tGA][_i] != null) {
        contents[_TGAr] = de_TransitGatewayRouteAttachmentList(smithyClient.getArrayIfSingleItem(output[_tGA][_i]));
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_TransitGatewayRouteAttachment = (output, context) => {
    const contents = {};
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    return contents;
};
const de_TransitGatewayRouteAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteAttachment(entry);
    });
};
const de_TransitGatewayRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRoute(entry);
    });
};
const de_TransitGatewayRouteTable = (output, context) => {
    const contents = {};
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_dART] != null) {
        contents[_DART] = smithyClient.parseBoolean(output[_dART]);
    }
    if (output[_dPRT] != null) {
        contents[_DPRT] = smithyClient.parseBoolean(output[_dPRT]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayRouteTableAnnouncement = (output, context) => {
    const contents = {};
    if (output[_tGRTAI] != null) {
        contents[_TGRTAI] = smithyClient.expectString(output[_tGRTAI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_cNIo] != null) {
        contents[_CNIor] = smithyClient.expectString(output[_cNIo]);
    }
    if (output[_pTGI] != null) {
        contents[_PTGI] = smithyClient.expectString(output[_pTGI]);
    }
    if (output[_pCNI] != null) {
        contents[_PCNI] = smithyClient.expectString(output[_pCNI]);
    }
    if (output[_pAI] != null) {
        contents[_PAIe] = smithyClient.expectString(output[_pAI]);
    }
    if (output[_aDn] != null) {
        contents[_ADn] = smithyClient.expectString(output[_aDn]);
    }
    if (output[_tGRTI] != null) {
        contents[_TGRTI] = smithyClient.expectString(output[_tGRTI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayRouteTableAnnouncementList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTableAnnouncement(entry);
    });
};
const de_TransitGatewayRouteTableAssociation = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_TransitGatewayRouteTableAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTableAssociation(entry);
    });
};
const de_TransitGatewayRouteTableList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTable(entry);
    });
};
const de_TransitGatewayRouteTablePropagation = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_tGRTAI] != null) {
        contents[_TGRTAI] = smithyClient.expectString(output[_tGRTAI]);
    }
    return contents;
};
const de_TransitGatewayRouteTablePropagationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayRouteTablePropagation(entry);
    });
};
const de_TransitGatewayRouteTableRoute = (output, context) => {
    const contents = {};
    if (output[_dC] != null) {
        contents[_DCe] = smithyClient.expectString(output[_dC]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_rOo] != null) {
        contents[_ROo] = smithyClient.expectString(output[_rOo]);
    }
    if (output[_pLI] != null) {
        contents[_PLI] = smithyClient.expectString(output[_pLI]);
    }
    if (output[_aIt] != null) {
        contents[_AIt] = smithyClient.expectString(output[_aIt]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    if (output[_rTe] != null) {
        contents[_RT] = smithyClient.expectString(output[_rTe]);
    }
    return contents;
};
const de_TransitGatewayVpcAttachment = (output, context) => {
    const contents = {};
    if (output[_tGAI] != null) {
        contents[_TGAI] = smithyClient.expectString(output[_tGAI]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_vOIp] != null) {
        contents[_VOIp] = smithyClient.expectString(output[_vOIp]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (String(output.subnetIds).trim() === "") {
        contents[_SIu] = [];
    }
    else if (output[_sIub] != null && output[_sIub][_i] != null) {
        contents[_SIu] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sIub][_i]));
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTre]));
    }
    if (output[_opt] != null) {
        contents[_Op] = de_TransitGatewayVpcAttachmentOptions(output[_opt]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TransitGatewayVpcAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransitGatewayVpcAttachment(entry);
    });
};
const de_TransitGatewayVpcAttachmentOptions = (output, context) => {
    const contents = {};
    if (output[_dSn] != null) {
        contents[_DSns] = smithyClient.expectString(output[_dSn]);
    }
    if (output[_sGRSec] != null) {
        contents[_SGRS] = smithyClient.expectString(output[_sGRSec]);
    }
    if (output[_iSpvu] != null) {
        contents[_ISp] = smithyClient.expectString(output[_iSpvu]);
    }
    if (output[_aMSp] != null) {
        contents[_AMS] = smithyClient.expectString(output[_aMSp]);
    }
    return contents;
};
const de_TrunkInterfaceAssociation = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_bII] != null) {
        contents[_BII] = smithyClient.expectString(output[_bII]);
    }
    if (output[_tII] != null) {
        contents[_TII] = smithyClient.expectString(output[_tII]);
    }
    if (output[_iPnte] != null) {
        contents[_IPnte] = smithyClient.expectString(output[_iPnte]);
    }
    if (output[_vIl] != null) {
        contents[_VIl] = smithyClient.strictParseInt32(output[_vIl]);
    }
    if (output[_gK] != null) {
        contents[_GK] = smithyClient.strictParseInt32(output[_gK]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_TrunkInterfaceAssociationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrunkInterfaceAssociation(entry);
    });
};
const de_TunnelOption = (output, context) => {
    const contents = {};
    if (output[_oIA] != null) {
        contents[_OIA] = smithyClient.expectString(output[_oIA]);
    }
    if (output[_tICu] != null) {
        contents[_TIC] = smithyClient.expectString(output[_tICu]);
    }
    if (output[_tIIC] != null) {
        contents[_TIIC] = smithyClient.expectString(output[_tIIC]);
    }
    if (output[_pSK] != null) {
        contents[_PSK] = smithyClient.expectString(output[_pSK]);
    }
    if (output[_pLSh] != null) {
        contents[_PLS] = smithyClient.strictParseInt32(output[_pLSh]);
    }
    if (output[_pLSha] != null) {
        contents[_PLSh] = smithyClient.strictParseInt32(output[_pLSha]);
    }
    if (output[_rMTS] != null) {
        contents[_RMTS] = smithyClient.strictParseInt32(output[_rMTS]);
    }
    if (output[_rFP] != null) {
        contents[_RFP] = smithyClient.strictParseInt32(output[_rFP]);
    }
    if (output[_rWS] != null) {
        contents[_RWS] = smithyClient.strictParseInt32(output[_rWS]);
    }
    if (output[_dTS] != null) {
        contents[_DTS] = smithyClient.strictParseInt32(output[_dTS]);
    }
    if (output[_dTA] != null) {
        contents[_DTA] = smithyClient.expectString(output[_dTA]);
    }
    if (String(output.phase1EncryptionAlgorithmSet).trim() === "") {
        contents[_PEA] = [];
    }
    else if (output[_pEAS] != null && output[_pEAS][_i] != null) {
        contents[_PEA] = de_Phase1EncryptionAlgorithmsList(smithyClient.getArrayIfSingleItem(output[_pEAS][_i]));
    }
    if (String(output.phase2EncryptionAlgorithmSet).trim() === "") {
        contents[_PEAh] = [];
    }
    else if (output[_pEASh] != null && output[_pEASh][_i] != null) {
        contents[_PEAh] = de_Phase2EncryptionAlgorithmsList(smithyClient.getArrayIfSingleItem(output[_pEASh][_i]));
    }
    if (String(output.phase1IntegrityAlgorithmSet).trim() === "") {
        contents[_PIAh] = [];
    }
    else if (output[_pIASh] != null && output[_pIASh][_i] != null) {
        contents[_PIAh] = de_Phase1IntegrityAlgorithmsList(smithyClient.getArrayIfSingleItem(output[_pIASh][_i]));
    }
    if (String(output.phase2IntegrityAlgorithmSet).trim() === "") {
        contents[_PIAha] = [];
    }
    else if (output[_pIASha] != null && output[_pIASha][_i] != null) {
        contents[_PIAha] = de_Phase2IntegrityAlgorithmsList(smithyClient.getArrayIfSingleItem(output[_pIASha][_i]));
    }
    if (String(output.phase1DHGroupNumberSet).trim() === "") {
        contents[_PDHGN] = [];
    }
    else if (output[_pDHGNS] != null && output[_pDHGNS][_i] != null) {
        contents[_PDHGN] = de_Phase1DHGroupNumbersList(smithyClient.getArrayIfSingleItem(output[_pDHGNS][_i]));
    }
    if (String(output.phase2DHGroupNumberSet).trim() === "") {
        contents[_PDHGNh] = [];
    }
    else if (output[_pDHGNSh] != null && output[_pDHGNSh][_i] != null) {
        contents[_PDHGNh] = de_Phase2DHGroupNumbersList(smithyClient.getArrayIfSingleItem(output[_pDHGNSh][_i]));
    }
    if (String(output.ikeVersionSet).trim() === "") {
        contents[_IVke] = [];
    }
    else if (output[_iVS] != null && output[_iVS][_i] != null) {
        contents[_IVke] = de_IKEVersionsList(smithyClient.getArrayIfSingleItem(output[_iVS][_i]));
    }
    if (output[_sAt] != null) {
        contents[_SA] = smithyClient.expectString(output[_sAt]);
    }
    if (output[_lO] != null) {
        contents[_LO] = de_VpnTunnelLogOptions(output[_lO]);
    }
    if (output[_eTLC] != null) {
        contents[_ETLC] = smithyClient.parseBoolean(output[_eTLC]);
    }
    return contents;
};
const de_TunnelOptionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TunnelOption(entry);
    });
};
const de_UnassignIpv6AddressesResult = (output, context) => {
    const contents = {};
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (String(output.unassignedIpv6Addresses).trim() === "") {
        contents[_UIAn] = [];
    }
    else if (output[_uIA] != null && output[_uIA][_i] != null) {
        contents[_UIAn] = de_Ipv6AddressList(smithyClient.getArrayIfSingleItem(output[_uIA][_i]));
    }
    if (String(output.unassignedIpv6PrefixSet).trim() === "") {
        contents[_UIPn] = [];
    }
    else if (output[_uIPSn] != null && output[_uIPSn][_i] != null) {
        contents[_UIPn] = de_IpPrefixList(smithyClient.getArrayIfSingleItem(output[_uIPSn][_i]));
    }
    return contents;
};
const de_UnassignPrivateNatGatewayAddressResult = (output, context) => {
    const contents = {};
    if (output[_nGI] != null) {
        contents[_NGI] = smithyClient.expectString(output[_nGI]);
    }
    if (String(output.natGatewayAddressSet).trim() === "") {
        contents[_NGA] = [];
    }
    else if (output[_nGAS] != null && output[_nGAS][_i] != null) {
        contents[_NGA] = de_NatGatewayAddressList(smithyClient.getArrayIfSingleItem(output[_nGAS][_i]));
    }
    return contents;
};
const de_UnlockSnapshotResult = (output, context) => {
    const contents = {};
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    return contents;
};
const de_UnmonitorInstancesResult = (output, context) => {
    const contents = {};
    if (String(output.instancesSet).trim() === "") {
        contents[_IMn] = [];
    }
    else if (output[_iSn] != null && output[_iSn][_i] != null) {
        contents[_IMn] = de_InstanceMonitoringList(smithyClient.getArrayIfSingleItem(output[_iSn][_i]));
    }
    return contents;
};
const de_UnsuccessfulInstanceCreditSpecificationItem = (output, context) => {
    const contents = {};
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_er] != null) {
        contents[_Er] = de_UnsuccessfulInstanceCreditSpecificationItemError(output[_er]);
    }
    return contents;
};
const de_UnsuccessfulInstanceCreditSpecificationItemError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_UnsuccessfulInstanceCreditSpecificationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulInstanceCreditSpecificationItem(entry);
    });
};
const de_UnsuccessfulItem = (output, context) => {
    const contents = {};
    if (output[_er] != null) {
        contents[_Er] = de_UnsuccessfulItemError(output[_er]);
    }
    if (output[_rIes] != null) {
        contents[_RIeso] = smithyClient.expectString(output[_rIes]);
    }
    return contents;
};
const de_UnsuccessfulItemError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_UnsuccessfulItemList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulItem(entry);
    });
};
const de_UnsuccessfulItemSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UnsuccessfulItem(entry);
    });
};
const de_UpdateSecurityGroupRuleDescriptionsEgressResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_UpdateSecurityGroupRuleDescriptionsIngressResult = (output, context) => {
    const contents = {};
    if (output[_r] != null) {
        contents[_Ret] = smithyClient.parseBoolean(output[_r]);
    }
    return contents;
};
const de_UsageClassTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_UserBucketDetails = (output, context) => {
    const contents = {};
    if (output[_sB] != null) {
        contents[_SB] = smithyClient.expectString(output[_sB]);
    }
    if (output[_sK] != null) {
        contents[_SK] = smithyClient.expectString(output[_sK]);
    }
    return contents;
};
const de_UserIdGroupPair = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_uI] != null) {
        contents[_UIs] = smithyClient.expectString(output[_uI]);
    }
    if (output[_gN] != null) {
        contents[_GN] = smithyClient.expectString(output[_gN]);
    }
    if (output[_gIr] != null) {
        contents[_GIr] = smithyClient.expectString(output[_gIr]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_vPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_vPCI]);
    }
    if (output[_pSee] != null) {
        contents[_PSe] = smithyClient.expectString(output[_pSee]);
    }
    return contents;
};
const de_UserIdGroupPairList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserIdGroupPair(entry);
    });
};
const de_UserIdGroupPairSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserIdGroupPair(entry);
    });
};
const de_UserIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_ValidationError = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_ValidationWarning = (output, context) => {
    const contents = {};
    if (String(output.errorSet).trim() === "") {
        contents[_Err] = [];
    }
    else if (output[_eSr] != null && output[_eSr][_i] != null) {
        contents[_Err] = de_ErrorSet(smithyClient.getArrayIfSingleItem(output[_eSr][_i]));
    }
    return contents;
};
const de_ValueStringList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_VCpuCountRange = (output, context) => {
    const contents = {};
    if (output[_m] != null) {
        contents[_M] = smithyClient.strictParseInt32(output[_m]);
    }
    if (output[_ma] != null) {
        contents[_Ma] = smithyClient.strictParseInt32(output[_ma]);
    }
    return contents;
};
const de_VCpuInfo = (output, context) => {
    const contents = {};
    if (output[_dVC] != null) {
        contents[_DVCef] = smithyClient.strictParseInt32(output[_dVC]);
    }
    if (output[_dCe] != null) {
        contents[_DCef] = smithyClient.strictParseInt32(output[_dCe]);
    }
    if (output[_dTPC] != null) {
        contents[_DTPC] = smithyClient.strictParseInt32(output[_dTPC]);
    }
    if (String(output.validCores).trim() === "") {
        contents[_VCa] = [];
    }
    else if (output[_vCa] != null && output[_vCa][_i] != null) {
        contents[_VCa] = de_CoreCountList(smithyClient.getArrayIfSingleItem(output[_vCa][_i]));
    }
    if (String(output.validThreadsPerCore).trim() === "") {
        contents[_VTPC] = [];
    }
    else if (output[_vTPC] != null && output[_vTPC][_i] != null) {
        contents[_VTPC] = de_ThreadsPerCoreList(smithyClient.getArrayIfSingleItem(output[_vTPC][_i]));
    }
    return contents;
};
const de_VerifiedAccessEndpoint = (output, context) => {
    const contents = {};
    if (output[_vAII] != null) {
        contents[_VAII] = smithyClient.expectString(output[_vAII]);
    }
    if (output[_vAGI] != null) {
        contents[_VAGI] = smithyClient.expectString(output[_vAGI]);
    }
    if (output[_vAEI] != null) {
        contents[_VAEI] = smithyClient.expectString(output[_vAEI]);
    }
    if (output[_aDp] != null) {
        contents[_ADp] = smithyClient.expectString(output[_aDp]);
    }
    if (output[_eTnd] != null) {
        contents[_ET] = smithyClient.expectString(output[_eTnd]);
    }
    if (output[_aTtta] != null) {
        contents[_ATt] = smithyClient.expectString(output[_aTtta]);
    }
    if (output[_dCA] != null) {
        contents[_DCA] = smithyClient.expectString(output[_dCA]);
    }
    if (output[_eDnd] != null) {
        contents[_EDnd] = smithyClient.expectString(output[_eDnd]);
    }
    if (output[_dVD] != null) {
        contents[_DVD] = smithyClient.expectString(output[_dVD]);
    }
    if (String(output.securityGroupIdSet).trim() === "") {
        contents[_SGI] = [];
    }
    else if (output[_sGIS] != null && output[_sGIS][_i] != null) {
        contents[_SGI] = de_SecurityGroupIdList(smithyClient.getArrayIfSingleItem(output[_sGIS][_i]));
    }
    if (output[_lBO] != null) {
        contents[_LBO] = de_VerifiedAccessEndpointLoadBalancerOptions(output[_lBO]);
    }
    if (output[_nIO] != null) {
        contents[_NIO] = de_VerifiedAccessEndpointEniOptions(output[_nIO]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_VerifiedAccessEndpointStatus(output[_sta]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectString(output[_cTre]);
    }
    if (output[_lUTa] != null) {
        contents[_LUTa] = smithyClient.expectString(output[_lUTa]);
    }
    if (output[_dT] != null) {
        contents[_DTel] = smithyClient.expectString(output[_dT]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sSs] != null) {
        contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs]);
    }
    if (output[_rOd] != null) {
        contents[_RO] = de_VerifiedAccessEndpointRdsOptions(output[_rOd]);
    }
    if (output[_cOi] != null) {
        contents[_CO] = de_VerifiedAccessEndpointCidrOptions(output[_cOi]);
    }
    return contents;
};
const de_VerifiedAccessEndpointCidrOptions = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    if (String(output.portRangeSet).trim() === "") {
        contents[_PRo] = [];
    }
    else if (output[_pRS] != null && output[_pRS][_i] != null) {
        contents[_PRo] = de_VerifiedAccessEndpointPortRangeList(smithyClient.getArrayIfSingleItem(output[_pRS][_i]));
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (String(output.subnetIdSet).trim() === "") {
        contents[_SIu] = [];
    }
    else if (output[_sISu] != null && output[_sISu][_i] != null) {
        contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(smithyClient.getArrayIfSingleItem(output[_sISu][_i]));
    }
    return contents;
};
const de_VerifiedAccessEndpointEniOptions = (output, context) => {
    const contents = {};
    if (output[_nII] != null) {
        contents[_NII] = smithyClient.expectString(output[_nII]);
    }
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_po] != null) {
        contents[_Po] = smithyClient.strictParseInt32(output[_po]);
    }
    if (String(output.portRangeSet).trim() === "") {
        contents[_PRo] = [];
    }
    else if (output[_pRS] != null && output[_pRS][_i] != null) {
        contents[_PRo] = de_VerifiedAccessEndpointPortRangeList(smithyClient.getArrayIfSingleItem(output[_pRS][_i]));
    }
    return contents;
};
const de_VerifiedAccessEndpointList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessEndpoint(entry);
    });
};
const de_VerifiedAccessEndpointLoadBalancerOptions = (output, context) => {
    const contents = {};
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_po] != null) {
        contents[_Po] = smithyClient.strictParseInt32(output[_po]);
    }
    if (output[_lBA] != null) {
        contents[_LBAo] = smithyClient.expectString(output[_lBA]);
    }
    if (String(output.subnetIdSet).trim() === "") {
        contents[_SIu] = [];
    }
    else if (output[_sISu] != null && output[_sISu][_i] != null) {
        contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(smithyClient.getArrayIfSingleItem(output[_sISu][_i]));
    }
    if (String(output.portRangeSet).trim() === "") {
        contents[_PRo] = [];
    }
    else if (output[_pRS] != null && output[_pRS][_i] != null) {
        contents[_PRo] = de_VerifiedAccessEndpointPortRangeList(smithyClient.getArrayIfSingleItem(output[_pRS][_i]));
    }
    return contents;
};
const de_VerifiedAccessEndpointPortRange = (output, context) => {
    const contents = {};
    if (output[_fP] != null) {
        contents[_FP] = smithyClient.strictParseInt32(output[_fP]);
    }
    if (output[_tPo] != null) {
        contents[_TP] = smithyClient.strictParseInt32(output[_tPo]);
    }
    return contents;
};
const de_VerifiedAccessEndpointPortRangeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessEndpointPortRange(entry);
    });
};
const de_VerifiedAccessEndpointRdsOptions = (output, context) => {
    const contents = {};
    if (output[_pr] != null) {
        contents[_P] = smithyClient.expectString(output[_pr]);
    }
    if (output[_po] != null) {
        contents[_Po] = smithyClient.strictParseInt32(output[_po]);
    }
    if (output[_rDIA] != null) {
        contents[_RDIA] = smithyClient.expectString(output[_rDIA]);
    }
    if (output[_rDCA] != null) {
        contents[_RDCA] = smithyClient.expectString(output[_rDCA]);
    }
    if (output[_rDPA] != null) {
        contents[_RDPA] = smithyClient.expectString(output[_rDPA]);
    }
    if (output[_rEd] != null) {
        contents[_RE] = smithyClient.expectString(output[_rEd]);
    }
    if (String(output.subnetIdSet).trim() === "") {
        contents[_SIu] = [];
    }
    else if (output[_sISu] != null && output[_sISu][_i] != null) {
        contents[_SIu] = de_VerifiedAccessEndpointSubnetIdList(smithyClient.getArrayIfSingleItem(output[_sISu][_i]));
    }
    return contents;
};
const de_VerifiedAccessEndpointStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_VerifiedAccessEndpointSubnetIdList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_VerifiedAccessEndpointTarget = (output, context) => {
    const contents = {};
    if (output[_vAEI] != null) {
        contents[_VAEI] = smithyClient.expectString(output[_vAEI]);
    }
    if (output[_vAETIA] != null) {
        contents[_VAETIA] = smithyClient.expectString(output[_vAETIA]);
    }
    if (output[_vAETD] != null) {
        contents[_VAETD] = smithyClient.expectString(output[_vAETD]);
    }
    return contents;
};
const de_VerifiedAccessEndpointTargetList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessEndpointTarget(entry);
    });
};
const de_VerifiedAccessGroup = (output, context) => {
    const contents = {};
    if (output[_vAGI] != null) {
        contents[_VAGI] = smithyClient.expectString(output[_vAGI]);
    }
    if (output[_vAII] != null) {
        contents[_VAII] = smithyClient.expectString(output[_vAII]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_ow] != null) {
        contents[_Own] = smithyClient.expectString(output[_ow]);
    }
    if (output[_vAGA] != null) {
        contents[_VAGA] = smithyClient.expectString(output[_vAGA]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectString(output[_cTre]);
    }
    if (output[_lUTa] != null) {
        contents[_LUTa] = smithyClient.expectString(output[_lUTa]);
    }
    if (output[_dT] != null) {
        contents[_DTel] = smithyClient.expectString(output[_dT]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sSs] != null) {
        contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs]);
    }
    return contents;
};
const de_VerifiedAccessGroupList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessGroup(entry);
    });
};
const de_VerifiedAccessInstance = (output, context) => {
    const contents = {};
    if (output[_vAII] != null) {
        contents[_VAII] = smithyClient.expectString(output[_vAII]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (String(output.verifiedAccessTrustProviderSet).trim() === "") {
        contents[_VATPe] = [];
    }
    else if (output[_vATPS] != null && output[_vATPS][_i] != null) {
        contents[_VATPe] = de_VerifiedAccessTrustProviderCondensedList(smithyClient.getArrayIfSingleItem(output[_vATPS][_i]));
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectString(output[_cTre]);
    }
    if (output[_lUTa] != null) {
        contents[_LUTa] = smithyClient.expectString(output[_lUTa]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_fE] != null) {
        contents[_FE] = smithyClient.parseBoolean(output[_fE]);
    }
    if (output[_cECSD] != null) {
        contents[_CECSD] = de_VerifiedAccessInstanceCustomSubDomain(output[_cECSD]);
    }
    return contents;
};
const de_VerifiedAccessInstanceCustomSubDomain = (output, context) => {
    const contents = {};
    if (output[_sDu] != null) {
        contents[_SDu] = smithyClient.expectString(output[_sDu]);
    }
    if (String(output.nameserverSet).trim() === "") {
        contents[_Na] = [];
    }
    else if (output[_nSa] != null && output[_nSa][_i] != null) {
        contents[_Na] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_nSa][_i]));
    }
    return contents;
};
const de_VerifiedAccessInstanceList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessInstance(entry);
    });
};
const de_VerifiedAccessInstanceLoggingConfiguration = (output, context) => {
    const contents = {};
    if (output[_vAII] != null) {
        contents[_VAII] = smithyClient.expectString(output[_vAII]);
    }
    if (output[_aLc] != null) {
        contents[_AL] = de_VerifiedAccessLogs(output[_aLc]);
    }
    return contents;
};
const de_VerifiedAccessInstanceLoggingConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessInstanceLoggingConfiguration(entry);
    });
};
const de_VerifiedAccessInstanceOpenVpnClientConfiguration = (output, context) => {
    const contents = {};
    if (output[_confi] != null) {
        contents[_Confi] = smithyClient.expectString(output[_confi]);
    }
    if (String(output.routeSet).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rSou] != null && output[_rSou][_i] != null) {
        contents[_Rout] = de_VerifiedAccessInstanceOpenVpnClientConfigurationRouteList(smithyClient.getArrayIfSingleItem(output[_rSou][_i]));
    }
    return contents;
};
const de_VerifiedAccessInstanceOpenVpnClientConfigurationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessInstanceOpenVpnClientConfiguration(entry);
    });
};
const de_VerifiedAccessInstanceOpenVpnClientConfigurationRoute = (output, context) => {
    const contents = {};
    if (output[_ci] != null) {
        contents[_C] = smithyClient.expectString(output[_ci]);
    }
    return contents;
};
const de_VerifiedAccessInstanceOpenVpnClientConfigurationRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessInstanceOpenVpnClientConfigurationRoute(entry);
    });
};
const de_VerifiedAccessInstanceUserTrustProviderClientConfiguration = (output, context) => {
    const contents = {};
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_scop] != null) {
        contents[_Scop] = smithyClient.expectString(output[_scop]);
    }
    if (output[_is] != null) {
        contents[_I] = smithyClient.expectString(output[_is]);
    }
    if (output[_aE] != null) {
        contents[_AE] = smithyClient.expectString(output[_aE]);
    }
    if (output[_pSKE] != null) {
        contents[_PSKE] = smithyClient.expectString(output[_pSKE]);
    }
    if (output[_tEo] != null) {
        contents[_TEo] = smithyClient.expectString(output[_tEo]);
    }
    if (output[_uIE] != null) {
        contents[_UIE] = smithyClient.expectString(output[_uIE]);
    }
    if (output[_cIli] != null) {
        contents[_CIl] = smithyClient.expectString(output[_cIli]);
    }
    if (output[_cSl] != null) {
        contents[_CSl] = smithyClient.expectString(output[_cSl]);
    }
    if (output[_pEk] != null) {
        contents[_PEk] = smithyClient.parseBoolean(output[_pEk]);
    }
    return contents;
};
const de_VerifiedAccessLogCloudWatchLogsDestination = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    if (output[_dSel] != null) {
        contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel]);
    }
    if (output[_lGo] != null) {
        contents[_LGo] = smithyClient.expectString(output[_lGo]);
    }
    return contents;
};
const de_VerifiedAccessLogDeliveryStatus = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_VerifiedAccessLogKinesisDataFirehoseDestination = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    if (output[_dSel] != null) {
        contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel]);
    }
    if (output[_dSeli] != null) {
        contents[_DSel] = smithyClient.expectString(output[_dSeli]);
    }
    return contents;
};
const de_VerifiedAccessLogs = (output, context) => {
    const contents = {};
    if (output[_s_] != null) {
        contents[_S_] = de_VerifiedAccessLogS3Destination(output[_s_]);
    }
    if (output[_cWL] != null) {
        contents[_CWL] = de_VerifiedAccessLogCloudWatchLogsDestination(output[_cWL]);
    }
    if (output[_kDF] != null) {
        contents[_KDF] = de_VerifiedAccessLogKinesisDataFirehoseDestination(output[_kDF]);
    }
    if (output[_lV] != null) {
        contents[_LV] = smithyClient.expectString(output[_lV]);
    }
    if (output[_iTCn] != null) {
        contents[_ITCn] = smithyClient.parseBoolean(output[_iTCn]);
    }
    return contents;
};
const de_VerifiedAccessLogS3Destination = (output, context) => {
    const contents = {};
    if (output[_en] != null) {
        contents[_En] = smithyClient.parseBoolean(output[_en]);
    }
    if (output[_dSel] != null) {
        contents[_DSeli] = de_VerifiedAccessLogDeliveryStatus(output[_dSel]);
    }
    if (output[_bN] != null) {
        contents[_BN] = smithyClient.expectString(output[_bN]);
    }
    if (output[_pre] != null) {
        contents[_Pr] = smithyClient.expectString(output[_pre]);
    }
    if (output[_bOu] != null) {
        contents[_BOu] = smithyClient.expectString(output[_bOu]);
    }
    return contents;
};
const de_VerifiedAccessSseSpecificationResponse = (output, context) => {
    const contents = {};
    if (output[_cMKE] != null) {
        contents[_CMKE] = smithyClient.parseBoolean(output[_cMKE]);
    }
    if (output[_kKA] != null) {
        contents[_KKA] = smithyClient.expectString(output[_kKA]);
    }
    return contents;
};
const de_VerifiedAccessTrustProvider = (output, context) => {
    const contents = {};
    if (output[_vATPI] != null) {
        contents[_VATPI] = smithyClient.expectString(output[_vATPI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_tPT] != null) {
        contents[_TPT] = smithyClient.expectString(output[_tPT]);
    }
    if (output[_uTPT] != null) {
        contents[_UTPT] = smithyClient.expectString(output[_uTPT]);
    }
    if (output[_dTPT] != null) {
        contents[_DTPT] = smithyClient.expectString(output[_dTPT]);
    }
    if (output[_oO] != null) {
        contents[_OO] = de_OidcOptions(output[_oO]);
    }
    if (output[_dOev] != null) {
        contents[_DOe] = de_DeviceOptions(output[_dOev]);
    }
    if (output[_pRNo] != null) {
        contents[_PRN] = smithyClient.expectString(output[_pRNo]);
    }
    if (output[_cTre] != null) {
        contents[_CTre] = smithyClient.expectString(output[_cTre]);
    }
    if (output[_lUTa] != null) {
        contents[_LUTa] = smithyClient.expectString(output[_lUTa]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_sSs] != null) {
        contents[_SS] = de_VerifiedAccessSseSpecificationResponse(output[_sSs]);
    }
    if (output[_nAOO] != null) {
        contents[_NAOO] = de_NativeApplicationOidcOptions(output[_nAOO]);
    }
    return contents;
};
const de_VerifiedAccessTrustProviderCondensed = (output, context) => {
    const contents = {};
    if (output[_vATPI] != null) {
        contents[_VATPI] = smithyClient.expectString(output[_vATPI]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_tPT] != null) {
        contents[_TPT] = smithyClient.expectString(output[_tPT]);
    }
    if (output[_uTPT] != null) {
        contents[_UTPT] = smithyClient.expectString(output[_uTPT]);
    }
    if (output[_dTPT] != null) {
        contents[_DTPT] = smithyClient.expectString(output[_dTPT]);
    }
    return contents;
};
const de_VerifiedAccessTrustProviderCondensedList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessTrustProviderCondensed(entry);
    });
};
const de_VerifiedAccessTrustProviderList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VerifiedAccessTrustProvider(entry);
    });
};
const de_VgwTelemetry = (output, context) => {
    const contents = {};
    if (output[_aRC] != null) {
        contents[_ARC] = smithyClient.strictParseInt32(output[_aRC]);
    }
    if (output[_lSC] != null) {
        contents[_LSC] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lSC]));
    }
    if (output[_oIA] != null) {
        contents[_OIA] = smithyClient.expectString(output[_oIA]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_cAe] != null) {
        contents[_CA] = smithyClient.expectString(output[_cAe]);
    }
    return contents;
};
const de_VgwTelemetryList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VgwTelemetry(entry);
    });
};
const de_VirtualizationTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
};
const de_Volume = (output, context) => {
    const contents = {};
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (output[_io] != null) {
        contents[_Io] = smithyClient.strictParseInt32(output[_io]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vT] != null) {
        contents[_VT] = smithyClient.expectString(output[_vT]);
    }
    if (output[_fRa] != null) {
        contents[_FRa] = smithyClient.parseBoolean(output[_fRa]);
    }
    if (output[_mAE] != null) {
        contents[_MAE] = smithyClient.parseBoolean(output[_mAE]);
    }
    if (output[_th] != null) {
        contents[_Th] = smithyClient.strictParseInt32(output[_th]);
    }
    if (output[_sTs] != null) {
        contents[_STs] = smithyClient.expectString(output[_sTs]);
    }
    if (output[_op] != null) {
        contents[_O] = de_OperatorResponse(output[_op]);
    }
    if (output[_vIR] != null) {
        contents[_VIR] = smithyClient.strictParseInt32(output[_vIR]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_si] != null) {
        contents[_Siz] = smithyClient.strictParseInt32(output[_si]);
    }
    if (output[_sIn] != null) {
        contents[_SIn] = smithyClient.expectString(output[_sIn]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_sta] != null) {
        contents[_Stat] = smithyClient.expectString(output[_sta]);
    }
    if (output[_cTr] != null) {
        contents[_CTr] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTr]));
    }
    if (String(output.attachmentSet).trim() === "") {
        contents[_Atta] = [];
    }
    else if (output[_aSt] != null && output[_aSt][_i] != null) {
        contents[_Atta] = de_VolumeAttachmentList(smithyClient.getArrayIfSingleItem(output[_aSt][_i]));
    }
    if (output[_enc] != null) {
        contents[_Enc] = smithyClient.parseBoolean(output[_enc]);
    }
    if (output[_kKI] != null) {
        contents[_KKI] = smithyClient.expectString(output[_kKI]);
    }
    return contents;
};
const de_VolumeAttachment = (output, context) => {
    const contents = {};
    if (output[_dOT] != null) {
        contents[_DOT] = smithyClient.parseBoolean(output[_dOT]);
    }
    if (output[_aRs] != null) {
        contents[_ARs] = smithyClient.expectString(output[_aRs]);
    }
    if (output[_iOS] != null) {
        contents[_IOS] = smithyClient.expectString(output[_iOS]);
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    if (output[_dev] != null) {
        contents[_Dev] = smithyClient.expectString(output[_dev]);
    }
    if (output[_sta] != null) {
        contents[_Stat] = smithyClient.expectString(output[_sta]);
    }
    if (output[_aTt] != null) {
        contents[_ATtt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_aTt]));
    }
    return contents;
};
const de_VolumeAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeAttachment(entry);
    });
};
const de_VolumeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Volume(entry);
    });
};
const de_VolumeModification = (output, context) => {
    const contents = {};
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_mSod] != null) {
        contents[_MSod] = smithyClient.expectString(output[_mSod]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    if (output[_tSar] != null) {
        contents[_TSar] = smithyClient.strictParseInt32(output[_tSar]);
    }
    if (output[_tIa] != null) {
        contents[_TIar] = smithyClient.strictParseInt32(output[_tIa]);
    }
    if (output[_tVT] != null) {
        contents[_TVT] = smithyClient.expectString(output[_tVT]);
    }
    if (output[_tTar] != null) {
        contents[_TTar] = smithyClient.strictParseInt32(output[_tTar]);
    }
    if (output[_tMAE] != null) {
        contents[_TMAE] = smithyClient.parseBoolean(output[_tMAE]);
    }
    if (output[_oSr] != null) {
        contents[_OSr] = smithyClient.strictParseInt32(output[_oSr]);
    }
    if (output[_oIr] != null) {
        contents[_OIr] = smithyClient.strictParseInt32(output[_oIr]);
    }
    if (output[_oVT] != null) {
        contents[_OVT] = smithyClient.expectString(output[_oVT]);
    }
    if (output[_oTr] != null) {
        contents[_OTr] = smithyClient.strictParseInt32(output[_oTr]);
    }
    if (output[_oMAE] != null) {
        contents[_OMAE] = smithyClient.parseBoolean(output[_oMAE]);
    }
    if (output[_pro] != null) {
        contents[_Prog] = smithyClient.strictParseLong(output[_pro]);
    }
    if (output[_sT] != null) {
        contents[_STt] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_sT]));
    }
    if (output[_eTn] != null) {
        contents[_ETn] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eTn]));
    }
    return contents;
};
const de_VolumeModificationList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeModification(entry);
    });
};
const de_VolumeStatusAction = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_eIve] != null) {
        contents[_EIve] = smithyClient.expectString(output[_eIve]);
    }
    if (output[_eTv] != null) {
        contents[_ETv] = smithyClient.expectString(output[_eTv]);
    }
    return contents;
};
const de_VolumeStatusActionsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusAction(entry);
    });
};
const de_VolumeStatusAttachmentStatus = (output, context) => {
    const contents = {};
    if (output[_iPo] != null) {
        contents[_IPo] = smithyClient.expectString(output[_iPo]);
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    return contents;
};
const de_VolumeStatusAttachmentStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusAttachmentStatus(entry);
    });
};
const de_VolumeStatusDetails = (output, context) => {
    const contents = {};
    if (output[_n] != null) {
        contents[_N] = smithyClient.expectString(output[_n]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_VolumeStatusDetailsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusDetails(entry);
    });
};
const de_VolumeStatusEvent = (output, context) => {
    const contents = {};
    if (output[_de] != null) {
        contents[_De] = smithyClient.expectString(output[_de]);
    }
    if (output[_eIve] != null) {
        contents[_EIve] = smithyClient.expectString(output[_eIve]);
    }
    if (output[_eTv] != null) {
        contents[_ETv] = smithyClient.expectString(output[_eTv]);
    }
    if (output[_nAo] != null) {
        contents[_NAo] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nAo]));
    }
    if (output[_nB] != null) {
        contents[_NB] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_nB]));
    }
    if (output[_iI] != null) {
        contents[_IIn] = smithyClient.expectString(output[_iI]);
    }
    return contents;
};
const de_VolumeStatusEventsList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusEvent(entry);
    });
};
const de_VolumeStatusInfo = (output, context) => {
    const contents = {};
    if (String(output.details).trim() === "") {
        contents[_Det] = [];
    }
    else if (output[_det] != null && output[_det][_i] != null) {
        contents[_Det] = de_VolumeStatusDetailsList(smithyClient.getArrayIfSingleItem(output[_det][_i]));
    }
    if (output[_sta] != null) {
        contents[_Statu] = smithyClient.expectString(output[_sta]);
    }
    return contents;
};
const de_VolumeStatusItem = (output, context) => {
    const contents = {};
    if (String(output.actionsSet).trim() === "") {
        contents[_Acti] = [];
    }
    else if (output[_aSct] != null && output[_aSct][_i] != null) {
        contents[_Acti] = de_VolumeStatusActionsList(smithyClient.getArrayIfSingleItem(output[_aSct][_i]));
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (output[_oA] != null) {
        contents[_OA] = smithyClient.expectString(output[_oA]);
    }
    if (String(output.eventsSet).trim() === "") {
        contents[_Ev] = [];
    }
    else if (output[_eSv] != null && output[_eSv][_i] != null) {
        contents[_Ev] = de_VolumeStatusEventsList(smithyClient.getArrayIfSingleItem(output[_eSv][_i]));
    }
    if (output[_vIo] != null) {
        contents[_VIo] = smithyClient.expectString(output[_vIo]);
    }
    if (output[_vSol] != null) {
        contents[_VSol] = de_VolumeStatusInfo(output[_vSol]);
    }
    if (String(output.attachmentStatuses).trim() === "") {
        contents[_AStt] = [];
    }
    else if (output[_aStt] != null && output[_aStt][_i] != null) {
        contents[_AStt] = de_VolumeStatusAttachmentStatusList(smithyClient.getArrayIfSingleItem(output[_aStt][_i]));
    }
    if (output[_iSD] != null) {
        contents[_ISD] = de_InitializationStatusDetails(output[_iSD]);
    }
    if (output[_aZI] != null) {
        contents[_AZI] = smithyClient.expectString(output[_aZI]);
    }
    return contents;
};
const de_VolumeStatusList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VolumeStatusItem(entry);
    });
};
const de_Vpc = (output, context) => {
    const contents = {};
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_iTns] != null) {
        contents[_ITns] = smithyClient.expectString(output[_iTns]);
    }
    if (String(output.ipv6CidrBlockAssociationSet).trim() === "") {
        contents[_ICBAS] = [];
    }
    else if (output[_iCBAS] != null && output[_iCBAS][_i] != null) {
        contents[_ICBAS] = de_VpcIpv6CidrBlockAssociationSet(smithyClient.getArrayIfSingleItem(output[_iCBAS][_i]));
    }
    if (String(output.cidrBlockAssociationSet).trim() === "") {
        contents[_CBAS] = [];
    }
    else if (output[_cBAS] != null && output[_cBAS][_i] != null) {
        contents[_CBAS] = de_VpcCidrBlockAssociationSet(smithyClient.getArrayIfSingleItem(output[_cBAS][_i]));
    }
    if (output[_iDs] != null) {
        contents[_IDs] = smithyClient.parseBoolean(output[_iDs]);
    }
    if (output[_eCn] != null) {
        contents[_ECn] = de_VpcEncryptionControl(output[_eCn]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_bPAS] != null) {
        contents[_BPAS] = de_BlockPublicAccessStates(output[_bPAS]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cB] != null) {
        contents[_CB] = smithyClient.expectString(output[_cB]);
    }
    if (output[_dOI] != null) {
        contents[_DOI] = smithyClient.expectString(output[_dOI]);
    }
    return contents;
};
const de_VpcAttachment = (output, context) => {
    const contents = {};
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_VpcAttachmentList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcAttachment(entry);
    });
};
const de_VpcBlockPublicAccessExclusion = (output, context) => {
    const contents = {};
    if (output[_eIx] != null) {
        contents[_EIxc] = smithyClient.expectString(output[_eIx]);
    }
    if (output[_iGEM] != null) {
        contents[_IGEM] = smithyClient.expectString(output[_iGEM]);
    }
    if (output[_rAe] != null) {
        contents[_RAes] = smithyClient.expectString(output[_rAe]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_rea] != null) {
        contents[_Rea] = smithyClient.expectString(output[_rea]);
    }
    if (output[_cTrea] != null) {
        contents[_CTrea] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTrea]));
    }
    if (output[_lUTas] != null) {
        contents[_LUTas] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lUTas]));
    }
    if (output[_dTele] != null) {
        contents[_DTelet] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_dTele]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_VpcBlockPublicAccessExclusionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcBlockPublicAccessExclusion(entry);
    });
};
const de_VpcBlockPublicAccessOptions = (output, context) => {
    const contents = {};
    if (output[_aAI] != null) {
        contents[_AAI] = smithyClient.expectString(output[_aAI]);
    }
    if (output[_aRw] != null) {
        contents[_ARw] = smithyClient.expectString(output[_aRw]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_iGBM] != null) {
        contents[_IGBM] = smithyClient.expectString(output[_iGBM]);
    }
    if (output[_rea] != null) {
        contents[_Rea] = smithyClient.expectString(output[_rea]);
    }
    if (output[_lUTas] != null) {
        contents[_LUTas] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_lUTas]));
    }
    if (output[_mB] != null) {
        contents[_MB] = smithyClient.expectString(output[_mB]);
    }
    if (output[_eAx] != null) {
        contents[_EAx] = smithyClient.expectString(output[_eAx]);
    }
    return contents;
};
const de_VpcCidrBlockAssociation = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_cB] != null) {
        contents[_CB] = smithyClient.expectString(output[_cB]);
    }
    if (output[_cBSi] != null) {
        contents[_CBSi] = de_VpcCidrBlockState(output[_cBSi]);
    }
    return contents;
};
const de_VpcCidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcCidrBlockAssociation(entry);
    });
};
const de_VpcCidrBlockState = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMt] != null) {
        contents[_SMt] = smithyClient.expectString(output[_sMt]);
    }
    return contents;
};
const de_VpcClassicLink = (output, context) => {
    const contents = {};
    if (output[_cLE] != null) {
        contents[_CLE] = smithyClient.parseBoolean(output[_cLE]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    return contents;
};
const de_VpcClassicLinkList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcClassicLink(entry);
    });
};
const de_VpcEncryptionControl = (output, context) => {
    const contents = {};
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_vECI] != null) {
        contents[_VECI] = smithyClient.expectString(output[_vECI]);
    }
    if (output[_mod] != null) {
        contents[_Mo] = smithyClient.expectString(output[_mod]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMta] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMta]);
    }
    if (output[_rEes] != null) {
        contents[_REeso] = de_VpcEncryptionControlExclusions(output[_rEes]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_VpcEncryptionControlExclusion = (output, context) => {
    const contents = {};
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_sMta] != null) {
        contents[_SMta] = smithyClient.expectString(output[_sMta]);
    }
    return contents;
};
const de_VpcEncryptionControlExclusions = (output, context) => {
    const contents = {};
    if (output[_iG] != null) {
        contents[_IGn] = de_VpcEncryptionControlExclusion(output[_iG]);
    }
    if (output[_eOIG] != null) {
        contents[_EOIG] = de_VpcEncryptionControlExclusion(output[_eOIG]);
    }
    if (output[_nG] != null) {
        contents[_NG] = de_VpcEncryptionControlExclusion(output[_nG]);
    }
    if (output[_vPG] != null) {
        contents[_VPG] = de_VpcEncryptionControlExclusion(output[_vPG]);
    }
    if (output[_vPpc] != null) {
        contents[_VPpc] = de_VpcEncryptionControlExclusion(output[_vPpc]);
    }
    return contents;
};
const de_VpcEndpoint = (output, context) => {
    const contents = {};
    if (output[_vEI] != null) {
        contents[_VEIp] = smithyClient.expectString(output[_vEI]);
    }
    if (output[_vET] != null) {
        contents[_VET] = smithyClient.expectString(output[_vET]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_sN] != null) {
        contents[_SNe] = smithyClient.expectString(output[_sN]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_pDo] != null) {
        contents[_PD] = smithyClient.expectString(output[_pDo]);
    }
    if (String(output.routeTableIdSet).trim() === "") {
        contents[_RTIo] = [];
    }
    else if (output[_rTIS] != null && output[_rTIS][_i] != null) {
        contents[_RTIo] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_rTIS][_i]));
    }
    if (String(output.subnetIdSet).trim() === "") {
        contents[_SIu] = [];
    }
    else if (output[_sISu] != null && output[_sISu][_i] != null) {
        contents[_SIu] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_sISu][_i]));
    }
    if (String(output.groupSet).trim() === "") {
        contents[_G] = [];
    }
    else if (output[_gS] != null && output[_gS][_i] != null) {
        contents[_G] = de_GroupIdentifierSet(smithyClient.getArrayIfSingleItem(output[_gS][_i]));
    }
    if (output[_iAT] != null) {
        contents[_IAT] = smithyClient.expectString(output[_iAT]);
    }
    if (output[_dOn] != null) {
        contents[_DOn] = de_DnsOptions(output[_dOn]);
    }
    if (output[_pDE] != null) {
        contents[_PDE] = smithyClient.parseBoolean(output[_pDE]);
    }
    if (output[_rMe] != null) {
        contents[_RMeq] = smithyClient.parseBoolean(output[_rMe]);
    }
    if (String(output.networkInterfaceIdSet).trim() === "") {
        contents[_NIIe] = [];
    }
    else if (output[_nIIS] != null && output[_nIIS][_i] != null) {
        contents[_NIIe] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_nIIS][_i]));
    }
    if (String(output.dnsEntrySet).trim() === "") {
        contents[_DE] = [];
    }
    else if (output[_dES] != null && output[_dES][_i] != null) {
        contents[_DE] = de_DnsEntrySet(smithyClient.getArrayIfSingleItem(output[_dES][_i]));
    }
    if (output[_cTrea] != null) {
        contents[_CTrea] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTrea]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_lEa] != null) {
        contents[_LEa] = de_LastError(output[_lEa]);
    }
    if (String(output.ipv4PrefixSet).trim() === "") {
        contents[_IPp] = [];
    }
    else if (output[_iPSpv] != null && output[_iPSpv][_i] != null) {
        contents[_IPp] = de_SubnetIpPrefixesList(smithyClient.getArrayIfSingleItem(output[_iPSpv][_i]));
    }
    if (String(output.ipv6PrefixSet).trim() === "") {
        contents[_IP] = [];
    }
    else if (output[_iPSpvr] != null && output[_iPSpvr][_i] != null) {
        contents[_IP] = de_SubnetIpPrefixesList(smithyClient.getArrayIfSingleItem(output[_iPSpvr][_i]));
    }
    if (output[_fR] != null) {
        contents[_FR] = smithyClient.expectString(output[_fR]);
    }
    if (output[_sNA] != null) {
        contents[_SNA] = smithyClient.expectString(output[_sNA]);
    }
    if (output[_rCA] != null) {
        contents[_RCA] = smithyClient.expectString(output[_rCA]);
    }
    if (output[_sR] != null) {
        contents[_SRe] = smithyClient.expectString(output[_sR]);
    }
    return contents;
};
const de_VpcEndpointAssociation = (output, context) => {
    const contents = {};
    if (output[_id] != null) {
        contents[_Id] = smithyClient.expectString(output[_id]);
    }
    if (output[_vEI] != null) {
        contents[_VEIp] = smithyClient.expectString(output[_vEI]);
    }
    if (output[_sNA] != null) {
        contents[_SNA] = smithyClient.expectString(output[_sNA]);
    }
    if (output[_sNN] != null) {
        contents[_SNN] = smithyClient.expectString(output[_sNN]);
    }
    if (output[_aRAs] != null) {
        contents[_ARAs] = smithyClient.expectString(output[_aRAs]);
    }
    if (output[_fR] != null) {
        contents[_FR] = smithyClient.expectString(output[_fR]);
    }
    if (output[_fCa] != null) {
        contents[_FCa] = smithyClient.expectString(output[_fCa]);
    }
    if (output[_dE] != null) {
        contents[_DEn] = de_DnsEntry(output[_dE]);
    }
    if (output[_pDEr] != null) {
        contents[_PDEr] = de_DnsEntry(output[_pDEr]);
    }
    if (output[_aRAss] != null) {
        contents[_ARAss] = smithyClient.expectString(output[_aRAss]);
    }
    if (output[_rCGA] != null) {
        contents[_RCGA] = smithyClient.expectString(output[_rCGA]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    return contents;
};
const de_VpcEndpointAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcEndpointAssociation(entry);
    });
};
const de_VpcEndpointConnection = (output, context) => {
    const contents = {};
    if (output[_sI] != null) {
        contents[_SIe] = smithyClient.expectString(output[_sI]);
    }
    if (output[_vEI] != null) {
        contents[_VEIp] = smithyClient.expectString(output[_vEI]);
    }
    if (output[_vEO] != null) {
        contents[_VEO] = smithyClient.expectString(output[_vEO]);
    }
    if (output[_vESpc] != null) {
        contents[_VESpc] = smithyClient.expectString(output[_vESpc]);
    }
    if (output[_cTrea] != null) {
        contents[_CTrea] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_cTrea]));
    }
    if (String(output.dnsEntrySet).trim() === "") {
        contents[_DE] = [];
    }
    else if (output[_dES] != null && output[_dES][_i] != null) {
        contents[_DE] = de_DnsEntrySet(smithyClient.getArrayIfSingleItem(output[_dES][_i]));
    }
    if (String(output.networkLoadBalancerArnSet).trim() === "") {
        contents[_NLBAe] = [];
    }
    else if (output[_nLBAS] != null && output[_nLBAS][_i] != null) {
        contents[_NLBAe] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_nLBAS][_i]));
    }
    if (String(output.gatewayLoadBalancerArnSet).trim() === "") {
        contents[_GLBA] = [];
    }
    else if (output[_gLBAS] != null && output[_gLBAS][_i] != null) {
        contents[_GLBA] = de_ValueStringList(smithyClient.getArrayIfSingleItem(output[_gLBAS][_i]));
    }
    if (output[_iAT] != null) {
        contents[_IAT] = smithyClient.expectString(output[_iAT]);
    }
    if (output[_vECIp] != null) {
        contents[_VECIp] = smithyClient.expectString(output[_vECIp]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vER] != null) {
        contents[_VER] = smithyClient.expectString(output[_vER]);
    }
    return contents;
};
const de_VpcEndpointConnectionSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcEndpointConnection(entry);
    });
};
const de_VpcEndpointSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcEndpoint(entry);
    });
};
const de_VpcIpv6CidrBlockAssociation = (output, context) => {
    const contents = {};
    if (output[_aIs] != null) {
        contents[_AIss] = smithyClient.expectString(output[_aIs]);
    }
    if (output[_iCB] != null) {
        contents[_ICB] = smithyClient.expectString(output[_iCB]);
    }
    if (output[_iCBS] != null) {
        contents[_ICBS] = de_VpcCidrBlockState(output[_iCBS]);
    }
    if (output[_nBG] != null) {
        contents[_NBG] = smithyClient.expectString(output[_nBG]);
    }
    if (output[_iPpvo] != null) {
        contents[_IPpv] = smithyClient.expectString(output[_iPpvo]);
    }
    if (output[_iAA] != null) {
        contents[_IAA] = smithyClient.expectString(output[_iAA]);
    }
    if (output[_iSpo] != null) {
        contents[_ISpo] = smithyClient.expectString(output[_iSpo]);
    }
    return contents;
};
const de_VpcIpv6CidrBlockAssociationSet = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcIpv6CidrBlockAssociation(entry);
    });
};
const de_VpcList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Vpc(entry);
    });
};
const de_VpcPeeringConnection = (output, context) => {
    const contents = {};
    if (output[_aVI] != null) {
        contents[_AVI] = de_VpcPeeringConnectionVpcInfo(output[_aVI]);
    }
    if (output[_eT] != null) {
        contents[_ETx] = smithyClient.expectNonNull(smithyClient.parseRfc3339DateTimeWithOffset(output[_eT]));
    }
    if (output[_rVIe] != null) {
        contents[_RVIe] = de_VpcPeeringConnectionVpcInfo(output[_rVIe]);
    }
    if (output[_sta] != null) {
        contents[_Statu] = de_VpcPeeringConnectionStateReason(output[_sta]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vPCI] != null) {
        contents[_VPCI] = smithyClient.expectString(output[_vPCI]);
    }
    return contents;
};
const de_VpcPeeringConnectionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpcPeeringConnection(entry);
    });
};
const de_VpcPeeringConnectionOptionsDescription = (output, context) => {
    const contents = {};
    if (output[_aDRFRV] != null) {
        contents[_ADRFRV] = smithyClient.parseBoolean(output[_aDRFRV]);
    }
    if (output[_aEFLCLTRV] != null) {
        contents[_AEFLCLTRV] = smithyClient.parseBoolean(output[_aEFLCLTRV]);
    }
    if (output[_aEFLVTRCL] != null) {
        contents[_AEFLVTRCL] = smithyClient.parseBoolean(output[_aEFLVTRCL]);
    }
    return contents;
};
const de_VpcPeeringConnectionStateReason = (output, context) => {
    const contents = {};
    if (output[_co] != null) {
        contents[_Cod] = smithyClient.expectString(output[_co]);
    }
    if (output[_me] != null) {
        contents[_Me] = smithyClient.expectString(output[_me]);
    }
    return contents;
};
const de_VpcPeeringConnectionVpcInfo = (output, context) => {
    const contents = {};
    if (output[_cB] != null) {
        contents[_CB] = smithyClient.expectString(output[_cB]);
    }
    if (String(output.ipv6CidrBlockSet).trim() === "") {
        contents[_ICBSp] = [];
    }
    else if (output[_iCBSp] != null && output[_iCBSp][_i] != null) {
        contents[_ICBSp] = de_Ipv6CidrBlockSet(smithyClient.getArrayIfSingleItem(output[_iCBSp][_i]));
    }
    if (String(output.cidrBlockSet).trim() === "") {
        contents[_CBSid] = [];
    }
    else if (output[_cBSid] != null && output[_cBSid][_i] != null) {
        contents[_CBSid] = de_CidrBlockSet(smithyClient.getArrayIfSingleItem(output[_cBSid][_i]));
    }
    if (output[_oI] != null) {
        contents[_OIwn] = smithyClient.expectString(output[_oI]);
    }
    if (output[_pOe] != null) {
        contents[_POe] = de_VpcPeeringConnectionOptionsDescription(output[_pOe]);
    }
    if (output[_vI] != null) {
        contents[_VI] = smithyClient.expectString(output[_vI]);
    }
    if (output[_re] != null) {
        contents[_Regi] = smithyClient.expectString(output[_re]);
    }
    return contents;
};
const de_VpnConnection = (output, context) => {
    const contents = {};
    if (output[_ca] != null) {
        contents[_Cat] = smithyClient.expectString(output[_ca]);
    }
    if (output[_tGI] != null) {
        contents[_TGI] = smithyClient.expectString(output[_tGI]);
    }
    if (output[_cNA] != null) {
        contents[_CNAo] = smithyClient.expectString(output[_cNA]);
    }
    if (output[_cNAA] != null) {
        contents[_CNAA] = smithyClient.expectString(output[_cNAA]);
    }
    if (output[_gAS] != null) {
        contents[_GAS] = smithyClient.expectString(output[_gAS]);
    }
    if (output[_opt] != null) {
        contents[_Op] = de_VpnConnectionOptions(output[_opt]);
    }
    if (String(output.routes).trim() === "") {
        contents[_Rout] = [];
    }
    else if (output[_rou] != null && output[_rou][_i] != null) {
        contents[_Rout] = de_VpnStaticRouteList(smithyClient.getArrayIfSingleItem(output[_rou][_i]));
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (String(output.vgwTelemetry).trim() === "") {
        contents[_VTg] = [];
    }
    else if (output[_vTg] != null && output[_vTg][_i] != null) {
        contents[_VTg] = de_VgwTelemetryList(smithyClient.getArrayIfSingleItem(output[_vTg][_i]));
    }
    if (output[_pSKA] != null) {
        contents[_PSKA] = smithyClient.expectString(output[_pSKA]);
    }
    if (output[_vCI] != null) {
        contents[_VCI] = smithyClient.expectString(output[_vCI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_cGC] != null) {
        contents[_CGC] = smithyClient.expectString(output[_cGC]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_cGIu] != null) {
        contents[_CGIu] = smithyClient.expectString(output[_cGIu]);
    }
    if (output[_vGI] != null) {
        contents[_VGI] = smithyClient.expectString(output[_vGI]);
    }
    return contents;
};
const de_VpnConnectionDeviceType = (output, context) => {
    const contents = {};
    if (output[_vCDTI] != null) {
        contents[_VCDTI] = smithyClient.expectString(output[_vCDTI]);
    }
    if (output[_ven] != null) {
        contents[_Ven] = smithyClient.expectString(output[_ven]);
    }
    if (output[_pl] != null) {
        contents[_Pla] = smithyClient.expectString(output[_pl]);
    }
    if (output[_sof] != null) {
        contents[_Sof] = smithyClient.expectString(output[_sof]);
    }
    return contents;
};
const de_VpnConnectionDeviceTypeList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnConnectionDeviceType(entry);
    });
};
const de_VpnConnectionList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnConnection(entry);
    });
};
const de_VpnConnectionOptions = (output, context) => {
    const contents = {};
    if (output[_eAn] != null) {
        contents[_EA] = smithyClient.parseBoolean(output[_eAn]);
    }
    if (output[_sRO] != null) {
        contents[_SRO] = smithyClient.parseBoolean(output[_sRO]);
    }
    if (output[_lINC] != null) {
        contents[_LINC] = smithyClient.expectString(output[_lINC]);
    }
    if (output[_rINC] != null) {
        contents[_RINC] = smithyClient.expectString(output[_rINC]);
    }
    if (output[_lINCo] != null) {
        contents[_LINCo] = smithyClient.expectString(output[_lINCo]);
    }
    if (output[_rINCe] != null) {
        contents[_RINCe] = smithyClient.expectString(output[_rINCe]);
    }
    if (output[_oIAT] != null) {
        contents[_OIAT] = smithyClient.expectString(output[_oIAT]);
    }
    if (output[_tTGAI] != null) {
        contents[_TTGAI] = smithyClient.expectString(output[_tTGAI]);
    }
    if (output[_tIIV] != null) {
        contents[_TIIV] = smithyClient.expectString(output[_tIIV]);
    }
    if (String(output.tunnelOptionSet).trim() === "") {
        contents[_TO] = [];
    }
    else if (output[_tOS] != null && output[_tOS][_i] != null) {
        contents[_TO] = de_TunnelOptionsList(smithyClient.getArrayIfSingleItem(output[_tOS][_i]));
    }
    return contents;
};
const de_VpnGateway = (output, context) => {
    const contents = {};
    if (output[_aSA] != null) {
        contents[_ASA] = smithyClient.strictParseLong(output[_aSA]);
    }
    if (String(output.tagSet).trim() === "") {
        contents[_Ta] = [];
    }
    else if (output[_tS] != null && output[_tS][_i] != null) {
        contents[_Ta] = de_TagList(smithyClient.getArrayIfSingleItem(output[_tS][_i]));
    }
    if (output[_vGI] != null) {
        contents[_VGI] = smithyClient.expectString(output[_vGI]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    if (output[_ty] != null) {
        contents[_T] = smithyClient.expectString(output[_ty]);
    }
    if (output[_aZ] != null) {
        contents[_AZ] = smithyClient.expectString(output[_aZ]);
    }
    if (String(output.attachments).trim() === "") {
        contents[_VAp] = [];
    }
    else if (output[_att] != null && output[_att][_i] != null) {
        contents[_VAp] = de_VpcAttachmentList(smithyClient.getArrayIfSingleItem(output[_att][_i]));
    }
    return contents;
};
const de_VpnGatewayList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnGateway(entry);
    });
};
const de_VpnStaticRoute = (output, context) => {
    const contents = {};
    if (output[_dCB] != null) {
        contents[_DCBe] = smithyClient.expectString(output[_dCB]);
    }
    if (output[_s] != null) {
        contents[_S] = smithyClient.expectString(output[_s]);
    }
    if (output[_st] != null) {
        contents[_Stat] = smithyClient.expectString(output[_st]);
    }
    return contents;
};
const de_VpnStaticRouteList = (output, context) => {
    return (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_VpnStaticRoute(entry);
    });
};
const de_VpnTunnelLogOptions = (output, context) => {
    const contents = {};
    if (output[_cWLO] != null) {
        contents[_CWLO] = de_CloudWatchLogOptions(output[_cWLO]);
    }
    return contents;
};
const de_WithdrawByoipCidrResult = (output, context) => {
    const contents = {};
    if (output[_bC] != null) {
        contents[_BC] = de_ByoipCidr(output[_bC]);
    }
    return contents;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(EC2ServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
const SHARED_HEADERS = {
    "content-type": "application/x-www-form-urlencoded",
};
const _ = "2016-11-15";
const _A = "Action";
const _AA = "AllocateAddress";
const _AAC = "AsnAuthorizationContext";
const _AACv = "AvailableAddressCount";
const _AAG = "AuthorizeAllGroups";
const _AAI = "AwsAccountId";
const _AAId = "AddressAllocationId";
const _AAP = "AddAllowedPrincipals";
const _AART = "AddAllocationResourceTags";
const _AASA = "AutoAcceptSharedAssociations";
const _AASAu = "AutoAcceptSharedAttachments";
const _AAT = "AcceptAddressTransfer";
const _AAZ = "AllAvailabilityZones";
const _AAc = "AccessAll";
const _AAcc = "AccountAttributes";
const _AAd = "AdditionalAccounts";
const _AAs = "AssociateAddress";
const _AAsn = "AsnAssociation";
const _AAsns = "AsnAssociations";
const _ABC = "AdvertiseByoipCidr";
const _ABHP = "ActualBlockHourlyPrice";
const _AC = "AllowedCidrs";
const _ACIA = "AssociateCarrierIpAddress";
const _ACLV = "AttachClassicLinkVpc";
const _ACRBO = "AcceptCapacityReservationBillingOwnership";
const _ACRBOs = "AssociateCapacityReservationBillingOwner";
const _ACT = "ArchivalCompleteTime";
const _ACVI = "AuthorizeClientVpnIngress";
const _ACVTN = "AssociateClientVpnTargetNetwork";
const _ACc = "AcceleratorCount";
const _ACd = "AddressCount";
const _ACv = "AvailableCapacity";
const _AD = "ActiveDirectory";
const _ADNL = "AllocationDefaultNetmaskLength";
const _ADO = "AssociateDhcpOptions";
const _ADRFRV = "AllowDnsResolutionFromRemoteVpc";
const _ADRTI = "AssociationDefaultRouteTableId";
const _ADT = "AdditionalDetailType";
const _ADd = "AdditionalDetails";
const _ADn = "AnnouncementDirection";
const _ADp = "ApplicationDomain";
const _AE = "AuthorizationEndpoint";
const _AEC = "AnalyzedEniCount";
const _AECIR = "AssociateEnclaveCertificateIamRole";
const _AEFLCLTRV = "AllowEgressFromLocalClassicLinkToRemoteVpc";
const _AEFLVTRCL = "AllowEgressFromLocalVpcToRemoteClassicLink";
const _AEIO = "AutoEnableIO";
const _AES = "AttachedEbsStatus";
const _AET = "AnalysisEndTime";
const _AEd = "AddEntries";
const _AF = "AddressFamily";
const _AFn = "AnalysisFindings";
const _AGI = "AccessGroupId";
const _AGLBA = "AddGatewayLoadBalancerArns";
const _AH = "AllocateHosts";
const _AI = "AssetIds";
const _AIA = "AssignIpv6Addresses";
const _AIAC = "AvailableIpAddressCount";
const _AIAOC = "AssignIpv6AddressOnCreation";
const _AIAs = "AssignedIpv6Addresses";
const _AIB = "AssociateIpamByoasn";
const _AIC = "AvailableInstanceCapacity";
const _AICv = "AvailableInstanceCount";
const _AIEW = "AssociateInstanceEventWindow";
const _AIG = "AttachInternetGateway";
const _AIIP = "AssociateIamInstanceProfile";
const _AIP = "AssignedIpv6Prefixes";
const _AIPC = "AllocateIpamPoolCidr";
const _AIPs = "AssignedIpv4Prefixes";
const _AIRD = "AssociateIpamResourceDiscovery";
const _AISS = "AllowedImagesSettingsState";
const _AIT = "AllowedInstanceTypes";
const _AIc = "AccountIds";
const _AIcc = "AccountId";
const _AIct = "ActiveInstances";
const _AId = "AdditionalInfo";
const _AIl = "AllocationId";
const _AIll = "AllocationIds";
const _AIm = "AmiId";
const _AIp = "AppleInternal";
const _AIs = "AssociationIds";
const _AIss = "AssociationId";
const _AIsse = "AssetId";
const _AIt = "AttachmentId";
const _AIth = "AthenaIntegrations";
const _AIu = "AutoImport";
const _AL = "AccessLogs";
const _ALI = "AmiLaunchIndex";
const _ALT = "AttachmentLimitType";
const _ALc = "AccountLevel";
const _AM = "AcceleratorManufacturers";
const _AMIT = "AllowsMultipleInstanceTypes";
const _AMNL = "AllocationMinNetmaskLength";
const _AMNLl = "AllocationMaxNetmaskLength";
const _AMS = "ApplianceModeSupport";
const _AN = "AttributeNames";
const _ANGA = "AssociateNatGatewayAddress";
const _ANI = "AttachNetworkInterface";
const _ANLBA = "AddNetworkLoadBalancerArns";
const _ANS = "AddNetworkServices";
const _ANc = "AcceleratorNames";
const _ANt = "AttributeName";
const _AO = "AuthenticationOptions";
const _AOI = "AddressOwnerId";
const _AOR = "AddOperatingRegions";
const _AOUE = "AddOrganizationalUnitExclusions";
const _AP = "AutoPlacement";
const _APCO = "AccepterPeeringConnectionOptions";
const _APH = "AlternatePathHints";
const _APIA = "AssignPrivateIpAddresses";
const _APIAs = "AssociatePublicIpAddress";
const _APIAss = "AssignedPrivateIpAddresses";
const _APICB = "AmazonProvidedIpv6CidrBlock";
const _APM = "ApplyPendingMaintenance";
const _APNGA = "AssignPrivateNatGatewayAddress";
const _APd = "AddedPrincipals";
const _APl = "AllowedPrincipals";
const _APs = "AsPaths";
const _AR = "AllowReassignment";
const _ARA = "AssociatedRoleArn";
const _ARAd = "AdditionalRoutesAvailable";
const _ARAs = "AssociatedResourceAccessibility";
const _ARAss = "AssociatedResourceArn";
const _ARC = "AcceptedRouteCount";
const _ARIEQ = "AcceptReservedInstancesExchangeQuote";
const _ARP = "AreRoutesPersisted";
const _ARS = "AssociateRouteServer";
const _ARSu = "AutoRecoverySupported";
const _ART = "AssociateRouteTable";
const _ARTI = "AddRouteTableIds";
const _ARTl = "AllocationResourceTags";
const _ARc = "AcceptanceRequired";
const _ARcl = "AclRule";
const _ARd = "AddressRegion";
const _ARl = "AllowReassociation";
const _ARll = "AllRegions";
const _ARs = "AssociatedResource";
const _ARss = "AssociatedRoles";
const _ARu = "AutoRecovery";
const _ARut = "AuthorizationRules";
const _ARw = "AwsRegion";
const _AS = "AllocationStrategy";
const _ASA = "AmazonSideAsn";
const _ASCB = "AssociateSubnetCidrBlock";
const _ASGE = "AuthorizeSecurityGroupEgress";
const _ASGI = "AuthorizeSecurityGroupIngress";
const _ASGId = "AddSecurityGroupIds";
const _ASGTCVTN = "ApplySecurityGroupsToClientVpnTargetNetwork";
const _ASGV = "AssociateSecurityGroupVpc";
const _ASI = "AssociatedSubnetIds";
const _ASIAT = "AddSupportedIpAddressTypes";
const _ASId = "AddSubnetIds";
const _ASR = "AddSupportedRegions";
const _ASS = "AmdSevSnp";
const _AST = "AnalysisStartTime";
const _ASTB = "AnalysisStartTimeBegin";
const _ASTE = "AnalysisStartTimeEnd";
const _ASc = "ActivityStatus";
const _ASn = "AnalysisStatus";
const _ASs = "AssociationState";
const _ASss = "AssociationStatus";
const _ASsso = "AssociatedSubnets";
const _ASt = "AttributeSummaries";
const _AStt = "AttachmentStatuses";
const _ASw = "AwsService";
const _AT = "AssociationTarget";
const _ATGAI = "AccepterTransitGatewayAttachmentId";
const _ATGCB = "AddTransitGatewayCidrBlocks";
const _ATGMD = "AssociateTransitGatewayMulticastDomain";
const _ATGMDA = "AcceptTransitGatewayMulticastDomainAssociations";
const _ATGPA = "AcceptTransitGatewayPeeringAttachment";
const _ATGPT = "AssociateTransitGatewayPolicyTable";
const _ATGRT = "AssociateTransitGatewayRouteTable";
const _ATGVA = "AcceptTransitGatewayVpcAttachment";
const _ATI = "AssociateTrunkInterface";
const _ATIc = "AccepterTgwInfo";
const _ATMMB = "AcceleratorTotalMemoryMiB";
const _ATN = "AssociatedTargetNetworks";
const _ATS = "AddressTransferStatus";
const _ATc = "AcceleratorTypes";
const _ATd = "AddressingType";
const _ATdd = "AddressTransfer";
const _ATddr = "AddressTransfers";
const _ATddre = "AddressType";
const _ATl = "AllocationType";
const _ATll = "AllocationTime";
const _ATr = "ArchitectureTypes";
const _ATt = "AttachmentType";
const _ATtt = "AttachTime";
const _ATtta = "AttachedTo";
const _AV = "AttachVolume";
const _AVATP = "AttachVerifiedAccessTrustProvider";
const _AVC = "AvailableVCpus";
const _AVCB = "AssociateVpcCidrBlock";
const _AVEC = "AcceptVpcEndpointConnections";
const _AVG = "AttachVpnGateway";
const _AVI = "AccepterVpcInfo";
const _AVPC = "AcceptVpcPeeringConnection";
const _AVTS = "ActiveVpnTunnelStatus";
const _AVt = "AttributeValues";
const _AVtt = "AttributeValue";
const _AWSAKI = "AWSAccessKeyId";
const _AZ = "AvailabilityZone";
const _AZG = "AvailabilityZoneGroup";
const _AZI = "AvailabilityZoneId";
const _AZIv = "AvailabilityZoneIds";
const _AZv = "AvailabilityZones";
const _Ac = "Accept";
const _Acc = "Accelerators";
const _Acl = "Acl";
const _Act = "Active";
const _Acti = "Actions";
const _Ad = "Address";
const _Add = "Add";
const _Addr = "Addresses";
const _Af = "Affinity";
const _Am = "Amount";
const _Ar = "Arn";
const _Arc = "Architecture";
const _As = "Asn";
const _Ass = "Associations";
const _Asso = "Association";
const _At = "Attribute";
const _Att = "Attachment";
const _Atta = "Attachments";
const _B = "Bucket";
const _BA = "BgpAsn";
const _BAE = "BgpAsnExtended";
const _BBIG = "BaselineBandwidthInGbps";
const _BBIM = "BaselineBandwidthInMbps";
const _BC = "ByoipCidr";
const _BCg = "BgpConfigurations";
const _BCy = "ByoipCidrs";
const _BCyt = "BytesConverted";
const _BDM = "BlockDeviceMappings";
const _BDMl = "BlockDurationMinutes";
const _BEBM = "BaselineEbsBandwidthMbps";
const _BEDN = "BaseEndpointDnsNames";
const _BI = "BundleInstance";
const _BII = "BranchInterfaceId";
const _BIa = "BaselineIops";
const _BIu = "BundleId";
const _BIun = "BundleIds";
const _BM = "BootMode";
const _BMa = "BareMetal";
const _BN = "BucketName";
const _BO = "BgpOptions";
const _BOu = "BucketOwner";
const _BP = "BurstablePerformance";
const _BPAS = "BlockPublicAccessStates";
const _BPF = "BaselinePerformanceFactors";
const _BPS = "BurstablePerformanceSupported";
const _BPi = "BillingProducts";
const _BS = "BaseSystem";
const _BSf = "BfdStatus";
const _BSg = "BgpStatus";
const _BT = "BannerText";
const _BTE = "BundleTaskError";
const _BTIMB = "BaselineThroughputInMBps";
const _BTu = "BundleTask";
const _BTun = "BundleTasks";
const _BW = "BandwidthWeighting";
const _BWa = "BandwidthWeightings";
const _Bl = "Blackhole";
const _By = "Bytes";
const _Byo = "Byoasn";
const _Byoa = "Byoasns";
const _C = "Cidr";
const _CA = "CertificateArn";
const _CAC = "CidrAuthorizationContext";
const _CADNL = "ClearAllocationDefaultNetmaskLength";
const _CAU = "CoipAddressUsages";
const _CAa = "CapacityAllocations";
const _CAo = "ComponentArn";
const _CAom = "ComponentAccount";
const _CAr = "CreatedAt";
const _CB = "CidrBlock";
const _CBA = "CidrBlockAssociation";
const _CBAS = "CidrBlockAssociationSet";
const _CBDH = "CapacityBlockDurationHours";
const _CBDM = "CapacityBlockDurationMinutes";
const _CBE = "CapacityBlockExtensions";
const _CBEDH = "CapacityBlockExtensionDurationHours";
const _CBEED = "CapacityBlockExtensionEndDate";
const _CBEO = "CapacityBlockExtensionOfferings";
const _CBEOI = "CapacityBlockExtensionOfferingId";
const _CBEPD = "CapacityBlockExtensionPurchaseDate";
const _CBES = "CapacityBlockExtensionStatus";
const _CBESD = "CapacityBlockExtensionStartDate";
const _CBI = "CapacityBlockIds";
const _CBIa = "CapacityBlockId";
const _CBO = "CapacityBlockOfferings";
const _CBOI = "CapacityBlockOfferingId";
const _CBS = "CapacityBlockStatuses";
const _CBSi = "CidrBlockState";
const _CBSid = "CidrBlockSet";
const _CBT = "CancelBundleTask";
const _CBa = "CapacityBlocks";
const _CBr = "CreatedBy";
const _CC = "CoreCount";
const _CCB = "ClientCidrBlock";
const _CCC = "CreateCoipCidr";
const _CCG = "CreateCarrierGateway";
const _CCGr = "CreateCustomerGateway";
const _CCO = "ClientConnectOptions";
const _CCP = "CreateCoipPool";
const _CCR = "CancelCapacityReservation";
const _CCRBS = "CreateCapacityReservationBySplitting";
const _CCRF = "CancelCapacityReservationFleets";
const _CCRFE = "CancelCapacityReservationFleetError";
const _CCRFr = "CreateCapacityReservationFleet";
const _CCRr = "CreateCapacityReservation";
const _CCT = "CancelConversionTask";
const _CCVE = "CreateClientVpnEndpoint";
const _CCVR = "CreateClientVpnRoute";
const _CCl = "ClientConfiguration";
const _CCo = "CoipCidr";
const _CCp = "CpuCredits";
const _CCu = "CurrencyCode";
const _CD = "CommitmentDuration";
const _CDC = "CreationDateCondition";
const _CDH = "CapacityDurationHours";
const _CDM = "CompletionDurationMinutes";
const _CDMVOT = "CreateDelegateMacVolumeOwnershipTask";
const _CDO = "CreateDhcpOptions";
const _CDPR = "CancelDeclarativePoliciesReport";
const _CDS = "CreateDefaultSubnet";
const _CDSDA = "ConfigDeliveryS3DestinationArn";
const _CDSu = "CustomDnsServers";
const _CDV = "CreateDefaultVpc";
const _CDl = "ClientData";
const _CDr = "CreateDate";
const _CDre = "CreationDate";
const _CDrea = "CreatedDate";
const _CE = "CronExpression";
const _CECSD = "CidrEndpointsCustomSubDomain";
const _CED = "CommitmentEndDate";
const _CEOIG = "CreateEgressOnlyInternetGateway";
const _CET = "CancelExportTask";
const _CETo = "ConnectionEstablishedTime";
const _CETon = "ConnectionEndTime";
const _CEo = "ConnectionEvents";
const _CF = "CreateFleet";
const _CFI = "CopyFpgaImage";
const _CFIr = "CreateFpgaImage";
const _CFL = "CreateFlowLogs";
const _CFS = "CurrentFleetState";
const _CFo = "ContainerFormat";
const _CG = "CarrierGateway";
const _CGC = "CustomerGatewayConfiguration";
const _CGI = "CarrierGatewayId";
const _CGIa = "CarrierGatewayIds";
const _CGIu = "CustomerGatewayId";
const _CGIus = "CustomerGatewayIds";
const _CGa = "CarrierGateways";
const _CGu = "CustomerGateway";
const _CGur = "CurrentGeneration";
const _CGus = "CustomerGateways";
const _CI = "CopyImage";
const _CIA = "ClientIpv6Address";
const _CIBM = "CurrentInstanceBootMode";
const _CIC = "CommittedInstanceCount";
const _CICE = "CreateInstanceConnectEndpoint";
const _CIERVT = "CreateIpamExternalResourceVerificationToken";
const _CIET = "CreateInstanceExportTask";
const _CIEW = "CreateInstanceEventWindow";
const _CIG = "CreateInternetGateway";
const _CILP = "CancelImageLaunchPermission";
const _CIP = "CreateIpamPool";
const _CIRD = "CreateIpamResourceDiscovery";
const _CIS = "CreateIpamScope";
const _CISI = "CurrentIpamScopeId";
const _CIT = "CancelImportTask";
const _CITo = "CopyImageTags";
const _CIUR = "CreateImageUsageReport";
const _CIa = "CarrierIp";
const _CIi = "CidrIp";
const _CIid = "CidrIpv6";
const _CIidr = "CidrIpv4";
const _CIl = "ClientId";
const _CIli = "ClientIp";
const _CIo = "ConnectionId";
const _CIom = "ComponentId";
const _CIomm = "CommitmentInfo";
const _CIop = "CoIp";
const _CIor = "CoreInfo";
const _CIr = "CreateImage";
const _CIre = "CreateIpam";
const _CKP = "CreateKeyPair";
const _CLB = "ClassicLoadBalancers";
const _CLBC = "ClassicLoadBalancersConfig";
const _CLBL = "ClassicLoadBalancerListener";
const _CLBO = "ClientLoginBannerOptions";
const _CLDS = "ClassicLinkDnsSupported";
const _CLE = "ClassicLinkEnabled";
const _CLG = "CloudwatchLogGroup";
const _CLGR = "CreateLocalGatewayRoute";
const _CLGRT = "CreateLocalGatewayRouteTable";
const _CLGRTVA = "CreateLocalGatewayRouteTableVpcAssociation";
const _CLGRTVIGA = "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
const _CLGVI = "CreateLocalGatewayVirtualInterface";
const _CLGVIG = "CreateLocalGatewayVirtualInterfaceGroup";
const _CLO = "ConnectionLogOptions";
const _CLS = "CloudwatchLogStream";
const _CLT = "CreateLaunchTemplate";
const _CLTV = "CreateLaunchTemplateVersion";
const _CM = "CpuManufacturers";
const _CMKE = "CustomerManagedKeyEnabled";
const _CMPL = "CreateManagedPrefixList";
const _CMSIPMT = "CreateMacSystemIntegrityProtectionModificationTask";
const _CN = "CommonName";
const _CNA = "CreateNetworkAcl";
const _CNAA = "CoreNetworkAttachmentArn";
const _CNAE = "CreateNetworkAclEntry";
const _CNAo = "CoreNetworkArn";
const _CNAon = "ConnectionNotificationArn";
const _CNG = "CreateNatGateway";
const _CNI = "CreateNetworkInterface";
const _CNIAS = "CreateNetworkInsightsAccessScope";
const _CNIP = "CreateNetworkInsightsPath";
const _CNIPr = "CreateNetworkInterfacePermission";
const _CNIo = "ConnectionNotificationIds";
const _CNIon = "ConnectionNotificationId";
const _CNIor = "CoreNetworkId";
const _CNS = "ConnectionNotificationState";
const _CNSo = "ConnectionNotificationSet";
const _CNT = "ConnectionNotificationType";
const _CNo = "ConnectionNotification";
const _CO = "CidrOptions";
const _COI = "CustomerOwnedIp";
const _COIP = "CustomerOwnedIpv4Pool";
const _COP = "CoolOffPeriod";
const _COPEO = "CoolOffPeriodExpiresOn";
const _COp = "CpuOptions";
const _CP = "CoipPool";
const _CPC = "ConnectPeerConfiguration";
const _CPG = "CreatePlacementGroup";
const _CPI = "ConfirmProductInstance";
const _CPIP = "CreatePublicIpv4Pool";
const _CPIo = "CoipPoolId";
const _CPo = "CoipPools";
const _CR = "CreateRoute";
const _CRA = "CapacityReservationArn";
const _CRBR = "CapacityReservationBillingRequests";
const _CRCC = "ClientRootCertificateChain";
const _CRCCA = "ClientRootCertificateChainArn";
const _CREO = "ClientRouteEnforcementOptions";
const _CRF = "CapacityReservationFleets";
const _CRFA = "CapacityReservationFleetArn";
const _CRFI = "CapacityReservationFleetIds";
const _CRFIa = "CapacityReservationFleetId";
const _CRG = "CapacityReservationGroups";
const _CRI = "CapacityReservationId";
const _CRIL = "CancelReservedInstancesListing";
const _CRILr = "CreateReservedInstancesListing";
const _CRIT = "CreateRestoreImageTask";
const _CRIa = "CapacityReservationIds";
const _CRIap = "CapacityReservationInfo";
const _CRL = "CertificateRevocationList";
const _CRO = "CapacityReservationOptions";
const _CRP = "CapacityReservationPreference";
const _CRRGA = "CapacityReservationResourceGroupArn";
const _CRRVT = "CreateReplaceRootVolumeTask";
const _CRS = "CreateRouteServer";
const _CRSE = "CreateRouteServerEndpoint";
const _CRSP = "CreateRouteServerPeer";
const _CRSa = "CapacityReservationSpecification";
const _CRSap = "CapacityReservationStatuses";
const _CRT = "CreateRouteTable";
const _CRTa = "CapacityReservationTarget";
const _CRa = "CancelReason";
const _CRap = "CapacityRebalance";
const _CRapa = "CapacityReservation";
const _CRapac = "CapacityReservations";
const _CRo = "ComponentRegion";
const _CS = "CopySnapshot";
const _CSBN = "CertificateS3BucketName";
const _CSCR = "CreateSubnetCidrReservation";
const _CSDS = "CreateSpotDatafeedSubscription";
const _CSFR = "CancelSpotFleetRequests";
const _CSFRS = "CurrentSpotFleetRequestState";
const _CSG = "CreateSecurityGroup";
const _CSIR = "CancelSpotInstanceRequests";
const _CSIRa = "CancelledSpotInstanceRequests";
const _CSIT = "CreateStoreImageTask";
const _CSOK = "CertificateS3ObjectKey";
const _CSl = "ClientSecret";
const _CSo = "ComplianceStatus";
const _CSon = "ConfigurationState";
const _CSonn = "ConnectionStatuses";
const _CSr = "CreateSnapshot";
const _CSre = "CreateSnapshots";
const _CSrea = "CreateSubnet";
const _CSred = "CreditSpecification";
const _CSu = "CurrentState";
const _CSur = "CurrentStatus";
const _CT = "CreateTags";
const _CTC = "ConnectionTrackingConfiguration";
const _CTFS = "CopyTagsFromSource";
const _CTG = "CreateTransitGateway";
const _CTGC = "CreateTransitGatewayConnect";
const _CTGCP = "CreateTransitGatewayConnectPeer";
const _CTGMD = "CreateTransitGatewayMulticastDomain";
const _CTGPA = "CreateTransitGatewayPeeringAttachment";
const _CTGPLR = "CreateTransitGatewayPrefixListReference";
const _CTGPT = "CreateTransitGatewayPolicyTable";
const _CTGR = "CreateTransitGatewayRoute";
const _CTGRT = "CreateTransitGatewayRouteTable";
const _CTGRTA = "CreateTransitGatewayRouteTableAnnouncement";
const _CTGVA = "CreateTransitGatewayVpcAttachment";
const _CTI = "ConversionTaskId";
const _CTIo = "ConversionTaskIds";
const _CTMF = "CreateTrafficMirrorFilter";
const _CTMFR = "CreateTrafficMirrorFilterRule";
const _CTMS = "CreateTrafficMirrorSession";
const _CTMT = "CreateTrafficMirrorTarget";
const _CTS = "ConnectionTrackingSpecification";
const _CTl = "ClientToken";
const _CTo = "ConnectivityType";
const _CTom = "CompleteTime";
const _CTomp = "CompletionTime";
const _CTon = "ConversionTasks";
const _CTonv = "ConversionTask";
const _CTr = "CreateTime";
const _CTre = "CreationTime";
const _CTrea = "CreationTimestamp";
const _CV = "CreateVolume";
const _CVAE = "CreateVerifiedAccessEndpoint";
const _CVAG = "CreateVerifiedAccessGroup";
const _CVAI = "CreateVerifiedAccessInstance";
const _CVATP = "CreateVerifiedAccessTrustProvider";
const _CVBPAE = "CreateVpcBlockPublicAccessExclusion";
const _CVC = "CreateVpnConnection";
const _CVCR = "CreateVpnConnectionRoute";
const _CVE = "CreateVpcEndpoint";
const _CVECN = "CreateVpcEndpointConnectionNotification";
const _CVEI = "ClientVpnEndpointId";
const _CVEIl = "ClientVpnEndpointIds";
const _CVESC = "CreateVpcEndpointServiceConfiguration";
const _CVEl = "ClientVpnEndpoints";
const _CVG = "CreateVpnGateway";
const _CVP = "CreateVolumePermission";
const _CVPC = "CreateVpcPeeringConnection";
const _CVPr = "CreateVolumePermissions";
const _CVTN = "ClientVpnTargetNetworks";
const _CVr = "CreateVpc";
const _CVu = "CurrentVersion";
const _CWL = "CloudWatchLogs";
const _CWLO = "CloudWatchLogOptions";
const _Ca = "Cascade";
const _Cat = "Category";
const _Ch = "Checksum";
const _Ci = "Cidrs";
const _Co = "Comment";
const _Cod = "Code";
const _Com = "Component";
const _Con = "Context";
const _Conf = "Configured";
const _Confi = "Config";
const _Conn = "Connections";
const _Cor = "Cores";
const _Cou = "Count";
const _Cp = "Cpu";
const _D = "Destination";
const _DA = "DescribeAddresses";
const _DAA = "DescribeAccountAttributes";
const _DAAI = "DelegatedAdminAccountId";
const _DAAe = "DescribeAddressesAttribute";
const _DAIF = "DescribeAggregateIdFormat";
const _DAIS = "DisableAllowedImagesSettings";
const _DAIT = "DenyAllIgwTraffic";
const _DANPMS = "DescribeAwsNetworkPerformanceMetricSubscriptions";
const _DANPMSi = "DisableAwsNetworkPerformanceMetricSubscription";
const _DART = "DefaultAssociationRouteTable";
const _DAS = "DeleteAssociatedSnapshots";
const _DASi = "DisableApiStop";
const _DAT = "DescribeAddressTransfers";
const _DATi = "DisableAddressTransfer";
const _DATis = "DisableApiTermination";
const _DAZ = "DescribeAvailabilityZones";
const _DAZI = "DestinationAvailabilityZoneId";
const _DAZe = "DestinationAvailabilityZone";
const _DAe = "DeprecateAt";
const _DAep = "DeprovisionedAddresses";
const _DAes = "DestinationAddresses";
const _DAest = "DestinationAddress";
const _DAesti = "DestinationArn";
const _DAi = "DisassociateAddress";
const _DBC = "DeprovisionByoipCidr";
const _DBCe = "DescribeByoipCidrs";
const _DBT = "DescribeBundleTasks";
const _DC = "DisallowedCidrs";
const _DCA = "DomainCertificateArn";
const _DCAR = "DeliverCrossAccountRole";
const _DCB = "DescribeCapacityBlocks";
const _DCBEH = "DescribeCapacityBlockExtensionHistory";
const _DCBEO = "DescribeCapacityBlockExtensionOfferings";
const _DCBO = "DescribeCapacityBlockOfferings";
const _DCBS = "DescribeCapacityBlockStatus";
const _DCBe = "DestinationCidrBlock";
const _DCC = "DeleteCoipCidr";
const _DCG = "DeleteCarrierGateway";
const _DCGe = "DeleteCustomerGateway";
const _DCGes = "DescribeCarrierGateways";
const _DCGesc = "DescribeCustomerGateways";
const _DCLI = "DescribeClassicLinkInstances";
const _DCLV = "DetachClassicLinkVpc";
const _DCP = "DeleteCoipPool";
const _DCPe = "DescribeCoipPools";
const _DCR = "DescribeCapacityReservations";
const _DCRBO = "DisassociateCapacityReservationBillingOwner";
const _DCRBR = "DescribeCapacityReservationBillingRequests";
const _DCRF = "DescribeCapacityReservationFleets";
const _DCRI = "DestinationCapacityReservationId";
const _DCRe = "DestinationCapacityReservation";
const _DCT = "DescribeConversionTasks";
const _DCVAR = "DescribeClientVpnAuthorizationRules";
const _DCVC = "DescribeClientVpnConnections";
const _DCVE = "DeleteClientVpnEndpoint";
const _DCVEe = "DescribeClientVpnEndpoints";
const _DCVR = "DeleteClientVpnRoute";
const _DCVRe = "DescribeClientVpnRoutes";
const _DCVTN = "DescribeClientVpnTargetNetworks";
const _DCVTNi = "DisassociateClientVpnTargetNetwork";
const _DCe = "DestinationCidr";
const _DCef = "DefaultCores";
const _DCh = "DhcpConfigurations";
const _DCi = "DiskContainers";
const _DCis = "DiskContainer";
const _DDO = "DeleteDhcpOptions";
const _DDOe = "DescribeDhcpOptions";
const _DDPR = "DescribeDeclarativePoliciesReports";
const _DE = "DnsEntries";
const _DECIR = "DisassociateEnclaveCertificateIamRole";
const _DEEBD = "DisableEbsEncryptionByDefault";
const _DEG = "DescribeElasticGpus";
const _DEIT = "DescribeExportImageTasks";
const _DEKI = "DataEncryptionKeyId";
const _DEOIG = "DeleteEgressOnlyInternetGateway";
const _DEOIGe = "DescribeEgressOnlyInternetGateways";
const _DEQC = "DefaultEnaQueueCount";
const _DEQCPI = "DefaultEnaQueueCountPerInterface";
const _DET = "DescribeExportTasks";
const _DEn = "DnsEntry";
const _DF = "DeleteFleets";
const _DFA = "DefaultForAz";
const _DFH = "DescribeFleetHistory";
const _DFI = "DeleteFpgaImage";
const _DFIA = "DescribeFpgaImageAttribute";
const _DFIe = "DescribeFleetInstances";
const _DFIes = "DescribeFpgaImages";
const _DFL = "DeleteFlowLogs";
const _DFLI = "DescribeFastLaunchImages";
const _DFLe = "DescribeFlowLogs";
const _DFLi = "DisableFastLaunch";
const _DFSR = "DescribeFastSnapshotRestores";
const _DFSRi = "DisableFastSnapshotRestores";
const _DFe = "DescribeFleets";
const _DH = "DescribeHosts";
const _DHI = "DedicatedHostIds";
const _DHR = "DescribeHostReservations";
const _DHRO = "DescribeHostReservationOfferings";
const _DHS = "DedicatedHostsSupported";
const _DHT = "DnsHostnameType";
const _DI = "DeleteIpam";
const _DIA = "DescribeImageAttribute";
const _DIAe = "DescribeInstanceAttribute";
const _DIB = "DeprovisionIpamByoasn";
const _DIBPA = "DisableImageBlockPublicAccess";
const _DIBe = "DescribeIpamByoasn";
const _DIBi = "DisassociateIpamByoasn";
const _DICB = "DestinationIpv6CidrBlock";
const _DICE = "DeleteInstanceConnectEndpoint";
const _DICEe = "DescribeInstanceConnectEndpoints";
const _DICS = "DescribeInstanceCreditSpecifications";
const _DID = "DisableImageDeprecation";
const _DIDP = "DisableImageDeregistrationProtection";
const _DIENA = "DeregisterInstanceEventNotificationAttributes";
const _DIENAe = "DescribeInstanceEventNotificationAttributes";
const _DIERVT = "DeleteIpamExternalResourceVerificationToken";
const _DIERVTe = "DescribeIpamExternalResourceVerificationTokens";
const _DIEW = "DeleteInstanceEventWindow";
const _DIEWe = "DescribeInstanceEventWindows";
const _DIEWi = "DisassociateInstanceEventWindow";
const _DIF = "DescribeIdFormat";
const _DIFi = "DiskImageFormat";
const _DIG = "DeleteInternetGateway";
const _DIGe = "DescribeInternetGateways";
const _DIGet = "DetachInternetGateway";
const _DIIF = "DescribeIdentityIdFormat";
const _DIIM = "DescribeInstanceImageMetadata";
const _DIIP = "DisassociateIamInstanceProfile";
const _DIIPA = "DescribeIamInstanceProfileAssociations";
const _DIIT = "DescribeImportImageTasks";
const _DIOAA = "DisableIpamOrganizationAdminAccount";
const _DIP = "DeleteIpamPool";
const _DIPC = "DeprovisionIpamPoolCidr";
const _DIPe = "DescribeIpamPools";
const _DIPes = "DescribeIpv6Pools";
const _DIR = "DescribeImageReferences";
const _DIRD = "DeleteIpamResourceDiscovery";
const _DIRDA = "DescribeIpamResourceDiscoveryAssociations";
const _DIRDe = "DescribeIpamResourceDiscoveries";
const _DIRDi = "DisassociateIpamResourceDiscovery";
const _DIS = "DeleteIpamScope";
const _DISI = "DestinationIpamScopeId";
const _DIST = "DescribeImportSnapshotTasks";
const _DISe = "DescribeInstanceStatus";
const _DISes = "DescribeIpamScopes";
const _DISi = "DiskImageSize";
const _DIT = "DescribeInstanceTopology";
const _DITO = "DescribeInstanceTypeOfferings";
const _DITe = "DescribeInstanceTypes";
const _DIUR = "DeleteImageUsageReport";
const _DIURE = "DescribeImageUsageReportEntries";
const _DIURe = "DescribeImageUsageReports";
const _DIe = "DeregisterImage";
const _DIes = "DescribeImages";
const _DIesc = "DescribeInstances";
const _DIescr = "DescribeIpams";
const _DIest = "DestinationIp";
const _DIev = "DeviceIndex";
const _DIevi = "DeviceId";
const _DIi = "DisableImage";
const _DIir = "DirectoryId";
const _DIis = "DiskImages";
const _DKP = "DeleteKeyPair";
const _DKPe = "DescribeKeyPairs";
const _DLADI = "DisableLniAtDeviceIndex";
const _DLEM = "DeliverLogsErrorMessage";
const _DLG = "DescribeLocalGateways";
const _DLGR = "DeleteLocalGatewayRoute";
const _DLGRT = "DeleteLocalGatewayRouteTable";
const _DLGRTVA = "DeleteLocalGatewayRouteTableVpcAssociation";
const _DLGRTVAe = "DescribeLocalGatewayRouteTableVpcAssociations";
const _DLGRTVIGA = "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation";
const _DLGRTVIGAe = "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations";
const _DLGRTe = "DescribeLocalGatewayRouteTables";
const _DLGVI = "DeleteLocalGatewayVirtualInterface";
const _DLGVIG = "DeleteLocalGatewayVirtualInterfaceGroup";
const _DLGVIGe = "DescribeLocalGatewayVirtualInterfaceGroups";
const _DLGVIe = "DescribeLocalGatewayVirtualInterfaces";
const _DLPA = "DeliverLogsPermissionArn";
const _DLS = "DescribeLockedSnapshots";
const _DLSe = "DeliverLogsStatus";
const _DLT = "DeleteLaunchTemplate";
const _DLTV = "DeleteLaunchTemplateVersions";
const _DLTVe = "DescribeLaunchTemplateVersions";
const _DLTe = "DescribeLaunchTemplates";
const _DMA = "DescribeMovingAddresses";
const _DMGM = "DeregisteredMulticastGroupMembers";
const _DMGS = "DeregisteredMulticastGroupSources";
const _DMH = "DescribeMacHosts";
const _DMMT = "DescribeMacModificationTasks";
const _DMPL = "DeleteManagedPrefixList";
const _DMPLe = "DescribeManagedPrefixLists";
const _DN = "DeviceName";
const _DNA = "DeleteNetworkAcl";
const _DNAE = "DeleteNetworkAclEntry";
const _DNAe = "DescribeNetworkAcls";
const _DNCI = "DefaultNetworkCardIndex";
const _DNG = "DeleteNatGateway";
const _DNGA = "DisassociateNatGatewayAddress";
const _DNGe = "DescribeNatGateways";
const _DNI = "DeleteNetworkInterface";
const _DNIA = "DeleteNetworkInsightsAnalysis";
const _DNIAS = "DeleteNetworkInsightsAccessScope";
const _DNIASA = "DeleteNetworkInsightsAccessScopeAnalysis";
const _DNIASAe = "DescribeNetworkInsightsAccessScopeAnalyses";
const _DNIASe = "DescribeNetworkInsightsAccessScopes";
const _DNIAe = "DescribeNetworkInsightsAnalyses";
const _DNIAes = "DescribeNetworkInterfaceAttribute";
const _DNII = "DeregisteredNetworkInterfaceIds";
const _DNIP = "DeleteNetworkInsightsPath";
const _DNIPe = "DeleteNetworkInterfacePermission";
const _DNIPes = "DescribeNetworkInsightsPaths";
const _DNIPesc = "DescribeNetworkInterfacePermissions";
const _DNIe = "DescribeNetworkInterfaces";
const _DNIet = "DetachNetworkInterface";
const _DNn = "DnsName";
const _DNo = "DomainName";
const _DO = "DestinationOptions";
const _DOA = "DestinationOutpostArn";
const _DOI = "DhcpOptionsId";
const _DOIh = "DhcpOptionsIds";
const _DOL = "DescribeOutpostLags";
const _DOST = "DisconnectOnSessionTimeout";
const _DOT = "DeleteOnTermination";
const _DOe = "DeviceOptions";
const _DOh = "DhcpOptions";
const _DOn = "DnsOptions";
const _DP = "DeliveryPreference";
const _DPDTA = "DPDTimeoutAction";
const _DPDTS = "DPDTimeoutSeconds";
const _DPG = "DeletePlacementGroup";
const _DPGe = "DescribePlacementGroups";
const _DPIF = "DescribePrincipalIdFormat";
const _DPIP = "DeletePublicIpv4Pool";
const _DPIPC = "DeprovisionPublicIpv4PoolCidr";
const _DPIPe = "DescribePublicIpv4Pools";
const _DPL = "DescribePrefixLists";
const _DPLI = "DestinationPrefixListId";
const _DPLe = "DestinationPrefixLists";
const _DPR = "DestinationPortRange";
const _DPRT = "DefaultPropagationRouteTable";
const _DPRe = "DestinationPortRanges";
const _DPe = "DestinationPort";
const _DPer = "DeregistrationProtection";
const _DPes = "DestinationPorts";
const _DQ = "DataQueries";
const _DQRI = "DeleteQueuedReservedInstances";
const _DR = "DeleteRoute";
const _DRDAI = "DefaultResourceDiscoveryAssociationId";
const _DRDI = "DefaultResourceDiscoveryId";
const _DRI = "DescribeReservedInstances";
const _DRIL = "DescribeReservedInstancesListings";
const _DRIM = "DescribeReservedInstancesModifications";
const _DRIO = "DescribeReservedInstancesOfferings";
const _DRIT = "DnsRecordIpType";
const _DRRV = "DeleteReplacedRootVolume";
const _DRRVT = "DescribeReplaceRootVolumeTasks";
const _DRS = "DeleteRouteServer";
const _DRSE = "DeleteRouteServerEndpoint";
const _DRSEe = "DescribeRouteServerEndpoints";
const _DRSP = "DeleteRouteServerPeer";
const _DRSPe = "DescribeRouteServerPeers";
const _DRSPi = "DisableRouteServerPropagation";
const _DRSa = "DataRetentionSupport";
const _DRSe = "DescribeRouteServers";
const _DRSi = "DisassociateRouteServer";
const _DRT = "DeleteRouteTable";
const _DRTA = "DefaultRouteTableAssociation";
const _DRTP = "DefaultRouteTablePropagation";
const _DRTe = "DescribeRouteTables";
const _DRTi = "DisassociateRouteTable";
const _DRa = "DataResponses";
const _DRe = "DescribeRegions";
const _DReb = "DebuggingRestrictions";
const _DRes = "DestinationRegion";
const _DRi = "DiscoveryRegion";
const _DRr = "DryRun";
const _DRy = "DynamicRouting";
const _DS = "DeleteSnapshot";
const _DSA = "DescribeSnapshotAttribute";
const _DSBPA = "DisableSnapshotBlockPublicAccess";
const _DSCA = "DisableSerialConsoleAccess";
const _DSCB = "DisassociateSubnetCidrBlock";
const _DSCR = "DeleteSubnetCidrReservation";
const _DSCRe = "DeletedSubnetCidrReservation";
const _DSDS = "DeleteSpotDatafeedSubscription";
const _DSDSe = "DescribeSpotDatafeedSubscription";
const _DSFI = "DescribeSpotFleetInstances";
const _DSFR = "DescribeSpotFleetRequests";
const _DSFRH = "DescribeSpotFleetRequestHistory";
const _DSG = "DeleteSecurityGroup";
const _DSGR = "DescribeSecurityGroupReferences";
const _DSGRe = "DescribeSecurityGroupRules";
const _DSGV = "DisassociateSecurityGroupVpc";
const _DSGVA = "DescribeSecurityGroupVpcAssociations";
const _DSGe = "DescribeSecurityGroups";
const _DSI = "DescribeScheduledInstances";
const _DSIA = "DescribeScheduledInstanceAvailability";
const _DSIR = "DescribeSpotInstanceRequests";
const _DSIT = "DescribeStoreImageTasks";
const _DSLVI = "DescribeServiceLinkVirtualInterfaces";
const _DSPH = "DescribeSpotPriceHistory";
const _DSR = "DeleteSnapshotResults";
const _DSSG = "DescribeStaleSecurityGroups";
const _DSTS = "DescribeSnapshotTierStatus";
const _DSe = "DeleteSubnet";
const _DSel = "DeliveryStream";
const _DSeli = "DeliveryStatus";
const _DSes = "DescribeSnapshots";
const _DSesc = "DescribeSubnets";
const _DSn = "DnsServers";
const _DSns = "DnsSupport";
const _DT = "DeleteTags";
const _DTA = "DpdTimeoutAction";
const _DTC = "DeprecationTimeCondition";
const _DTCT = "DefaultTargetCapacityType";
const _DTG = "DeleteTransitGateway";
const _DTGA = "DescribeTransitGatewayAttachments";
const _DTGC = "DeleteTransitGatewayConnect";
const _DTGCP = "DeleteTransitGatewayConnectPeer";
const _DTGCPe = "DescribeTransitGatewayConnectPeers";
const _DTGCe = "DescribeTransitGatewayConnects";
const _DTGMD = "DeleteTransitGatewayMulticastDomain";
const _DTGMDe = "DescribeTransitGatewayMulticastDomains";
const _DTGMDi = "DisassociateTransitGatewayMulticastDomain";
const _DTGMGM = "DeregisterTransitGatewayMulticastGroupMembers";
const _DTGMGS = "DeregisterTransitGatewayMulticastGroupSources";
const _DTGPA = "DeleteTransitGatewayPeeringAttachment";
const _DTGPAe = "DescribeTransitGatewayPeeringAttachments";
const _DTGPLR = "DeleteTransitGatewayPrefixListReference";
const _DTGPT = "DeleteTransitGatewayPolicyTable";
const _DTGPTe = "DescribeTransitGatewayPolicyTables";
const _DTGPTi = "DisassociateTransitGatewayPolicyTable";
const _DTGR = "DeleteTransitGatewayRoute";
const _DTGRT = "DeleteTransitGatewayRouteTable";
const _DTGRTA = "DeleteTransitGatewayRouteTableAnnouncement";
const _DTGRTAe = "DescribeTransitGatewayRouteTableAnnouncements";
const _DTGRTP = "DisableTransitGatewayRouteTablePropagation";
const _DTGRTe = "DescribeTransitGatewayRouteTables";
const _DTGRTi = "DisassociateTransitGatewayRouteTable";
const _DTGVA = "DeleteTransitGatewayVpcAttachment";
const _DTGVAe = "DescribeTransitGatewayVpcAttachments";
const _DTGe = "DescribeTransitGateways";
const _DTI = "DisassociateTrunkInterface";
const _DTIA = "DescribeTrunkInterfaceAssociations";
const _DTMF = "DeleteTrafficMirrorFilter";
const _DTMFR = "DeleteTrafficMirrorFilterRule";
const _DTMFRe = "DescribeTrafficMirrorFilterRules";
const _DTMFe = "DescribeTrafficMirrorFilters";
const _DTMS = "DeleteTrafficMirrorSession";
const _DTMSe = "DescribeTrafficMirrorSessions";
const _DTMT = "DeleteTrafficMirrorTarget";
const _DTMTe = "DescribeTrafficMirrorTargets";
const _DTP = "DeviceTrustProviders";
const _DTPC = "DefaultThreadsPerCore";
const _DTPT = "DeviceTrustProviderType";
const _DTR = "DTraceRestrictions";
const _DTS = "DpdTimeoutSeconds";
const _DTe = "DescribeTags";
const _DTel = "DeletionTime";
const _DTele = "DeleteTime";
const _DTelet = "DeletionTimestamp";
const _DTep = "DeprecationTime";
const _DTi = "DisablingTime";
const _DTis = "DisabledTime";
const _DV = "DeleteVolume";
const _DVA = "DescribeVolumeAttribute";
const _DVAE = "DeleteVerifiedAccessEndpoint";
const _DVAEe = "DescribeVerifiedAccessEndpoints";
const _DVAG = "DeleteVerifiedAccessGroup";
const _DVAGe = "DescribeVerifiedAccessGroups";
const _DVAI = "DeleteVerifiedAccessInstance";
const _DVAILC = "DescribeVerifiedAccessInstanceLoggingConfigurations";
const _DVAIe = "DescribeVerifiedAccessInstances";
const _DVATP = "DeleteVerifiedAccessTrustProvider";
const _DVATPe = "DescribeVerifiedAccessTrustProviders";
const _DVATPet = "DetachVerifiedAccessTrustProvider";
const _DVAe = "DescribeVpcAttribute";
const _DVBPAE = "DeleteVpcBlockPublicAccessExclusion";
const _DVBPAEe = "DescribeVpcBlockPublicAccessExclusions";
const _DVBPAO = "DescribeVpcBlockPublicAccessOptions";
const _DVC = "DeleteVpnConnection";
const _DVCB = "DisassociateVpcCidrBlock";
const _DVCL = "DescribeVpcClassicLink";
const _DVCLDS = "DescribeVpcClassicLinkDnsSupport";
const _DVCLDSi = "DisableVpcClassicLinkDnsSupport";
const _DVCLi = "DisableVpcClassicLink";
const _DVCR = "DeleteVpnConnectionRoute";
const _DVCe = "DescribeVpnConnections";
const _DVCef = "DefaultVCpus";
const _DVD = "DeviceValidationDomain";
const _DVE = "DeleteVpcEndpoints";
const _DVEA = "DescribeVpcEndpointAssociations";
const _DVEC = "DescribeVpcEndpointConnections";
const _DVECN = "DeleteVpcEndpointConnectionNotifications";
const _DVECNe = "DescribeVpcEndpointConnectionNotifications";
const _DVES = "DescribeVpcEndpointServices";
const _DVESC = "DeleteVpcEndpointServiceConfigurations";
const _DVESCe = "DescribeVpcEndpointServiceConfigurations";
const _DVESP = "DescribeVpcEndpointServicePermissions";
const _DVEe = "DescribeVpcEndpoints";
const _DVG = "DeleteVpnGateway";
const _DVGe = "DescribeVpnGateways";
const _DVGet = "DetachVpnGateway";
const _DVM = "DescribeVolumesModifications";
const _DVN = "DefaultVersionNumber";
const _DVPC = "DeleteVpcPeeringConnection";
const _DVPCe = "DescribeVpcPeeringConnections";
const _DVRP = "DisableVgwRoutePropagation";
const _DVS = "DescribeVolumeStatus";
const _DVe = "DeleteVpc";
const _DVef = "DefaultVersion";
const _DVes = "DescribeVolumes";
const _DVesc = "DescribeVpcs";
const _DVest = "DestinationVpc";
const _DVet = "DetachVolume";
const _Da = "Data";
const _De = "Description";
const _Dea = "Deadline";
const _Des = "Destinations";
const _Det = "Details";
const _Dev = "Device";
const _Di = "Direction";
const _Dis = "Disks";
const _Do = "Domain";
const _Du = "Duration";
const _Dua = "Dualstack";
const _E = "Ebs";
const _EA = "EnableAcceleration";
const _EAIS = "EnableAllowedImagesSettings";
const _EANPMS = "EnableAwsNetworkPerformanceMetricSubscription";
const _EAT = "EnableAddressTransfer";
const _EAn = "EniAddress";
const _EAx = "ExclusionsAllowed";
const _EB = "EgressBytes";
const _EBV = "ExcludeBootVolume";
const _EC = "ErrorCode";
const _ECTP = "ExcessCapacityTerminationPolicy";
const _ECVCC = "ExportClientVpnClientConfiguration";
const _ECVCCRL = "ExportClientVpnClientCertificateRevocationList";
const _ECn = "EncryptionControl";
const _ECx = "ExplanationCode";
const _ED = "EndDate";
const _EDH = "EnableDnsHostnames";
const _EDP = "EndpointDomainPrefix";
const _EDR = "EndDateRange";
const _EDS = "EnableDnsSupport";
const _EDT = "EndDateType";
const _EDVI = "ExcludeDataVolumeIds";
const _EDf = "EffectiveDate";
const _EDn = "EnableDns64";
const _EDnd = "EndpointDomain";
const _EDv = "EventDescription";
const _EDx = "ExpirationDate";
const _EEA = "EndpointEniAddress";
const _EEBD = "EbsEncryptionByDefault";
const _EEEBD = "EnableEbsEncryptionByDefault";
const _EEI = "EndpointEniId";
const _EFL = "EnableFastLaunch";
const _EFR = "EgressFilterRules";
const _EFSR = "EnableFastSnapshotRestores";
const _EGA = "ElasticGpuAssociations";
const _EGAI = "ElasticGpuAssociationId";
const _EGAS = "ElasticGpuAssociationState";
const _EGAT = "ElasticGpuAssociationTime";
const _EGH = "ElasticGpuHealth";
const _EGI = "ElasticGpuIds";
const _EGIl = "ElasticGpuId";
const _EGS = "ElasticGpuSpecifications";
const _EGSl = "ElasticGpuSpecification";
const _EGSla = "ElasticGpuSet";
const _EGSlas = "ElasticGpuState";
const _EGT = "ElasticGpuType";
const _EH = "EndHour";
const _EI = "EnableImage";
const _EIA = "ElasticInferenceAccelerators";
const _EIAA = "ElasticInferenceAcceleratorArn";
const _EIAAI = "ElasticInferenceAcceleratorAssociationId";
const _EIAAS = "ElasticInferenceAcceleratorAssociationState";
const _EIAAT = "ElasticInferenceAcceleratorAssociationTime";
const _EIAAl = "ElasticInferenceAcceleratorAssociations";
const _EIAT = "EndpointIpAddressType";
const _EIBPA = "EnableImageBlockPublicAccess";
const _EID = "EnableImageDeprecation";
const _EIDP = "EnableImageDeregistrationProtection";
const _EIOAA = "EnableIpamOrganizationAdminAccount";
const _EIT = "ExcludedInstanceTypes";
const _EITI = "ExportImageTaskIds";
const _EITIx = "ExportImageTaskId";
const _EITS = "EncryptionInTransitSupported";
const _EITx = "ExportImageTasks";
const _EIb = "EbsInfo";
const _EIf = "EfaInfo";
const _EIn = "EniId";
const _EIv = "EventInformation";
const _EIve = "EventId";
const _EIx = "ExportImage";
const _EIxc = "ExclusionId";
const _EIxch = "ExchangeId";
const _EIxcl = "ExclusionIds";
const _EKKI = "EncryptionKmsKeyId";
const _ELADI = "EnableLniAtDeviceIndex";
const _ELBL = "ElasticLoadBalancerListener";
const _EM = "ErrorMessage";
const _ENAUM = "EnableNetworkAddressUsageMetrics";
const _EO = "EbsOptimized";
const _EOI = "EbsOptimizedInfo";
const _EOIG = "EgressOnlyInternetGateway";
const _EOIGI = "EgressOnlyInternetGatewayId";
const _EOIGIg = "EgressOnlyInternetGatewayIds";
const _EOIGg = "EgressOnlyInternetGateways";
const _EOS = "EbsOptimizedSupport";
const _EOn = "EnclaveOptions";
const _EP = "ExcludePaths";
const _EPG = "EnablePrivateGua";
const _EPI = "EnablePrimaryIpv6";
const _EPg = "EgressPackets";
const _EQC = "EnaQueueCount";
const _ERAOS = "EnableReachabilityAnalyzerOrganizationSharing";
const _ERNDAAAAR = "EnableResourceNameDnsAAAARecord";
const _ERNDAAAAROL = "EnableResourceNameDnsAAAARecordOnLaunch";
const _ERNDAR = "EnableResourceNameDnsARecord";
const _ERNDAROL = "EnableResourceNameDnsARecordOnLaunch";
const _ERSP = "EnableRouteServerPropagation";
const _ES = "EphemeralStorage";
const _ESBPA = "EnableSnapshotBlockPublicAccess";
const _ESCA = "EnableSerialConsoleAccess";
const _ESE = "EnaSrdEnabled";
const _ESS = "EnaSrdSpecification";
const _ESSn = "EnaSrdSupported";
const _EST = "EventSubType";
const _ESUE = "EnaSrdUdpEnabled";
const _ESUS = "EnaSrdUdpSpecification";
const _ESf = "EfaSupported";
const _ESn = "EnaSupport";
const _ESnc = "EncryptionSupport";
const _ET = "EndpointType";
const _ETGR = "ExportTransitGatewayRoutes";
const _ETGRTP = "EnableTransitGatewayRouteTablePropagation";
const _ETI = "ExportTaskId";
const _ETIx = "ExportTaskIds";
const _ETLC = "EnableTunnelLifecycleControl";
const _ETST = "ExportToS3Task";
const _ETTCIS = "EstimatedTimeToCompleteInSeconds";
const _ETa = "EarliestTime";
const _ETi = "EipTags";
const _ETn = "EndTime";
const _ETna = "EnablingTime";
const _ETnab = "EnabledTime";
const _ETv = "EventType";
const _ETx = "ExpirationTime";
const _ETxp = "ExportTask";
const _ETxpo = "ExportTasks";
const _EU = "ExecutableUsers";
const _EVAICC = "ExportVerifiedAccessInstanceClientConfiguration";
const _EVCL = "EnableVpcClassicLink";
const _EVCLDS = "EnableVpcClassicLinkDnsSupport";
const _EVIO = "EnableVolumeIO";
const _EVRP = "EnableVgwRoutePropagation";
const _EWD = "EndWeekDay";
const _Eg = "Egress";
const _En = "Enabled";
const _Enc = "Encrypted";
const _End = "End";
const _Endp = "Endpoint";
const _Enf = "Enforced";
const _Ent = "Entries";
const _Er = "Error";
const _Err = "Errors";
const _Ev = "Events";
const _Eve = "Event";
const _Ex = "Explanations";
const _F = "Force";
const _FA = "FederatedAuthentication";
const _FAD = "FilterAtDestination";
const _FAS = "FilterAtSource";
const _FAi = "FirstAddress";
const _FC = "FulfilledCapacity";
const _FCR = "FleetCapacityReservations";
const _FCa = "FailureCode";
const _FCi = "FindingComponents";
const _FD = "ForceDelete";
const _FDN = "FipsDnsName";
const _FE = "FipsEnabled";
const _FEQS = "FlexibleEnaQueuesSupport";
const _FF = "FileFormat";
const _FFC = "FailedFleetCancellations";
const _FFi = "FindingsFound";
const _FI = "FleetIds";
const _FIA = "FilterInArns";
const _FIAp = "FpgaImageAttribute";
const _FIGI = "FpgaImageGlobalId";
const _FII = "FpgaImageId";
const _FIIp = "FpgaImageIds";
const _FIPSE = "FIPSEnabled";
const _FIi = "FindingId";
const _FIl = "FleetId";
const _FIp = "FpgaImages";
const _FIpg = "FpgaInfo";
const _FL = "FlowLogs";
const _FLI = "FlowLogIds";
const _FLIa = "FastLaunchImages";
const _FLIl = "FlowLogId";
const _FLS = "FlowLogStatus";
const _FM = "FailureMessage";
const _FOA = "FilterOutArns";
const _FODC = "FulfilledOnDemandCapacity";
const _FP = "FromPort";
const _FPC = "ForwardPathComponents";
const _FPi = "FilesystemProtections";
const _FPix = "FixedPrice";
const _FQPD = "FailedQueuedPurchaseDeletions";
const _FR = "FailureReason";
const _FRa = "FastRestored";
const _FS = "FleetState";
const _FSR = "FastSnapshotRestores";
const _FSRSE = "FastSnapshotRestoreStateErrors";
const _FSRi = "FirewallStatelessRule";
const _FSRir = "FirewallStatefulRule";
const _FSSIB = "FullSnapshotSizeInBytes";
const _FSST = "FirstSlotStartTime";
const _FSSTR = "FirstSlotStartTimeRange";
const _FTE = "FreeTierEligible";
const _Fa = "Fault";
const _Fi = "Filters";
const _Fil = "Filter";
const _Fl = "Fleets";
const _Fo = "Format";
const _Fp = "Fpgas";
const _Fr = "From";
const _Fre = "Frequency";
const _G = "Groups";
const _GA = "GroupArn";
const _GAECIR = "GetAssociatedEnclaveCertificateIamRoles";
const _GAIPC = "GetAssociatedIpv6PoolCidrs";
const _GAIS = "GetAllowedImagesSettings";
const _GANPD = "GetAwsNetworkPerformanceData";
const _GAS = "GatewayAssociationState";
const _GAVTS = "GetActiveVpnTunnelStatus";
const _GCO = "GetConsoleOutput";
const _GCPU = "GetCoipPoolUsage";
const _GCRU = "GetCapacityReservationUsage";
const _GCS = "GetConsoleScreenshot";
const _GD = "GroupDescription";
const _GDCS = "GetDefaultCreditSpecification";
const _GDPRS = "GetDeclarativePoliciesReportSummary";
const _GEDKKI = "GetEbsDefaultKmsKeyId";
const _GEEBD = "GetEbsEncryptionByDefault";
const _GFLIT = "GetFlowLogsIntegrationTemplate";
const _GGFCR = "GetGroupsForCapacityReservation";
const _GHRPP = "GetHostReservationPurchasePreview";
const _GI = "GatewayId";
const _GIA = "GroupIpAddress";
const _GIAH = "GetIpamAddressHistory";
const _GIBPAS = "GetImageBlockPublicAccessState";
const _GIDA = "GetIpamDiscoveredAccounts";
const _GIDPA = "GetIpamDiscoveredPublicAddresses";
const _GIDRC = "GetIpamDiscoveredResourceCidrs";
const _GIMD = "GetInstanceMetadataDefaults";
const _GIPA = "GetIpamPoolAllocations";
const _GIPC = "GetIpamPoolCidrs";
const _GIRC = "GetIpamResourceCidrs";
const _GITEP = "GetInstanceTpmEkPub";
const _GITFIR = "GetInstanceTypesFromInstanceRequirements";
const _GIUD = "GetInstanceUefiData";
const _GIp = "GpuInfo";
const _GIr = "GroupId";
const _GIro = "GroupIds";
const _GK = "GreKey";
const _GLBA = "GatewayLoadBalancerArns";
const _GLBEI = "GatewayLoadBalancerEndpointId";
const _GLN = "GroupLongName";
const _GLTD = "GetLaunchTemplateData";
const _GM = "GroupMember";
const _GMPLA = "GetManagedPrefixListAssociations";
const _GMPLE = "GetManagedPrefixListEntries";
const _GN = "GroupName";
const _GNIASAF = "GetNetworkInsightsAccessScopeAnalysisFindings";
const _GNIASC = "GetNetworkInsightsAccessScopeContent";
const _GNr = "GroupNames";
const _GOI = "GroupOwnerId";
const _GPD = "GetPasswordData";
const _GRIEQ = "GetReservedInstancesExchangeQuote";
const _GRSA = "GetRouteServerAssociations";
const _GRSP = "GetRouteServerPropagations";
const _GRSRD = "GetRouteServerRoutingDatabase";
const _GS = "GroupSource";
const _GSBPAS = "GetSnapshotBlockPublicAccessState";
const _GSCAS = "GetSerialConsoleAccessStatus";
const _GSCR = "GetSubnetCidrReservations";
const _GSGFV = "GetSecurityGroupsForVpc";
const _GSPS = "GetSpotPlacementScores";
const _GTGAP = "GetTransitGatewayAttachmentPropagations";
const _GTGMDA = "GetTransitGatewayMulticastDomainAssociations";
const _GTGPLR = "GetTransitGatewayPrefixListReferences";
const _GTGPTA = "GetTransitGatewayPolicyTableAssociations";
const _GTGPTE = "GetTransitGatewayPolicyTableEntries";
const _GTGRTA = "GetTransitGatewayRouteTableAssociations";
const _GTGRTP = "GetTransitGatewayRouteTablePropagations";
const _GVAEP = "GetVerifiedAccessEndpointPolicy";
const _GVAET = "GetVerifiedAccessEndpointTargets";
const _GVAGP = "GetVerifiedAccessGroupPolicy";
const _GVCDSC = "GetVpnConnectionDeviceSampleConfiguration";
const _GVCDT = "GetVpnConnectionDeviceTypes";
const _GVTRS = "GetVpnTunnelReplacementStatus";
const _Gp = "Gpus";
const _Gr = "Group";
const _H = "Hypervisor";
const _HCP = "HiveCompatiblePartitions";
const _HE = "HttpEndpoint";
const _HI = "HostIds";
const _HIS = "HostIdSet";
const _HIo = "HostId";
const _HM = "HostMaintenance";
const _HO = "HibernationOptions";
const _HP = "HostProperties";
const _HPI = "HttpProtocolIpv6";
const _HPRHL = "HttpPutResponseHopLimit";
const _HPo = "HourlyPrice";
const _HR = "HostRecovery";
const _HRGA = "HostResourceGroupArn";
const _HRI = "HostReservationId";
const _HRIS = "HostReservationIdSet";
const _HRS = "HostReservationSet";
const _HRi = "HistoryRecords";
const _HS = "HibernationSupported";
const _HT = "HttpTokens";
const _HTo = "HostnameType";
const _HZI = "HostedZoneId";
const _Hi = "Hibernate";
const _Ho = "Hosts";
const _I = "Issuer";
const _IA = "Ipv6Addresses";
const _IAA = "Ipv6AddressAttribute";
const _IAC = "Ipv6AddressCount";
const _IAI = "IncludeAllInstances";
const _IAIn = "InferenceAcceleratorInfo";
const _IAPI = "Ipv4AddressesPerInterface";
const _IAPIp = "Ipv6AddressesPerInterface";
const _IART = "IncludeAllResourceTypes";
const _IAT = "IpAddressType";
const _IATOI = "IncludeAllTagsOfInstance";
const _IAm = "ImageAllowed";
const _IAn = "InterfaceAssociation";
const _IAnt = "InterfaceAssociations";
const _IAp = "IpAddress";
const _IApa = "IpamArn";
const _IApv = "Ipv6Address";
const _IB = "IngressBytes";
const _IBPAS = "ImageBlockPublicAccessState";
const _IC = "InstanceCount";
const _ICA = "Ipv6CidrAssociations";
const _ICB = "Ipv6CidrBlock";
const _ICBA = "Ipv6CidrBlockAssociation";
const _ICBAS = "Ipv6CidrBlockAssociationSet";
const _ICBNBG = "Ipv6CidrBlockNetworkBorderGroup";
const _ICBS = "Ipv6CidrBlockState";
const _ICBSp = "Ipv6CidrBlockSet";
const _ICBn = "InsideCidrBlocks";
const _ICE = "InstanceConnectEndpoint";
const _ICEA = "InstanceConnectEndpointArn";
const _ICEI = "InstanceConnectEndpointId";
const _ICEIn = "InstanceConnectEndpointIds";
const _ICEn = "InstanceConnectEndpoints";
const _ICS = "InstanceCreditSpecifications";
const _ICVCCRL = "ImportClientVpnClientCertificateRevocationList";
const _ICm = "ImageCriteria";
const _ICn = "InstanceCounts";
const _ICp = "Ipv6Cidr";
const _ID = "IncludeDeprecated";
const _IDA = "IpamDiscoveredAccounts";
const _IDPA = "IpamDiscoveredPublicAddresses";
const _IDRC = "IpamDiscoveredResourceCidrs";
const _IDm = "ImageData";
const _IDn = "IncludeDisabled";
const _IDs = "IsDefault";
const _IE = "IsEgress";
const _IED = "InstanceExportDetails";
const _IEI = "InstanceEventId";
const _IERVT = "IpamExternalResourceVerificationToken";
const _IERVTA = "IpamExternalResourceVerificationTokenArn";
const _IERVTI = "IpamExternalResourceVerificationTokenId";
const _IERVTIp = "IpamExternalResourceVerificationTokenIds";
const _IERVTp = "IpamExternalResourceVerificationTokens";
const _IEW = "InstanceEventWindow";
const _IEWI = "InstanceEventWindowId";
const _IEWIn = "InstanceEventWindowIds";
const _IEWS = "InstanceEventWindowState";
const _IEWn = "InstanceEventWindows";
const _IF = "InstanceFamily";
const _IFCS = "InstanceFamilyCreditSpecification";
const _IFR = "IamFleetRole";
const _IFRn = "IngressFilterRules";
const _IG = "InstanceGenerations";
const _IGBM = "InternetGatewayBlockMode";
const _IGEM = "InternetGatewayExclusionMode";
const _IGI = "InternetGatewayId";
const _IGIn = "InternetGatewayIds";
const _IGn = "InternetGateway";
const _IGnt = "InternetGateways";
const _IH = "InstanceHealth";
const _IHn = "InboundHeader";
const _II = "ImportImage";
const _IIB = "InstanceInterruptionBehavior";
const _IIM = "InstanceImageMetadata";
const _IIP = "IamInstanceProfile";
const _IIPA = "IamInstanceProfileAssociation";
const _IIPAa = "IamInstanceProfileAssociations";
const _IIPI = "Ipv6IpamPoolId";
const _IIPIp = "Ipv4IpamPoolId";
const _IIS = "InstanceIdSet";
const _IISB = "InstanceInitiatedShutdownBehavior";
const _IIT = "ImportImageTasks";
const _IIm = "ImportInstance";
const _IIma = "ImageId";
const _IImag = "ImageIds";
const _IIn = "InstanceId";
const _IIns = "InstanceIds";
const _IIp = "IpamId";
const _IIpa = "IpamIds";
const _IKEV = "InternetKeyExchangeVersion";
const _IKEVe = "IKEVersions";
const _IKP = "ImportKeyPair";
const _IL = "ImageLocation";
const _ILn = "InstanceLifecycle";
const _IM = "IncludeMarketplace";
const _IMC = "InstanceMatchCriteria";
const _IMO = "InstanceMarketOptions";
const _IMOn = "InstanceMetadataOptions";
const _IMT = "InstanceMetadataTags";
const _IMU = "ImportManifestUrl";
const _IMm = "ImageMetadata";
const _IMn = "InstanceMonitorings";
const _IN = "Ipv6Native";
const _INL = "Ipv6NetmaskLength";
const _INLp = "Ipv4NetmaskLength";
const _INm = "ImageNames";
const _IOA = "ImageOwnerAlias";
const _IOI = "IpOwnerId";
const _IOIn = "InstanceOwnerId";
const _IOS = "InstanceOwningService";
const _IP = "Ipv6Prefixes";
const _IPA = "IpamPoolAllocation";
const _IPAI = "IpamPoolAllocationId";
const _IPAp = "IpamPoolAllocations";
const _IPApa = "IpamPoolArn";
const _IPC = "Ipv6PrefixCount";
const _IPCI = "IpamPoolCidrId";
const _IPCp = "Ipv4PrefixCount";
const _IPCpa = "IpamPoolCidr";
const _IPCpam = "IpamPoolCidrs";
const _IPE = "IpPermissionsEgress";
const _IPI = "IpamPoolId";
const _IPIp = "IpamPoolIds";
const _IPIs = "IsPrimaryIpv6";
const _IPK = "IncludePublicKey";
const _IPO = "IpamPoolOwner";
const _IPR = "IsPermanentRestore";
const _IPTUC = "InstancePoolsToUseCount";
const _IPm = "ImageProviders";
const _IPn = "InstancePlatform";
const _IPng = "IngressPackets";
const _IPns = "InstancePort";
const _IPnt = "InterfacePermission";
const _IPnte = "InterfaceProtocol";
const _IPo = "IoPerformance";
const _IPp = "Ipv4Prefixes";
const _IPpa = "IpamPool";
const _IPpam = "IpamPools";
const _IPpe = "IpPermissions";
const _IPpr = "IpProtocol";
const _IPpre = "IpPrefixes";
const _IPpv = "Ipv6Pool";
const _IPpvo = "Ipv6Pools";
const _IPpvr = "Ipv4Prefix";
const _IPpvre = "Ipv6Prefix";
const _IPs = "IsPublic";
const _IPsr = "IsPrimary";
const _IR = "InstanceRequirements";
const _IRC = "IpamResourceCidrs";
const _IRCp = "IpamResourceCidr";
const _IRD = "IpamResourceDiscovery";
const _IRDA = "IpamResourceDiscoveryAssociation";
const _IRDAA = "IpamResourceDiscoveryAssociationArn";
const _IRDAI = "IpamResourceDiscoveryAssociationIds";
const _IRDAIp = "IpamResourceDiscoveryAssociationId";
const _IRDAp = "IpamResourceDiscoveryAssociations";
const _IRDApa = "IpamResourceDiscoveryArn";
const _IRDI = "IpamResourceDiscoveryId";
const _IRDIp = "IpamResourceDiscoveryIds";
const _IRDR = "IpamResourceDiscoveryRegion";
const _IRDp = "IpamResourceDiscoveries";
const _IRSDA = "IntegrationResultS3DestinationArn";
const _IRT = "IngressRouteTable";
const _IRWM = "InstanceRequirementsWithMetadata";
const _IRm = "ImageReferences";
const _IRp = "IpRanges";
const _IRpa = "IpamRegion";
const _IRpv = "Ipv6Ranges";
const _IS = "ImportSnapshot";
const _ISA = "IpamScopeArn";
const _ISD = "InitializationStatusDetails";
const _ISI = "IpamScopeId";
const _ISIn = "InstanceStorageInfo";
const _ISIp = "IpamScopeIds";
const _ISL = "InputStorageLocation";
const _ISS = "InstanceStorageSupported";
const _IST = "ImportSnapshotTasks";
const _ISTp = "IpamScopeType";
const _ISg = "Igmpv2Support";
const _ISm = "ImdsSupport";
const _ISmp = "ImpairedSince";
const _ISn = "InstanceSpecification";
const _ISns = "InstanceStatuses";
const _ISnst = "InstanceState";
const _ISnsta = "InstanceStatus";
const _ISnt = "IntegrateServices";
const _ISnte = "InterconnectStatus";
const _ISp = "Ipv6Support";
const _ISpa = "IpamScope";
const _ISpam = "IpamScopes";
const _ISpo = "IpSource";
const _ISpv = "Ipv6Supported";
const _IT = "InstanceType";
const _ITA = "InstanceTagAttribute";
const _ITC = "IcmpTypeCode";
const _ITCn = "IncludeTrustContext";
const _ITI = "ImportTaskId";
const _ITIm = "ImportTaskIds";
const _ITK = "InstanceTagKeys";
const _ITO = "InstanceTypeOfferings";
const _ITS = "InstanceTypeSpecifications";
const _ITm = "ImageType";
const _ITn = "InterfaceType";
const _ITni = "InitializationType";
const _ITns = "InstanceTenancy";
const _ITnst = "InstanceTypes";
const _ITnsta = "InstanceTags";
const _IU = "InstanceUsages";
const _IUR = "ImageUsageReports";
const _IURE = "ImageUsageReportEntries";
const _IUp = "IpUsage";
const _IV = "ImportVolume";
const _IVE = "IsValidExchange";
const _IVk = "IkeVersion";
const _IVke = "IkeVersions";
const _Id = "Id";
const _Im = "Image";
const _Ima = "Images";
const _In = "Instances";
const _Ins = "Instance";
const _Int = "Interval";
const _Io = "Iops";
const _Ip = "Ipv4";
const _Ipa = "Ipam";
const _Ipam = "Ipams";
const _Ipv = "Ipv6";
const _K = "Kernel";
const _KDF = "KinesisDataFirehose";
const _KF = "KeyFormat";
const _KFe = "KeyFingerprint";
const _KI = "KernelId";
const _KKA = "KmsKeyArn";
const _KKI = "KmsKeyId";
const _KM = "KeyMaterial";
const _KN = "KeyName";
const _KNe = "KeyNames";
const _KP = "KeyPairs";
const _KPI = "KeyPairId";
const _KPIe = "KeyPairIds";
const _KS = "KextSigning";
const _KT = "KeyType";
const _KV = "KeyValue";
const _Ke = "Key";
const _Key = "Keyword";
const _L = "Locale";
const _LA = "LocalAddress";
const _LADT = "LastAttemptedDiscoveryTime";
const _LAZ = "LaunchedAvailabilityZone";
const _LAZI = "LaunchedAvailabilityZoneId";
const _LAa = "LastAddress";
const _LB = "LoadBalancers";
const _LBA = "LocalBgpAsn";
const _LBAE = "LocalBgpAsnExtended";
const _LBAo = "LoadBalancerArn";
const _LBC = "LoadBalancersConfig";
const _LBLP = "LoadBalancerListenerPort";
const _LBO = "LoadBalancerOptions";
const _LBP = "LoadBalancerPort";
const _LBT = "LoadBalancerTarget";
const _LBTG = "LoadBalancerTargetGroup";
const _LBTGo = "LoadBalancerTargetGroups";
const _LBTP = "LoadBalancerTargetPort";
const _LC = "LoggingConfigurations";
const _LCA = "LicenseConfigurationArn";
const _LCO = "LockCreatedOn";
const _LCo = "LoggingConfiguration";
const _LD = "LogDestination";
const _LDST = "LockDurationStartTime";
const _LDT = "LogDestinationType";
const _LDo = "LockDuration";
const _LE = "LogEnabled";
const _LEO = "LockExpiresOn";
const _LET = "LastEvaluatedTime";
const _LEa = "LastError";
const _LF = "LogFormat";
const _LFA = "LambdaFunctionArn";
const _LG = "LaunchGroup";
const _LGA = "LogGroupArn";
const _LGI = "LocalGatewayId";
const _LGIo = "LocalGatewayIds";
const _LGN = "LogGroupName";
const _LGRT = "LocalGatewayRouteTable";
const _LGRTA = "LocalGatewayRouteTableArn";
const _LGRTI = "LocalGatewayRouteTableId";
const _LGRTIo = "LocalGatewayRouteTableIds";
const _LGRTVA = "LocalGatewayRouteTableVpcAssociation";
const _LGRTVAI = "LocalGatewayRouteTableVpcAssociationId";
const _LGRTVAIo = "LocalGatewayRouteTableVpcAssociationIds";
const _LGRTVAo = "LocalGatewayRouteTableVpcAssociations";
const _LGRTVIGA = "LocalGatewayRouteTableVirtualInterfaceGroupAssociation";
const _LGRTVIGAI = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationId";
const _LGRTVIGAIo = "LocalGatewayRouteTableVirtualInterfaceGroupAssociationIds";
const _LGRTVIGAo = "LocalGatewayRouteTableVirtualInterfaceGroupAssociations";
const _LGRTo = "LocalGatewayRouteTables";
const _LGVI = "LocalGatewayVirtualInterface";
const _LGVIA = "LocalGatewayVirtualInterfaceArn";
const _LGVIG = "LocalGatewayVirtualInterfaceGroup";
const _LGVIGA = "LocalGatewayVirtualInterfaceGroupArn";
const _LGVIGI = "LocalGatewayVirtualInterfaceGroupId";
const _LGVIGIo = "LocalGatewayVirtualInterfaceGroupIds";
const _LGVIGo = "LocalGatewayVirtualInterfaceGroups";
const _LGVII = "LocalGatewayVirtualInterfaceId";
const _LGVIIo = "LocalGatewayVirtualInterfaceIds";
const _LGVIo = "LocalGatewayVirtualInterfaces";
const _LGo = "LogGroup";
const _LGoc = "LocalGateways";
const _LIIRB = "ListImagesInRecycleBin";
const _LINC = "LocalIpv4NetworkCidr";
const _LINCo = "LocalIpv6NetworkCidr";
const _LLT = "LastLaunchedTime";
const _LM = "LockMode";
const _LMA = "LastMaintenanceApplied";
const _LO = "LogOptions";
const _LOF = "LogOutputFormat";
const _LP = "LoadPermission";
const _LPa = "LaunchPermission";
const _LPau = "LaunchPermissions";
const _LPi = "LimitPrice";
const _LPo = "LoadPermissions";
const _LS = "LockSnapshot";
const _LSC = "LastStatusChange";
const _LSDT = "LastSuccessfulDiscoveryTime";
const _LSIRB = "ListSnapshotsInRecycleBin";
const _LSL = "LogsStorageLocation";
const _LST = "LocalStorageTypes";
const _LSa = "LaunchSpecification";
const _LSau = "LaunchSpecifications";
const _LSi = "LicenseSpecifications";
const _LSo = "LocalStorage";
const _LSoc = "LockState";
const _LT = "LocationType";
const _LTAO = "LaunchTemplateAndOverrides";
const _LTC = "LaunchTemplateConfigs";
const _LTD = "LaunchTemplateData";
const _LTI = "LaunchTemplateId";
const _LTIa = "LaunchTemplateIds";
const _LTN = "LaunchTemplateName";
const _LTNa = "LaunchTemplateNames";
const _LTOS = "LastTieringOperationStatus";
const _LTOSD = "LastTieringOperationStatusDetail";
const _LTP = "LastTieringProgress";
const _LTS = "LaunchTemplateSpecification";
const _LTST = "LastTieringStartTime";
const _LTV = "LaunchTemplateVersion";
const _LTVa = "LaunchTemplateVersions";
const _LTa = "LaunchTemplate";
const _LTat = "LatestTime";
const _LTau = "LaunchTemplates";
const _LTaun = "LaunchTime";
const _LTi = "LicenseType";
const _LTo = "LocalTarget";
const _LUT = "LastUpdateTime";
const _LUTa = "LastUpdatedTime";
const _LUTas = "LastUpdateTimestamp";
const _LV = "LogVersion";
const _LVN = "LatestVersionNumber";
const _La = "Latest";
const _Li = "Lifecycle";
const _Lic = "Licenses";
const _Lo = "Location";
const _M = "Min";
const _MA = "MutualAuthentication";
const _MAA = "ModifyAddressAttribute";
const _MAAA = "MaintenanceAutoAppliedAfter";
const _MAE = "MultiAttachEnabled";
const _MAI = "MaxAggregationInterval";
const _MAIe = "MediaAcceleratorInfo";
const _MAS = "MovingAddressStatuses";
const _MATV = "MoveAddressToVpc";
const _MAZG = "ModifyAvailabilityZoneGroup";
const _MAa = "MacAddress";
const _MAe = "MeteredAccount";
const _MB = "ManagedBy";
const _MBCTI = "MoveByoipCidrToIpam";
const _MBIM = "MaximumBandwidthInMbps";
const _MC = "MacCredentials";
const _MCOIOL = "MapCustomerOwnedIpOnLaunch";
const _MCR = "ModifyCapacityReservation";
const _MCRF = "ModifyCapacityReservationFleet";
const _MCRI = "MoveCapacityReservationInstances";
const _MCVE = "ModifyClientVpnEndpoint";
const _MCa = "MaxCount";
const _MCi = "MinCount";
const _MCis = "MissingComponent";
const _MD = "MaxDuration";
const _MDA = "MulticastDomainAssociations";
const _MDCS = "ModifyDefaultCreditSpecification";
const _MDDS = "MaxDrainDurationSeconds";
const _MDK = "MetaDataKey";
const _MDSC = "MaximumDaysSinceCreated";
const _MDSD = "MaximumDaysSinceDeprecated";
const _MDV = "MetaDataValue";
const _MDa = "MaintenanceDetails";
const _MDe = "MetaData";
const _MDi = "MinDuration";
const _ME = "MaxEntries";
const _MEA = "MaximumEbsAttachments";
const _MEDKKI = "ModifyEbsDefaultKmsKeyId";
const _MEI = "MaximumEfaInterfaces";
const _MEM = "ManagedExceptionMessage";
const _MEQC = "MaximumEnaQueueCount";
const _MEQCPI = "MaximumEnaQueueCountPerInterface";
const _MF = "ModifyFleet";
const _MFIA = "ModifyFpgaImageAttribute";
const _MFV = "MostFrequentValue";
const _MG = "MulticastGroups";
const _MGBPVC = "MemoryGiBPerVCpu";
const _MH = "ModifyHosts";
const _MHa = "MacHosts";
const _MI = "ModifyIpam";
const _MIA = "ModifyImageAttribute";
const _MIAo = "ModifyInstanceAttribute";
const _MIC = "MaxInstanceCount";
const _MICE = "ModifyInstanceConnectEndpoint";
const _MICO = "ModifyInstanceCpuOptions";
const _MICRA = "ModifyInstanceCapacityReservationAttributes";
const _MICS = "ModifyInstanceCreditSpecification";
const _MIEST = "ModifyInstanceEventStartTime";
const _MIEW = "ModifyInstanceEventWindow";
const _MIF = "ModifyIdFormat";
const _MIIF = "ModifyIdentityIdFormat";
const _MIMD = "ModifyInstanceMetadataDefaults";
const _MIMO = "ModifyInstanceMaintenanceOptions";
const _MIMOo = "ModifyInstanceMetadataOptions";
const _MINPO = "ModifyInstanceNetworkPerformanceOptions";
const _MIP = "ModifyInstancePlacement";
const _MIPo = "ModifyIpamPool";
const _MIRC = "ModifyIpamResourceCidr";
const _MIRD = "ModifyIpamResourceDiscovery";
const _MIS = "ModifyIpamScope";
const _MIa = "MaximumIops";
const _MIe = "MemoryInfo";
const _MIo = "MonitorInstances";
const _MLGR = "ModifyLocalGatewayRoute";
const _MLT = "ModifyLaunchTemplate";
const _MMB = "MemoryMiB";
const _MMPL = "ModifyManagedPrefixList";
const _MMT = "MacModificationTask";
const _MMTI = "MacModificationTaskIds";
const _MMTIa = "MacModificationTaskId";
const _MMTa = "MacModificationTasks";
const _MNC = "MaximumNetworkCards";
const _MNI = "MaximumNetworkInterfaces";
const _MNIA = "ModifyNetworkInterfaceAttribute";
const _MO = "MetadataOptions";
const _MOSLRG = "MemberOfServiceLinkedResourceGroup";
const _MOSLSV = "MacOSLatestSupportedVersions";
const _MOa = "MaintenanceOptions";
const _MP = "MatchPaths";
const _MPC = "MarketplaceProductCodes";
const _MPDNO = "ModifyPrivateDnsNameOptions";
const _MPIDNO = "ModifyPublicIpDnsNameOptions";
const _MPIOL = "MapPublicIpOnLaunch";
const _MPL = "MaxParallelLaunches";
const _MPa = "MaxPrice";
const _MPe = "MetricPoints";
const _MR = "MaxResults";
const _MRI = "ModifyReservedInstances";
const _MRS = "ModifyRouteServer";
const _MRo = "ModificationResults";
const _MRu = "MultiRegion";
const _MS = "MaintenanceStrategies";
const _MSA = "ModifySnapshotAttribute";
const _MSAo = "ModifySubnetAttribute";
const _MSDIH = "MaxSlotDurationInHours";
const _MSDIHi = "MinSlotDurationInHours";
const _MSFR = "ModifySpotFleetRequest";
const _MSGR = "ModifySecurityGroupRules";
const _MSIPC = "MacSystemIntegrityProtectionConfiguration";
const _MSIPCa = "MacSystemIntegrityProtectionConfig";
const _MSIPS = "MacSystemIntegrityProtectionStatus";
const _MSPAPOOODP = "MaxSpotPriceAsPercentageOfOptimalOnDemandPrice";
const _MST = "ModifySnapshotTier";
const _MSa = "ManagementState";
const _MSo = "MoveStatus";
const _MSod = "ModificationState";
const _MSu = "MulticastSupport";
const _MT = "MarketType";
const _MTC = "MinTargetCapacity";
const _MTDID = "MaxTermDurationInDays";
const _MTDIDi = "MinTermDurationInDays";
const _MTG = "ModifyTransitGateway";
const _MTGPLR = "ModifyTransitGatewayPrefixListReference";
const _MTGVA = "ModifyTransitGatewayVpcAttachment";
const _MTIMB = "MaximumThroughputInMBps";
const _MTMFNS = "ModifyTrafficMirrorFilterNetworkServices";
const _MTMFR = "ModifyTrafficMirrorFilterRule";
const _MTMS = "ModifyTrafficMirrorSession";
const _MTP = "MaxTotalPrice";
const _MTe = "MemberType";
const _MV = "ModifyVolume";
const _MVA = "ModifyVolumeAttribute";
const _MVAE = "ModifyVerifiedAccessEndpoint";
const _MVAEP = "ModifyVerifiedAccessEndpointPolicy";
const _MVAG = "ModifyVerifiedAccessGroup";
const _MVAGP = "ModifyVerifiedAccessGroupPolicy";
const _MVAI = "ModifyVerifiedAccessInstance";
const _MVAILC = "ModifyVerifiedAccessInstanceLoggingConfiguration";
const _MVATP = "ModifyVerifiedAccessTrustProvider";
const _MVAo = "ModifyVpcAttribute";
const _MVBPAE = "ModifyVpcBlockPublicAccessExclusion";
const _MVBPAO = "ModifyVpcBlockPublicAccessOptions";
const _MVC = "ModifyVpnConnection";
const _MVCO = "ModifyVpnConnectionOptions";
const _MVE = "ModifyVpcEndpoint";
const _MVECN = "ModifyVpcEndpointConnectionNotification";
const _MVESC = "ModifyVpcEndpointServiceConfiguration";
const _MVESP = "ModifyVpcEndpointServicePermissions";
const _MVESPR = "ModifyVpcEndpointServicePayerResponsibility";
const _MVEa = "ManagesVpcEndpoints";
const _MVPCO = "ModifyVpcPeeringConnectionOptions";
const _MVT = "ModifyVpcTenancy";
const _MVTC = "ModifyVpnTunnelCertificate";
const _MVTO = "ModifyVpnTunnelOptions";
const _MVa = "MaxVersion";
const _MVi = "MinVersion";
const _Ma = "Max";
const _Mai = "Main";
const _Man = "Manufacturer";
const _Mana = "Managed";
const _Mar = "Marketplace";
const _Me = "Message";
const _Med = "Med";
const _Mes = "Messages";
const _Met = "Metric";
const _Mo = "Mode";
const _Mon = "Monitoring";
const _Moni = "Monitored";
const _N = "Name";
const _NA = "NetworkAcl";
const _NAAI = "NetworkAclAssociationId";
const _NAI = "NetworkAclId";
const _NAIe = "NetworkAclIds";
const _NAIew = "NewAssociationId";
const _NAOO = "NativeApplicationOidcOptions";
const _NAe = "NetworkAcls";
const _NAo = "NotAfter";
const _NB = "NotBefore";
const _NBD = "NotBeforeDeadline";
const _NBG = "NetworkBorderGroup";
const _NBGe = "NetworkBandwidthGbps";
const _NC = "NetworkCards";
const _NCI = "NetworkCardIndex";
const _ND = "NoDevice";
const _NDe = "NeuronDevices";
const _NES = "NitroEnclavesSupport";
const _NG = "NatGateway";
const _NGA = "NatGatewayAddresses";
const _NGI = "NatGatewayId";
const _NGIa = "NatGatewayIds";
const _NGa = "NatGateways";
const _NHI = "NextHopIp";
const _NI = "NetworkInterfaces";
const _NIA = "NetworkInsightsAnalyses";
const _NIAA = "NetworkInsightsAnalysisArn";
const _NIAI = "NetworkInsightsAnalysisId";
const _NIAIe = "NetworkInsightsAnalysisIds";
const _NIAS = "NetworkInsightsAccessScope";
const _NIASA = "NetworkInsightsAccessScopeAnalyses";
const _NIASAA = "NetworkInsightsAccessScopeAnalysisArn";
const _NIASAI = "NetworkInsightsAccessScopeAnalysisId";
const _NIASAIe = "NetworkInsightsAccessScopeAnalysisIds";
const _NIASAe = "NetworkInsightsAccessScopeArn";
const _NIASAet = "NetworkInsightsAccessScopeAnalysis";
const _NIASC = "NetworkInsightsAccessScopeContent";
const _NIASI = "NetworkInsightsAccessScopeId";
const _NIASIe = "NetworkInsightsAccessScopeIds";
const _NIASe = "NetworkInsightsAccessScopes";
const _NIASet = "NetworkInterfaceAttachmentStatus";
const _NIAe = "NetworkInsightsAnalysis";
const _NIC = "NetworkInterfaceCount";
const _NID = "NetworkInterfaceDescription";
const _NII = "NetworkInterfaceId";
const _NIIe = "NetworkInterfaceIds";
const _NIO = "NetworkInterfaceOptions";
const _NIOI = "NetworkInterfaceOwnerId";
const _NIP = "NetworkInsightsPath";
const _NIPA = "NetworkInsightsPathArn";
const _NIPI = "NetworkInsightsPathId";
const _NIPIe = "NetworkInterfacePermissionId";
const _NIPIet = "NetworkInsightsPathIds";
const _NIPIetw = "NetworkInterfacePermissionIds";
const _NIPe = "NetworkInsightsPaths";
const _NIPet = "NetworkInterfacePermissions";
const _NIe = "NetworkId";
const _NIet = "NetworkInterface";
const _NIetw = "NetworkInfo";
const _NIeu = "NeuronInfo";
const _NL = "NetmaskLength";
const _NLBA = "NetworkLoadBalancerArn";
const _NLBAe = "NetworkLoadBalancerArns";
const _NN = "NetworkNodes";
const _NOA = "NumberOfAccounts";
const _NOFA = "NumberOfFailedAccounts";
const _NOMA = "NumberOfMatchedAccounts";
const _NOUA = "NumberOfUnmatchedAccounts";
const _NP = "NvramProtections";
const _NPF = "NetworkPathFound";
const _NPO = "NetworkPerformanceOptions";
const _NPe = "NetworkPerformance";
const _NPet = "NetworkPlatform";
const _NR = "NoReboot";
const _NS = "NvmeSupport";
const _NSST = "NextSlotStartTime";
const _NSe = "NetworkServices";
const _NT = "NextToken";
const _NTI = "NitroTpmInfo";
const _NTS = "NitroTpmSupport";
const _NTe = "NetworkType";
const _Na = "Nameservers";
const _O = "Operator";
const _OA = "OutpostArn";
const _OAr = "OrganizationArn";
const _OArg = "OrganizationArns";
const _OAw = "OwnerAlias";
const _OC = "OfferingClass";
const _OD = "OccurrenceDays";
const _ODAS = "OnDemandAllocationStrategy";
const _ODFC = "OnDemandFulfilledCapacity";
const _ODMPPOLP = "OnDemandMaxPricePercentageOverLowestPrice";
const _ODMTP = "OnDemandMaxTotalPrice";
const _ODO = "OnDemandOptions";
const _ODS = "OccurrenceDaySet";
const _ODTC = "OnDemandTargetCapacity";
const _OEP = "OrganizationsEntityPath";
const _OH = "OutboundHeader";
const _OI = "OfferingId";
const _OIA = "OutsideIpAddress";
const _OIAT = "OutsideIpAddressType";
const _OIS = "OptInStatus";
const _OIr = "OriginalIops";
const _OIu = "OutpostId";
const _OIw = "OwnerIds";
const _OIwn = "OwnerId";
const _OK = "ObjectKey";
const _OL = "OutpostLags";
const _OLI = "OutpostLagId";
const _OLIu = "OutpostLagIds";
const _OMAE = "OriginalMultiAttachEnabled";
const _ON = "OptionName";
const _ONA = "OdbNetworkArn";
const _OO = "OidcOptions";
const _OR = "OperatingRegions";
const _ORIWEA = "OutputReservedInstancesWillExpireAt";
const _ORTE = "OccurrenceRelativeToEnd";
const _OS = "OfferingSet";
const _OST = "OldestSampleTime";
const _OSr = "OriginalSize";
const _OSv = "OverlapStatus";
const _OT = "OfferingType";
const _OTp = "OperationType";
const _OTpt = "OptimizingTime";
const _OTr = "OriginalThroughput";
const _OU = "OccurrenceUnit";
const _OUA = "OrganizationalUnitArn";
const _OUAr = "OrganizationalUnitArns";
const _OUE = "OrganizationalUnitExclusions";
const _OUI = "OrganizationalUnitId";
const _OV = "OptionValues";
const _OVC = "OpenVpnConfigurations";
const _OVT = "OriginalVolumeType";
const _Op = "Options";
const _Or = "Origin";
const _Ou = "Output";
const _Ov = "Overrides";
const _Ow = "Owners";
const _Own = "Owner";
const _P = "Protocol";
const _PA = "PubliclyAdvertisable";
const _PAI = "PeerAccountId";
const _PAIe = "PeeringAttachmentId";
const _PAR = "PoolAddressRange";
const _PARo = "PoolAddressRanges";
const _PAe = "PeerAddress";
const _PAee = "PeerAsn";
const _PAo = "PoolArn";
const _PAr = "PrincipalArn";
const _PB = "ProvisionedBandwidth";
const _PBA = "PeerBgpAsn";
const _PBAE = "PeerBgpAsnExtended";
const _PBC = "ProvisionByoipCidr";
const _PBIG = "PeakBandwidthInGbps";
const _PC = "ProductCode";
const _PCB = "PurchaseCapacityBlock";
const _PCBE = "PurchaseCapacityBlockExtension";
const _PCBo = "PoolCidrBlocks";
const _PCI = "PreserveClientIp";
const _PCIr = "ProductCodeId";
const _PCNI = "PeerCoreNetworkId";
const _PCS = "PostureComplianceStatuses";
const _PCT = "ProductCodeType";
const _PCa = "PartitionCount";
const _PCo = "PoolCidrs";
const _PCoo = "PoolCount";
const _PCr = "ProductCodes";
const _PD = "PolicyDocument";
const _PDE = "PrivateDnsEnabled";
const _PDEr = "PrivateDnsEntry";
const _PDHG = "Phase1DHGroup";
const _PDHGN = "Phase1DHGroupNumbers";
const _PDHGNh = "Phase2DHGroupNumbers";
const _PDHGh = "Phase2DHGroup";
const _PDHT = "PrivateDnsHostnameType";
const _PDHTOL = "PrivateDnsHostnameTypeOnLaunch";
const _PDN = "PrivateDnsName";
const _PDNC = "PrivateDnsNameConfiguration";
const _PDNO = "PrivateDnsNameOptions";
const _PDNOOL = "PrivateDnsNameOptionsOnLaunch";
const _PDNVS = "PrivateDnsNameVerificationState";
const _PDNr = "PrivateDnsNames";
const _PDNu = "PublicDnsNames";
const _PDNub = "PublicDnsName";
const _PDOFIRE = "PrivateDnsOnlyForInboundResolverEndpoint";
const _PDRTI = "PropagationDefaultRouteTableId";
const _PDSDN = "PublicDualStackDnsName";
const _PDSI = "PublicDefaultScopeId";
const _PDSIr = "PrivateDefaultScopeId";
const _PDa = "PasswordData";
const _PDay = "PaymentDue";
const _PDl = "PlatformDetails";
const _PDo = "PoolDepth";
const _PDr = "ProductDescription";
const _PDri = "PricingDetails";
const _PDro = "ProductDescriptions";
const _PE = "PolicyEnabled";
const _PEA = "Phase1EncryptionAlgorithms";
const _PEAh = "Phase2EncryptionAlgorithms";
const _PEAha = "Phase1EncryptionAlgorithm";
const _PEAhas = "Phase2EncryptionAlgorithm";
const _PED = "PartitionEndDate";
const _PEk = "PkceEnabled";
const _PF = "PacketField";
const _PFS = "PreviousFleetState";
const _PG = "PlacementGroup";
const _PGA = "PlacementGroupArn";
const _PGI = "PlacementGroupInfo";
const _PGl = "PlacementGroups";
const _PHP = "PerHourPartition";
const _PHR = "PurchaseHostReservation";
const _PHS = "PacketHeaderStatement";
const _PI = "PublicIp";
const _PIA = "PrivateIpAddresses";
const _PIAC = "PrivateIpAddressCount";
const _PIACr = "PrivateIpAddressConfigs";
const _PIAh = "Phase1IntegrityAlgorithms";
const _PIAha = "Phase2IntegrityAlgorithms";
const _PIAhas = "Phase1IntegrityAlgorithm";
const _PIAhase = "Phase2IntegrityAlgorithm";
const _PIAr = "PrivateIpAddress";
const _PIAu = "PublicIpAddress";
const _PIB = "ProvisionIpamByoasn";
const _PIDN = "PublicIpv6DnsName";
const _PIDNO = "PublicIpDnsNameOptions";
const _PIDNu = "PublicIpv4DnsName";
const _PIP = "PublicIpv4Pool";
const _PIPC = "ProvisionIpamPoolCidr";
const _PIPI = "PublicIpv4PoolId";
const _PIPu = "PublicIpv4Pools";
const _PIS = "PublicIpSource";
const _PIc = "PciId";
const _PIo = "PoolId";
const _PIoo = "PoolIds";
const _PIr = "PrimaryIpv6";
const _PIri = "PrivateIp";
const _PIro = "ProcessorInfo";
const _PIu = "PublicIps";
const _PK = "PublicKey";
const _PKM = "PublicKeyMaterial";
const _PL = "PacketLength";
const _PLA = "PrefixListAssociations";
const _PLAr = "PrefixListArn";
const _PLD = "PeerLivenessDetection";
const _PLF = "PartitionLoadFrequency";
const _PLI = "PrefixListId";
const _PLIr = "PrefixListIds";
const _PLN = "PrefixListName";
const _PLOI = "PrefixListOwnerId";
const _PLS = "Phase1LifetimeSeconds";
const _PLSh = "Phase2LifetimeSeconds";
const _PLr = "PrefixList";
const _PLre = "PrefixLists";
const _PM = "PendingMaintenance";
const _PN = "PartitionNumber";
const _PNC = "PreviewNextCidr";
const _PO = "PaymentOption";
const _POI = "PeerOwnerId";
const _POe = "PeeringOptions";
const _PP = "ProgressPercentage";
const _PPIPC = "ProvisionPublicIpv4PoolCidr";
const _PR = "PortRange";
const _PRD = "PersistRoutesDuration";
const _PRIO = "PurchaseReservedInstancesOffering";
const _PRN = "PolicyReferenceName";
const _PRNo = "PolicyRuleNumber";
const _PRS = "PersistRoutesState";
const _PRU = "PtrRecordUpdate";
const _PRa = "PayerResponsibility";
const _PRe = "PersistRoutes";
const _PRee = "PeerRegion";
const _PRer = "PermanentRestore";
const _PRo = "PortRanges";
const _PRol = "PolicyRule";
const _PRt = "PtrRecord";
const _PRu = "PurchaseRequests";
const _PS = "PriceSchedules";
const _PSD = "PartitionStartDate";
const _PSET = "PreviousSlotEndTime";
const _PSFRS = "PreviousSpotFleetRequestState";
const _PSI = "PurchaseScheduledInstances";
const _PSK = "PreSharedKey";
const _PSKA = "PreSharedKeyArn";
const _PSKE = "PublicSigningKeyEndpoint";
const _PSKS = "PreSharedKeyStorage";
const _PSKU = "PublicSigningKeyUrl";
const _PSR = "ProvisioningStatusReason";
const _PSe = "PeeringStatus";
const _PSer = "PermissionState";
const _PSh = "PhcSupport";
const _PSr = "ProvisioningStatus";
const _PSre = "PreviousState";
const _PSrev = "PreviousStatus";
const _PT = "PurchaseToken";
const _PTGI = "PeerTransitGatewayId";
const _PTS = "PoolTagSpecifications";
const _PTr = "PrincipalType";
const _PTro = "ProvisionTime";
const _PTu = "PurchaseTime";
const _PU = "PresignedUrl";
const _PV = "PreviousVersion";
const _PVI = "PeerVpcId";
const _PVIr = "PrimaryVpcId";
const _PVr = "PropagatingVgws";
const _PZI = "ParentZoneId";
const _PZN = "ParentZoneName";
const _Pe = "Permission";
const _Per = "Period";
const _Pl = "Placement";
const _Pla = "Platform";
const _Po = "Port";
const _Pr = "Prefix";
const _Pri = "Priority";
const _Pric = "Price";
const _Prim = "Primary";
const _Prin = "Principal";
const _Princ = "Principals";
const _Pro = "Protocols";
const _Prog = "Progress";
const _Prop = "Propagation";
const _Prov = "Provisioned";
const _Pu = "Public";
const _Pur = "Purchase";
const _Q = "Quantity";
const _R = "References";
const _RA = "ReleaseAddress";
const _RAA = "ResetAddressAttribute";
const _RAE = "RemoteAccessEnabled";
const _RAG = "RevokeAllGroups";
const _RAP = "RemoveAllowedPrincipals";
const _RART = "RemoveAllocationResourceTags";
const _RATC = "RestoreAddressToClassic";
const _RAe = "ResolveAlias";
const _RAes = "ResourceArn";
const _RAo = "RoleArn";
const _RAu = "RuleAction";
const _RB = "RequestedBy";
const _RBET = "RecycleBinEnterTime";
const _RBETe = "RecycleBinExitTime";
const _RBUI = "RestorableByUserIds";
const _RC = "ResourceCidr";
const _RCA = "ResourceConfigurationArn";
const _RCGA = "ResourceConfigurationGroupArn";
const _RCRBO = "RejectCapacityReservationBillingOwnership";
const _RCS = "ResourceComplianceStatus";
const _RCT = "ReportCreationTime";
const _RCVI = "RevokeClientVpnIngress";
const _RCe = "ReasonCodes";
const _RCec = "RecurringCharges";
const _RCet = "ReturnCode";
const _RD = "RestoreDuration";
const _RDAC = "ResourceDiscoveryAssociationCount";
const _RDCA = "RdsDbClusterArn";
const _RDI = "RamDiskId";
const _RDIA = "RdsDbInstanceArn";
const _RDN = "RootDeviceName";
const _RDPA = "RdsDbProxyArn";
const _RDS = "ResourceDiscoveryStatus";
const _RDT = "RootDeviceType";
const _RE = "RdsEndpoint";
const _RED = "RemoveEndDate";
const _REDKKI = "ResetEbsDefaultKmsKeyId";
const _RET = "RestoreExpiryTime";
const _REe = "RemoveEntries";
const _REes = "ResponseError";
const _REeso = "ResourceExclusions";
const _RF = "RemoveFields";
const _RFIA = "ResetFpgaImageAttribute";
const _RFP = "RekeyFuzzPercentage";
const _RGA = "RuleGroupArn";
const _RGI = "ReferencedGroupId";
const _RGIe = "ReferencedGroupInfo";
const _RGLBA = "RemoveGatewayLoadBalancerArns";
const _RGROP = "RuleGroupRuleOptionsPairs";
const _RGT = "RuleGroupType";
const _RGTP = "RuleGroupTypePairs";
const _RH = "ReleaseHosts";
const _RHS = "RequireHibernateSupport";
const _RI = "RebootInstances";
const _RIA = "ResetImageAttribute";
const _RIAe = "ResetInstanceAttribute";
const _RICIAIS = "ReplaceImageCriteriaInAllowedImagesSettings";
const _RID = "RouteInstallationDetails";
const _RIENA = "RegisterInstanceEventNotificationAttributes";
const _RIFRB = "RestoreImageFromRecycleBin";
const _RII = "ReservedInstanceIds";
const _RIIPA = "ReplaceIamInstanceProfileAssociation";
const _RIIe = "ReservedInstancesId";
const _RIIes = "ReservedInstancesIds";
const _RIIese = "ReservedInstanceId";
const _RIL = "ReservedInstancesListings";
const _RILI = "ReservedInstancesListingId";
const _RIM = "ReservedInstancesModifications";
const _RIMI = "ReservedInstancesModificationIds";
const _RIMIe = "ReservedInstancesModificationId";
const _RINC = "RemoteIpv4NetworkCidr";
const _RINCe = "RemoteIpv6NetworkCidr";
const _RIO = "ReservedInstancesOfferings";
const _RIOI = "ReservedInstancesOfferingIds";
const _RIOIe = "ReservedInstancesOfferingId";
const _RIPA = "ReleaseIpamPoolAllocation";
const _RIS = "ReportInstanceStatus";
const _RISR = "RouteInstallationStatusReason";
const _RISo = "RouteInstallationStatus";
const _RIVR = "ReservedInstanceValueRollup";
const _RIVS = "ReservedInstanceValueSet";
const _RIa = "RamdiskId";
const _RIe = "RegisterImage";
const _RIep = "ReportId";
const _RIepo = "ReportIds";
const _RIeq = "RequesterId";
const _RIes = "ResourceIds";
const _RIese = "ReservedInstances";
const _RIeser = "ReservationId";
const _RIeso = "ResourceId";
const _RIu = "RunInstances";
const _RM = "ReasonMessage";
const _RMGM = "RegisteredMulticastGroupMembers";
const _RMGS = "RegisteredMulticastGroupSources";
const _RMPLV = "RestoreManagedPrefixListVersion";
const _RMS = "RebootMigrationSupport";
const _RMTS = "RekeyMarginTimeSeconds";
const _RMe = "RebootMigration";
const _RMeq = "RequesterManaged";
const _RN = "RegionName";
const _RNAA = "ReplaceNetworkAclAssociation";
const _RNAE = "ReplaceNetworkAclEntry";
const _RNIA = "ResetNetworkInterfaceAttribute";
const _RNII = "RegisteredNetworkInterfaceIds";
const _RNLBA = "RemoveNetworkLoadBalancerArns";
const _RNS = "RemoveNetworkServices";
const _RNe = "RegionNames";
const _RNes = "ResourceName";
const _RNo = "RoleName";
const _RNu = "RuleNumber";
const _RO = "RdsOptions";
const _ROI = "ResourceOwnerId";
const _ROR = "RemoveOperatingRegions";
const _ROS = "ResourceOverlapStatus";
const _ROUE = "RemoveOrganizationalUnitExclusions";
const _ROe = "ResourceOwner";
const _ROo = "RouteOrigin";
const _ROu = "RuleOptions";
const _RP = "ResetPolicy";
const _RPC = "ReturnPathComponents";
const _RPCO = "RequesterPeeringConnectionOptions";
const _RPDN = "RemovePrivateDnsName";
const _RR = "ReplaceRoute";
const _RRTA = "ReplaceRouteTableAssociation";
const _RRTI = "RemoveRouteTableIds";
const _RRVT = "ReplaceRootVolumeTask";
const _RRVTI = "ReplaceRootVolumeTaskIds";
const _RRVTIe = "ReplaceRootVolumeTaskId";
const _RRVTe = "ReplaceRootVolumeTasks";
const _RRe = "ResourceRegion";
const _RS = "ReplacementStrategy";
const _RSA = "ResetSnapshotAttribute";
const _RSAo = "RouteServerAssociation";
const _RSAou = "RouteServerAssociations";
const _RSE = "RouteServerEndpoint";
const _RSEI = "RouteServerEndpointId";
const _RSEIo = "RouteServerEndpointIds";
const _RSEo = "RouteServerEndpoints";
const _RSF = "RequestSpotFleet";
const _RSFRB = "RestoreSnapshotFromRecycleBin";
const _RSGE = "RevokeSecurityGroupEgress";
const _RSGI = "RevokeSecurityGroupIngress";
const _RSGIe = "RemoveSecurityGroupIds";
const _RSGR = "RevokedSecurityGroupRules";
const _RSI = "RequestSpotInstances";
const _RSIAT = "RemoveSupportedIpAddressTypes";
const _RSIe = "RemoveSubnetIds";
const _RSIo = "RouteServerId";
const _RSIou = "RouteServerIds";
const _RSIu = "RunScheduledInstances";
const _RSP = "RouteServerPeer";
const _RSPI = "RouteServerPeerId";
const _RSPIo = "RouteServerPeerIds";
const _RSPo = "RouteServerPeers";
const _RSPou = "RouteServerPropagation";
const _RSPout = "RouteServerPropagations";
const _RSR = "RemoveSupportedRegions";
const _RST = "RestoreSnapshotTier";
const _RSTe = "RestoreStartTime";
const _RSe = "ResourceStatement";
const _RSeg = "RegionalSummaries";
const _RSo = "RouteServer";
const _RSou = "RouteServers";
const _RSout = "RouteStatus";
const _RT = "ResourceType";
const _RTAI = "RouteTableAssociationId";
const _RTGCB = "RemoveTransitGatewayCidrBlocks";
const _RTGMDA = "RejectTransitGatewayMulticastDomainAssociations";
const _RTGMGM = "RegisterTransitGatewayMulticastGroupMembers";
const _RTGMGS = "RegisterTransitGatewayMulticastGroupSources";
const _RTGPA = "RejectTransitGatewayPeeringAttachment";
const _RTGR = "ReplaceTransitGatewayRoute";
const _RTGVA = "RejectTransitGatewayVpcAttachment";
const _RTI = "RouteTableId";
const _RTIe = "RequesterTgwInfo";
const _RTIo = "RouteTableIds";
const _RTO = "ResourceTypeOptions";
const _RTR = "RouteTableRoute";
const _RTV = "RemainingTotalValue";
const _RTe = "ResourceTypes";
const _RTel = "ReleaseTime";
const _RTeq = "RequestTime";
const _RTes = "ReservationType";
const _RTeso = "ResourceTag";
const _RTesou = "ResourceTags";
const _RTo = "RouteTable";
const _RTou = "RouteTables";
const _RUI = "ReplaceUnhealthyInstances";
const _RUV = "RemainingUpfrontValue";
const _RV = "ReturnValue";
const _RVEC = "RejectVpcEndpointConnections";
const _RVI = "ReferencingVpcId";
const _RVIe = "RequesterVpcInfo";
const _RVPC = "RejectVpcPeeringConnection";
const _RVT = "ReplaceVpnTunnel";
const _RVe = "ReservationValue";
const _RWS = "ReplayWindowSize";
const _Ra = "Ramdisk";
const _Re = "Resources";
const _Rea = "Reason";
const _Rec = "Recurrence";
const _Reg = "Regions";
const _Regi = "Region";
const _Rem = "Remove";
const _Rep = "Reports";
const _Req = "Requested";
const _Res = "Resource";
const _Rese = "Reservations";
const _Resu = "Result";
const _Ret = "Return";
const _Ro = "Role";
const _Rou = "Route";
const _Rout = "Routes";
const _S = "Source";
const _SA = "StartupAction";
const _SAI = "SecondaryAllocationIds";
const _SAMLPA = "SAMLProviderArn";
const _SAZ = "SingleAvailabilityZone";
const _SAo = "SourceAddresses";
const _SAou = "SourceAddress";
const _SAour = "SourceArn";
const _SAu = "SuggestedAccounts";
const _SAub = "SubnetArn";
const _SAup = "SupportedArchitectures";
const _SB = "S3Bucket";
const _SBM = "SupportedBootModes";
const _SC = "SubnetConfigurations";
const _SCA = "ServerCertificateArn";
const _SCAE = "SerialConsoleAccessEnabled";
const _SCB = "SourceCidrBlock";
const _SCCDM = "SnapshotCopyCompletionDurationMinutes";
const _SCR = "SourceCapacityReservation";
const _SCRI = "SourceCapacityReservationId";
const _SCRIu = "SubnetCidrReservationId";
const _SCRu = "SubnetCidrReservation";
const _SCSIG = "SustainedClockSpeedInGhz";
const _SCc = "ScopeCount";
const _SCe = "ServiceConfiguration";
const _SCer = "ServiceConfigurations";
const _SCn = "SnapshotConfiguration";
const _SD = "StartDate";
const _SDC = "SourceDestCheck";
const _SDI = "SendDiagnosticInterrupt";
const _SDIH = "SlotDurationInHours";
const _SDLTV = "SuccessfullyDeletedLaunchTemplateVersions";
const _SDPR = "StartDeclarativePoliciesReport";
const _SDR = "StartDateRange";
const _SDS = "SpotDatafeedSubscription";
const _SDV = "SetDefaultVersion";
const _SDe = "ServiceDetails";
const _SDn = "SnapshotDetails";
const _SDp = "SpreadDomain";
const _SDu = "SubDomain";
const _SEL = "S3ExportLocation";
const _SET = "SampledEndTime";
const _SF = "SupportedFeatures";
const _SFC = "SuccessfulFleetCancellations";
const _SFD = "SuccessfulFleetDeletions";
const _SFII = "SourceFpgaImageId";
const _SFR = "SuccessfulFleetRequests";
const _SFRC = "SpotFleetRequestConfig";
const _SFRCp = "SpotFleetRequestConfigs";
const _SFRI = "SpotFleetRequestIds";
const _SFRIp = "SpotFleetRequestId";
const _SFRS = "SpotFleetRequestState";
const _SG = "SecurityGroups";
const _SGA = "SecurityGroupArn";
const _SGFV = "SecurityGroupForVpcs";
const _SGI = "SecurityGroupIds";
const _SGIe = "SecurityGroupId";
const _SGR = "SecurityGroupRules";
const _SGRA = "SecurityGroupRuleArn";
const _SGRD = "SecurityGroupRuleDescriptions";
const _SGRI = "SecurityGroupRuleIds";
const _SGRIe = "SecurityGroupRuleId";
const _SGRS = "SecurityGroupReferencingSupport";
const _SGRSe = "SecurityGroupReferenceSet";
const _SGRe = "SecurityGroupRule";
const _SGVA = "SecurityGroupVpcAssociations";
const _SGe = "SecurityGroup";
const _SH = "StartHour";
const _SI = "StartInstances";
const _SIAS = "ScheduledInstanceAvailabilitySet";
const _SIAT = "SupportedIpAddressTypes";
const _SICR = "SubnetIpv4CidrReservations";
const _SICRu = "SubnetIpv6CidrReservations";
const _SICS = "SuccessfulInstanceCreditSpecifications";
const _SIGB = "SizeInGB";
const _SII = "SourceImageId";
const _SIIc = "ScheduledInstanceIds";
const _SIIch = "ScheduledInstanceId";
const _SIIo = "SourceInstanceId";
const _SIMB = "SizeInMiB";
const _SIP = "StaleIpPermissions";
const _SIPE = "StaleIpPermissionsEgress";
const _SIPI = "SourceIpamPoolId";
const _SIR = "SpotInstanceRequests";
const _SIRI = "SpotInstanceRequestIds";
const _SIRIp = "SpotInstanceRequestId";
const _SIRo = "SourceImageRegion";
const _SIS = "ScheduledInstanceSet";
const _SIT = "SpotInstanceType";
const _SITR = "StoreImageTaskResults";
const _SITi = "SingleInstanceType";
const _SIe = "ServiceId";
const _SIer = "ServiceIds";
const _SIn = "SnapshotId";
const _SIna = "SnapshotIds";
const _SIo = "SourceIp";
const _SIt = "StopInstances";
const _SIta = "StartingInstances";
const _SIto = "StoppingInstances";
const _SIu = "SubnetIds";
const _SIub = "SubnetId";
const _SIubs = "SubsystemId";
const _SK = "S3Key";
const _SKo = "S3objectKey";
const _SL = "SnapshotLocation";
const _SLGR = "SearchLocalGatewayRoutes";
const _SLVI = "ServiceLinkVirtualInterfaces";
const _SLVIA = "ServiceLinkVirtualInterfaceArn";
const _SLVII = "ServiceLinkVirtualInterfaceIds";
const _SLVIIe = "ServiceLinkVirtualInterfaceId";
const _SLo = "S3Location";
const _SLp = "SpreadLevel";
const _SM = "ServiceManaged";
const _SMPPOLP = "SpotMaxPricePercentageOverLowestPrice";
const _SMS = "SpotMaintenanceStrategies";
const _SMTP = "SpotMaxTotalPrice";
const _SMt = "StatusMessage";
const _SMta = "StateMessage";
const _SN = "SessionNumber";
const _SNA = "ServiceNetworkArn";
const _SNE = "SnsNotificationsEnabled";
const _SNIA = "StartNetworkInsightsAnalysis";
const _SNIASA = "StartNetworkInsightsAccessScopeAnalysis";
const _SNN = "ServiceNetworkName";
const _SNS = "SriovNetSupport";
const _SNe = "ServiceName";
const _SNeq = "SequenceNumber";
const _SNer = "ServiceNames";
const _SO = "SpotOptions";
const _SOS = "SkipOsShutdown";
const _SOT = "S3ObjectTags";
const _SP = "S3Prefix";
const _SPA = "SamlProviderArn";
const _SPH = "SpotPriceHistory";
const _SPI = "ServicePermissionId";
const _SPIA = "SecondaryPrivateIpAddresses";
const _SPIAC = "SecondaryPrivateIpAddressCount";
const _SPL = "SourcePrefixLists";
const _SPR = "SourcePortRange";
const _SPRo = "SourcePortRanges";
const _SPS = "SpotPlacementScores";
const _SPo = "SourcePorts";
const _SPp = "SpotPrice";
const _SQPD = "SuccessfulQueuedPurchaseDeletions";
const _SR = "SourceRegion";
const _SRDT = "SupportedRootDeviceTypes";
const _SRO = "StaticRoutesOnly";
const _SRT = "SubnetRouteTable";
const _SRe = "ServiceRegion";
const _SRer = "ServiceRegions";
const _SRerv = "ServiceResource";
const _SRo = "SourceResource";
const _SRt = "StateReason";
const _SRu = "SupportedRegions";
const _SS = "SseSpecification";
const _SSGN = "SourceSecurityGroupName";
const _SSGOI = "SourceSecurityGroupOwnerId";
const _SSGS = "StaleSecurityGroupSet";
const _SSI = "SourceSnapshotId";
const _SSIo = "SourceSnapshotIds";
const _SSP = "SelfServicePortal";
const _SSPU = "SelfServicePortalUrl";
const _SSS = "StaticSourcesSupport";
const _SSSAMLPA = "SelfServiceSAMLProviderArn";
const _SSSPA = "SelfServiceSamlProviderArn";
const _SST = "SampledStartTime";
const _SSTR = "SlotStartTimeRange";
const _SSe = "ServiceState";
const _SSu = "SupportedStrategies";
const _SSy = "SystemStatus";
const _ST = "SplitTunnel";
const _STA = "SnsTopicArn";
const _STC = "SpotTargetCapacity";
const _STD = "SnapshotTaskDetail";
const _STFR = "StoreTaskFailureReason";
const _STGMG = "SearchTransitGatewayMulticastGroups";
const _STGR = "SearchTransitGatewayRoutes";
const _STH = "SessionTimeoutHours";
const _STR = "SkipTunnelReplacement";
const _STRt = "StateTransitionReason";
const _STS = "SnapshotTierStatuses";
const _STSt = "StoreTaskState";
const _STT = "StateTransitionTime";
const _STa = "SampleType";
const _STam = "SampleTime";
const _STe = "ServiceType";
const _STo = "SourceType";
const _STs = "SseType";
const _STt = "StartTime";
const _STto = "StorageTier";
const _SUC = "SupportedUsageClasses";
const _SV = "SourceVersion";
const _SVESPDV = "StartVpcEndpointServicePrivateDnsVerification";
const _SVI = "SubsystemVendorId";
const _SVT = "SupportedVirtualizationTypes";
const _SVh = "ShellVersion";
const _SVo = "SourceVpc";
const _SVu = "SupportedVersions";
const _SWD = "StartWeekDay";
const _S_ = "S3";
const _Sc = "Scope";
const _Sco = "Score";
const _Scop = "Scopes";
const _Se = "Service";
const _Set = "Settings";
const _Si = "Signature";
const _Siz = "Size";
const _Sn = "Snapshots";
const _So = "Sources";
const _Soc = "Sockets";
const _Sof = "Software";
const _St = "Storage";
const _Sta = "Statistic";
const _Star = "Start";
const _Stat = "State";
const _Statu = "Status";
const _Status = "Statuses";
const _Str = "Strategy";
const _Su = "Subnet";
const _Sub = "Subscriptions";
const _Subn = "Subnets";
const _Suc = "Successful";
const _Succ = "Success";
const _T = "Type";
const _TAAC = "TotalAvailableAddressCount";
const _TAC = "TotalAvailableCapacity";
const _TACo = "TotalAddressCount";
const _TAI = "TransferAccountId";
const _TC = "TargetConfigurations";
const _TCS = "TargetCapacitySpecification";
const _TCUT = "TargetCapacityUnitType";
const _TCVC = "TerminateClientVpnConnections";
const _TCVR = "TargetConfigurationValueRollup";
const _TCVS = "TargetConfigurationValueSet";
const _TCa = "TargetCapacity";
const _TCar = "TargetConfiguration";
const _TCo = "TotalCapacity";
const _TD = "TrafficDirection";
const _TDe = "TerminationDelay";
const _TE = "TargetEnvironment";
const _TED = "TermEndDate";
const _TET = "TcpEstablishedTimeout";
const _TEo = "TokenEndpoint";
const _TFC = "TotalFulfilledCapacity";
const _TFMIMB = "TotalFpgaMemoryInMiB";
const _TG = "TargetGroups";
const _TGA = "TransitGatewayAddress";
const _TGAI = "TransitGatewayAttachmentId";
const _TGAIr = "TransitGatewayAttachmentIds";
const _TGAP = "TransitGatewayAttachmentPropagations";
const _TGAr = "TransitGatewayAttachments";
const _TGAra = "TransitGatewayAttachment";
const _TGAran = "TransitGatewayArn";
const _TGArans = "TransitGatewayAsn";
const _TGC = "TargetGroupsConfig";
const _TGCB = "TransitGatewayCidrBlocks";
const _TGCP = "TransitGatewayConnectPeer";
const _TGCPI = "TransitGatewayConnectPeerId";
const _TGCPIr = "TransitGatewayConnectPeerIds";
const _TGCPr = "TransitGatewayConnectPeers";
const _TGCr = "TransitGatewayConnect";
const _TGCra = "TransitGatewayConnects";
const _TGI = "TransitGatewayId";
const _TGIr = "TransitGatewayIds";
const _TGMD = "TransitGatewayMulticastDomain";
const _TGMDA = "TransitGatewayMulticastDomainArn";
const _TGMDI = "TransitGatewayMulticastDomainId";
const _TGMDIr = "TransitGatewayMulticastDomainIds";
const _TGMDr = "TransitGatewayMulticastDomains";
const _TGMIMB = "TotalGpuMemoryInMiB";
const _TGOI = "TransitGatewayOwnerId";
const _TGPA = "TransitGatewayPeeringAttachment";
const _TGPAr = "TransitGatewayPeeringAttachments";
const _TGPLR = "TransitGatewayPrefixListReference";
const _TGPLRr = "TransitGatewayPrefixListReferences";
const _TGPT = "TransitGatewayPolicyTable";
const _TGPTE = "TransitGatewayPolicyTableEntries";
const _TGPTI = "TransitGatewayPolicyTableId";
const _TGPTIr = "TransitGatewayPolicyTableIds";
const _TGPTr = "TransitGatewayPolicyTables";
const _TGRT = "TransitGatewayRouteTable";
const _TGRTA = "TransitGatewayRouteTableAnnouncement";
const _TGRTAI = "TransitGatewayRouteTableAnnouncementId";
const _TGRTAIr = "TransitGatewayRouteTableAnnouncementIds";
const _TGRTAr = "TransitGatewayRouteTableAnnouncements";
const _TGRTI = "TransitGatewayRouteTableId";
const _TGRTIr = "TransitGatewayRouteTableIds";
const _TGRTP = "TransitGatewayRouteTablePropagations";
const _TGRTR = "TransitGatewayRouteTableRoute";
const _TGRTr = "TransitGatewayRouteTables";
const _TGVA = "TransitGatewayVpcAttachment";
const _TGVAr = "TransitGatewayVpcAttachments";
const _TGr = "TransitGateway";
const _TGra = "TransitGateways";
const _THP = "TotalHourlyPrice";
const _TI = "TerminateInstances";
const _TIAT = "TrafficIpAddressType";
const _TIC = "TunnelInsideCidr";
const _TICo = "TotalInstanceCount";
const _TII = "TrunkInterfaceId";
const _TIIC = "TunnelInsideIpv6Cidr";
const _TIIV = "TunnelInsideIpVersion";
const _TIMIMB = "TotalInferenceMemoryInMiB";
const _TIWE = "TerminateInstancesWithExpiration";
const _TIa = "TargetId";
const _TIar = "TargetIops";
const _TIe = "TenantId";
const _TIer = "TerminatingInstances";
const _TLSGB = "TotalLocalStorageGB";
const _TMAE = "TargetMultiAttachEnabled";
const _TMF = "TrafficMirrorFilter";
const _TMFI = "TrafficMirrorFilterId";
const _TMFIr = "TrafficMirrorFilterIds";
const _TMFR = "TrafficMirrorFilterRule";
const _TMFRI = "TrafficMirrorFilterRuleId";
const _TMFRIr = "TrafficMirrorFilterRuleIds";
const _TMFRr = "TrafficMirrorFilterRules";
const _TMFr = "TrafficMirrorFilters";
const _TMMIMB = "TotalMediaMemoryInMiB";
const _TMS = "TrafficMirrorSession";
const _TMSI = "TrafficMirrorSessionId";
const _TMSIr = "TrafficMirrorSessionIds";
const _TMSr = "TrafficMirrorSessions";
const _TMT = "TrafficMirrorTarget";
const _TMTI = "TrafficMirrorTargetId";
const _TMTIr = "TrafficMirrorTargetIds";
const _TMTr = "TrafficMirrorTargets";
const _TN = "TokenName";
const _TNC = "TargetNetworkCidr";
const _TNDMIMB = "TotalNeuronDeviceMemoryInMiB";
const _TNI = "TargetNetworkId";
const _TO = "TunnelOptions";
const _TOAT = "TransferOfferAcceptedTimestamp";
const _TOET = "TransferOfferExpirationTimestamp";
const _TP = "ToPort";
const _TPC = "ThreadsPerCore";
const _TPT = "TrustProviderType";
const _TPr = "TransportProtocol";
const _TR = "ThroughResources";
const _TRC = "TargetResourceCount";
const _TRD = "TemporaryRestoreDays";
const _TRTI = "TargetRouteTableId";
const _TRi = "TimeRanges";
const _TS = "TagSpecifications";
const _TSD = "TermStartDate";
const _TSIGB = "TotalSizeInGB";
const _TSIH = "TotalScheduledInstanceHours";
const _TST = "TieringStartTime";
const _TSTa = "TaskStartTime";
const _TSa = "TargetSubnet";
const _TSag = "TagSet";
const _TSagp = "TagSpecification";
const _TSar = "TargetSize";
const _TSas = "TaskState";
const _TSp = "TpmSupport";
const _TT = "TrafficType";
const _TTC = "TotalTargetCapacity";
const _TTGAI = "TransportTransitGatewayAttachmentId";
const _TTa = "TaskType";
const _TTar = "TargetThroughput";
const _TTr = "TransferType";
const _TUC = "TotalUnavailableCapacity";
const _TUP = "TotalUpfrontPrice";
const _TV = "TargetVersion";
const _TVC = "TotalVCpus";
const _TVSI = "TargetVpcSubnetId";
const _TVT = "TargetVolumeType";
const _TVo = "TokenValue";
const _Ta = "Tags";
const _Tag = "Tag";
const _Te = "Tenancy";
const _Ter = "Term";
const _Th = "Throughput";
const _Ti = "Tier";
const _Tim = "Timestamp";
const _To = "To";
const _U = "Url";
const _UB = "UserBucket";
const _UC = "UltraserverCount";
const _UCs = "UsageCount";
const _UD = "UserData";
const _UDLTV = "UnsuccessfullyDeletedLaunchTemplateVersions";
const _UDe = "UefiData";
const _UDp = "UpdatedDate";
const _UDpd = "UpdateDate";
const _UE = "UploadEnd";
const _UF = "UpfrontFee";
const _UFD = "UnsuccessfulFleetDeletions";
const _UFR = "UnsuccessfulFleetRequests";
const _UG = "UserGroups";
const _UI = "UnmonitorInstances";
const _UIA = "UnassignIpv6Addresses";
const _UIAn = "UnassignedIpv6Addresses";
const _UIC = "UsedInstanceCount";
const _UICS = "UnsuccessfulInstanceCreditSpecifications";
const _UIE = "UserInfoEndpoint";
const _UIGP = "UserIdGroupPairs";
const _UIP = "UnknownIpPermissions";
const _UIPn = "UnassignedIpv6Prefixes";
const _UIs = "UserId";
const _UIse = "UserIds";
const _ULI = "UseLongIds";
const _ULIA = "UseLongIdsAggregated";
const _UO = "UsageOperation";
const _UOUT = "UsageOperationUpdateTime";
const _UP = "UploadPolicy";
const _UPIA = "UnassignPrivateIpAddresses";
const _UPNGA = "UnassignPrivateNatGatewayAddress";
const _UPS = "UploadPolicySignature";
const _UPp = "UpfrontPrice";
const _UPs = "UsagePrice";
const _URBOI = "UnusedReservationBillingOwnerId";
const _US = "UnlockSnapshot";
const _USGRDE = "UpdateSecurityGroupRuleDescriptionsEgress";
const _USGRDI = "UpdateSecurityGroupRuleDescriptionsIngress";
const _UST = "UdpStreamTimeout";
const _USp = "UploadSize";
const _USpl = "UploadStart";
const _USs = "UsageStrategy";
const _UT = "UdpTimeout";
const _UTP = "UserTrustProvider";
const _UTPT = "UserTrustProviderType";
const _UTl = "UltraserverType";
const _UTp = "UpdateTime";
const _Un = "Unsuccessful";
const _Us = "Username";
const _V = "Version";
const _VA = "VpcAttachment";
const _VAE = "VerifiedAccessEndpoint";
const _VAEI = "VerifiedAccessEndpointId";
const _VAEIe = "VerifiedAccessEndpointIds";
const _VAET = "VerifiedAccessEndpointTargets";
const _VAETD = "VerifiedAccessEndpointTargetDns";
const _VAETIA = "VerifiedAccessEndpointTargetIpAddress";
const _VAEe = "VerifiedAccessEndpoints";
const _VAG = "VerifiedAccessGroup";
const _VAGA = "VerifiedAccessGroupArn";
const _VAGI = "VerifiedAccessGroupId";
const _VAGIe = "VerifiedAccessGroupIds";
const _VAGe = "VerifiedAccessGroups";
const _VAI = "VerifiedAccessInstance";
const _VAII = "VerifiedAccessInstanceId";
const _VAIIe = "VerifiedAccessInstanceIds";
const _VAIe = "VerifiedAccessInstances";
const _VATP = "VerifiedAccessTrustProvider";
const _VATPI = "VerifiedAccessTrustProviderId";
const _VATPIe = "VerifiedAccessTrustProviderIds";
const _VATPe = "VerifiedAccessTrustProviders";
const _VAp = "VpcAttachments";
const _VBPAE = "VpcBlockPublicAccessExclusion";
const _VBPAEp = "VpcBlockPublicAccessExclusions";
const _VBPAO = "VpcBlockPublicAccessOptions";
const _VC = "VpnConnection";
const _VCC = "VCpuCount";
const _VCDSC = "VpnConnectionDeviceSampleConfiguration";
const _VCDT = "VpnConnectionDeviceTypes";
const _VCDTI = "VpnConnectionDeviceTypeId";
const _VCI = "VpnConnectionId";
const _VCIp = "VpnConnectionIds";
const _VCIpu = "VCpuInfo";
const _VCa = "ValidCores";
const _VCp = "VpnConnections";
const _VD = "VersionDescription";
const _VE = "VpcEndpoint";
const _VEA = "VpcEndpointAssociations";
const _VEC = "VpcEndpointConnections";
const _VECI = "VpcEncryptionControlId";
const _VECIp = "VpcEndpointConnectionId";
const _VEI = "VpcEndpointIds";
const _VEIp = "VpcEndpointId";
const _VEO = "VpcEndpointOwner";
const _VEPS = "VpcEndpointPolicySupported";
const _VER = "VpcEndpointRegion";
const _VES = "VpnEcmpSupport";
const _VESp = "VpcEndpointService";
const _VESpc = "VpcEndpointState";
const _VET = "VpcEndpointType";
const _VEp = "VpcEndpoints";
const _VF = "ValidFrom";
const _VFR = "ValidationFailureReason";
const _VG = "VpnGateway";
const _VGI = "VpnGatewayId";
const _VGIp = "VpnGatewayIds";
const _VGp = "VpnGateways";
const _VI = "VpcId";
const _VIR = "VolumeInitializationRate";
const _VIe = "VendorId";
const _VIl = "VlanId";
const _VIo = "VolumeId";
const _VIol = "VolumeIds";
const _VIp = "VpcIds";
const _VM = "VerificationMethod";
const _VMo = "VolumesModifications";
const _VMol = "VolumeModification";
const _VN = "VirtualName";
const _VNI = "VirtualNetworkId";
const _VNe = "VersionNumber";
const _VOI = "VolumeOwnerId";
const _VOIp = "VpcOwnerId";
const _VP = "VpnPort";
const _VPC = "VpcPeeringConnection";
const _VPCI = "VpcPeeringConnectionId";
const _VPCIp = "VpcPeeringConnectionIds";
const _VPCp = "VpcPeeringConnections";
const _VPG = "VirtualPrivateGateway";
const _VPp = "VpnProtocol";
const _VPpc = "VpcPeering";
const _VS = "VolumeSize";
const _VSo = "VolumeStatuses";
const _VSol = "VolumeStatus";
const _VT = "VolumeType";
const _VTOIA = "VpnTunnelOutsideIpAddress";
const _VTPC = "ValidThreadsPerCore";
const _VTg = "VgwTelemetry";
const _VTi = "VirtualizationTypes";
const _VTir = "VirtualizationType";
const _VU = "ValidUntil";
const _Va = "Value";
const _Val = "Values";
const _Ve = "Versions";
const _Ven = "Vendor";
const _Vl = "Vlan";
const _Vo = "Volume";
const _Vol = "Volumes";
const _Vp = "Vpc";
const _Vpc = "Vpcs";
const _W = "Weight";
const _WBC = "WithdrawByoipCidr";
const _WC = "WithCooldown";
const _WCe = "WeightedCapacity";
const _WM = "WarningMessage";
const _WU = "WakeUp";
const _Wa = "Warning";
const _ZI = "ZoneIds";
const _ZIo = "ZoneId";
const _ZN = "ZoneNames";
const _ZNo = "ZoneName";
const _ZT = "ZoneType";
const _a = "associations";
const _aA = "asnAssociation";
const _aAC = "availableAddressCount";
const _aAI = "awsAccountId";
const _aAId = "addressAllocationId";
const _aAS = "asnAssociationSet";
const _aASA = "autoAcceptSharedAssociations";
const _aASAu = "autoAcceptSharedAttachments";
const _aASc = "accountAttributeSet";
const _aASd = "additionalAccountSet";
const _aAc = "accessAll";
const _aBHP = "actualBlockHourlyPrice";
const _aC = "availableCapacity";
const _aCIA = "associateCarrierIpAddress";
const _aCT = "archivalCompleteTime";
const _aCc = "acceleratorCount";
const _aCd = "addressCount";
const _aD = "activeDirectory";
const _aDNL = "allocationDefaultNetmaskLength";
const _aDRFRV = "allowDnsResolutionFromRemoteVpc";
const _aDRTI = "associationDefaultRouteTableId";
const _aDS = "additionalDetailSet";
const _aDT = "additionalDetailType";
const _aDn = "announcementDirection";
const _aDp = "applicationDomain";
const _aE = "authorizationEndpoint";
const _aEC = "analyzedEniCount";
const _aEFLCLTRV = "allowEgressFromLocalClassicLinkToRemoteVpc";
const _aEFLVTRCL = "allowEgressFromLocalVpcToRemoteClassicLink";
const _aEIO = "autoEnableIO";
const _aES = "attachedEbsStatus";
const _aF = "addressFamily";
const _aFS = "analysisFindingSet";
const _aI = "allocationId";
const _aIA = "assignedIpv6Addresses";
const _aIAC = "availableIpAddressCount";
const _aIAOC = "assignIpv6AddressOnCreation";
const _aIC = "availableInstanceCapacity";
const _aICv = "availableInstanceCount";
const _aIPS = "assignedIpv6PrefixSet";
const _aIPSs = "assignedIpv4PrefixSet";
const _aIS = "activeInstanceSet";
const _aISS = "allowedImagesSettingsState";
const _aISc = "accountIdSet";
const _aITS = "allowedInstanceTypeSet";
const _aIc = "accountId";
const _aIm = "amiId";
const _aIp = "appleInternal";
const _aIs = "associationId";
const _aIss = "assetId";
const _aIt = "attachmentId";
const _aIu = "autoImport";
const _aL = "accountLevel";
const _aLI = "amiLaunchIndex";
const _aLT = "attachmentLimitType";
const _aLc = "accessLogs";
const _aMIT = "allowsMultipleInstanceTypes";
const _aMNL = "allocationMinNetmaskLength";
const _aMNLl = "allocationMaxNetmaskLength";
const _aMS = "acceleratorManufacturerSet";
const _aMSp = "applianceModeSupport";
const _aN = "attributeName";
const _aNS = "acceleratorNameSet";
const _aO = "authenticationOptions";
const _aOI = "addressOwnerId";
const _aP = "allowedPrincipals";
const _aPCO = "accepterPeeringConnectionOptions";
const _aPHS = "alternatePathHintSet";
const _aPIA = "associatePublicIpAddress";
const _aPIAS = "assignedPrivateIpAddressesSet";
const _aPS = "addedPrincipalSet";
const _aPSs = "asPathSet";
const _aPu = "autoPlacement";
const _aR = "authorizationRule";
const _aRA = "associatedRoleArn";
const _aRAd = "additionalRoutesAvailable";
const _aRAs = "associatedResourceAccessibility";
const _aRAss = "associatedResourceArn";
const _aRC = "acceptedRouteCount";
const _aRP = "areRoutesPersisted";
const _aRS = "associatedRoleSet";
const _aRSu = "autoRecoverySupported";
const _aRTS = "allocationResourceTagSet";
const _aRc = "aclRule";
const _aRcc = "acceptanceRequired";
const _aRd = "addressRegion";
const _aRs = "associatedResource";
const _aRu = "autoRecovery";
const _aRw = "awsRegion";
const _aS = "associationState";
const _aSA = "amazonSideAsn";
const _aSS = "amdSevSnp";
const _aSSs = "associatedSubnetSet";
const _aSSt = "attributeSummarySet";
const _aSc = "activityStatus";
const _aSct = "actionsSet";
const _aSd = "addressSet";
const _aSdd = "addressesSet";
const _aSl = "allocationStrategy";
const _aSn = "analysisStatus";
const _aSs = "associationStatus";
const _aSss = "associationSet";
const _aSt = "attachmentSet";
const _aStt = "attachmentStatuses";
const _aSw = "awsService";
const _aT = "addressTransfer";
const _aTGAI = "accepterTransitGatewayAttachmentId";
const _aTI = "accepterTgwInfo";
const _aTMMB = "acceleratorTotalMemoryMiB";
const _aTN = "associatedTargetNetwork";
const _aTS = "addressTransferStatus";
const _aTSc = "acceleratorTypeSet";
const _aTSd = "addressTransferSet";
const _aTd = "addressType";
const _aTdd = "addressingType";
const _aTl = "allocationType";
const _aTll = "allocationTime";
const _aTs = "associationTarget";
const _aTt = "attachTime";
const _aTtt = "attachedTo";
const _aTtta = "attachmentType";
const _aV = "attributeValue";
const _aVC = "availableVCpus";
const _aVI = "accepterVpcInfo";
const _aVS = "attributeValueSet";
const _aVTS = "activeVpnTunnelStatus";
const _aZ = "availabilityZone";
const _aZG = "availabilityZoneGroup";
const _aZI = "availabilityZoneId";
const _aZIS = "availabilityZoneIdSet";
const _aZIv = "availabilityZoneInfo";
const _aZS = "availabilityZoneSet";
const _ac = "acl";
const _acc = "accelerators";
const _act = "active";
const _ad = "address";
const _af = "affinity";
const _am = "amount";
const _ar = "arn";
const _arc = "architecture";
const _as = "asn";
const _ass = "association";
const _at = "attachment";
const _att = "attachments";
const _b = "byoasn";
const _bA = "bgpAsn";
const _bAE = "bgpAsnExtended";
const _bBIG = "baselineBandwidthInGbps";
const _bBIM = "baselineBandwidthInMbps";
const _bC = "byoipCidr";
const _bCS = "byoipCidrSet";
const _bCg = "bgpConfigurations";
const _bCy = "bytesConverted";
const _bDM = "blockDeviceMapping";
const _bDMS = "blockDeviceMappingSet";
const _bDMl = "blockDurationMinutes";
const _bEBM = "baselineEbsBandwidthMbps";
const _bEDNS = "baseEndpointDnsNameSet";
const _bI = "bundleId";
const _bII = "branchInterfaceId";
const _bIT = "bundleInstanceTask";
const _bITS = "bundleInstanceTasksSet";
const _bIa = "baselineIops";
const _bM = "bootMode";
const _bMa = "bareMetal";
const _bN = "bucketName";
const _bO = "bgpOptions";
const _bOu = "bucketOwner";
const _bP = "burstablePerformance";
const _bPAS = "blockPublicAccessStates";
const _bPF = "baselinePerformanceFactors";
const _bPS = "burstablePerformanceSupported";
const _bS = "byoasnSet";
const _bSa = "baseSystem";
const _bSf = "bfdStatus";
const _bSg = "bgpStatus";
const _bT = "bannerText";
const _bTIMB = "baselineThroughputInMBps";
const _bW = "bandwidthWeighting";
const _bWa = "bandwidthWeightings";
const _bl = "blackhole";
const _bu = "bucket";
const _c = "component";
const _cA = "componentArn";
const _cAS = "capacityAllocationSet";
const _cAUS = "coipAddressUsageSet";
const _cAe = "certificateArn";
const _cAo = "componentAccount";
const _cAr = "createdAt";
const _cB = "cidrBlock";
const _cBA = "cidrBlockAssociation";
const _cBAS = "cidrBlockAssociationSet";
const _cBDH = "capacityBlockDurationHours";
const _cBDM = "capacityBlockDurationMinutes";
const _cBEDH = "capacityBlockExtensionDurationHours";
const _cBEED = "capacityBlockExtensionEndDate";
const _cBEOI = "capacityBlockExtensionOfferingId";
const _cBEOS = "capacityBlockExtensionOfferingSet";
const _cBEPD = "capacityBlockExtensionPurchaseDate";
const _cBES = "capacityBlockExtensionStatus";
const _cBESD = "capacityBlockExtensionStartDate";
const _cBESa = "capacityBlockExtensionSet";
const _cBI = "capacityBlockId";
const _cBOI = "capacityBlockOfferingId";
const _cBOS = "capacityBlockOfferingSet";
const _cBS = "capacityBlockSet";
const _cBSS = "capacityBlockStatusSet";
const _cBSi = "cidrBlockState";
const _cBSid = "cidrBlockSet";
const _cBr = "createdBy";
const _cC = "currencyCode";
const _cCB = "clientCidrBlock";
const _cCO = "clientConnectOptions";
const _cCRFE = "cancelCapacityReservationFleetError";
const _cCl = "clientConfiguration";
const _cCo = "coreCount";
const _cCoi = "coipCidr";
const _cCp = "cpuCredits";
const _cD = "createDate";
const _cDC = "creationDateCondition";
const _cDM = "completionDurationMinutes";
const _cDr = "creationDate";
const _cDre = "createdDate";
const _cE = "connectionEvents";
const _cECSD = "cidrEndpointsCustomSubDomain";
const _cED = "commitmentEndDate";
const _cET = "connectionEstablishedTime";
const _cETo = "connectionEndTime";
const _cEr = "cronExpression";
const _cF = "containerFormat";
const _cFS = "currentFleetState";
const _cG = "carrierGateway";
const _cGC = "customerGatewayConfiguration";
const _cGI = "carrierGatewayId";
const _cGIu = "customerGatewayId";
const _cGS = "carrierGatewaySet";
const _cGSu = "customerGatewaySet";
const _cGu = "customerGateway";
const _cGur = "currentGeneration";
const _cI = "carrierIp";
const _cIA = "clientIpv6Address";
const _cIBM = "currentInstanceBootMode";
const _cIC = "committedInstanceCount";
const _cIi = "cidrIp";
const _cIid = "cidrIpv6";
const _cIidr = "cidrIpv4";
const _cIl = "clientIp";
const _cIli = "clientId";
const _cIo = "componentId";
const _cIom = "commitmentInfo";
const _cIon = "connectionId";
const _cIop = "coIp";
const _cIor = "coreInfo";
const _cLB = "classicLoadBalancers";
const _cLBC = "classicLoadBalancersConfig";
const _cLBL = "classicLoadBalancerListener";
const _cLBO = "clientLoginBannerOptions";
const _cLDS = "classicLinkDnsSupported";
const _cLE = "classicLinkEnabled";
const _cLO = "connectionLogOptions";
const _cMKE = "customerManagedKeyEnabled";
const _cMS = "cpuManufacturerSet";
const _cN = "commonName";
const _cNA = "coreNetworkArn";
const _cNAA = "coreNetworkAttachmentArn";
const _cNAo = "connectionNotificationArn";
const _cNI = "connectionNotificationId";
const _cNIo = "coreNetworkId";
const _cNS = "connectionNotificationState";
const _cNSo = "connectionNotificationSet";
const _cNT = "connectionNotificationType";
const _cNo = "connectionNotification";
const _cO = "cpuOptions";
const _cOI = "customerOwnedIp";
const _cOIP = "customerOwnedIpv4Pool";
const _cOP = "coolOffPeriod";
const _cOPEO = "coolOffPeriodExpiresOn";
const _cOi = "cidrOptions";
const _cP = "coipPool";
const _cPC = "connectPeerConfiguration";
const _cPI = "coipPoolId";
const _cPS = "coipPoolSet";
const _cR = "capacityReservation";
const _cRA = "capacityReservationArn";
const _cRBRS = "capacityReservationBillingRequestSet";
const _cRCC = "clientRootCertificateChain";
const _cREO = "clientRouteEnforcementOptions";
const _cRFA = "capacityReservationFleetArn";
const _cRFI = "capacityReservationFleetId";
const _cRFS = "capacityReservationFleetSet";
const _cRGS = "capacityReservationGroupSet";
const _cRI = "capacityReservationId";
const _cRIS = "capacityReservationIdSet";
const _cRIa = "capacityReservationInfo";
const _cRL = "certificateRevocationList";
const _cRO = "capacityReservationOptions";
const _cRP = "capacityReservationPreference";
const _cRRGA = "capacityReservationResourceGroupArn";
const _cRS = "capacityReservationSet";
const _cRSS = "capacityReservationStatusSet";
const _cRSa = "capacityReservationSpecification";
const _cRT = "capacityReservationTarget";
const _cRa = "capacityRebalance";
const _cRo = "componentRegion";
const _cS = "cidrSet";
const _cSBN = "certificateS3BucketName";
const _cSFRS = "currentSpotFleetRequestState";
const _cSOK = "certificateS3ObjectKey";
const _cSl = "clientSecret";
const _cSo = "complianceStatus";
const _cSon = "configurationState";
const _cSonn = "connectionStatuses";
const _cSr = "creditSpecification";
const _cSu = "currentState";
const _cSur = "currentStatus";
const _cT = "clientToken";
const _cTC = "connectionTrackingConfiguration";
const _cTI = "conversionTaskId";
const _cTS = "connectionTrackingSpecification";
const _cTo = "conversionTasks";
const _cTom = "completeTime";
const _cTomp = "completionTime";
const _cTon = "conversionTask";
const _cTonn = "connectivityType";
const _cTr = "createTime";
const _cTre = "creationTime";
const _cTrea = "creationTimestamp";
const _cVE = "clientVpnEndpoint";
const _cVEI = "clientVpnEndpointId";
const _cVP = "createVolumePermission";
const _cVTN = "clientVpnTargetNetworks";
const _cWL = "cloudWatchLogs";
const _cWLO = "cloudWatchLogOptions";
const _ca = "category";
const _ch = "checksum";
const _ci = "cidr";
const _co = "code";
const _con = "connections";
const _conf = "configured";
const _confi = "config";
const _cont = "context";
const _cor = "cores";
const _cou = "count";
const _cp = "cpu";
const _d = "destination";
const _dA = "destinationArn";
const _dAIT = "denyAllIgwTraffic";
const _dART = "defaultAssociationRouteTable";
const _dAS = "destinationAddressSet";
const _dASe = "deprovisionedAddressSet";
const _dASi = "disableApiStop";
const _dAT = "disableApiTermination";
const _dAe = "destinationAddress";
const _dC = "destinationCidr";
const _dCA = "domainCertificateArn";
const _dCAR = "deliverCrossAccountRole";
const _dCB = "destinationCidrBlock";
const _dCR = "destinationCapacityReservation";
const _dCS = "dhcpConfigurationSet";
const _dCe = "defaultCores";
const _dE = "dnsEntry";
const _dEKI = "dataEncryptionKeyId";
const _dEQCPI = "defaultEnaQueueCountPerInterface";
const _dES = "dnsEntrySet";
const _dFA = "defaultForAz";
const _dHIS = "dedicatedHostIdSet";
const _dHS = "dedicatedHostsSupported";
const _dHT = "dnsHostnameType";
const _dI = "directoryId";
const _dICB = "destinationIpv6CidrBlock";
const _dIF = "diskImageFormat";
const _dIS = "diskImageSize";
const _dIe = "deviceIndex";
const _dIes = "destinationIp";
const _dLEM = "deliverLogsErrorMessage";
const _dLPA = "deliverLogsPermissionArn";
const _dLS = "deliverLogsStatus";
const _dMGM = "deregisteredMulticastGroupMembers";
const _dMGS = "deregisteredMulticastGroupSources";
const _dN = "deviceName";
const _dNCI = "defaultNetworkCardIndex";
const _dNII = "deregisteredNetworkInterfaceIds";
const _dNn = "dnsName";
const _dO = "dhcpOptions";
const _dOI = "dhcpOptionsId";
const _dOS = "dhcpOptionsSet";
const _dOST = "disconnectOnSessionTimeout";
const _dOT = "deleteOnTermination";
const _dOe = "destinationOptions";
const _dOev = "deviceOptions";
const _dOn = "dnsOptions";
const _dP = "deliveryPreference";
const _dPLI = "destinationPrefixListId";
const _dPLS = "destinationPrefixListSet";
const _dPR = "destinationPortRange";
const _dPRS = "destinationPortRangeSet";
const _dPRT = "defaultPropagationRouteTable";
const _dPS = "destinationPortSet";
const _dPe = "deregistrationProtection";
const _dPes = "destinationPort";
const _dR = "discoveryRegion";
const _dRDAI = "defaultResourceDiscoveryAssociationId";
const _dRDI = "defaultResourceDiscoveryId";
const _dRIT = "dnsRecordIpType";
const _dRRV = "deleteReplacedRootVolume";
const _dRS = "dataRetentionSupport";
const _dRSa = "dataResponseSet";
const _dRTA = "defaultRouteTableAssociation";
const _dRTP = "defaultRouteTablePropagation";
const _dRe = "debuggingRestrictions";
const _dRy = "dynamicRouting";
const _dS = "dnsServer";
const _dSCR = "deletedSubnetCidrReservation";
const _dSRS = "deleteSnapshotResultSet";
const _dSe = "destinationSet";
const _dSel = "deliveryStatus";
const _dSeli = "deliveryStream";
const _dSn = "dnsSupport";
const _dT = "deletionTime";
const _dTA = "dpdTimeoutAction";
const _dTC = "deprecationTimeCondition";
const _dTCT = "defaultTargetCapacityType";
const _dTPC = "defaultThreadsPerCore";
const _dTPS = "deviceTrustProviderSet";
const _dTPT = "deviceTrustProviderType";
const _dTR = "dTraceRestrictions";
const _dTS = "dpdTimeoutSeconds";
const _dTe = "deprecationTime";
const _dTel = "deleteTime";
const _dTele = "deletionTimestamp";
const _dTi = "disablingTime";
const _dTis = "disabledTime";
const _dV = "destinationVpc";
const _dVC = "defaultVCpus";
const _dVD = "deviceValidationDomain";
const _dVN = "defaultVersionNumber";
const _dVe = "defaultVersion";
const _de = "description";
const _dea = "deadline";
const _def = "default";
const _det = "details";
const _dev = "device";
const _di = "direction";
const _dis = "disks";
const _do = "domain";
const _du = "duration";
const _dua = "dualstack";
const _e = "egress";
const _eA = "eniAddress";
const _eAn = "enableAcceleration";
const _eAx = "exclusionsAllowed";
const _eB = "egressBytes";
const _eC = "errorCode";
const _eCTP = "excessCapacityTerminationPolicy";
const _eCn = "encryptionControl";
const _eCx = "explanationCode";
const _eD = "endDate";
const _eDH = "enableDnsHostnames";
const _eDS = "enableDnsSupport";
const _eDT = "endDateType";
const _eDf = "effectiveDate";
const _eDn = "enableDns64";
const _eDnd = "endpointDomain";
const _eDv = "eventDescription";
const _eEA = "endpointEniAddress";
const _eEBD = "ebsEncryptionByDefault";
const _eEI = "endpointEniId";
const _eFRS = "egressFilterRuleSet";
const _eGAI = "elasticGpuAssociationId";
const _eGAS = "elasticGpuAssociationState";
const _eGASl = "elasticGpuAssociationSet";
const _eGAT = "elasticGpuAssociationTime";
const _eGH = "elasticGpuHealth";
const _eGI = "elasticGpuId";
const _eGS = "elasticGpuSet";
const _eGSS = "elasticGpuSpecificationSet";
const _eGSl = "elasticGpuState";
const _eGT = "elasticGpuType";
const _eH = "endHour";
const _eI = "exchangeId";
const _eIAA = "elasticInferenceAcceleratorArn";
const _eIAAI = "elasticInferenceAcceleratorAssociationId";
const _eIAAS = "elasticInferenceAcceleratorAssociationState";
const _eIAASl = "elasticInferenceAcceleratorAssociationSet";
const _eIAAT = "elasticInferenceAcceleratorAssociationTime";
const _eIAS = "elasticInferenceAcceleratorSet";
const _eIAT = "endpointIpAddressType";
const _eITI = "exportImageTaskId";
const _eITS = "exportImageTaskSet";
const _eITSn = "encryptionInTransitSupported";
const _eITSx = "excludedInstanceTypeSet";
const _eIb = "ebsInfo";
const _eIf = "efaInfo";
const _eIn = "eniId";
const _eIv = "eventInformation";
const _eIve = "eventId";
const _eIx = "exclusionId";
const _eKKI = "encryptionKmsKeyId";
const _eLADI = "enableLniAtDeviceIndex";
const _eLBL = "elasticLoadBalancerListener";
const _eM = "errorMessage";
const _eNAUM = "enableNetworkAddressUsageMetrics";
const _eO = "ebsOptimized";
const _eOI = "ebsOptimizedInfo";
const _eOIG = "egressOnlyInternetGateway";
const _eOIGI = "egressOnlyInternetGatewayId";
const _eOIGS = "egressOnlyInternetGatewaySet";
const _eOS = "ebsOptimizedSupport";
const _eOn = "enclaveOptions";
const _eP = "egressPackets";
const _ePG = "enablePrivateGua";
const _ePS = "excludePathSet";
const _eQC = "enaQueueCount";
const _eRNDAAAAR = "enableResourceNameDnsAAAARecord";
const _eRNDAR = "enableResourceNameDnsARecord";
const _eS = "ephemeralStorage";
const _eSE = "enaSrdEnabled";
const _eSS = "enaSrdSpecification";
const _eSSn = "enaSrdSupported";
const _eST = "eventSubType";
const _eSUE = "enaSrdUdpEnabled";
const _eSUS = "enaSrdUdpSpecification";
const _eSf = "efaSupported";
const _eSn = "encryptionSupport";
const _eSna = "enaSupport";
const _eSnt = "entrySet";
const _eSr = "errorSet";
const _eSv = "eventsSet";
const _eSx = "explanationSet";
const _eT = "expirationTime";
const _eTI = "exportTaskId";
const _eTLC = "enableTunnelLifecycleControl";
const _eTS = "exportTaskSet";
const _eTSi = "eipTagSet";
const _eTSx = "exportToS3";
const _eTTCIS = "estimatedTimeToCompleteInSeconds";
const _eTn = "endTime";
const _eTna = "enablingTime";
const _eTnab = "enabledTime";
const _eTnd = "endpointType";
const _eTv = "eventType";
const _eTx = "exportTask";
const _eWD = "endWeekDay";
const _eb = "ebs";
const _en = "enabled";
const _enc = "encrypted";
const _end = "end";
const _enf = "enforced";
const _er = "error";
const _ev = "event";
const _f = "format";
const _fA = "federatedAuthentication";
const _fAD = "filterAtDestination";
const _fAS = "filterAtSource";
const _fAi = "firstAddress";
const _fC = "fulfilledCapacity";
const _fCRS = "fleetCapacityReservationSet";
const _fCS = "findingComponentSet";
const _fCa = "failureCode";
const _fDN = "fipsDnsName";
const _fE = "fipsEnabled";
const _fEQS = "flexibleEnaQueuesSupport";
const _fF = "fileFormat";
const _fFCS = "failedFleetCancellationSet";
const _fFi = "findingsFound";
const _fI = "findingId";
const _fIA = "fpgaImageAttribute";
const _fIAS = "filterInArnSet";
const _fIGI = "fpgaImageGlobalId";
const _fII = "fpgaImageId";
const _fIS = "fleetInstanceSet";
const _fISp = "fpgaImageSet";
const _fIl = "fleetId";
const _fIp = "fpgaInfo";
const _fLI = "flowLogId";
const _fLIS = "flowLogIdSet";
const _fLISa = "fastLaunchImageSet";
const _fLS = "flowLogSet";
const _fLSl = "flowLogStatus";
const _fM = "failureMessage";
const _fOAS = "filterOutArnSet";
const _fODC = "fulfilledOnDemandCapacity";
const _fP = "fromPort";
const _fPCS = "forwardPathComponentSet";
const _fPi = "filesystemProtections";
const _fPix = "fixedPrice";
const _fQPDS = "failedQueuedPurchaseDeletionSet";
const _fR = "failureReason";
const _fRa = "fastRestored";
const _fS = "fleetSet";
const _fSR = "firewallStatelessRule";
const _fSRS = "fastSnapshotRestoreSet";
const _fSRSES = "fastSnapshotRestoreStateErrorSet";
const _fSRi = "firewallStatefulRule";
const _fSSIB = "fullSnapshotSizeInBytes";
const _fSST = "firstSlotStartTime";
const _fSl = "fleetState";
const _fTE = "freeTierEligible";
const _fa = "fault";
const _fp = "fpgas";
const _fr = "from";
const _fre = "frequency";
const _g = "group";
const _gA = "groupArn";
const _gAS = "gatewayAssociationState";
const _gD = "groupDescription";
const _gI = "gatewayId";
const _gIA = "groupIpAddress";
const _gIp = "gpuInfo";
const _gIr = "groupId";
const _gK = "greKey";
const _gLBAS = "gatewayLoadBalancerArnSet";
const _gLBEI = "gatewayLoadBalancerEndpointId";
const _gLN = "groupLongName";
const _gM = "groupMember";
const _gN = "groupName";
const _gOI = "groupOwnerId";
const _gS = "groupSet";
const _gSr = "groupSource";
const _gp = "gpus";
const _gr = "groups";
const _h = "hypervisor";
const _hCP = "hiveCompatiblePartitions";
const _hE = "httpEndpoint";
const _hI = "hostId";
const _hIS = "hostIdSet";
const _hM = "hostMaintenance";
const _hO = "hibernationOptions";
const _hP = "hostProperties";
const _hPI = "httpProtocolIpv6";
const _hPRHL = "httpPutResponseHopLimit";
const _hPo = "hourlyPrice";
const _hR = "hostRecovery";
const _hRGA = "hostResourceGroupArn";
const _hRI = "hostReservationId";
const _hRS = "historyRecordSet";
const _hRSo = "hostReservationSet";
const _hS = "hostSet";
const _hSi = "hibernationSupported";
const _hT = "httpTokens";
const _hTo = "hostnameType";
const _hZI = "hostedZoneId";
const _i = "item";
const _iA = "interfaceAssociation";
const _iAA = "ipv6AddressAttribute";
const _iAC = "ipv6AddressCount";
const _iAI = "inferenceAcceleratorInfo";
const _iAPI = "ipv4AddressesPerInterface";
const _iAPIp = "ipv6AddressesPerInterface";
const _iAS = "interfaceAssociationSet";
const _iASp = "ipv6AddressesSet";
const _iAT = "ipAddressType";
const _iATOI = "includeAllTagsOfInstance";
const _iAm = "imageAllowed";
const _iAp = "ipAddress";
const _iApa = "ipamArn";
const _iApv = "ipv6Address";
const _iB = "ingressBytes";
const _iBPAS = "imageBlockPublicAccessState";
const _iC = "instanceCount";
const _iCAS = "ipv6CidrAssociationSet";
const _iCB = "ipv6CidrBlock";
const _iCBA = "ipv6CidrBlockAssociation";
const _iCBAS = "ipv6CidrBlockAssociationSet";
const _iCBS = "ipv6CidrBlockState";
const _iCBSp = "ipv6CidrBlockSet";
const _iCBn = "insideCidrBlocks";
const _iCE = "instanceConnectEndpoint";
const _iCEA = "instanceConnectEndpointArn";
const _iCEI = "instanceConnectEndpointId";
const _iCES = "instanceConnectEndpointSet";
const _iCS = "imageCriterionSet";
const _iCSS = "instanceCreditSpecificationSet";
const _iCn = "instanceCounts";
const _iCp = "ipv6Cidr";
const _iD = "imageData";
const _iDAS = "ipamDiscoveredAccountSet";
const _iDPAS = "ipamDiscoveredPublicAddressSet";
const _iDRCS = "ipamDiscoveredResourceCidrSet";
const _iDs = "isDefault";
const _iE = "instanceExport";
const _iEI = "instanceEventId";
const _iERVT = "ipamExternalResourceVerificationToken";
const _iERVTA = "ipamExternalResourceVerificationTokenArn";
const _iERVTI = "ipamExternalResourceVerificationTokenId";
const _iERVTS = "ipamExternalResourceVerificationTokenSet";
const _iEW = "instanceEventWindow";
const _iEWI = "instanceEventWindowId";
const _iEWS = "instanceEventWindowState";
const _iEWSn = "instanceEventWindowSet";
const _iEs = "isEgress";
const _iF = "instanceFamily";
const _iFCS = "instanceFamilyCreditSpecification";
const _iFR = "iamFleetRole";
const _iFRS = "ingressFilterRuleSet";
const _iG = "internetGateway";
const _iGBM = "internetGatewayBlockMode";
const _iGEM = "internetGatewayExclusionMode";
const _iGI = "internetGatewayId";
const _iGS = "internetGatewaySet";
const _iGSn = "instanceGenerationSet";
const _iH = "instanceHealth";
const _iHn = "inboundHeader";
const _iI = "instanceId";
const _iIB = "instanceInterruptionBehavior";
const _iIMS = "instanceImageMetadataSet";
const _iIP = "iamInstanceProfile";
const _iIPA = "iamInstanceProfileAssociation";
const _iIPAS = "iamInstanceProfileAssociationSet";
const _iIS = "instanceIdSet";
const _iISB = "instanceInitiatedShutdownBehavior";
const _iITS = "importImageTaskSet";
const _iIm = "importInstance";
const _iIma = "imageId";
const _iIn = "instanceIds";
const _iIp = "ipamId";
const _iL = "imageLocation";
const _iLn = "instanceLifecycle";
const _iM = "imageMetadata";
const _iMC = "instanceMatchCriteria";
const _iMO = "instanceMetadataOptions";
const _iMOn = "instanceMarketOptions";
const _iMT = "instanceMetadataTags";
const _iMU = "importManifestUrl";
const _iN = "ipv6Native";
const _iNS = "imageNameSet";
const _iOA = "imageOwnerAlias";
const _iOI = "imageOwnerId";
const _iOIn = "instanceOwnerId";
const _iOIp = "ipOwnerId";
const _iOS = "instanceOwningService";
const _iP = "instancePort";
const _iPA = "ipamPoolAllocation";
const _iPAI = "ipamPoolAllocationId";
const _iPAS = "ipamPoolAllocationSet";
const _iPAp = "ipamPoolArn";
const _iPC = "ipamPoolCidr";
const _iPCI = "ipamPoolCidrId";
const _iPCS = "ipamPoolCidrSet";
const _iPCp = "ipv4PrefixCount";
const _iPCpv = "ipv6PrefixCount";
const _iPE = "ipPermissionsEgress";
const _iPI = "isPrimaryIpv6";
const _iPIp = "ipamPoolId";
const _iPR = "isPermanentRestore";
const _iPS = "ipamPoolSet";
const _iPSm = "imageProviderSet";
const _iPSp = "ipv6PoolSet";
const _iPSpr = "ipPrefixSet";
const _iPSpv = "ipv4PrefixSet";
const _iPSpvr = "ipv6PrefixSet";
const _iPTUC = "instancePoolsToUseCount";
const _iPn = "instancePlatform";
const _iPng = "ingressPackets";
const _iPnt = "interfacePermission";
const _iPnte = "interfaceProtocol";
const _iPo = "ioPerformance";
const _iPp = "ipamPool";
const _iPpe = "ipPermissions";
const _iPpr = "ipProtocol";
const _iPpv = "ipv4Prefix";
const _iPpvo = "ipv6Pool";
const _iPpvr = "ipv6Prefix";
const _iPs = "isPublic";
const _iPsr = "isPrimary";
const _iR = "instanceRequirements";
const _iRC = "ipamResourceCidr";
const _iRCS = "ipamResourceCidrSet";
const _iRD = "ipamResourceDiscovery";
const _iRDA = "ipamResourceDiscoveryAssociation";
const _iRDAA = "ipamResourceDiscoveryAssociationArn";
const _iRDAI = "ipamResourceDiscoveryAssociationId";
const _iRDAS = "ipamResourceDiscoveryAssociationSet";
const _iRDAp = "ipamResourceDiscoveryArn";
const _iRDI = "ipamResourceDiscoveryId";
const _iRDR = "ipamResourceDiscoveryRegion";
const _iRDS = "ipamResourceDiscoverySet";
const _iRS = "imageReferenceSet";
const _iRT = "ingressRouteTable";
const _iRp = "ipamRegion";
const _iRpa = "ipRanges";
const _iRpv = "ipv6Ranges";
const _iS = "interconnectStatus";
const _iSA = "ipamScopeArn";
const _iSD = "initializationStatusDetails";
const _iSI = "instanceStorageInfo";
const _iSIp = "ipamScopeId";
const _iSS = "instanceStatusSet";
const _iSSn = "instanceStorageSupported";
const _iSSp = "ipamScopeSet";
const _iST = "ipamScopeType";
const _iSTS = "importSnapshotTaskSet";
const _iSg = "igmpv2Support";
const _iSm = "imagesSet";
const _iSma = "imageState";
const _iSmag = "imageSet";
const _iSmd = "imdsSupport";
const _iSmp = "impairedSince";
const _iSn = "instancesSet";
const _iSns = "instanceSet";
const _iSnst = "instanceState";
const _iSnsta = "instanceStatus";
const _iSp = "ipamScope";
const _iSpa = "ipamSet";
const _iSpo = "ipSource";
const _iSpv = "ipv6Supported";
const _iSpvu = "ipv6Support";
const _iT = "instanceType";
const _iTA = "instanceTagAttribute";
const _iTC = "icmpTypeCode";
const _iTCn = "includeTrustContext";
const _iTI = "importTaskId";
const _iTKS = "instanceTagKeySet";
const _iTOS = "instanceTypeOfferingSet";
const _iTS = "instanceTypeSet";
const _iTSS = "instanceTypeSpecificationSet";
const _iTm = "imageType";
const _iTn = "instanceTypes";
const _iTni = "initializationType";
const _iTns = "instanceTenancy";
const _iTnt = "interfaceType";
const _iU = "ipUsage";
const _iURES = "imageUsageReportEntrySet";
const _iURS = "imageUsageReportSet";
const _iUS = "instanceUsageSet";
const _iV = "ikeVersion";
const _iVE = "isValidExchange";
const _iVS = "ikeVersionSet";
const _iVm = "importVolume";
const _id = "id";
const _im = "image";
const _in = "instance";
const _ins = "instances";
const _int = "interval";
const _io = "iops";
const _ip = "ipam";
const _ipv = "ipv4";
const _is = "issuer";
const _k = "key";
const _kDF = "kinesisDataFirehose";
const _kF = "keyFormat";
const _kFe = "keyFingerprint";
const _kI = "kernelId";
const _kKA = "kmsKeyArn";
const _kKI = "kmsKeyId";
const _kM = "keyMaterial";
const _kN = "keyName";
const _kPI = "keyPairId";
const _kS = "keySet";
const _kSe = "kextSigning";
const _kT = "keyType";
const _kV = "keyValue";
const _ke = "kernel";
const _key = "keyword";
const _l = "lifecycle";
const _lA = "localAddress";
const _lADT = "lastAttemptedDiscoveryTime";
const _lAZ = "launchedAvailabilityZone";
const _lAZI = "launchedAvailabilityZoneId";
const _lAa = "lastAddress";
const _lBA = "loadBalancerArn";
const _lBAE = "localBgpAsnExtended";
const _lBAo = "localBgpAsn";
const _lBC = "loadBalancersConfig";
const _lBLP = "loadBalancerListenerPort";
const _lBO = "loadBalancerOptions";
const _lBP = "loadBalancerPort";
const _lBS = "loadBalancerSet";
const _lBT = "loadBalancerTarget";
const _lBTG = "loadBalancerTargetGroup";
const _lBTGS = "loadBalancerTargetGroupSet";
const _lBTP = "loadBalancerTargetPort";
const _lC = "loggingConfiguration";
const _lCA = "licenseConfigurationArn";
const _lCO = "lockCreatedOn";
const _lCS = "loggingConfigurationSet";
const _lD = "logDestination";
const _lDST = "lockDurationStartTime";
const _lDT = "logDestinationType";
const _lDo = "lockDuration";
const _lE = "logEnabled";
const _lEO = "lockExpiresOn";
const _lET = "lastEvaluatedTime";
const _lEa = "lastError";
const _lF = "logFormat";
const _lFA = "lambdaFunctionArn";
const _lG = "launchGroup";
const _lGA = "logGroupArn";
const _lGI = "localGatewayId";
const _lGN = "logGroupName";
const _lGRT = "localGatewayRouteTable";
const _lGRTA = "localGatewayRouteTableArn";
const _lGRTI = "localGatewayRouteTableId";
const _lGRTS = "localGatewayRouteTableSet";
const _lGRTVA = "localGatewayRouteTableVpcAssociation";
const _lGRTVAI = "localGatewayRouteTableVpcAssociationId";
const _lGRTVAS = "localGatewayRouteTableVpcAssociationSet";
const _lGRTVIGA = "localGatewayRouteTableVirtualInterfaceGroupAssociation";
const _lGRTVIGAI = "localGatewayRouteTableVirtualInterfaceGroupAssociationId";
const _lGRTVIGAS = "localGatewayRouteTableVirtualInterfaceGroupAssociationSet";
const _lGS = "localGatewaySet";
const _lGVI = "localGatewayVirtualInterface";
const _lGVIA = "localGatewayVirtualInterfaceArn";
const _lGVIG = "localGatewayVirtualInterfaceGroup";
const _lGVIGA = "localGatewayVirtualInterfaceGroupArn";
const _lGVIGI = "localGatewayVirtualInterfaceGroupId";
const _lGVIGS = "localGatewayVirtualInterfaceGroupSet";
const _lGVII = "localGatewayVirtualInterfaceId";
const _lGVIIS = "localGatewayVirtualInterfaceIdSet";
const _lGVIS = "localGatewayVirtualInterfaceSet";
const _lGo = "logGroup";
const _lINC = "localIpv4NetworkCidr";
const _lINCo = "localIpv6NetworkCidr";
const _lLT = "lastLaunchedTime";
const _lMA = "lastMaintenanceApplied";
const _lO = "logOptions";
const _lOF = "logOutputFormat";
const _lP = "loadPermissions";
const _lPa = "launchPermission";
const _lS = "licenseSpecifications";
const _lSC = "lastStatusChange";
const _lSDT = "lastSuccessfulDiscoveryTime";
const _lSTS = "localStorageTypeSet";
const _lSa = "launchSpecifications";
const _lSau = "launchSpecification";
const _lSi = "licenseSet";
const _lSo = "localStorage";
const _lSoc = "lockState";
const _lT = "launchTemplate";
const _lTAO = "launchTemplateAndOverrides";
const _lTC = "launchTemplateConfigs";
const _lTD = "launchTemplateData";
const _lTI = "launchTemplateId";
const _lTN = "launchTemplateName";
const _lTOS = "lastTieringOperationStatus";
const _lTOSD = "lastTieringOperationStatusDetail";
const _lTP = "lastTieringProgress";
const _lTS = "launchTemplateSpecification";
const _lTST = "lastTieringStartTime";
const _lTV = "launchTemplateVersion";
const _lTVS = "launchTemplateVersionSet";
const _lTa = "launchTemplates";
const _lTau = "launchTime";
const _lTi = "licenseType";
const _lTo = "locationType";
const _lUT = "lastUpdateTime";
const _lUTa = "lastUpdatedTime";
const _lUTas = "lastUpdateTimestamp";
const _lV = "logVersion";
const _lVN = "latestVersionNumber";
const _lo = "location";
const _loc = "locale";
const _m = "min";
const _mA = "mutualAuthentication";
const _mAAA = "maintenanceAutoAppliedAfter";
const _mAE = "multiAttachEnabled";
const _mAI = "maxAggregationInterval";
const _mAIe = "mediaAcceleratorInfo";
const _mASS = "movingAddressStatusSet";
const _mAa = "macAddress";
const _mAe = "meteredAccount";
const _mB = "managedBy";
const _mBIM = "maximumBandwidthInMbps";
const _mC = "missingComponent";
const _mCOIOL = "mapCustomerOwnedIpOnLaunch";
const _mD = "maintenanceDetails";
const _mDA = "multicastDomainAssociations";
const _mDK = "metaDataKey";
const _mDSC = "maximumDaysSinceCreated";
const _mDSD = "maximumDaysSinceDeprecated";
const _mDV = "metaDataValue";
const _mDe = "metaData";
const _mE = "maxEntries";
const _mEA = "maximumEbsAttachments";
const _mEI = "maximumEfaInterfaces";
const _mEM = "managedExceptionMessage";
const _mEQC = "maximumEnaQueueCount";
const _mEQCPI = "maximumEnaQueueCountPerInterface";
const _mFV = "mostFrequentValue";
const _mG = "multicastGroups";
const _mGBPVC = "memoryGiBPerVCpu";
const _mHS = "macHostSet";
const _mI = "maximumIops";
const _mIe = "memoryInfo";
const _mMB = "memoryMiB";
const _mMT = "macModificationTask";
const _mMTI = "macModificationTaskId";
const _mMTS = "macModificationTaskSet";
const _mNC = "maximumNetworkCards";
const _mNI = "maximumNetworkInterfaces";
const _mO = "metadataOptions";
const _mOSLRG = "memberOfServiceLinkedResourceGroup";
const _mOSLSVS = "macOSLatestSupportedVersionSet";
const _mOa = "maintenanceOptions";
const _mP = "maxPrice";
const _mPCS = "marketplaceProductCodeSet";
const _mPIOL = "mapPublicIpOnLaunch";
const _mPL = "maxParallelLaunches";
const _mPS = "metricPointSet";
const _mPSa = "matchPathSet";
const _mR = "maxResults";
const _mRS = "modificationResultSet";
const _mS = "messageSet";
const _mSIPC = "macSystemIntegrityProtectionConfig";
const _mSPAPOOODP = "maxSpotPriceAsPercentageOfOptimalOnDemandPrice";
const _mSa = "managementState";
const _mSai = "maintenanceStrategies";
const _mSo = "moveStatus";
const _mSod = "modificationState";
const _mSu = "multicastSupport";
const _mT = "marketType";
const _mTC = "minTargetCapacity";
const _mTDID = "maxTermDurationInDays";
const _mTDIDi = "minTermDurationInDays";
const _mTIMB = "maximumThroughputInMBps";
const _mTP = "maxTotalPrice";
const _mTe = "memberType";
const _mVE = "managesVpcEndpoints";
const _ma = "max";
const _mai = "main";
const _man = "manufacturer";
const _mana = "managed";
const _mar = "marketplace";
const _me = "message";
const _med = "med";
const _mem = "member";
const _met = "metric";
const _mo = "monitoring";
const _mod = "mode";
const _n = "name";
const _nA = "networkAcl";
const _nAAI = "networkAclAssociationId";
const _nAI = "networkAclId";
const _nAIe = "newAssociationId";
const _nAOO = "nativeApplicationOidcOptions";
const _nAS = "networkAclSet";
const _nAo = "notAfter";
const _nB = "notBefore";
const _nBD = "notBeforeDeadline";
const _nBG = "networkBorderGroup";
const _nBGe = "networkBandwidthGbps";
const _nC = "networkCards";
const _nCI = "networkCardIndex";
const _nD = "noDevice";
const _nDe = "neuronDevices";
const _nES = "nitroEnclavesSupport";
const _nG = "natGateway";
const _nGAS = "natGatewayAddressSet";
const _nGI = "natGatewayId";
const _nGS = "natGatewaySet";
const _nHI = "nextHopIp";
const _nI = "networkId";
const _nIA = "networkInsightsAnalysis";
const _nIAA = "networkInsightsAnalysisArn";
const _nIAI = "networkInsightsAnalysisId";
const _nIAS = "networkInsightsAccessScope";
const _nIASA = "networkInsightsAccessScopeArn";
const _nIASAA = "networkInsightsAccessScopeAnalysisArn";
const _nIASAI = "networkInsightsAccessScopeAnalysisId";
const _nIASAS = "networkInsightsAccessScopeAnalysisSet";
const _nIASAe = "networkInsightsAccessScopeAnalysis";
const _nIASC = "networkInsightsAccessScopeContent";
const _nIASI = "networkInsightsAccessScopeId";
const _nIASS = "networkInsightsAccessScopeSet";
const _nIASe = "networkInsightsAnalysisSet";
const _nIASet = "networkInterfaceAttachmentStatus";
const _nIC = "networkInterfaceCount";
const _nID = "networkInterfaceDescription";
const _nII = "networkInterfaceId";
const _nIIS = "networkInterfaceIdSet";
const _nIO = "networkInterfaceOptions";
const _nIOI = "networkInterfaceOwnerId";
const _nIP = "networkInsightsPath";
const _nIPA = "networkInsightsPathArn";
const _nIPI = "networkInsightsPathId";
const _nIPIe = "networkInterfacePermissionId";
const _nIPS = "networkInsightsPathSet";
const _nIPe = "networkInterfacePermissions";
const _nIS = "networkInterfaceSet";
const _nIe = "networkInterface";
const _nIet = "networkInfo";
const _nIeu = "neuronInfo";
const _nL = "netmaskLength";
const _nLBA = "networkLoadBalancerArn";
const _nLBAS = "networkLoadBalancerArnSet";
const _nNS = "networkNodeSet";
const _nOA = "numberOfAccounts";
const _nOFA = "numberOfFailedAccounts";
const _nOMA = "numberOfMatchedAccounts";
const _nOUA = "numberOfUnmatchedAccounts";
const _nP = "nvramProtections";
const _nPF = "networkPathFound";
const _nPO = "networkPerformanceOptions";
const _nPe = "networkPerformance";
const _nPet = "networkPlatform";
const _nS = "nvmeSupport";
const _nSS = "networkServiceSet";
const _nSST = "nextSlotStartTime";
const _nSa = "nameserverSet";
const _nT = "networkType";
const _nTI = "nitroTpmInfo";
const _nTS = "nitroTpmSupport";
const _nTe = "nextToken";
const _o = "origin";
const _oA = "outpostArn";
const _oAr = "organizationArn";
const _oAw = "ownerAlias";
const _oC = "offeringClass";
const _oDAS = "onDemandAllocationStrategy";
const _oDFC = "onDemandFulfilledCapacity";
const _oDMPPOLP = "onDemandMaxPricePercentageOverLowestPrice";
const _oDMTP = "onDemandMaxTotalPrice";
const _oDO = "onDemandOptions";
const _oDS = "occurrenceDaySet";
const _oDTC = "onDemandTargetCapacity";
const _oEP = "organizationsEntityPath";
const _oH = "outboundHeader";
const _oI = "ownerId";
const _oIA = "outsideIpAddress";
const _oIAT = "outsideIpAddressType";
const _oIS = "optInStatus";
const _oIf = "offeringId";
const _oIr = "originalIops";
const _oIu = "outpostId";
const _oK = "objectKey";
const _oLI = "outpostLagId";
const _oLS = "outpostLagSet";
const _oMAE = "originalMultiAttachEnabled";
const _oN = "optionName";
const _oNA = "odbNetworkArn";
const _oO = "oidcOptions";
const _oRIWEA = "outputReservedInstancesWillExpireAt";
const _oRS = "operatingRegionSet";
const _oRTE = "occurrenceRelativeToEnd";
const _oS = "offeringSet";
const _oST = "oldestSampleTime";
const _oSr = "originalSize";
const _oSv = "overlapStatus";
const _oT = "optimizingTime";
const _oTf = "offeringType";
const _oTr = "originalThroughput";
const _oU = "occurrenceUnit";
const _oUA = "organizationalUnitArn";
const _oUES = "organizationalUnitExclusionSet";
const _oUI = "organizationalUnitId";
const _oVCS = "openVpnConfigurationSet";
const _oVS = "optionValueSet";
const _oVT = "originalVolumeType";
const _op = "operator";
const _opt = "options";
const _ou = "output";
const _ov = "overrides";
const _ow = "owner";
const _p = "principal";
const _pA = "poolArn";
const _pAI = "peeringAttachmentId";
const _pAR = "poolAddressRange";
const _pARS = "poolAddressRangeSet";
const _pAe = "peerAddress";
const _pAee = "peerAsn";
const _pAu = "publiclyAdvertisable";
const _pB = "provisionedBandwidth";
const _pBA = "peerBgpAsn";
const _pBAE = "peerBgpAsnExtended";
const _pBIG = "peakBandwidthInGbps";
const _pC = "productCodes";
const _pCB = "poolCidrBlock";
const _pCBS = "poolCidrBlockSet";
const _pCI = "preserveClientIp";
const _pCNI = "peerCoreNetworkId";
const _pCS = "poolCidrSet";
const _pCSS = "postureComplianceStatusSet";
const _pCa = "partitionCount";
const _pCo = "poolCount";
const _pCr = "productCode";
const _pD = "passwordData";
const _pDE = "privateDnsEnabled";
const _pDEr = "privateDnsEntry";
const _pDHG = "phase1DHGroup";
const _pDHGNS = "phase1DHGroupNumberSet";
const _pDHGNSh = "phase2DHGroupNumberSet";
const _pDHGh = "phase2DHGroup";
const _pDN = "publicDnsNames";
const _pDNC = "privateDnsNameConfiguration";
const _pDNO = "privateDnsNameOptions";
const _pDNOOL = "privateDnsNameOptionsOnLaunch";
const _pDNS = "privateDnsNameSet";
const _pDNVS = "privateDnsNameVerificationState";
const _pDNr = "privateDnsName";
const _pDNu = "publicDnsName";
const _pDOFIRE = "privateDnsOnlyForInboundResolverEndpoint";
const _pDRTI = "propagationDefaultRouteTableId";
const _pDS = "pricingDetailsSet";
const _pDSDN = "publicDualStackDnsName";
const _pDSI = "publicDefaultScopeId";
const _pDSIr = "privateDefaultScopeId";
const _pDa = "paymentDue";
const _pDl = "platformDetails";
const _pDo = "policyDocument";
const _pDoo = "poolDepth";
const _pDr = "productDescription";
const _pE = "policyEnabled";
const _pEA = "phase1EncryptionAlgorithm";
const _pEAS = "phase1EncryptionAlgorithmSet";
const _pEASh = "phase2EncryptionAlgorithmSet";
const _pEAh = "phase2EncryptionAlgorithm";
const _pEk = "pkceEnabled";
const _pF = "packetField";
const _pFS = "previousFleetState";
const _pG = "placementGroup";
const _pGA = "placementGroupArn";
const _pGI = "placementGroupInfo";
const _pGS = "placementGroupSet";
const _pHP = "perHourPartition";
const _pHS = "packetHeaderStatement";
const _pI = "publicIp";
const _pIA = "phase1IntegrityAlgorithm";
const _pIAS = "privateIpAddressesSet";
const _pIASh = "phase1IntegrityAlgorithmSet";
const _pIASha = "phase2IntegrityAlgorithmSet";
const _pIAh = "phase2IntegrityAlgorithm";
const _pIAr = "privateIpAddress";
const _pIDN = "publicIpv6DnsName";
const _pIDNO = "publicIpDnsNameOptions";
const _pIDNu = "publicIpv4DnsName";
const _pIP = "publicIpv4Pool";
const _pIPI = "publicIpv4PoolId";
const _pIPS = "publicIpv4PoolSet";
const _pIS = "publicIpSource";
const _pIc = "pciId";
const _pIo = "poolId";
const _pIr = "processorInfo";
const _pIri = "primaryIpv6";
const _pIriv = "privateIp";
const _pK = "publicKey";
const _pL = "prefixList";
const _pLA = "prefixListArn";
const _pLAS = "prefixListAssociationSet";
const _pLD = "peerLivenessDetection";
const _pLI = "prefixListId";
const _pLIr = "prefixListIds";
const _pLN = "prefixListName";
const _pLOI = "prefixListOwnerId";
const _pLS = "prefixListSet";
const _pLSh = "phase1LifetimeSeconds";
const _pLSha = "phase2LifetimeSeconds";
const _pLa = "packetLength";
const _pM = "pendingMaintenance";
const _pN = "partitionNumber";
const _pO = "paymentOption";
const _pOe = "peeringOptions";
const _pP = "progressPercentage";
const _pR = "ptrRecord";
const _pRD = "persistRoutesDuration";
const _pRN = "policyRuleNumber";
const _pRNo = "policyReferenceName";
const _pRS = "portRangeSet";
const _pRSe = "persistRoutesState";
const _pRU = "ptrRecordUpdate";
const _pRa = "payerResponsibility";
const _pRo = "portRange";
const _pRol = "policyRule";
const _pS = "provisioningStatus";
const _pSET = "previousSlotEndTime";
const _pSFRS = "previousSpotFleetRequestState";
const _pSK = "preSharedKey";
const _pSKA = "preSharedKeyArn";
const _pSKE = "publicSigningKeyEndpoint";
const _pSKU = "publicSigningKeyUrl";
const _pSR = "provisioningStatusReason";
const _pSe = "permissionState";
const _pSee = "peeringStatus";
const _pSh = "phcSupport";
const _pSr = "previousState";
const _pSre = "previousStatus";
const _pSri = "principalSet";
const _pSric = "priceSchedules";
const _pSro = "protocolSet";
const _pT = "principalType";
const _pTGI = "peerTransitGatewayId";
const _pTr = "provisionTime";
const _pTu = "purchaseToken";
const _pVI = "primaryVpcId";
const _pVS = "propagatingVgwSet";
const _pZI = "parentZoneId";
const _pZN = "parentZoneName";
const _pe = "period";
const _per = "permission";
const _pl = "platform";
const _pla = "placement";
const _po = "port";
const _pr = "protocol";
const _pre = "prefix";
const _pri = "priority";
const _pric = "price";
const _prim = "primary";
const _pro = "progress";
const _prop = "propagation";
const _prov = "provisioned";
const _pu = "public";
const _pur = "purchase";
const _r = "return";
const _rA = "ruleAction";
const _rAE = "remoteAccessEnabled";
const _rAe = "resourceArn";
const _rB = "requestedBy";
const _rBET = "recycleBinEnterTime";
const _rBETe = "recycleBinExitTime";
const _rC = "returnCode";
const _rCA = "resourceConfigurationArn";
const _rCGA = "resourceConfigurationGroupArn";
const _rCS = "resourceComplianceStatus";
const _rCT = "reportCreationTime";
const _rCe = "resourceCidr";
const _rCec = "recurringCharges";
const _rD = "restoreDuration";
const _rDAC = "resourceDiscoveryAssociationCount";
const _rDCA = "rdsDbClusterArn";
const _rDI = "ramDiskId";
const _rDIA = "rdsDbInstanceArn";
const _rDN = "rootDeviceName";
const _rDPA = "rdsDbProxyArn";
const _rDS = "resourceDiscoveryStatus";
const _rDT = "rootDeviceType";
const _rE = "responseError";
const _rET = "restoreExpiryTime";
const _rEd = "rdsEndpoint";
const _rEe = "regionEndpoint";
const _rEes = "resourceExclusions";
const _rFP = "rekeyFuzzPercentage";
const _rGA = "ruleGroupArn";
const _rGI = "referencedGroupId";
const _rGIe = "referencedGroupInfo";
const _rGROPS = "ruleGroupRuleOptionsPairSet";
const _rGT = "ruleGroupType";
const _rGTPS = "ruleGroupTypePairSet";
const _rHS = "requireHibernateSupport";
const _rI = "reportId";
const _rIDS = "routeInstallationDetailSet";
const _rII = "reservedInstancesId";
const _rIIe = "reservedInstanceId";
const _rILI = "reservedInstancesListingId";
const _rILS = "reservedInstancesListingsSet";
const _rIMI = "reservedInstancesModificationId";
const _rIMS = "reservedInstancesModificationsSet";
const _rINC = "remoteIpv4NetworkCidr";
const _rINCe = "remoteIpv6NetworkCidr";
const _rIOI = "reservedInstancesOfferingId";
const _rIOS = "reservedInstancesOfferingsSet";
const _rIS = "reservedInstancesSet";
const _rISR = "routeInstallationStatusReason";
const _rISo = "routeInstallationStatus";
const _rIVR = "reservedInstanceValueRollup";
const _rIVS = "reservedInstanceValueSet";
const _rIa = "ramdiskId";
const _rIe = "regionInfo";
const _rIeq = "requesterId";
const _rIes = "resourceId";
const _rIese = "reservationId";
const _rM = "rebootMigration";
const _rMGM = "registeredMulticastGroupMembers";
const _rMGS = "registeredMulticastGroupSources";
const _rMS = "rebootMigrationSupport";
const _rMTS = "rekeyMarginTimeSeconds";
const _rMe = "requesterManaged";
const _rN = "ruleNumber";
const _rNII = "registeredNetworkInterfaceIds";
const _rNe = "regionName";
const _rNes = "resourceName";
const _rNo = "roleName";
const _rO = "resourceOwner";
const _rOI = "resourceOwnerId";
const _rOS = "ruleOptionSet";
const _rOSe = "resourceOverlapStatus";
const _rOd = "rdsOptions";
const _rOo = "routeOrigin";
const _rPCO = "requesterPeeringConnectionOptions";
const _rPCS = "returnPathComponentSet";
const _rR = "resourceRegion";
const _rRVT = "replaceRootVolumeTask";
const _rRVTI = "replaceRootVolumeTaskId";
const _rRVTS = "replaceRootVolumeTaskSet";
const _rS = "referenceSet";
const _rSA = "routeServerAssociation";
const _rSAS = "routeServerAssociationSet";
const _rSE = "routeServerEndpoint";
const _rSEI = "routeServerEndpointId";
const _rSES = "routeServerEndpointSet";
const _rSGRS = "revokedSecurityGroupRuleSet";
const _rSI = "routeServerId";
const _rSP = "routeServerPeer";
const _rSPI = "routeServerPeerId";
const _rSPS = "routeServerPeerSet";
const _rSPSo = "routeServerPropagationSet";
const _rSPo = "routeServerPropagation";
const _rSS = "regionalSummarySet";
const _rSSo = "routeServerSet";
const _rST = "restoreStartTime";
const _rSe = "reportSet";
const _rSep = "replacementStrategy";
const _rSes = "reservationSet";
const _rSeso = "resourceStatement";
const _rSesou = "resourceSet";
const _rSo = "routeServer";
const _rSou = "routeSet";
const _rSout = "routeStatus";
const _rT = "reservationType";
const _rTAI = "routeTableAssociationId";
const _rTI = "routeTableId";
const _rTIS = "routeTableIdSet";
const _rTIe = "requesterTgwInfo";
const _rTOS = "resourceTypeOptionSet";
const _rTR = "routeTableRoute";
const _rTS = "routeTableSet";
const _rTSe = "resourceTypeSet";
const _rTSes = "resourceTagSet";
const _rTV = "remainingTotalValue";
const _rTe = "resourceType";
const _rTel = "releaseTime";
const _rTeq = "requestTime";
const _rTo = "routeTable";
const _rUI = "replaceUnhealthyInstances";
const _rUV = "remainingUpfrontValue";
const _rV = "returnValue";
const _rVI = "referencingVpcId";
const _rVIe = "requesterVpcInfo";
const _rVe = "reservationValue";
const _rWS = "replayWindowSize";
const _ra = "ramdisk";
const _re = "region";
const _rea = "reason";
const _rec = "recurrence";
const _req = "requested";
const _res = "result";
const _reso = "resource";
const _ro = "route";
const _rou = "routes";
const _s = "source";
const _sA = "sourceArn";
const _sAS = "sourceAddressSet";
const _sASu = "suggestedAccountSet";
const _sAZ = "singleAvailabilityZone";
const _sAo = "sourceAddress";
const _sAt = "startupAction";
const _sAu = "supportedArchitectures";
const _sAub = "subnetArn";
const _sB = "s3Bucket";
const _sBM = "supportedBootModes";
const _sC = "serviceConfiguration";
const _sCA = "serverCertificateArn";
const _sCAE = "serialConsoleAccessEnabled";
const _sCB = "sourceCidrBlock";
const _sCR = "sourceCapacityReservation";
const _sCRI = "subnetCidrReservationId";
const _sCRu = "subnetCidrReservation";
const _sCS = "serviceConfigurationSet";
const _sCSIG = "sustainedClockSpeedInGhz";
const _sCc = "scopeCount";
const _sCn = "snapshotConfiguration";
const _sD = "startDate";
const _sDC = "sourceDestCheck";
const _sDIH = "slotDurationInHours";
const _sDLTVS = "successfullyDeletedLaunchTemplateVersionSet";
const _sDS = "spotDatafeedSubscription";
const _sDSe = "serviceDetailSet";
const _sDSn = "snapshotDetailSet";
const _sDp = "spreadDomain";
const _sDu = "subDomain";
const _sEL = "s3ExportLocation";
const _sET = "sampledEndTime";
const _sF = "supportedFeatures";
const _sFCS = "successfulFleetCancellationSet";
const _sFDS = "successfulFleetDeletionSet";
const _sFRC = "spotFleetRequestConfig";
const _sFRCS = "spotFleetRequestConfigSet";
const _sFRI = "spotFleetRequestId";
const _sFRS = "successfulFleetRequestSet";
const _sFRSp = "spotFleetRequestState";
const _sG = "securityGroup";
const _sGA = "securityGroupArn";
const _sGFVS = "securityGroupForVpcSet";
const _sGI = "securityGroupId";
const _sGIS = "securityGroupIdSet";
const _sGIe = "securityGroupIds";
const _sGIec = "securityGroupInfo";
const _sGR = "securityGroupRule";
const _sGRA = "securityGroupRuleArn";
const _sGRI = "securityGroupRuleId";
const _sGRS = "securityGroupRuleSet";
const _sGRSe = "securityGroupReferenceSet";
const _sGRSec = "securityGroupReferencingSupport";
const _sGS = "securityGroupSet";
const _sGVAS = "securityGroupVpcAssociationSet";
const _sGe = "securityGroups";
const _sH = "startHour";
const _sI = "serviceId";
const _sIAS = "scheduledInstanceAvailabilitySet";
const _sIATS = "supportedIpAddressTypeSet";
const _sICRS = "subnetIpv4CidrReservationSet";
const _sICRSu = "subnetIpv6CidrReservationSet";
const _sICSS = "successfulInstanceCreditSpecificationSet";
const _sIGB = "sizeInGB";
const _sII = "sourceInstanceId";
const _sIIc = "scheduledInstanceId";
const _sIIo = "sourceImageId";
const _sIMB = "sizeInMiB";
const _sIP = "staleIpPermissions";
const _sIPE = "staleIpPermissionsEgress";
const _sIPI = "sourceIpamPoolId";
const _sIR = "sourceImageRegion";
const _sIRI = "spotInstanceRequestId";
const _sIRS = "spotInstanceRequestSet";
const _sIS = "scheduledInstanceSet";
const _sISu = "subnetIdSet";
const _sIT = "spotInstanceType";
const _sITRS = "storeImageTaskResultSet";
const _sITi = "singleInstanceType";
const _sIn = "snapshotId";
const _sIo = "sourceIp";
const _sIu = "subnetId";
const _sIub = "subnetIds";
const _sK = "s3Key";
const _sKo = "s3objectKey";
const _sL = "s3Location";
const _sLVIA = "serviceLinkVirtualInterfaceArn";
const _sLVII = "serviceLinkVirtualInterfaceId";
const _sLVIIS = "serviceLinkVirtualInterfaceIdSet";
const _sLVIS = "serviceLinkVirtualInterfaceSet";
const _sLp = "spreadLevel";
const _sM = "serviceManaged";
const _sMPPOLP = "spotMaxPricePercentageOverLowestPrice";
const _sMS = "spotMaintenanceStrategies";
const _sMTP = "spotMaxTotalPrice";
const _sMt = "statusMessage";
const _sMta = "stateMessage";
const _sN = "serviceName";
const _sNA = "serviceNetworkArn";
const _sNE = "snsNotificationsEnabled";
const _sNN = "serviceNetworkName";
const _sNS = "serviceNameSet";
const _sNSr = "sriovNetSupport";
const _sNe = "sequenceNumber";
const _sNes = "sessionNumber";
const _sO = "spotOptions";
const _sP = "s3Prefix";
const _sPA = "samlProviderArn";
const _sPHS = "spotPriceHistorySet";
const _sPI = "servicePermissionId";
const _sPIAC = "secondaryPrivateIpAddressCount";
const _sPLS = "sourcePrefixListSet";
const _sPR = "sourcePortRange";
const _sPRS = "sourcePortRangeSet";
const _sPS = "sourcePortSet";
const _sPSS = "spotPlacementScoreSet";
const _sPp = "spotPrice";
const _sQPDS = "successfulQueuedPurchaseDeletionSet";
const _sR = "serviceRegion";
const _sRDT = "supportedRootDeviceTypes";
const _sRO = "staticRoutesOnly";
const _sRS = "supportedRegionSet";
const _sRT = "subnetRouteTable";
const _sRe = "serviceResource";
const _sRo = "sourceResource";
const _sRt = "stateReason";
const _sS = "snapshotSet";
const _sSGS = "staleSecurityGroupSet";
const _sSPU = "selfServicePortalUrl";
const _sSS = "staticSourcesSupport";
const _sSSPA = "selfServiceSamlProviderArn";
const _sST = "sampledStartTime";
const _sSe = "settingSet";
const _sSer = "serviceState";
const _sSo = "sourceSet";
const _sSs = "sseSpecification";
const _sSt = "statusSet";
const _sSu = "subscriptionSet";
const _sSub = "subnetSet";
const _sSup = "supportedStrategies";
const _sSy = "systemStatus";
const _sT = "startTime";
const _sTA = "snsTopicArn";
const _sTC = "spotTargetCapacity";
const _sTD = "snapshotTaskDetail";
const _sTFR = "storeTaskFailureReason";
const _sTH = "sessionTimeoutHours";
const _sTR = "stateTransitionReason";
const _sTS = "storeTaskState";
const _sTSS = "snapshotTierStatusSet";
const _sTT = "stateTransitionTime";
const _sTa = "sampleTime";
const _sTe = "serviceType";
const _sTo = "sourceType";
const _sTp = "splitTunnel";
const _sTs = "sseType";
const _sTt = "storageTier";
const _sUC = "supportedUsageClasses";
const _sV = "sourceVpc";
const _sVT = "supportedVirtualizationTypes";
const _sVh = "shellVersion";
const _sVu = "supportedVersions";
const _sWD = "startWeekDay";
const _s_ = "s3";
const _sc = "scope";
const _sco = "score";
const _scop = "scopes";
const _se = "service";
const _si = "size";
const _so = "sockets";
const _sof = "software";
const _st = "state";
const _sta = "status";
const _star = "start";
const _stat = "statistic";
const _sto = "storage";
const _str = "strategy";
const _su = "subnet";
const _sub = "subnets";
const _suc = "successful";
const _succ = "success";
const _t = "tenancy";
const _tAAC = "totalAvailableAddressCount";
const _tAC = "totalAvailableCapacity";
const _tACo = "totalAddressCount";
const _tAI = "transferAccountId";
const _tC = "totalCapacity";
const _tCS = "targetCapacitySpecification";
const _tCUT = "targetCapacityUnitType";
const _tCVR = "targetConfigurationValueRollup";
const _tCVS = "targetConfigurationValueSet";
const _tCa = "targetConfiguration";
const _tCar = "targetCapacity";
const _tD = "terminationDelay";
const _tDr = "trafficDirection";
const _tE = "targetEnvironment";
const _tED = "termEndDate";
const _tET = "tcpEstablishedTimeout";
const _tEo = "tokenEndpoint";
const _tFC = "totalFulfilledCapacity";
const _tFMIMB = "totalFpgaMemoryInMiB";
const _tG = "transitGateway";
const _tGA = "transitGatewayAttachments";
const _tGAI = "transitGatewayAttachmentId";
const _tGAP = "transitGatewayAttachmentPropagations";
const _tGAr = "transitGatewayAttachment";
const _tGAra = "transitGatewayArn";
const _tGAran = "transitGatewayAsn";
const _tGArans = "transitGatewayAddress";
const _tGC = "transitGatewayConnect";
const _tGCB = "transitGatewayCidrBlocks";
const _tGCP = "transitGatewayConnectPeer";
const _tGCPI = "transitGatewayConnectPeerId";
const _tGCPS = "transitGatewayConnectPeerSet";
const _tGCS = "transitGatewayConnectSet";
const _tGCa = "targetGroupsConfig";
const _tGI = "transitGatewayId";
const _tGMD = "transitGatewayMulticastDomain";
const _tGMDA = "transitGatewayMulticastDomainArn";
const _tGMDI = "transitGatewayMulticastDomainId";
const _tGMDr = "transitGatewayMulticastDomains";
const _tGMIMB = "totalGpuMemoryInMiB";
const _tGOI = "transitGatewayOwnerId";
const _tGPA = "transitGatewayPeeringAttachment";
const _tGPAr = "transitGatewayPeeringAttachments";
const _tGPLR = "transitGatewayPrefixListReference";
const _tGPLRS = "transitGatewayPrefixListReferenceSet";
const _tGPT = "transitGatewayPolicyTable";
const _tGPTE = "transitGatewayPolicyTableEntries";
const _tGPTI = "transitGatewayPolicyTableId";
const _tGPTr = "transitGatewayPolicyTables";
const _tGRT = "transitGatewayRouteTable";
const _tGRTA = "transitGatewayRouteTableAnnouncement";
const _tGRTAI = "transitGatewayRouteTableAnnouncementId";
const _tGRTAr = "transitGatewayRouteTableAnnouncements";
const _tGRTI = "transitGatewayRouteTableId";
const _tGRTP = "transitGatewayRouteTablePropagations";
const _tGRTR = "transitGatewayRouteTableRoute";
const _tGRTr = "transitGatewayRouteTables";
const _tGS = "transitGatewaySet";
const _tGVA = "transitGatewayVpcAttachment";
const _tGVAr = "transitGatewayVpcAttachments";
const _tGa = "targetGroups";
const _tHP = "totalHourlyPrice";
const _tI = "targetId";
const _tIAT = "trafficIpAddressType";
const _tIC = "totalInstanceCount";
const _tICu = "tunnelInsideCidr";
const _tII = "trunkInterfaceId";
const _tIIC = "tunnelInsideIpv6Cidr";
const _tIIV = "tunnelInsideIpVersion";
const _tIMIMB = "totalInferenceMemoryInMiB";
const _tIWE = "terminateInstancesWithExpiration";
const _tIa = "targetIops";
const _tIe = "tenantId";
const _tLSGB = "totalLocalStorageGB";
const _tMAE = "targetMultiAttachEnabled";
const _tMF = "trafficMirrorFilter";
const _tMFI = "trafficMirrorFilterId";
const _tMFR = "trafficMirrorFilterRule";
const _tMFRI = "trafficMirrorFilterRuleId";
const _tMFRS = "trafficMirrorFilterRuleSet";
const _tMFS = "trafficMirrorFilterSet";
const _tMMIMB = "totalMediaMemoryInMiB";
const _tMS = "trafficMirrorSession";
const _tMSI = "trafficMirrorSessionId";
const _tMSS = "trafficMirrorSessionSet";
const _tMT = "trafficMirrorTarget";
const _tMTI = "trafficMirrorTargetId";
const _tMTS = "trafficMirrorTargetSet";
const _tN = "tokenName";
const _tNDMIMB = "totalNeuronDeviceMemoryInMiB";
const _tNI = "targetNetworkId";
const _tOAT = "transferOfferAcceptedTimestamp";
const _tOET = "transferOfferExpirationTimestamp";
const _tOS = "tunnelOptionSet";
const _tP = "transportProtocol";
const _tPC = "threadsPerCore";
const _tPT = "trustProviderType";
const _tPo = "toPort";
const _tRC = "targetResourceCount";
const _tRS = "throughResourceSet";
const _tRSi = "timeRangeSet";
const _tRTI = "targetRouteTableId";
const _tS = "tagSet";
const _tSD = "termStartDate";
const _tSIGB = "totalSizeInGB";
const _tSIH = "totalScheduledInstanceHours";
const _tSS = "tagSpecificationSet";
const _tST = "tieringStartTime";
const _tSTa = "taskStartTime";
const _tSa = "targetSubnet";
const _tSar = "targetSize";
const _tSas = "taskState";
const _tSp = "tpmSupport";
const _tT = "trafficType";
const _tTC = "totalTargetCapacity";
const _tTGAI = "transportTransitGatewayAttachmentId";
const _tTa = "taskType";
const _tTar = "targetThroughput";
const _tTr = "transferType";
const _tUC = "totalUnavailableCapacity";
const _tUP = "totalUpfrontPrice";
const _tV = "tokenValue";
const _tVC = "totalVCpus";
const _tVT = "targetVolumeType";
const _ta = "tags";
const _tag = "tag";
const _te = "term";
const _th = "throughput";
const _ti = "timestamp";
const _tie = "tier";
const _to = "to";
const _ty = "type";
const _u = "unsuccessful";
const _uB = "userBucket";
const _uC = "ultraserverCount";
const _uCs = "usageCount";
const _uD = "uefiData";
const _uDLTVS = "unsuccessfullyDeletedLaunchTemplateVersionSet";
const _uDp = "updatedDate";
const _uDpd = "updateDate";
const _uDs = "userData";
const _uF = "upfrontFee";
const _uFDS = "unsuccessfulFleetDeletionSet";
const _uFRS = "unsuccessfulFleetRequestSet";
const _uI = "userId";
const _uIA = "unassignedIpv6Addresses";
const _uIC = "usedInstanceCount";
const _uICSS = "unsuccessfulInstanceCreditSpecificationSet";
const _uIE = "userInfoEndpoint";
const _uIPS = "unknownIpPermissionSet";
const _uIPSn = "unassignedIpv6PrefixSet";
const _uLI = "useLongIds";
const _uLIA = "useLongIdsAggregated";
const _uO = "usageOperation";
const _uOUT = "usageOperationUpdateTime";
const _uP = "upfrontPrice";
const _uPS = "uploadPolicySignature";
const _uPp = "uploadPolicy";
const _uPs = "usagePrice";
const _uRBOI = "unusedReservationBillingOwnerId";
const _uS = "usageStrategy";
const _uST = "udpStreamTimeout";
const _uT = "updateTime";
const _uTP = "userTrustProvider";
const _uTPT = "userTrustProviderType";
const _uTd = "udpTimeout";
const _uTl = "ultraserverType";
const _ur = "url";
const _us = "username";
const _v = "value";
const _vAE = "verifiedAccessEndpoint";
const _vAEI = "verifiedAccessEndpointId";
const _vAES = "verifiedAccessEndpointSet";
const _vAETD = "verifiedAccessEndpointTargetDns";
const _vAETIA = "verifiedAccessEndpointTargetIpAddress";
const _vAETS = "verifiedAccessEndpointTargetSet";
const _vAG = "verifiedAccessGroup";
const _vAGA = "verifiedAccessGroupArn";
const _vAGI = "verifiedAccessGroupId";
const _vAGS = "verifiedAccessGroupSet";
const _vAI = "verifiedAccessInstance";
const _vAII = "verifiedAccessInstanceId";
const _vAIS = "verifiedAccessInstanceSet";
const _vATP = "verifiedAccessTrustProvider";
const _vATPI = "verifiedAccessTrustProviderId";
const _vATPS = "verifiedAccessTrustProviderSet";
const _vBPAE = "vpcBlockPublicAccessExclusion";
const _vBPAES = "vpcBlockPublicAccessExclusionSet";
const _vBPAO = "vpcBlockPublicAccessOptions";
const _vC = "vpnConnection";
const _vCC = "vCpuCount";
const _vCDSC = "vpnConnectionDeviceSampleConfiguration";
const _vCDTI = "vpnConnectionDeviceTypeId";
const _vCDTS = "vpnConnectionDeviceTypeSet";
const _vCI = "vpnConnectionId";
const _vCIp = "vCpuInfo";
const _vCS = "vpnConnectionSet";
const _vCa = "validCores";
const _vD = "versionDescription";
const _vE = "vpcEndpoint";
const _vEAS = "vpcEndpointAssociationSet";
const _vECI = "vpcEncryptionControlId";
const _vECIp = "vpcEndpointConnectionId";
const _vECS = "vpcEndpointConnectionSet";
const _vEI = "vpcEndpointId";
const _vEO = "vpcEndpointOwner";
const _vEPS = "vpcEndpointPolicySupported";
const _vER = "vpcEndpointRegion";
const _vES = "vpcEndpointService";
const _vESp = "vpcEndpointSet";
const _vESpc = "vpcEndpointState";
const _vESpn = "vpnEcmpSupport";
const _vET = "vpcEndpointType";
const _vF = "validFrom";
const _vFR = "validationFailureReason";
const _vG = "vpnGateway";
const _vGI = "vpnGatewayId";
const _vGS = "vpnGatewaySet";
const _vI = "vpcId";
const _vIR = "volumeInitializationRate";
const _vIl = "vlanId";
const _vIo = "volumeId";
const _vM = "volumeModification";
const _vMS = "volumeModificationSet";
const _vN = "virtualName";
const _vNI = "virtualNetworkId";
const _vNe = "versionNumber";
const _vOI = "volumeOwnerId";
const _vOIp = "vpcOwnerId";
const _vP = "vpnProtocol";
const _vPC = "vpcPeeringConnection";
const _vPCI = "vpcPeeringConnectionId";
const _vPCS = "vpcPeeringConnectionSet";
const _vPG = "virtualPrivateGateway";
const _vPp = "vpnPort";
const _vPpc = "vpcPeering";
const _vS = "volumeSet";
const _vSS = "volumeStatusSet";
const _vSa = "valueSet";
const _vSo = "volumeSize";
const _vSol = "volumeStatus";
const _vSp = "vpcSet";
const _vT = "volumeType";
const _vTOIA = "vpnTunnelOutsideIpAddress";
const _vTPC = "validThreadsPerCore";
const _vTg = "vgwTelemetry";
const _vTi = "virtualizationType";
const _vU = "validUntil";
const _ve = "version";
const _ven = "vendor";
const _vl = "vlan";
const _vo = "volumes";
const _vol = "volume";
const _vp = "vpc";
const _vpc = "vpcs";
const _w = "warning";
const _wC = "weightedCapacity";
const _wM = "warningMessage";
const _we = "weight";
const _zI = "zoneId";
const _zN = "zoneName";
const _zS = "zoneState";
const _zT = "zoneType";
const buildFormUrlencodedString = (formEntries) => Object.entries(formEntries)
    .map(([key, value]) => smithyClient.extendedEncodeURIComponent(key) + "=" + smithyClient.extendedEncodeURIComponent(value))
    .join("&");
const loadEc2ErrorCode = (output, data) => {
    if (data.Errors.Error?.Code !== undefined) {
        return data.Errors.Error.Code;
    }
    if (output.statusCode == 404) {
        return "NotFound";
    }
};

class AcceptAddressTransferCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptAddressTransfer", {})
    .n("EC2Client", "AcceptAddressTransferCommand")
    .f(void 0, void 0)
    .ser(se_AcceptAddressTransferCommand)
    .de(de_AcceptAddressTransferCommand)
    .build() {
}

class AcceptCapacityReservationBillingOwnershipCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptCapacityReservationBillingOwnership", {})
    .n("EC2Client", "AcceptCapacityReservationBillingOwnershipCommand")
    .f(void 0, void 0)
    .ser(se_AcceptCapacityReservationBillingOwnershipCommand)
    .de(de_AcceptCapacityReservationBillingOwnershipCommand)
    .build() {
}

class AcceptReservedInstancesExchangeQuoteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptReservedInstancesExchangeQuote", {})
    .n("EC2Client", "AcceptReservedInstancesExchangeQuoteCommand")
    .f(void 0, void 0)
    .ser(se_AcceptReservedInstancesExchangeQuoteCommand)
    .de(de_AcceptReservedInstancesExchangeQuoteCommand)
    .build() {
}

class AcceptTransitGatewayMulticastDomainAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptTransitGatewayMulticastDomainAssociations", {})
    .n("EC2Client", "AcceptTransitGatewayMulticastDomainAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_AcceptTransitGatewayMulticastDomainAssociationsCommand)
    .de(de_AcceptTransitGatewayMulticastDomainAssociationsCommand)
    .build() {
}

class AcceptTransitGatewayPeeringAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptTransitGatewayPeeringAttachment", {})
    .n("EC2Client", "AcceptTransitGatewayPeeringAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_AcceptTransitGatewayPeeringAttachmentCommand)
    .de(de_AcceptTransitGatewayPeeringAttachmentCommand)
    .build() {
}

class AcceptTransitGatewayVpcAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptTransitGatewayVpcAttachment", {})
    .n("EC2Client", "AcceptTransitGatewayVpcAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_AcceptTransitGatewayVpcAttachmentCommand)
    .de(de_AcceptTransitGatewayVpcAttachmentCommand)
    .build() {
}

class AcceptVpcEndpointConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptVpcEndpointConnections", {})
    .n("EC2Client", "AcceptVpcEndpointConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_AcceptVpcEndpointConnectionsCommand)
    .de(de_AcceptVpcEndpointConnectionsCommand)
    .build() {
}

class AcceptVpcPeeringConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AcceptVpcPeeringConnection", {})
    .n("EC2Client", "AcceptVpcPeeringConnectionCommand")
    .f(void 0, void 0)
    .ser(se_AcceptVpcPeeringConnectionCommand)
    .de(de_AcceptVpcPeeringConnectionCommand)
    .build() {
}

class AdvertiseByoipCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AdvertiseByoipCidr", {})
    .n("EC2Client", "AdvertiseByoipCidrCommand")
    .f(void 0, void 0)
    .ser(se_AdvertiseByoipCidrCommand)
    .de(de_AdvertiseByoipCidrCommand)
    .build() {
}

class AllocateAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AllocateAddress", {})
    .n("EC2Client", "AllocateAddressCommand")
    .f(void 0, void 0)
    .ser(se_AllocateAddressCommand)
    .de(de_AllocateAddressCommand)
    .build() {
}

class AllocateHostsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AllocateHosts", {})
    .n("EC2Client", "AllocateHostsCommand")
    .f(void 0, void 0)
    .ser(se_AllocateHostsCommand)
    .de(de_AllocateHostsCommand)
    .build() {
}

class AllocateIpamPoolCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AllocateIpamPoolCidr", {})
    .n("EC2Client", "AllocateIpamPoolCidrCommand")
    .f(void 0, void 0)
    .ser(se_AllocateIpamPoolCidrCommand)
    .de(de_AllocateIpamPoolCidrCommand)
    .build() {
}

class ApplySecurityGroupsToClientVpnTargetNetworkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ApplySecurityGroupsToClientVpnTargetNetwork", {})
    .n("EC2Client", "ApplySecurityGroupsToClientVpnTargetNetworkCommand")
    .f(void 0, void 0)
    .ser(se_ApplySecurityGroupsToClientVpnTargetNetworkCommand)
    .de(de_ApplySecurityGroupsToClientVpnTargetNetworkCommand)
    .build() {
}

class AssignIpv6AddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssignIpv6Addresses", {})
    .n("EC2Client", "AssignIpv6AddressesCommand")
    .f(void 0, void 0)
    .ser(se_AssignIpv6AddressesCommand)
    .de(de_AssignIpv6AddressesCommand)
    .build() {
}

class AssignPrivateIpAddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssignPrivateIpAddresses", {})
    .n("EC2Client", "AssignPrivateIpAddressesCommand")
    .f(void 0, void 0)
    .ser(se_AssignPrivateIpAddressesCommand)
    .de(de_AssignPrivateIpAddressesCommand)
    .build() {
}

class AssignPrivateNatGatewayAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssignPrivateNatGatewayAddress", {})
    .n("EC2Client", "AssignPrivateNatGatewayAddressCommand")
    .f(void 0, void 0)
    .ser(se_AssignPrivateNatGatewayAddressCommand)
    .de(de_AssignPrivateNatGatewayAddressCommand)
    .build() {
}

class AssociateAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateAddress", {})
    .n("EC2Client", "AssociateAddressCommand")
    .f(void 0, void 0)
    .ser(se_AssociateAddressCommand)
    .de(de_AssociateAddressCommand)
    .build() {
}

class AssociateCapacityReservationBillingOwnerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateCapacityReservationBillingOwner", {})
    .n("EC2Client", "AssociateCapacityReservationBillingOwnerCommand")
    .f(void 0, void 0)
    .ser(se_AssociateCapacityReservationBillingOwnerCommand)
    .de(de_AssociateCapacityReservationBillingOwnerCommand)
    .build() {
}

class AssociateClientVpnTargetNetworkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateClientVpnTargetNetwork", {})
    .n("EC2Client", "AssociateClientVpnTargetNetworkCommand")
    .f(void 0, void 0)
    .ser(se_AssociateClientVpnTargetNetworkCommand)
    .de(de_AssociateClientVpnTargetNetworkCommand)
    .build() {
}

class AssociateDhcpOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateDhcpOptions", {})
    .n("EC2Client", "AssociateDhcpOptionsCommand")
    .f(void 0, void 0)
    .ser(se_AssociateDhcpOptionsCommand)
    .de(de_AssociateDhcpOptionsCommand)
    .build() {
}

class AssociateEnclaveCertificateIamRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateEnclaveCertificateIamRole", {})
    .n("EC2Client", "AssociateEnclaveCertificateIamRoleCommand")
    .f(void 0, void 0)
    .ser(se_AssociateEnclaveCertificateIamRoleCommand)
    .de(de_AssociateEnclaveCertificateIamRoleCommand)
    .build() {
}

class AssociateIamInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateIamInstanceProfile", {})
    .n("EC2Client", "AssociateIamInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_AssociateIamInstanceProfileCommand)
    .de(de_AssociateIamInstanceProfileCommand)
    .build() {
}

class AssociateInstanceEventWindowCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateInstanceEventWindow", {})
    .n("EC2Client", "AssociateInstanceEventWindowCommand")
    .f(void 0, void 0)
    .ser(se_AssociateInstanceEventWindowCommand)
    .de(de_AssociateInstanceEventWindowCommand)
    .build() {
}

class AssociateIpamByoasnCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateIpamByoasn", {})
    .n("EC2Client", "AssociateIpamByoasnCommand")
    .f(void 0, void 0)
    .ser(se_AssociateIpamByoasnCommand)
    .de(de_AssociateIpamByoasnCommand)
    .build() {
}

class AssociateIpamResourceDiscoveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateIpamResourceDiscovery", {})
    .n("EC2Client", "AssociateIpamResourceDiscoveryCommand")
    .f(void 0, void 0)
    .ser(se_AssociateIpamResourceDiscoveryCommand)
    .de(de_AssociateIpamResourceDiscoveryCommand)
    .build() {
}

class AssociateNatGatewayAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateNatGatewayAddress", {})
    .n("EC2Client", "AssociateNatGatewayAddressCommand")
    .f(void 0, void 0)
    .ser(se_AssociateNatGatewayAddressCommand)
    .de(de_AssociateNatGatewayAddressCommand)
    .build() {
}

class AssociateRouteServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateRouteServer", {})
    .n("EC2Client", "AssociateRouteServerCommand")
    .f(void 0, void 0)
    .ser(se_AssociateRouteServerCommand)
    .de(de_AssociateRouteServerCommand)
    .build() {
}

class AssociateRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateRouteTable", {})
    .n("EC2Client", "AssociateRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_AssociateRouteTableCommand)
    .de(de_AssociateRouteTableCommand)
    .build() {
}

class AssociateSecurityGroupVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateSecurityGroupVpc", {})
    .n("EC2Client", "AssociateSecurityGroupVpcCommand")
    .f(void 0, void 0)
    .ser(se_AssociateSecurityGroupVpcCommand)
    .de(de_AssociateSecurityGroupVpcCommand)
    .build() {
}

class AssociateSubnetCidrBlockCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateSubnetCidrBlock", {})
    .n("EC2Client", "AssociateSubnetCidrBlockCommand")
    .f(void 0, void 0)
    .ser(se_AssociateSubnetCidrBlockCommand)
    .de(de_AssociateSubnetCidrBlockCommand)
    .build() {
}

class AssociateTransitGatewayMulticastDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateTransitGatewayMulticastDomain", {})
    .n("EC2Client", "AssociateTransitGatewayMulticastDomainCommand")
    .f(void 0, void 0)
    .ser(se_AssociateTransitGatewayMulticastDomainCommand)
    .de(de_AssociateTransitGatewayMulticastDomainCommand)
    .build() {
}

class AssociateTransitGatewayPolicyTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateTransitGatewayPolicyTable", {})
    .n("EC2Client", "AssociateTransitGatewayPolicyTableCommand")
    .f(void 0, void 0)
    .ser(se_AssociateTransitGatewayPolicyTableCommand)
    .de(de_AssociateTransitGatewayPolicyTableCommand)
    .build() {
}

class AssociateTransitGatewayRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateTransitGatewayRouteTable", {})
    .n("EC2Client", "AssociateTransitGatewayRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_AssociateTransitGatewayRouteTableCommand)
    .de(de_AssociateTransitGatewayRouteTableCommand)
    .build() {
}

class AssociateTrunkInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateTrunkInterface", {})
    .n("EC2Client", "AssociateTrunkInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_AssociateTrunkInterfaceCommand)
    .de(de_AssociateTrunkInterfaceCommand)
    .build() {
}

class AssociateVpcCidrBlockCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AssociateVpcCidrBlock", {})
    .n("EC2Client", "AssociateVpcCidrBlockCommand")
    .f(void 0, void 0)
    .ser(se_AssociateVpcCidrBlockCommand)
    .de(de_AssociateVpcCidrBlockCommand)
    .build() {
}

class AttachClassicLinkVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AttachClassicLinkVpc", {})
    .n("EC2Client", "AttachClassicLinkVpcCommand")
    .f(void 0, void 0)
    .ser(se_AttachClassicLinkVpcCommand)
    .de(de_AttachClassicLinkVpcCommand)
    .build() {
}

class AttachInternetGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AttachInternetGateway", {})
    .n("EC2Client", "AttachInternetGatewayCommand")
    .f(void 0, void 0)
    .ser(se_AttachInternetGatewayCommand)
    .de(de_AttachInternetGatewayCommand)
    .build() {
}

class AttachNetworkInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AttachNetworkInterface", {})
    .n("EC2Client", "AttachNetworkInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_AttachNetworkInterfaceCommand)
    .de(de_AttachNetworkInterfaceCommand)
    .build() {
}

const AcceleratorManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    HABANA: "habana",
    NVIDIA: "nvidia",
    XILINX: "xilinx",
};
const AcceleratorName = {
    A100: "a100",
    A10G: "a10g",
    H100: "h100",
    INFERENTIA: "inferentia",
    K520: "k520",
    K80: "k80",
    M60: "m60",
    RADEON_PRO_V520: "radeon-pro-v520",
    T4: "t4",
    T4G: "t4g",
    V100: "v100",
    VU9P: "vu9p",
};
const AcceleratorType = {
    FPGA: "fpga",
    GPU: "gpu",
    INFERENCE: "inference",
};
const ResourceType = {
    capacity_block: "capacity-block",
    capacity_reservation: "capacity-reservation",
    capacity_reservation_fleet: "capacity-reservation-fleet",
    carrier_gateway: "carrier-gateway",
    client_vpn_endpoint: "client-vpn-endpoint",
    coip_pool: "coip-pool",
    customer_gateway: "customer-gateway",
    declarative_policies_report: "declarative-policies-report",
    dedicated_host: "dedicated-host",
    dhcp_options: "dhcp-options",
    egress_only_internet_gateway: "egress-only-internet-gateway",
    elastic_gpu: "elastic-gpu",
    elastic_ip: "elastic-ip",
    export_image_task: "export-image-task",
    export_instance_task: "export-instance-task",
    fleet: "fleet",
    fpga_image: "fpga-image",
    host_reservation: "host-reservation",
    image: "image",
    image_usage_report: "image-usage-report",
    import_image_task: "import-image-task",
    import_snapshot_task: "import-snapshot-task",
    instance: "instance",
    instance_connect_endpoint: "instance-connect-endpoint",
    instance_event_window: "instance-event-window",
    internet_gateway: "internet-gateway",
    ipam: "ipam",
    ipam_external_resource_verification_token: "ipam-external-resource-verification-token",
    ipam_pool: "ipam-pool",
    ipam_resource_discovery: "ipam-resource-discovery",
    ipam_resource_discovery_association: "ipam-resource-discovery-association",
    ipam_scope: "ipam-scope",
    ipv4pool_ec2: "ipv4pool-ec2",
    ipv6pool_ec2: "ipv6pool-ec2",
    key_pair: "key-pair",
    launch_template: "launch-template",
    local_gateway: "local-gateway",
    local_gateway_route_table: "local-gateway-route-table",
    local_gateway_route_table_virtual_interface_group_association: "local-gateway-route-table-virtual-interface-group-association",
    local_gateway_route_table_vpc_association: "local-gateway-route-table-vpc-association",
    local_gateway_virtual_interface: "local-gateway-virtual-interface",
    local_gateway_virtual_interface_group: "local-gateway-virtual-interface-group",
    mac_modification_task: "mac-modification-task",
    natgateway: "natgateway",
    network_acl: "network-acl",
    network_insights_access_scope: "network-insights-access-scope",
    network_insights_access_scope_analysis: "network-insights-access-scope-analysis",
    network_insights_analysis: "network-insights-analysis",
    network_insights_path: "network-insights-path",
    network_interface: "network-interface",
    outpost_lag: "outpost-lag",
    placement_group: "placement-group",
    prefix_list: "prefix-list",
    replace_root_volume_task: "replace-root-volume-task",
    reserved_instances: "reserved-instances",
    route_server: "route-server",
    route_server_endpoint: "route-server-endpoint",
    route_server_peer: "route-server-peer",
    route_table: "route-table",
    security_group: "security-group",
    security_group_rule: "security-group-rule",
    service_link_virtual_interface: "service-link-virtual-interface",
    snapshot: "snapshot",
    spot_fleet_request: "spot-fleet-request",
    spot_instances_request: "spot-instances-request",
    subnet: "subnet",
    subnet_cidr_reservation: "subnet-cidr-reservation",
    traffic_mirror_filter: "traffic-mirror-filter",
    traffic_mirror_filter_rule: "traffic-mirror-filter-rule",
    traffic_mirror_session: "traffic-mirror-session",
    traffic_mirror_target: "traffic-mirror-target",
    transit_gateway: "transit-gateway",
    transit_gateway_attachment: "transit-gateway-attachment",
    transit_gateway_connect_peer: "transit-gateway-connect-peer",
    transit_gateway_multicast_domain: "transit-gateway-multicast-domain",
    transit_gateway_policy_table: "transit-gateway-policy-table",
    transit_gateway_route_table: "transit-gateway-route-table",
    transit_gateway_route_table_announcement: "transit-gateway-route-table-announcement",
    verified_access_endpoint: "verified-access-endpoint",
    verified_access_endpoint_target: "verified-access-endpoint-target",
    verified_access_group: "verified-access-group",
    verified_access_instance: "verified-access-instance",
    verified_access_policy: "verified-access-policy",
    verified_access_trust_provider: "verified-access-trust-provider",
    volume: "volume",
    vpc: "vpc",
    vpc_block_public_access_exclusion: "vpc-block-public-access-exclusion",
    vpc_endpoint: "vpc-endpoint",
    vpc_endpoint_connection: "vpc-endpoint-connection",
    vpc_endpoint_connection_device_type: "vpc-endpoint-connection-device-type",
    vpc_endpoint_service: "vpc-endpoint-service",
    vpc_endpoint_service_permission: "vpc-endpoint-service-permission",
    vpc_flow_log: "vpc-flow-log",
    vpc_peering_connection: "vpc-peering-connection",
    vpn_connection: "vpn-connection",
    vpn_connection_device_type: "vpn-connection-device-type",
    vpn_gateway: "vpn-gateway",
};
const AddressTransferStatus = {
    accepted: "accepted",
    disabled: "disabled",
    pending: "pending",
};
const TransitGatewayAttachmentResourceType = {
    connect: "connect",
    direct_connect_gateway: "direct-connect-gateway",
    network_function: "network-function",
    peering: "peering",
    tgw_peering: "tgw-peering",
    vpc: "vpc",
    vpn: "vpn",
};
const TransitGatewayMulitcastDomainAssociationState = {
    associated: "associated",
    associating: "associating",
    disassociated: "disassociated",
    disassociating: "disassociating",
    failed: "failed",
    pendingAcceptance: "pendingAcceptance",
    rejected: "rejected",
};
const DynamicRoutingValue = {
    disable: "disable",
    enable: "enable",
};
const TransitGatewayAttachmentState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    failed: "failed",
    failing: "failing",
    initiating: "initiating",
    initiatingRequest: "initiatingRequest",
    modifying: "modifying",
    pending: "pending",
    pendingAcceptance: "pendingAcceptance",
    rejected: "rejected",
    rejecting: "rejecting",
    rollingBack: "rollingBack",
};
const ApplianceModeSupportValue = {
    disable: "disable",
    enable: "enable",
};
const DnsSupportValue = {
    disable: "disable",
    enable: "enable",
};
const Ipv6SupportValue = {
    disable: "disable",
    enable: "enable",
};
const SecurityGroupReferencingSupportValue = {
    disable: "disable",
    enable: "enable",
};
const VpcPeeringConnectionStateReasonCode = {
    active: "active",
    deleted: "deleted",
    deleting: "deleting",
    expired: "expired",
    failed: "failed",
    initiating_request: "initiating-request",
    pending_acceptance: "pending-acceptance",
    provisioning: "provisioning",
    rejected: "rejected",
};
const Protocol = {
    tcp: "tcp",
    udp: "udp",
};
const AccountAttributeName = {
    default_vpc: "default-vpc",
    supported_platforms: "supported-platforms",
};
const InstanceHealthStatus = {
    HEALTHY_STATUS: "healthy",
    UNHEALTHY_STATUS: "unhealthy",
};
const VpnTunnelProvisioningStatus = {
    available: "available",
    failed: "failed",
    pending: "pending",
};
const ActivityStatus = {
    ERROR: "error",
    FULFILLED: "fulfilled",
    PENDING_FULFILLMENT: "pending_fulfillment",
    PENDING_TERMINATION: "pending_termination",
};
const PrincipalType = {
    Account: "Account",
    All: "All",
    OrganizationUnit: "OrganizationUnit",
    Role: "Role",
    Service: "Service",
    User: "User",
};
const DomainType = {
    standard: "standard",
    vpc: "vpc",
};
const ServiceManaged = {
    alb: "alb",
    nlb: "nlb",
    rnat: "rnat",
};
const AddressAttributeName = {
    domain_name: "domain-name",
};
const AddressFamily = {
    ipv4: "ipv4",
    ipv6: "ipv6",
};
const AsnAssociationState = {
    associated: "associated",
    disassociated: "disassociated",
    failed_association: "failed-association",
    failed_disassociation: "failed-disassociation",
    pending_association: "pending-association",
    pending_disassociation: "pending-disassociation",
};
const ByoipCidrState = {
    advertised: "advertised",
    deprovisioned: "deprovisioned",
    failed_deprovision: "failed-deprovision",
    failed_provision: "failed-provision",
    pending_deprovision: "pending-deprovision",
    pending_provision: "pending-provision",
    provisioned: "provisioned",
    provisioned_not_publicly_advertisable: "provisioned-not-publicly-advertisable",
};
const Affinity = {
    default: "default",
    host: "host",
};
const AutoPlacement = {
    off: "off",
    on: "on",
};
const HostMaintenance = {
    off: "off",
    on: "on",
};
const HostRecovery = {
    off: "off",
    on: "on",
};
const IpamPoolAllocationResourceType = {
    custom: "custom",
    ec2_public_ipv4_pool: "ec2-public-ipv4-pool",
    eip: "eip",
    ipam_pool: "ipam-pool",
    subnet: "subnet",
    vpc: "vpc",
};
const AllocationState = {
    available: "available",
    pending: "pending",
    permanent_failure: "permanent-failure",
    released: "released",
    released_permanent_failure: "released-permanent-failure",
    under_assessment: "under-assessment",
};
const AllocationStrategy = {
    CAPACITY_OPTIMIZED: "capacityOptimized",
    CAPACITY_OPTIMIZED_PRIORITIZED: "capacityOptimizedPrioritized",
    DIVERSIFIED: "diversified",
    LOWEST_PRICE: "lowestPrice",
    PRICE_CAPACITY_OPTIMIZED: "priceCapacityOptimized",
};
const AllocationType = {
    future: "future",
    used: "used",
};
const AllowedImagesSettingsDisabledState = {
    disabled: "disabled",
};
const AllowedImagesSettingsEnabledState = {
    audit_mode: "audit-mode",
    enabled: "enabled",
};
const AllowsMultipleInstanceTypes = {
    off: "off",
    on: "on",
};
const NatGatewayAddressStatus = {
    ASSIGNING: "assigning",
    ASSOCIATING: "associating",
    DISASSOCIATING: "disassociating",
    FAILED: "failed",
    SUCCEEDED: "succeeded",
    UNASSIGNING: "unassigning",
};
const AssociationStatusCode = {
    associated: "associated",
    associating: "associating",
    association_failed: "association-failed",
    disassociated: "disassociated",
    disassociating: "disassociating",
};
const IamInstanceProfileAssociationState = {
    ASSOCIATED: "associated",
    ASSOCIATING: "associating",
    DISASSOCIATED: "disassociated",
    DISASSOCIATING: "disassociating",
};
const InstanceEventWindowState = {
    active: "active",
    creating: "creating",
    deleted: "deleted",
    deleting: "deleting",
};
const WeekDay = {
    friday: "friday",
    monday: "monday",
    saturday: "saturday",
    sunday: "sunday",
    thursday: "thursday",
    tuesday: "tuesday",
    wednesday: "wednesday",
};
const IpamAssociatedResourceDiscoveryStatus = {
    ACTIVE: "active",
    NOT_FOUND: "not-found",
};
const IpamResourceDiscoveryAssociationState = {
    ASSOCIATE_COMPLETE: "associate-complete",
    ASSOCIATE_FAILED: "associate-failed",
    ASSOCIATE_IN_PROGRESS: "associate-in-progress",
    DISASSOCIATE_COMPLETE: "disassociate-complete",
    DISASSOCIATE_FAILED: "disassociate-failed",
    DISASSOCIATE_IN_PROGRESS: "disassociate-in-progress",
    ISOLATE_COMPLETE: "isolate-complete",
    ISOLATE_IN_PROGRESS: "isolate-in-progress",
    RESTORE_IN_PROGRESS: "restore-in-progress",
};
const RouteServerAssociationState = {
    ASSOCIATED: "associated",
    ASSOCIATING: "associating",
    DISASSOCIATING: "disassociating",
};
const RouteTableAssociationStateCode = {
    associated: "associated",
    associating: "associating",
    disassociated: "disassociated",
    disassociating: "disassociating",
    failed: "failed",
};
const SecurityGroupVpcAssociationState = {
    associated: "associated",
    associating: "associating",
    association_failed: "association-failed",
    disassociated: "disassociated",
    disassociating: "disassociating",
    disassociation_failed: "disassociation-failed",
};
const IpSource = {
    amazon: "amazon",
    byoip: "byoip",
    none: "none",
};
const Ipv6AddressAttribute = {
    private: "private",
    public: "public",
};
const SubnetCidrBlockStateCode = {
    associated: "associated",
    associating: "associating",
    disassociated: "disassociated",
    disassociating: "disassociating",
    failed: "failed",
    failing: "failing",
};
const TransitGatewayAssociationState = {
    associated: "associated",
    associating: "associating",
    disassociated: "disassociated",
    disassociating: "disassociating",
};
const InterfaceProtocolType = {
    GRE: "GRE",
    VLAN: "VLAN",
};
const VpcCidrBlockStateCode = {
    associated: "associated",
    associating: "associating",
    disassociated: "disassociated",
    disassociating: "disassociating",
    failed: "failed",
    failing: "failing",
};
const DeviceTrustProviderType = {
    crowdstrike: "crowdstrike",
    jamf: "jamf",
    jumpcloud: "jumpcloud",
};
const TrustProviderType = {
    device: "device",
    user: "user",
};
const UserTrustProviderType = {
    iam_identity_center: "iam-identity-center",
    oidc: "oidc",
};
const VolumeAttachmentState = {
    attached: "attached",
    attaching: "attaching",
    busy: "busy",
    detached: "detached",
    detaching: "detaching",
};
const AttachmentStatus = {
    attached: "attached",
    attaching: "attaching",
    detached: "detached",
    detaching: "detaching",
};
const ClientVpnAuthorizationRuleStatusCode = {
    active: "active",
    authorizing: "authorizing",
    failed: "failed",
    revoking: "revoking",
};
const BundleTaskState = {
    bundling: "bundling",
    cancelling: "cancelling",
    complete: "complete",
    failed: "failed",
    pending: "pending",
    storing: "storing",
    waiting_for_shutdown: "waiting-for-shutdown",
};
const CapacityReservationFleetState = {
    ACTIVE: "active",
    CANCELLED: "cancelled",
    CANCELLING: "cancelling",
    EXPIRED: "expired",
    EXPIRING: "expiring",
    FAILED: "failed",
    MODIFYING: "modifying",
    PARTIALLY_FULFILLED: "partially_fulfilled",
    SUBMITTED: "submitted",
};
const ListingState = {
    available: "available",
    cancelled: "cancelled",
    pending: "pending",
    sold: "sold",
};
const CurrencyCodeValues = {
    USD: "USD",
};
const ListingStatus = {
    active: "active",
    cancelled: "cancelled",
    closed: "closed",
    pending: "pending",
};
const BatchState = {
    ACTIVE: "active",
    CANCELLED: "cancelled",
    CANCELLED_RUNNING: "cancelled_running",
    CANCELLED_TERMINATING_INSTANCES: "cancelled_terminating",
    FAILED: "failed",
    MODIFYING: "modifying",
    SUBMITTED: "submitted",
};
const CancelBatchErrorCode = {
    FLEET_REQUEST_ID_DOES_NOT_EXIST: "fleetRequestIdDoesNotExist",
    FLEET_REQUEST_ID_MALFORMED: "fleetRequestIdMalformed",
    FLEET_REQUEST_NOT_IN_CANCELLABLE_STATE: "fleetRequestNotInCancellableState",
    UNEXPECTED_ERROR: "unexpectedError",
};
const CancelSpotInstanceRequestState = {
    active: "active",
    cancelled: "cancelled",
    closed: "closed",
    completed: "completed",
    open: "open",
};
const OidcOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const VerifiedAccessTrustProviderFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OidcOptions && { OidcOptions: OidcOptionsFilterSensitiveLog(obj.OidcOptions) }),
});
const AttachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider),
    }),
});
const S3StorageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UploadPolicySignature && { UploadPolicySignature: smithyClient.SENSITIVE_STRING }),
});
const StorageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.S3 && { S3: S3StorageFilterSensitiveLog(obj.S3) }),
});
const BundleInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Storage && { Storage: StorageFilterSensitiveLog(obj.Storage) }),
});
const BundleTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Storage && { Storage: StorageFilterSensitiveLog(obj.Storage) }),
});
const BundleInstanceResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BundleTask && { BundleTask: BundleTaskFilterSensitiveLog(obj.BundleTask) }),
});
const CancelBundleTaskResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BundleTask && { BundleTask: BundleTaskFilterSensitiveLog(obj.BundleTask) }),
});

class AttachVerifiedAccessTrustProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AttachVerifiedAccessTrustProvider", {})
    .n("EC2Client", "AttachVerifiedAccessTrustProviderCommand")
    .f(void 0, AttachVerifiedAccessTrustProviderResultFilterSensitiveLog)
    .ser(se_AttachVerifiedAccessTrustProviderCommand)
    .de(de_AttachVerifiedAccessTrustProviderCommand)
    .build() {
}

class AttachVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AttachVolume", {})
    .n("EC2Client", "AttachVolumeCommand")
    .f(void 0, void 0)
    .ser(se_AttachVolumeCommand)
    .de(de_AttachVolumeCommand)
    .build() {
}

class AttachVpnGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AttachVpnGateway", {})
    .n("EC2Client", "AttachVpnGatewayCommand")
    .f(void 0, void 0)
    .ser(se_AttachVpnGatewayCommand)
    .de(de_AttachVpnGatewayCommand)
    .build() {
}

class AuthorizeClientVpnIngressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AuthorizeClientVpnIngress", {})
    .n("EC2Client", "AuthorizeClientVpnIngressCommand")
    .f(void 0, void 0)
    .ser(se_AuthorizeClientVpnIngressCommand)
    .de(de_AuthorizeClientVpnIngressCommand)
    .build() {
}

class AuthorizeSecurityGroupEgressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AuthorizeSecurityGroupEgress", {})
    .n("EC2Client", "AuthorizeSecurityGroupEgressCommand")
    .f(void 0, void 0)
    .ser(se_AuthorizeSecurityGroupEgressCommand)
    .de(de_AuthorizeSecurityGroupEgressCommand)
    .build() {
}

class AuthorizeSecurityGroupIngressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "AuthorizeSecurityGroupIngress", {})
    .n("EC2Client", "AuthorizeSecurityGroupIngressCommand")
    .f(void 0, void 0)
    .ser(se_AuthorizeSecurityGroupIngressCommand)
    .de(de_AuthorizeSecurityGroupIngressCommand)
    .build() {
}

class BundleInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "BundleInstance", {})
    .n("EC2Client", "BundleInstanceCommand")
    .f(BundleInstanceRequestFilterSensitiveLog, BundleInstanceResultFilterSensitiveLog)
    .ser(se_BundleInstanceCommand)
    .de(de_BundleInstanceCommand)
    .build() {
}

class CancelBundleTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelBundleTask", {})
    .n("EC2Client", "CancelBundleTaskCommand")
    .f(void 0, CancelBundleTaskResultFilterSensitiveLog)
    .ser(se_CancelBundleTaskCommand)
    .de(de_CancelBundleTaskCommand)
    .build() {
}

class CancelCapacityReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelCapacityReservation", {})
    .n("EC2Client", "CancelCapacityReservationCommand")
    .f(void 0, void 0)
    .ser(se_CancelCapacityReservationCommand)
    .de(de_CancelCapacityReservationCommand)
    .build() {
}

class CancelCapacityReservationFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelCapacityReservationFleets", {})
    .n("EC2Client", "CancelCapacityReservationFleetsCommand")
    .f(void 0, void 0)
    .ser(se_CancelCapacityReservationFleetsCommand)
    .de(de_CancelCapacityReservationFleetsCommand)
    .build() {
}

class CancelConversionTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelConversionTask", {})
    .n("EC2Client", "CancelConversionTaskCommand")
    .f(void 0, void 0)
    .ser(se_CancelConversionTaskCommand)
    .de(de_CancelConversionTaskCommand)
    .build() {
}

class CancelDeclarativePoliciesReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelDeclarativePoliciesReport", {})
    .n("EC2Client", "CancelDeclarativePoliciesReportCommand")
    .f(void 0, void 0)
    .ser(se_CancelDeclarativePoliciesReportCommand)
    .de(de_CancelDeclarativePoliciesReportCommand)
    .build() {
}

class CancelExportTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelExportTask", {})
    .n("EC2Client", "CancelExportTaskCommand")
    .f(void 0, void 0)
    .ser(se_CancelExportTaskCommand)
    .de(de_CancelExportTaskCommand)
    .build() {
}

class CancelImageLaunchPermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelImageLaunchPermission", {})
    .n("EC2Client", "CancelImageLaunchPermissionCommand")
    .f(void 0, void 0)
    .ser(se_CancelImageLaunchPermissionCommand)
    .de(de_CancelImageLaunchPermissionCommand)
    .build() {
}

class CancelImportTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelImportTask", {})
    .n("EC2Client", "CancelImportTaskCommand")
    .f(void 0, void 0)
    .ser(se_CancelImportTaskCommand)
    .de(de_CancelImportTaskCommand)
    .build() {
}

class CancelReservedInstancesListingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelReservedInstancesListing", {})
    .n("EC2Client", "CancelReservedInstancesListingCommand")
    .f(void 0, void 0)
    .ser(se_CancelReservedInstancesListingCommand)
    .de(de_CancelReservedInstancesListingCommand)
    .build() {
}

class CancelSpotFleetRequestsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelSpotFleetRequests", {})
    .n("EC2Client", "CancelSpotFleetRequestsCommand")
    .f(void 0, void 0)
    .ser(se_CancelSpotFleetRequestsCommand)
    .de(de_CancelSpotFleetRequestsCommand)
    .build() {
}

class CancelSpotInstanceRequestsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CancelSpotInstanceRequests", {})
    .n("EC2Client", "CancelSpotInstanceRequestsCommand")
    .f(void 0, void 0)
    .ser(se_CancelSpotInstanceRequestsCommand)
    .de(de_CancelSpotInstanceRequestsCommand)
    .build() {
}

class ConfirmProductInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ConfirmProductInstance", {})
    .n("EC2Client", "ConfirmProductInstanceCommand")
    .f(void 0, void 0)
    .ser(se_ConfirmProductInstanceCommand)
    .de(de_ConfirmProductInstanceCommand)
    .build() {
}

class CopyFpgaImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CopyFpgaImage", {})
    .n("EC2Client", "CopyFpgaImageCommand")
    .f(void 0, void 0)
    .ser(se_CopyFpgaImageCommand)
    .de(de_CopyFpgaImageCommand)
    .build() {
}

class CopyImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CopyImage", {})
    .n("EC2Client", "CopyImageCommand")
    .f(void 0, void 0)
    .ser(se_CopyImageCommand)
    .de(de_CopyImageCommand)
    .build() {
}

const CapacityReservationDeliveryPreference = {
    FIXED: "fixed",
    INCREMENTAL: "incremental",
};
const EndDateType = {
    limited: "limited",
    unlimited: "unlimited",
};
const InstanceMatchCriteria = {
    open: "open",
    targeted: "targeted",
};
const CapacityReservationInstancePlatform = {
    LINUX_UNIX: "Linux/UNIX",
    LINUX_WITH_SQL_SERVER_ENTERPRISE: "Linux with SQL Server Enterprise",
    LINUX_WITH_SQL_SERVER_STANDARD: "Linux with SQL Server Standard",
    LINUX_WITH_SQL_SERVER_WEB: "Linux with SQL Server Web",
    RED_HAT_ENTERPRISE_LINUX: "Red Hat Enterprise Linux",
    RHEL_WITH_HA: "RHEL with HA",
    RHEL_WITH_HA_AND_SQL_SERVER_ENTERPRISE: "RHEL with HA and SQL Server Enterprise",
    RHEL_WITH_HA_AND_SQL_SERVER_STANDARD: "RHEL with HA and SQL Server Standard",
    RHEL_WITH_SQL_SERVER_ENTERPRISE: "RHEL with SQL Server Enterprise",
    RHEL_WITH_SQL_SERVER_STANDARD: "RHEL with SQL Server Standard",
    RHEL_WITH_SQL_SERVER_WEB: "RHEL with SQL Server Web",
    SUSE_LINUX: "SUSE Linux",
    UBUNTU_PRO_LINUX: "Ubuntu Pro",
    WINDOWS: "Windows",
    WINDOWS_WITH_SQL_SERVER: "Windows with SQL Server",
    WINDOWS_WITH_SQL_SERVER_ENTERPRISE: "Windows with SQL Server Enterprise",
    WINDOWS_WITH_SQL_SERVER_STANDARD: "Windows with SQL Server Standard",
    WINDOWS_WITH_SQL_SERVER_WEB: "Windows with SQL Server Web",
};
const CapacityReservationTenancy = {
    dedicated: "dedicated",
    default: "default",
};
const CapacityReservationType = {
    CAPACITY_BLOCK: "capacity-block",
    DEFAULT: "default",
};
const CapacityReservationState = {
    active: "active",
    assessing: "assessing",
    cancelled: "cancelled",
    delayed: "delayed",
    expired: "expired",
    failed: "failed",
    payment_failed: "payment-failed",
    payment_pending: "payment-pending",
    pending: "pending",
    scheduled: "scheduled",
    unavailable: "unavailable",
    unsupported: "unsupported",
};
const FleetInstanceMatchCriteria = {
    open: "open",
};
const _InstanceType = {
    a1_2xlarge: "a1.2xlarge",
    a1_4xlarge: "a1.4xlarge",
    a1_large: "a1.large",
    a1_medium: "a1.medium",
    a1_metal: "a1.metal",
    a1_xlarge: "a1.xlarge",
    c1_medium: "c1.medium",
    c1_xlarge: "c1.xlarge",
    c3_2xlarge: "c3.2xlarge",
    c3_4xlarge: "c3.4xlarge",
    c3_8xlarge: "c3.8xlarge",
    c3_large: "c3.large",
    c3_xlarge: "c3.xlarge",
    c4_2xlarge: "c4.2xlarge",
    c4_4xlarge: "c4.4xlarge",
    c4_8xlarge: "c4.8xlarge",
    c4_large: "c4.large",
    c4_xlarge: "c4.xlarge",
    c5_12xlarge: "c5.12xlarge",
    c5_18xlarge: "c5.18xlarge",
    c5_24xlarge: "c5.24xlarge",
    c5_2xlarge: "c5.2xlarge",
    c5_4xlarge: "c5.4xlarge",
    c5_9xlarge: "c5.9xlarge",
    c5_large: "c5.large",
    c5_metal: "c5.metal",
    c5_xlarge: "c5.xlarge",
    c5a_12xlarge: "c5a.12xlarge",
    c5a_16xlarge: "c5a.16xlarge",
    c5a_24xlarge: "c5a.24xlarge",
    c5a_2xlarge: "c5a.2xlarge",
    c5a_4xlarge: "c5a.4xlarge",
    c5a_8xlarge: "c5a.8xlarge",
    c5a_large: "c5a.large",
    c5a_xlarge: "c5a.xlarge",
    c5ad_12xlarge: "c5ad.12xlarge",
    c5ad_16xlarge: "c5ad.16xlarge",
    c5ad_24xlarge: "c5ad.24xlarge",
    c5ad_2xlarge: "c5ad.2xlarge",
    c5ad_4xlarge: "c5ad.4xlarge",
    c5ad_8xlarge: "c5ad.8xlarge",
    c5ad_large: "c5ad.large",
    c5ad_xlarge: "c5ad.xlarge",
    c5d_12xlarge: "c5d.12xlarge",
    c5d_18xlarge: "c5d.18xlarge",
    c5d_24xlarge: "c5d.24xlarge",
    c5d_2xlarge: "c5d.2xlarge",
    c5d_4xlarge: "c5d.4xlarge",
    c5d_9xlarge: "c5d.9xlarge",
    c5d_large: "c5d.large",
    c5d_metal: "c5d.metal",
    c5d_xlarge: "c5d.xlarge",
    c5n_18xlarge: "c5n.18xlarge",
    c5n_2xlarge: "c5n.2xlarge",
    c5n_4xlarge: "c5n.4xlarge",
    c5n_9xlarge: "c5n.9xlarge",
    c5n_large: "c5n.large",
    c5n_metal: "c5n.metal",
    c5n_xlarge: "c5n.xlarge",
    c6a_12xlarge: "c6a.12xlarge",
    c6a_16xlarge: "c6a.16xlarge",
    c6a_24xlarge: "c6a.24xlarge",
    c6a_2xlarge: "c6a.2xlarge",
    c6a_32xlarge: "c6a.32xlarge",
    c6a_48xlarge: "c6a.48xlarge",
    c6a_4xlarge: "c6a.4xlarge",
    c6a_8xlarge: "c6a.8xlarge",
    c6a_large: "c6a.large",
    c6a_metal: "c6a.metal",
    c6a_xlarge: "c6a.xlarge",
    c6g_12xlarge: "c6g.12xlarge",
    c6g_16xlarge: "c6g.16xlarge",
    c6g_2xlarge: "c6g.2xlarge",
    c6g_4xlarge: "c6g.4xlarge",
    c6g_8xlarge: "c6g.8xlarge",
    c6g_large: "c6g.large",
    c6g_medium: "c6g.medium",
    c6g_metal: "c6g.metal",
    c6g_xlarge: "c6g.xlarge",
    c6gd_12xlarge: "c6gd.12xlarge",
    c6gd_16xlarge: "c6gd.16xlarge",
    c6gd_2xlarge: "c6gd.2xlarge",
    c6gd_4xlarge: "c6gd.4xlarge",
    c6gd_8xlarge: "c6gd.8xlarge",
    c6gd_large: "c6gd.large",
    c6gd_medium: "c6gd.medium",
    c6gd_metal: "c6gd.metal",
    c6gd_xlarge: "c6gd.xlarge",
    c6gn_12xlarge: "c6gn.12xlarge",
    c6gn_16xlarge: "c6gn.16xlarge",
    c6gn_2xlarge: "c6gn.2xlarge",
    c6gn_4xlarge: "c6gn.4xlarge",
    c6gn_8xlarge: "c6gn.8xlarge",
    c6gn_large: "c6gn.large",
    c6gn_medium: "c6gn.medium",
    c6gn_xlarge: "c6gn.xlarge",
    c6i_12xlarge: "c6i.12xlarge",
    c6i_16xlarge: "c6i.16xlarge",
    c6i_24xlarge: "c6i.24xlarge",
    c6i_2xlarge: "c6i.2xlarge",
    c6i_32xlarge: "c6i.32xlarge",
    c6i_4xlarge: "c6i.4xlarge",
    c6i_8xlarge: "c6i.8xlarge",
    c6i_large: "c6i.large",
    c6i_metal: "c6i.metal",
    c6i_xlarge: "c6i.xlarge",
    c6id_12xlarge: "c6id.12xlarge",
    c6id_16xlarge: "c6id.16xlarge",
    c6id_24xlarge: "c6id.24xlarge",
    c6id_2xlarge: "c6id.2xlarge",
    c6id_32xlarge: "c6id.32xlarge",
    c6id_4xlarge: "c6id.4xlarge",
    c6id_8xlarge: "c6id.8xlarge",
    c6id_large: "c6id.large",
    c6id_metal: "c6id.metal",
    c6id_xlarge: "c6id.xlarge",
    c6in_12xlarge: "c6in.12xlarge",
    c6in_16xlarge: "c6in.16xlarge",
    c6in_24xlarge: "c6in.24xlarge",
    c6in_2xlarge: "c6in.2xlarge",
    c6in_32xlarge: "c6in.32xlarge",
    c6in_4xlarge: "c6in.4xlarge",
    c6in_8xlarge: "c6in.8xlarge",
    c6in_large: "c6in.large",
    c6in_metal: "c6in.metal",
    c6in_xlarge: "c6in.xlarge",
    c7a_12xlarge: "c7a.12xlarge",
    c7a_16xlarge: "c7a.16xlarge",
    c7a_24xlarge: "c7a.24xlarge",
    c7a_2xlarge: "c7a.2xlarge",
    c7a_32xlarge: "c7a.32xlarge",
    c7a_48xlarge: "c7a.48xlarge",
    c7a_4xlarge: "c7a.4xlarge",
    c7a_8xlarge: "c7a.8xlarge",
    c7a_large: "c7a.large",
    c7a_medium: "c7a.medium",
    c7a_metal_48xl: "c7a.metal-48xl",
    c7a_xlarge: "c7a.xlarge",
    c7g_12xlarge: "c7g.12xlarge",
    c7g_16xlarge: "c7g.16xlarge",
    c7g_2xlarge: "c7g.2xlarge",
    c7g_4xlarge: "c7g.4xlarge",
    c7g_8xlarge: "c7g.8xlarge",
    c7g_large: "c7g.large",
    c7g_medium: "c7g.medium",
    c7g_metal: "c7g.metal",
    c7g_xlarge: "c7g.xlarge",
    c7gd_12xlarge: "c7gd.12xlarge",
    c7gd_16xlarge: "c7gd.16xlarge",
    c7gd_2xlarge: "c7gd.2xlarge",
    c7gd_4xlarge: "c7gd.4xlarge",
    c7gd_8xlarge: "c7gd.8xlarge",
    c7gd_large: "c7gd.large",
    c7gd_medium: "c7gd.medium",
    c7gd_metal: "c7gd.metal",
    c7gd_xlarge: "c7gd.xlarge",
    c7gn_12xlarge: "c7gn.12xlarge",
    c7gn_16xlarge: "c7gn.16xlarge",
    c7gn_2xlarge: "c7gn.2xlarge",
    c7gn_4xlarge: "c7gn.4xlarge",
    c7gn_8xlarge: "c7gn.8xlarge",
    c7gn_large: "c7gn.large",
    c7gn_medium: "c7gn.medium",
    c7gn_metal: "c7gn.metal",
    c7gn_xlarge: "c7gn.xlarge",
    c7i_12xlarge: "c7i.12xlarge",
    c7i_16xlarge: "c7i.16xlarge",
    c7i_24xlarge: "c7i.24xlarge",
    c7i_2xlarge: "c7i.2xlarge",
    c7i_48xlarge: "c7i.48xlarge",
    c7i_4xlarge: "c7i.4xlarge",
    c7i_8xlarge: "c7i.8xlarge",
    c7i_flex_12xlarge: "c7i-flex.12xlarge",
    c7i_flex_16xlarge: "c7i-flex.16xlarge",
    c7i_flex_2xlarge: "c7i-flex.2xlarge",
    c7i_flex_4xlarge: "c7i-flex.4xlarge",
    c7i_flex_8xlarge: "c7i-flex.8xlarge",
    c7i_flex_large: "c7i-flex.large",
    c7i_flex_xlarge: "c7i-flex.xlarge",
    c7i_large: "c7i.large",
    c7i_metal_24xl: "c7i.metal-24xl",
    c7i_metal_48xl: "c7i.metal-48xl",
    c7i_xlarge: "c7i.xlarge",
    c8g_12xlarge: "c8g.12xlarge",
    c8g_16xlarge: "c8g.16xlarge",
    c8g_24xlarge: "c8g.24xlarge",
    c8g_2xlarge: "c8g.2xlarge",
    c8g_48xlarge: "c8g.48xlarge",
    c8g_4xlarge: "c8g.4xlarge",
    c8g_8xlarge: "c8g.8xlarge",
    c8g_large: "c8g.large",
    c8g_medium: "c8g.medium",
    c8g_metal_24xl: "c8g.metal-24xl",
    c8g_metal_48xl: "c8g.metal-48xl",
    c8g_xlarge: "c8g.xlarge",
    c8gd_12xlarge: "c8gd.12xlarge",
    c8gd_16xlarge: "c8gd.16xlarge",
    c8gd_24xlarge: "c8gd.24xlarge",
    c8gd_2xlarge: "c8gd.2xlarge",
    c8gd_48xlarge: "c8gd.48xlarge",
    c8gd_4xlarge: "c8gd.4xlarge",
    c8gd_8xlarge: "c8gd.8xlarge",
    c8gd_large: "c8gd.large",
    c8gd_medium: "c8gd.medium",
    c8gd_metal_24xl: "c8gd.metal-24xl",
    c8gd_metal_48xl: "c8gd.metal-48xl",
    c8gd_xlarge: "c8gd.xlarge",
    c8gn_12xlarge: "c8gn.12xlarge",
    c8gn_16xlarge: "c8gn.16xlarge",
    c8gn_24xlarge: "c8gn.24xlarge",
    c8gn_2xlarge: "c8gn.2xlarge",
    c8gn_48xlarge: "c8gn.48xlarge",
    c8gn_4xlarge: "c8gn.4xlarge",
    c8gn_8xlarge: "c8gn.8xlarge",
    c8gn_large: "c8gn.large",
    c8gn_medium: "c8gn.medium",
    c8gn_metal_24xl: "c8gn.metal-24xl",
    c8gn_metal_48xl: "c8gn.metal-48xl",
    c8gn_xlarge: "c8gn.xlarge",
    cc1_4xlarge: "cc1.4xlarge",
    cc2_8xlarge: "cc2.8xlarge",
    cg1_4xlarge: "cg1.4xlarge",
    cr1_8xlarge: "cr1.8xlarge",
    d2_2xlarge: "d2.2xlarge",
    d2_4xlarge: "d2.4xlarge",
    d2_8xlarge: "d2.8xlarge",
    d2_xlarge: "d2.xlarge",
    d3_2xlarge: "d3.2xlarge",
    d3_4xlarge: "d3.4xlarge",
    d3_8xlarge: "d3.8xlarge",
    d3_xlarge: "d3.xlarge",
    d3en_12xlarge: "d3en.12xlarge",
    d3en_2xlarge: "d3en.2xlarge",
    d3en_4xlarge: "d3en.4xlarge",
    d3en_6xlarge: "d3en.6xlarge",
    d3en_8xlarge: "d3en.8xlarge",
    d3en_xlarge: "d3en.xlarge",
    dl1_24xlarge: "dl1.24xlarge",
    dl2q_24xlarge: "dl2q.24xlarge",
    f1_16xlarge: "f1.16xlarge",
    f1_2xlarge: "f1.2xlarge",
    f1_4xlarge: "f1.4xlarge",
    f2_12xlarge: "f2.12xlarge",
    f2_48xlarge: "f2.48xlarge",
    f2_6xlarge: "f2.6xlarge",
    g2_2xlarge: "g2.2xlarge",
    g2_8xlarge: "g2.8xlarge",
    g3_16xlarge: "g3.16xlarge",
    g3_4xlarge: "g3.4xlarge",
    g3_8xlarge: "g3.8xlarge",
    g3s_xlarge: "g3s.xlarge",
    g4ad_16xlarge: "g4ad.16xlarge",
    g4ad_2xlarge: "g4ad.2xlarge",
    g4ad_4xlarge: "g4ad.4xlarge",
    g4ad_8xlarge: "g4ad.8xlarge",
    g4ad_xlarge: "g4ad.xlarge",
    g4dn_12xlarge: "g4dn.12xlarge",
    g4dn_16xlarge: "g4dn.16xlarge",
    g4dn_2xlarge: "g4dn.2xlarge",
    g4dn_4xlarge: "g4dn.4xlarge",
    g4dn_8xlarge: "g4dn.8xlarge",
    g4dn_metal: "g4dn.metal",
    g4dn_xlarge: "g4dn.xlarge",
    g5_12xlarge: "g5.12xlarge",
    g5_16xlarge: "g5.16xlarge",
    g5_24xlarge: "g5.24xlarge",
    g5_2xlarge: "g5.2xlarge",
    g5_48xlarge: "g5.48xlarge",
    g5_4xlarge: "g5.4xlarge",
    g5_8xlarge: "g5.8xlarge",
    g5_xlarge: "g5.xlarge",
    g5g_16xlarge: "g5g.16xlarge",
    g5g_2xlarge: "g5g.2xlarge",
    g5g_4xlarge: "g5g.4xlarge",
    g5g_8xlarge: "g5g.8xlarge",
    g5g_metal: "g5g.metal",
    g5g_xlarge: "g5g.xlarge",
    g6_12xlarge: "g6.12xlarge",
    g6_16xlarge: "g6.16xlarge",
    g6_24xlarge: "g6.24xlarge",
    g6_2xlarge: "g6.2xlarge",
    g6_48xlarge: "g6.48xlarge",
    g6_4xlarge: "g6.4xlarge",
    g6_8xlarge: "g6.8xlarge",
    g6_xlarge: "g6.xlarge",
    g6e_12xlarge: "g6e.12xlarge",
    g6e_16xlarge: "g6e.16xlarge",
    g6e_24xlarge: "g6e.24xlarge",
    g6e_2xlarge: "g6e.2xlarge",
    g6e_48xlarge: "g6e.48xlarge",
    g6e_4xlarge: "g6e.4xlarge",
    g6e_8xlarge: "g6e.8xlarge",
    g6e_xlarge: "g6e.xlarge",
    g6f_2xlarge: "g6f.2xlarge",
    g6f_4xlarge: "g6f.4xlarge",
    g6f_large: "g6f.large",
    g6f_xlarge: "g6f.xlarge",
    gr6_4xlarge: "gr6.4xlarge",
    gr6_8xlarge: "gr6.8xlarge",
    gr6f_4xlarge: "gr6f.4xlarge",
    h1_16xlarge: "h1.16xlarge",
    h1_2xlarge: "h1.2xlarge",
    h1_4xlarge: "h1.4xlarge",
    h1_8xlarge: "h1.8xlarge",
    hi1_4xlarge: "hi1.4xlarge",
    hpc6a_48xlarge: "hpc6a.48xlarge",
    hpc6id_32xlarge: "hpc6id.32xlarge",
    hpc7a_12xlarge: "hpc7a.12xlarge",
    hpc7a_24xlarge: "hpc7a.24xlarge",
    hpc7a_48xlarge: "hpc7a.48xlarge",
    hpc7a_96xlarge: "hpc7a.96xlarge",
    hpc7g_16xlarge: "hpc7g.16xlarge",
    hpc7g_4xlarge: "hpc7g.4xlarge",
    hpc7g_8xlarge: "hpc7g.8xlarge",
    hs1_8xlarge: "hs1.8xlarge",
    i2_2xlarge: "i2.2xlarge",
    i2_4xlarge: "i2.4xlarge",
    i2_8xlarge: "i2.8xlarge",
    i2_xlarge: "i2.xlarge",
    i3_16xlarge: "i3.16xlarge",
    i3_2xlarge: "i3.2xlarge",
    i3_4xlarge: "i3.4xlarge",
    i3_8xlarge: "i3.8xlarge",
    i3_large: "i3.large",
    i3_metal: "i3.metal",
    i3_xlarge: "i3.xlarge",
    i3en_12xlarge: "i3en.12xlarge",
    i3en_24xlarge: "i3en.24xlarge",
    i3en_2xlarge: "i3en.2xlarge",
    i3en_3xlarge: "i3en.3xlarge",
    i3en_6xlarge: "i3en.6xlarge",
    i3en_large: "i3en.large",
    i3en_metal: "i3en.metal",
    i3en_xlarge: "i3en.xlarge",
    i4g_16xlarge: "i4g.16xlarge",
    i4g_2xlarge: "i4g.2xlarge",
    i4g_4xlarge: "i4g.4xlarge",
    i4g_8xlarge: "i4g.8xlarge",
    i4g_large: "i4g.large",
    i4g_xlarge: "i4g.xlarge",
    i4i_12xlarge: "i4i.12xlarge",
    i4i_16xlarge: "i4i.16xlarge",
    i4i_24xlarge: "i4i.24xlarge",
    i4i_2xlarge: "i4i.2xlarge",
    i4i_32xlarge: "i4i.32xlarge",
    i4i_4xlarge: "i4i.4xlarge",
    i4i_8xlarge: "i4i.8xlarge",
    i4i_large: "i4i.large",
    i4i_metal: "i4i.metal",
    i4i_xlarge: "i4i.xlarge",
    i7i_12xlarge: "i7i.12xlarge",
    i7i_16xlarge: "i7i.16xlarge",
    i7i_24xlarge: "i7i.24xlarge",
    i7i_2xlarge: "i7i.2xlarge",
    i7i_48xlarge: "i7i.48xlarge",
    i7i_4xlarge: "i7i.4xlarge",
    i7i_8xlarge: "i7i.8xlarge",
    i7i_large: "i7i.large",
    i7i_metal_24xl: "i7i.metal-24xl",
    i7i_metal_48xl: "i7i.metal-48xl",
    i7i_xlarge: "i7i.xlarge",
    i7ie_12xlarge: "i7ie.12xlarge",
    i7ie_18xlarge: "i7ie.18xlarge",
    i7ie_24xlarge: "i7ie.24xlarge",
    i7ie_2xlarge: "i7ie.2xlarge",
    i7ie_3xlarge: "i7ie.3xlarge",
    i7ie_48xlarge: "i7ie.48xlarge",
    i7ie_6xlarge: "i7ie.6xlarge",
    i7ie_large: "i7ie.large",
    i7ie_metal_24xl: "i7ie.metal-24xl",
    i7ie_metal_48xl: "i7ie.metal-48xl",
    i7ie_xlarge: "i7ie.xlarge",
    i8g_12xlarge: "i8g.12xlarge",
    i8g_16xlarge: "i8g.16xlarge",
    i8g_24xlarge: "i8g.24xlarge",
    i8g_2xlarge: "i8g.2xlarge",
    i8g_48xlarge: "i8g.48xlarge",
    i8g_4xlarge: "i8g.4xlarge",
    i8g_8xlarge: "i8g.8xlarge",
    i8g_large: "i8g.large",
    i8g_metal_24xl: "i8g.metal-24xl",
    i8g_xlarge: "i8g.xlarge",
    i8ge_12xlarge: "i8ge.12xlarge",
    i8ge_18xlarge: "i8ge.18xlarge",
    i8ge_24xlarge: "i8ge.24xlarge",
    i8ge_2xlarge: "i8ge.2xlarge",
    i8ge_3xlarge: "i8ge.3xlarge",
    i8ge_48xlarge: "i8ge.48xlarge",
    i8ge_6xlarge: "i8ge.6xlarge",
    i8ge_large: "i8ge.large",
    i8ge_metal_24xl: "i8ge.metal-24xl",
    i8ge_metal_48xl: "i8ge.metal-48xl",
    i8ge_xlarge: "i8ge.xlarge",
    im4gn_16xlarge: "im4gn.16xlarge",
    im4gn_2xlarge: "im4gn.2xlarge",
    im4gn_4xlarge: "im4gn.4xlarge",
    im4gn_8xlarge: "im4gn.8xlarge",
    im4gn_large: "im4gn.large",
    im4gn_xlarge: "im4gn.xlarge",
    inf1_24xlarge: "inf1.24xlarge",
    inf1_2xlarge: "inf1.2xlarge",
    inf1_6xlarge: "inf1.6xlarge",
    inf1_xlarge: "inf1.xlarge",
    inf2_24xlarge: "inf2.24xlarge",
    inf2_48xlarge: "inf2.48xlarge",
    inf2_8xlarge: "inf2.8xlarge",
    inf2_xlarge: "inf2.xlarge",
    is4gen_2xlarge: "is4gen.2xlarge",
    is4gen_4xlarge: "is4gen.4xlarge",
    is4gen_8xlarge: "is4gen.8xlarge",
    is4gen_large: "is4gen.large",
    is4gen_medium: "is4gen.medium",
    is4gen_xlarge: "is4gen.xlarge",
    m1_large: "m1.large",
    m1_medium: "m1.medium",
    m1_small: "m1.small",
    m1_xlarge: "m1.xlarge",
    m2_2xlarge: "m2.2xlarge",
    m2_4xlarge: "m2.4xlarge",
    m2_xlarge: "m2.xlarge",
    m3_2xlarge: "m3.2xlarge",
    m3_large: "m3.large",
    m3_medium: "m3.medium",
    m3_xlarge: "m3.xlarge",
    m4_10xlarge: "m4.10xlarge",
    m4_16xlarge: "m4.16xlarge",
    m4_2xlarge: "m4.2xlarge",
    m4_4xlarge: "m4.4xlarge",
    m4_large: "m4.large",
    m4_xlarge: "m4.xlarge",
    m5_12xlarge: "m5.12xlarge",
    m5_16xlarge: "m5.16xlarge",
    m5_24xlarge: "m5.24xlarge",
    m5_2xlarge: "m5.2xlarge",
    m5_4xlarge: "m5.4xlarge",
    m5_8xlarge: "m5.8xlarge",
    m5_large: "m5.large",
    m5_metal: "m5.metal",
    m5_xlarge: "m5.xlarge",
    m5a_12xlarge: "m5a.12xlarge",
    m5a_16xlarge: "m5a.16xlarge",
    m5a_24xlarge: "m5a.24xlarge",
    m5a_2xlarge: "m5a.2xlarge",
    m5a_4xlarge: "m5a.4xlarge",
    m5a_8xlarge: "m5a.8xlarge",
    m5a_large: "m5a.large",
    m5a_xlarge: "m5a.xlarge",
    m5ad_12xlarge: "m5ad.12xlarge",
    m5ad_16xlarge: "m5ad.16xlarge",
    m5ad_24xlarge: "m5ad.24xlarge",
    m5ad_2xlarge: "m5ad.2xlarge",
    m5ad_4xlarge: "m5ad.4xlarge",
    m5ad_8xlarge: "m5ad.8xlarge",
    m5ad_large: "m5ad.large",
    m5ad_xlarge: "m5ad.xlarge",
    m5d_12xlarge: "m5d.12xlarge",
    m5d_16xlarge: "m5d.16xlarge",
    m5d_24xlarge: "m5d.24xlarge",
    m5d_2xlarge: "m5d.2xlarge",
    m5d_4xlarge: "m5d.4xlarge",
    m5d_8xlarge: "m5d.8xlarge",
    m5d_large: "m5d.large",
    m5d_metal: "m5d.metal",
    m5d_xlarge: "m5d.xlarge",
    m5dn_12xlarge: "m5dn.12xlarge",
    m5dn_16xlarge: "m5dn.16xlarge",
    m5dn_24xlarge: "m5dn.24xlarge",
    m5dn_2xlarge: "m5dn.2xlarge",
    m5dn_4xlarge: "m5dn.4xlarge",
    m5dn_8xlarge: "m5dn.8xlarge",
    m5dn_large: "m5dn.large",
    m5dn_metal: "m5dn.metal",
    m5dn_xlarge: "m5dn.xlarge",
    m5n_12xlarge: "m5n.12xlarge",
    m5n_16xlarge: "m5n.16xlarge",
    m5n_24xlarge: "m5n.24xlarge",
    m5n_2xlarge: "m5n.2xlarge",
    m5n_4xlarge: "m5n.4xlarge",
    m5n_8xlarge: "m5n.8xlarge",
    m5n_large: "m5n.large",
    m5n_metal: "m5n.metal",
    m5n_xlarge: "m5n.xlarge",
    m5zn_12xlarge: "m5zn.12xlarge",
    m5zn_2xlarge: "m5zn.2xlarge",
    m5zn_3xlarge: "m5zn.3xlarge",
    m5zn_6xlarge: "m5zn.6xlarge",
    m5zn_large: "m5zn.large",
    m5zn_metal: "m5zn.metal",
    m5zn_xlarge: "m5zn.xlarge",
    m6a_12xlarge: "m6a.12xlarge",
    m6a_16xlarge: "m6a.16xlarge",
    m6a_24xlarge: "m6a.24xlarge",
    m6a_2xlarge: "m6a.2xlarge",
    m6a_32xlarge: "m6a.32xlarge",
    m6a_48xlarge: "m6a.48xlarge",
    m6a_4xlarge: "m6a.4xlarge",
    m6a_8xlarge: "m6a.8xlarge",
    m6a_large: "m6a.large",
    m6a_metal: "m6a.metal",
    m6a_xlarge: "m6a.xlarge",
    m6g_12xlarge: "m6g.12xlarge",
    m6g_16xlarge: "m6g.16xlarge",
    m6g_2xlarge: "m6g.2xlarge",
    m6g_4xlarge: "m6g.4xlarge",
    m6g_8xlarge: "m6g.8xlarge",
    m6g_large: "m6g.large",
    m6g_medium: "m6g.medium",
    m6g_metal: "m6g.metal",
    m6g_xlarge: "m6g.xlarge",
    m6gd_12xlarge: "m6gd.12xlarge",
    m6gd_16xlarge: "m6gd.16xlarge",
    m6gd_2xlarge: "m6gd.2xlarge",
    m6gd_4xlarge: "m6gd.4xlarge",
    m6gd_8xlarge: "m6gd.8xlarge",
    m6gd_large: "m6gd.large",
    m6gd_medium: "m6gd.medium",
    m6gd_metal: "m6gd.metal",
    m6gd_xlarge: "m6gd.xlarge",
    m6i_12xlarge: "m6i.12xlarge",
    m6i_16xlarge: "m6i.16xlarge",
    m6i_24xlarge: "m6i.24xlarge",
    m6i_2xlarge: "m6i.2xlarge",
    m6i_32xlarge: "m6i.32xlarge",
    m6i_4xlarge: "m6i.4xlarge",
    m6i_8xlarge: "m6i.8xlarge",
    m6i_large: "m6i.large",
    m6i_metal: "m6i.metal",
    m6i_xlarge: "m6i.xlarge",
    m6id_12xlarge: "m6id.12xlarge",
    m6id_16xlarge: "m6id.16xlarge",
    m6id_24xlarge: "m6id.24xlarge",
    m6id_2xlarge: "m6id.2xlarge",
    m6id_32xlarge: "m6id.32xlarge",
    m6id_4xlarge: "m6id.4xlarge",
    m6id_8xlarge: "m6id.8xlarge",
    m6id_large: "m6id.large",
    m6id_metal: "m6id.metal",
    m6id_xlarge: "m6id.xlarge",
    m6idn_12xlarge: "m6idn.12xlarge",
    m6idn_16xlarge: "m6idn.16xlarge",
    m6idn_24xlarge: "m6idn.24xlarge",
    m6idn_2xlarge: "m6idn.2xlarge",
    m6idn_32xlarge: "m6idn.32xlarge",
    m6idn_4xlarge: "m6idn.4xlarge",
    m6idn_8xlarge: "m6idn.8xlarge",
    m6idn_large: "m6idn.large",
    m6idn_metal: "m6idn.metal",
    m6idn_xlarge: "m6idn.xlarge",
    m6in_12xlarge: "m6in.12xlarge",
    m6in_16xlarge: "m6in.16xlarge",
    m6in_24xlarge: "m6in.24xlarge",
    m6in_2xlarge: "m6in.2xlarge",
    m6in_32xlarge: "m6in.32xlarge",
    m6in_4xlarge: "m6in.4xlarge",
    m6in_8xlarge: "m6in.8xlarge",
    m6in_large: "m6in.large",
    m6in_metal: "m6in.metal",
    m6in_xlarge: "m6in.xlarge",
    m7a_12xlarge: "m7a.12xlarge",
    m7a_16xlarge: "m7a.16xlarge",
    m7a_24xlarge: "m7a.24xlarge",
    m7a_2xlarge: "m7a.2xlarge",
    m7a_32xlarge: "m7a.32xlarge",
    m7a_48xlarge: "m7a.48xlarge",
    m7a_4xlarge: "m7a.4xlarge",
    m7a_8xlarge: "m7a.8xlarge",
    m7a_large: "m7a.large",
    m7a_medium: "m7a.medium",
    m7a_metal_48xl: "m7a.metal-48xl",
    m7a_xlarge: "m7a.xlarge",
    m7g_12xlarge: "m7g.12xlarge",
    m7g_16xlarge: "m7g.16xlarge",
    m7g_2xlarge: "m7g.2xlarge",
    m7g_4xlarge: "m7g.4xlarge",
    m7g_8xlarge: "m7g.8xlarge",
    m7g_large: "m7g.large",
    m7g_medium: "m7g.medium",
    m7g_metal: "m7g.metal",
    m7g_xlarge: "m7g.xlarge",
    m7gd_12xlarge: "m7gd.12xlarge",
    m7gd_16xlarge: "m7gd.16xlarge",
    m7gd_2xlarge: "m7gd.2xlarge",
    m7gd_4xlarge: "m7gd.4xlarge",
    m7gd_8xlarge: "m7gd.8xlarge",
    m7gd_large: "m7gd.large",
    m7gd_medium: "m7gd.medium",
    m7gd_metal: "m7gd.metal",
    m7gd_xlarge: "m7gd.xlarge",
    m7i_12xlarge: "m7i.12xlarge",
    m7i_16xlarge: "m7i.16xlarge",
    m7i_24xlarge: "m7i.24xlarge",
    m7i_2xlarge: "m7i.2xlarge",
    m7i_48xlarge: "m7i.48xlarge",
    m7i_4xlarge: "m7i.4xlarge",
    m7i_8xlarge: "m7i.8xlarge",
    m7i_flex_12xlarge: "m7i-flex.12xlarge",
    m7i_flex_16xlarge: "m7i-flex.16xlarge",
    m7i_flex_2xlarge: "m7i-flex.2xlarge",
    m7i_flex_4xlarge: "m7i-flex.4xlarge",
    m7i_flex_8xlarge: "m7i-flex.8xlarge",
    m7i_flex_large: "m7i-flex.large",
    m7i_flex_xlarge: "m7i-flex.xlarge",
    m7i_large: "m7i.large",
    m7i_metal_24xl: "m7i.metal-24xl",
    m7i_metal_48xl: "m7i.metal-48xl",
    m7i_xlarge: "m7i.xlarge",
    m8g_12xlarge: "m8g.12xlarge",
    m8g_16xlarge: "m8g.16xlarge",
    m8g_24xlarge: "m8g.24xlarge",
    m8g_2xlarge: "m8g.2xlarge",
    m8g_48xlarge: "m8g.48xlarge",
    m8g_4xlarge: "m8g.4xlarge",
    m8g_8xlarge: "m8g.8xlarge",
    m8g_large: "m8g.large",
    m8g_medium: "m8g.medium",
    m8g_metal_24xl: "m8g.metal-24xl",
    m8g_metal_48xl: "m8g.metal-48xl",
    m8g_xlarge: "m8g.xlarge",
    m8gd_12xlarge: "m8gd.12xlarge",
    m8gd_16xlarge: "m8gd.16xlarge",
    m8gd_24xlarge: "m8gd.24xlarge",
    m8gd_2xlarge: "m8gd.2xlarge",
    m8gd_48xlarge: "m8gd.48xlarge",
    m8gd_4xlarge: "m8gd.4xlarge",
    m8gd_8xlarge: "m8gd.8xlarge",
    m8gd_large: "m8gd.large",
    m8gd_medium: "m8gd.medium",
    m8gd_metal_24xl: "m8gd.metal-24xl",
    m8gd_metal_48xl: "m8gd.metal-48xl",
    m8gd_xlarge: "m8gd.xlarge",
    m8i_12xlarge: "m8i.12xlarge",
    m8i_16xlarge: "m8i.16xlarge",
    m8i_24xlarge: "m8i.24xlarge",
    m8i_2xlarge: "m8i.2xlarge",
    m8i_32xlarge: "m8i.32xlarge",
    m8i_48xlarge: "m8i.48xlarge",
    m8i_4xlarge: "m8i.4xlarge",
    m8i_8xlarge: "m8i.8xlarge",
    m8i_96xlarge: "m8i.96xlarge",
    m8i_flex_12xlarge: "m8i-flex.12xlarge",
    m8i_flex_16xlarge: "m8i-flex.16xlarge",
    m8i_flex_2xlarge: "m8i-flex.2xlarge",
    m8i_flex_4xlarge: "m8i-flex.4xlarge",
    m8i_flex_8xlarge: "m8i-flex.8xlarge",
    m8i_flex_large: "m8i-flex.large",
    m8i_flex_xlarge: "m8i-flex.xlarge",
    m8i_large: "m8i.large",
    m8i_metal_48xl: "m8i.metal-48xl",
    m8i_metal_96xl: "m8i.metal-96xl",
    m8i_xlarge: "m8i.xlarge",
    mac1_metal: "mac1.metal",
    mac2_m1ultra_metal: "mac2-m1ultra.metal",
    mac2_m2_metal: "mac2-m2.metal",
    mac2_m2pro_metal: "mac2-m2pro.metal",
    mac2_metal: "mac2.metal",
    mac_m4_metal: "mac-m4.metal",
    mac_m4pro_metal: "mac-m4pro.metal",
    p2_16xlarge: "p2.16xlarge",
    p2_8xlarge: "p2.8xlarge",
    p2_xlarge: "p2.xlarge",
    p3_16xlarge: "p3.16xlarge",
    p3_2xlarge: "p3.2xlarge",
    p3_8xlarge: "p3.8xlarge",
    p3dn_24xlarge: "p3dn.24xlarge",
    p4d_24xlarge: "p4d.24xlarge",
    p4de_24xlarge: "p4de.24xlarge",
    p5_48xlarge: "p5.48xlarge",
    p5_4xlarge: "p5.4xlarge",
    p5e_48xlarge: "p5e.48xlarge",
    p5en_48xlarge: "p5en.48xlarge",
    p6_b200_48xlarge: "p6-b200.48xlarge",
    p6e_gb200_36xlarge: "p6e-gb200.36xlarge",
    r3_2xlarge: "r3.2xlarge",
    r3_4xlarge: "r3.4xlarge",
    r3_8xlarge: "r3.8xlarge",
    r3_large: "r3.large",
    r3_xlarge: "r3.xlarge",
    r4_16xlarge: "r4.16xlarge",
    r4_2xlarge: "r4.2xlarge",
    r4_4xlarge: "r4.4xlarge",
    r4_8xlarge: "r4.8xlarge",
    r4_large: "r4.large",
    r4_xlarge: "r4.xlarge",
    r5_12xlarge: "r5.12xlarge",
    r5_16xlarge: "r5.16xlarge",
    r5_24xlarge: "r5.24xlarge",
    r5_2xlarge: "r5.2xlarge",
    r5_4xlarge: "r5.4xlarge",
    r5_8xlarge: "r5.8xlarge",
    r5_large: "r5.large",
    r5_metal: "r5.metal",
    r5_xlarge: "r5.xlarge",
    r5a_12xlarge: "r5a.12xlarge",
    r5a_16xlarge: "r5a.16xlarge",
    r5a_24xlarge: "r5a.24xlarge",
    r5a_2xlarge: "r5a.2xlarge",
    r5a_4xlarge: "r5a.4xlarge",
    r5a_8xlarge: "r5a.8xlarge",
    r5a_large: "r5a.large",
    r5a_xlarge: "r5a.xlarge",
    r5ad_12xlarge: "r5ad.12xlarge",
    r5ad_16xlarge: "r5ad.16xlarge",
    r5ad_24xlarge: "r5ad.24xlarge",
    r5ad_2xlarge: "r5ad.2xlarge",
    r5ad_4xlarge: "r5ad.4xlarge",
    r5ad_8xlarge: "r5ad.8xlarge",
    r5ad_large: "r5ad.large",
    r5ad_xlarge: "r5ad.xlarge",
    r5b_12xlarge: "r5b.12xlarge",
    r5b_16xlarge: "r5b.16xlarge",
    r5b_24xlarge: "r5b.24xlarge",
    r5b_2xlarge: "r5b.2xlarge",
    r5b_4xlarge: "r5b.4xlarge",
    r5b_8xlarge: "r5b.8xlarge",
    r5b_large: "r5b.large",
    r5b_metal: "r5b.metal",
    r5b_xlarge: "r5b.xlarge",
    r5d_12xlarge: "r5d.12xlarge",
    r5d_16xlarge: "r5d.16xlarge",
    r5d_24xlarge: "r5d.24xlarge",
    r5d_2xlarge: "r5d.2xlarge",
    r5d_4xlarge: "r5d.4xlarge",
    r5d_8xlarge: "r5d.8xlarge",
    r5d_large: "r5d.large",
    r5d_metal: "r5d.metal",
    r5d_xlarge: "r5d.xlarge",
    r5dn_12xlarge: "r5dn.12xlarge",
    r5dn_16xlarge: "r5dn.16xlarge",
    r5dn_24xlarge: "r5dn.24xlarge",
    r5dn_2xlarge: "r5dn.2xlarge",
    r5dn_4xlarge: "r5dn.4xlarge",
    r5dn_8xlarge: "r5dn.8xlarge",
    r5dn_large: "r5dn.large",
    r5dn_metal: "r5dn.metal",
    r5dn_xlarge: "r5dn.xlarge",
    r5n_12xlarge: "r5n.12xlarge",
    r5n_16xlarge: "r5n.16xlarge",
    r5n_24xlarge: "r5n.24xlarge",
    r5n_2xlarge: "r5n.2xlarge",
    r5n_4xlarge: "r5n.4xlarge",
    r5n_8xlarge: "r5n.8xlarge",
    r5n_large: "r5n.large",
    r5n_metal: "r5n.metal",
    r5n_xlarge: "r5n.xlarge",
    r6a_12xlarge: "r6a.12xlarge",
    r6a_16xlarge: "r6a.16xlarge",
    r6a_24xlarge: "r6a.24xlarge",
    r6a_2xlarge: "r6a.2xlarge",
    r6a_32xlarge: "r6a.32xlarge",
    r6a_48xlarge: "r6a.48xlarge",
    r6a_4xlarge: "r6a.4xlarge",
    r6a_8xlarge: "r6a.8xlarge",
    r6a_large: "r6a.large",
    r6a_metal: "r6a.metal",
    r6a_xlarge: "r6a.xlarge",
    r6g_12xlarge: "r6g.12xlarge",
    r6g_16xlarge: "r6g.16xlarge",
    r6g_2xlarge: "r6g.2xlarge",
    r6g_4xlarge: "r6g.4xlarge",
    r6g_8xlarge: "r6g.8xlarge",
    r6g_large: "r6g.large",
    r6g_medium: "r6g.medium",
    r6g_metal: "r6g.metal",
    r6g_xlarge: "r6g.xlarge",
    r6gd_12xlarge: "r6gd.12xlarge",
    r6gd_16xlarge: "r6gd.16xlarge",
    r6gd_2xlarge: "r6gd.2xlarge",
    r6gd_4xlarge: "r6gd.4xlarge",
    r6gd_8xlarge: "r6gd.8xlarge",
    r6gd_large: "r6gd.large",
    r6gd_medium: "r6gd.medium",
    r6gd_metal: "r6gd.metal",
    r6gd_xlarge: "r6gd.xlarge",
    r6i_12xlarge: "r6i.12xlarge",
    r6i_16xlarge: "r6i.16xlarge",
    r6i_24xlarge: "r6i.24xlarge",
    r6i_2xlarge: "r6i.2xlarge",
    r6i_32xlarge: "r6i.32xlarge",
    r6i_4xlarge: "r6i.4xlarge",
    r6i_8xlarge: "r6i.8xlarge",
    r6i_large: "r6i.large",
    r6i_metal: "r6i.metal",
    r6i_xlarge: "r6i.xlarge",
    r6id_12xlarge: "r6id.12xlarge",
    r6id_16xlarge: "r6id.16xlarge",
    r6id_24xlarge: "r6id.24xlarge",
    r6id_2xlarge: "r6id.2xlarge",
    r6id_32xlarge: "r6id.32xlarge",
    r6id_4xlarge: "r6id.4xlarge",
    r6id_8xlarge: "r6id.8xlarge",
    r6id_large: "r6id.large",
    r6id_metal: "r6id.metal",
    r6id_xlarge: "r6id.xlarge",
    r6idn_12xlarge: "r6idn.12xlarge",
    r6idn_16xlarge: "r6idn.16xlarge",
    r6idn_24xlarge: "r6idn.24xlarge",
    r6idn_2xlarge: "r6idn.2xlarge",
    r6idn_32xlarge: "r6idn.32xlarge",
    r6idn_4xlarge: "r6idn.4xlarge",
    r6idn_8xlarge: "r6idn.8xlarge",
    r6idn_large: "r6idn.large",
    r6idn_metal: "r6idn.metal",
    r6idn_xlarge: "r6idn.xlarge",
    r6in_12xlarge: "r6in.12xlarge",
    r6in_16xlarge: "r6in.16xlarge",
    r6in_24xlarge: "r6in.24xlarge",
    r6in_2xlarge: "r6in.2xlarge",
    r6in_32xlarge: "r6in.32xlarge",
    r6in_4xlarge: "r6in.4xlarge",
    r6in_8xlarge: "r6in.8xlarge",
    r6in_large: "r6in.large",
    r6in_metal: "r6in.metal",
    r6in_xlarge: "r6in.xlarge",
    r7a_12xlarge: "r7a.12xlarge",
    r7a_16xlarge: "r7a.16xlarge",
    r7a_24xlarge: "r7a.24xlarge",
    r7a_2xlarge: "r7a.2xlarge",
    r7a_32xlarge: "r7a.32xlarge",
    r7a_48xlarge: "r7a.48xlarge",
    r7a_4xlarge: "r7a.4xlarge",
    r7a_8xlarge: "r7a.8xlarge",
    r7a_large: "r7a.large",
    r7a_medium: "r7a.medium",
    r7a_metal_48xl: "r7a.metal-48xl",
    r7a_xlarge: "r7a.xlarge",
    r7g_12xlarge: "r7g.12xlarge",
    r7g_16xlarge: "r7g.16xlarge",
    r7g_2xlarge: "r7g.2xlarge",
    r7g_4xlarge: "r7g.4xlarge",
    r7g_8xlarge: "r7g.8xlarge",
    r7g_large: "r7g.large",
    r7g_medium: "r7g.medium",
    r7g_metal: "r7g.metal",
    r7g_xlarge: "r7g.xlarge",
    r7gd_12xlarge: "r7gd.12xlarge",
    r7gd_16xlarge: "r7gd.16xlarge",
    r7gd_2xlarge: "r7gd.2xlarge",
    r7gd_4xlarge: "r7gd.4xlarge",
    r7gd_8xlarge: "r7gd.8xlarge",
    r7gd_large: "r7gd.large",
    r7gd_medium: "r7gd.medium",
    r7gd_metal: "r7gd.metal",
    r7gd_xlarge: "r7gd.xlarge",
    r7i_12xlarge: "r7i.12xlarge",
    r7i_16xlarge: "r7i.16xlarge",
    r7i_24xlarge: "r7i.24xlarge",
    r7i_2xlarge: "r7i.2xlarge",
    r7i_48xlarge: "r7i.48xlarge",
    r7i_4xlarge: "r7i.4xlarge",
    r7i_8xlarge: "r7i.8xlarge",
    r7i_large: "r7i.large",
    r7i_metal_24xl: "r7i.metal-24xl",
    r7i_metal_48xl: "r7i.metal-48xl",
    r7i_xlarge: "r7i.xlarge",
    r7iz_12xlarge: "r7iz.12xlarge",
    r7iz_16xlarge: "r7iz.16xlarge",
    r7iz_2xlarge: "r7iz.2xlarge",
    r7iz_32xlarge: "r7iz.32xlarge",
    r7iz_4xlarge: "r7iz.4xlarge",
    r7iz_8xlarge: "r7iz.8xlarge",
    r7iz_large: "r7iz.large",
    r7iz_metal_16xl: "r7iz.metal-16xl",
    r7iz_metal_32xl: "r7iz.metal-32xl",
    r7iz_xlarge: "r7iz.xlarge",
    r8g_12xlarge: "r8g.12xlarge",
    r8g_16xlarge: "r8g.16xlarge",
    r8g_24xlarge: "r8g.24xlarge",
    r8g_2xlarge: "r8g.2xlarge",
    r8g_48xlarge: "r8g.48xlarge",
    r8g_4xlarge: "r8g.4xlarge",
    r8g_8xlarge: "r8g.8xlarge",
    r8g_large: "r8g.large",
    r8g_medium: "r8g.medium",
    r8g_metal_24xl: "r8g.metal-24xl",
    r8g_metal_48xl: "r8g.metal-48xl",
    r8g_xlarge: "r8g.xlarge",
    r8gd_12xlarge: "r8gd.12xlarge",
    r8gd_16xlarge: "r8gd.16xlarge",
    r8gd_24xlarge: "r8gd.24xlarge",
    r8gd_2xlarge: "r8gd.2xlarge",
    r8gd_48xlarge: "r8gd.48xlarge",
    r8gd_4xlarge: "r8gd.4xlarge",
    r8gd_8xlarge: "r8gd.8xlarge",
    r8gd_large: "r8gd.large",
    r8gd_medium: "r8gd.medium",
    r8gd_metal_24xl: "r8gd.metal-24xl",
    r8gd_metal_48xl: "r8gd.metal-48xl",
    r8gd_xlarge: "r8gd.xlarge",
    r8gn_12xlarge: "r8gn.12xlarge",
    r8gn_16xlarge: "r8gn.16xlarge",
    r8gn_24xlarge: "r8gn.24xlarge",
    r8gn_2xlarge: "r8gn.2xlarge",
    r8gn_48xlarge: "r8gn.48xlarge",
    r8gn_4xlarge: "r8gn.4xlarge",
    r8gn_8xlarge: "r8gn.8xlarge",
    r8gn_large: "r8gn.large",
    r8gn_medium: "r8gn.medium",
    r8gn_metal_24xl: "r8gn.metal-24xl",
    r8gn_metal_48xl: "r8gn.metal-48xl",
    r8gn_xlarge: "r8gn.xlarge",
    r8i_12xlarge: "r8i.12xlarge",
    r8i_16xlarge: "r8i.16xlarge",
    r8i_24xlarge: "r8i.24xlarge",
    r8i_2xlarge: "r8i.2xlarge",
    r8i_32xlarge: "r8i.32xlarge",
    r8i_48xlarge: "r8i.48xlarge",
    r8i_4xlarge: "r8i.4xlarge",
    r8i_8xlarge: "r8i.8xlarge",
    r8i_96xlarge: "r8i.96xlarge",
    r8i_flex_12xlarge: "r8i-flex.12xlarge",
    r8i_flex_16xlarge: "r8i-flex.16xlarge",
    r8i_flex_2xlarge: "r8i-flex.2xlarge",
    r8i_flex_4xlarge: "r8i-flex.4xlarge",
    r8i_flex_8xlarge: "r8i-flex.8xlarge",
    r8i_flex_large: "r8i-flex.large",
    r8i_flex_xlarge: "r8i-flex.xlarge",
    r8i_large: "r8i.large",
    r8i_metal_48xl: "r8i.metal-48xl",
    r8i_metal_96xl: "r8i.metal-96xl",
    r8i_xlarge: "r8i.xlarge",
    t1_micro: "t1.micro",
    t2_2xlarge: "t2.2xlarge",
    t2_large: "t2.large",
    t2_medium: "t2.medium",
    t2_micro: "t2.micro",
    t2_nano: "t2.nano",
    t2_small: "t2.small",
    t2_xlarge: "t2.xlarge",
    t3_2xlarge: "t3.2xlarge",
    t3_large: "t3.large",
    t3_medium: "t3.medium",
    t3_micro: "t3.micro",
    t3_nano: "t3.nano",
    t3_small: "t3.small",
    t3_xlarge: "t3.xlarge",
    t3a_2xlarge: "t3a.2xlarge",
    t3a_large: "t3a.large",
    t3a_medium: "t3a.medium",
    t3a_micro: "t3a.micro",
    t3a_nano: "t3a.nano",
    t3a_small: "t3a.small",
    t3a_xlarge: "t3a.xlarge",
    t4g_2xlarge: "t4g.2xlarge",
    t4g_large: "t4g.large",
    t4g_medium: "t4g.medium",
    t4g_micro: "t4g.micro",
    t4g_nano: "t4g.nano",
    t4g_small: "t4g.small",
    t4g_xlarge: "t4g.xlarge",
    trn1_2xlarge: "trn1.2xlarge",
    trn1_32xlarge: "trn1.32xlarge",
    trn1n_32xlarge: "trn1n.32xlarge",
    trn2_48xlarge: "trn2.48xlarge",
    u7i_12tb_224xlarge: "u7i-12tb.224xlarge",
    u7i_6tb_112xlarge: "u7i-6tb.112xlarge",
    u7i_8tb_112xlarge: "u7i-8tb.112xlarge",
    u7ib_12tb_224xlarge: "u7ib-12tb.224xlarge",
    u7in_16tb_224xlarge: "u7in-16tb.224xlarge",
    u7in_24tb_224xlarge: "u7in-24tb.224xlarge",
    u7in_32tb_224xlarge: "u7in-32tb.224xlarge",
    u7inh_32tb_480xlarge: "u7inh-32tb.480xlarge",
    u_12tb1_112xlarge: "u-12tb1.112xlarge",
    u_12tb1_metal: "u-12tb1.metal",
    u_18tb1_112xlarge: "u-18tb1.112xlarge",
    u_18tb1_metal: "u-18tb1.metal",
    u_24tb1_112xlarge: "u-24tb1.112xlarge",
    u_24tb1_metal: "u-24tb1.metal",
    u_3tb1_56xlarge: "u-3tb1.56xlarge",
    u_6tb1_112xlarge: "u-6tb1.112xlarge",
    u_6tb1_56xlarge: "u-6tb1.56xlarge",
    u_6tb1_metal: "u-6tb1.metal",
    u_9tb1_112xlarge: "u-9tb1.112xlarge",
    u_9tb1_metal: "u-9tb1.metal",
    vt1_24xlarge: "vt1.24xlarge",
    vt1_3xlarge: "vt1.3xlarge",
    vt1_6xlarge: "vt1.6xlarge",
    x1_16xlarge: "x1.16xlarge",
    x1_32xlarge: "x1.32xlarge",
    x1e_16xlarge: "x1e.16xlarge",
    x1e_2xlarge: "x1e.2xlarge",
    x1e_32xlarge: "x1e.32xlarge",
    x1e_4xlarge: "x1e.4xlarge",
    x1e_8xlarge: "x1e.8xlarge",
    x1e_xlarge: "x1e.xlarge",
    x2gd_12xlarge: "x2gd.12xlarge",
    x2gd_16xlarge: "x2gd.16xlarge",
    x2gd_2xlarge: "x2gd.2xlarge",
    x2gd_4xlarge: "x2gd.4xlarge",
    x2gd_8xlarge: "x2gd.8xlarge",
    x2gd_large: "x2gd.large",
    x2gd_medium: "x2gd.medium",
    x2gd_metal: "x2gd.metal",
    x2gd_xlarge: "x2gd.xlarge",
    x2idn_16xlarge: "x2idn.16xlarge",
    x2idn_24xlarge: "x2idn.24xlarge",
    x2idn_32xlarge: "x2idn.32xlarge",
    x2idn_metal: "x2idn.metal",
    x2iedn_16xlarge: "x2iedn.16xlarge",
    x2iedn_24xlarge: "x2iedn.24xlarge",
    x2iedn_2xlarge: "x2iedn.2xlarge",
    x2iedn_32xlarge: "x2iedn.32xlarge",
    x2iedn_4xlarge: "x2iedn.4xlarge",
    x2iedn_8xlarge: "x2iedn.8xlarge",
    x2iedn_metal: "x2iedn.metal",
    x2iedn_xlarge: "x2iedn.xlarge",
    x2iezn_12xlarge: "x2iezn.12xlarge",
    x2iezn_2xlarge: "x2iezn.2xlarge",
    x2iezn_4xlarge: "x2iezn.4xlarge",
    x2iezn_6xlarge: "x2iezn.6xlarge",
    x2iezn_8xlarge: "x2iezn.8xlarge",
    x2iezn_metal: "x2iezn.metal",
    x8g_12xlarge: "x8g.12xlarge",
    x8g_16xlarge: "x8g.16xlarge",
    x8g_24xlarge: "x8g.24xlarge",
    x8g_2xlarge: "x8g.2xlarge",
    x8g_48xlarge: "x8g.48xlarge",
    x8g_4xlarge: "x8g.4xlarge",
    x8g_8xlarge: "x8g.8xlarge",
    x8g_large: "x8g.large",
    x8g_medium: "x8g.medium",
    x8g_metal_24xl: "x8g.metal-24xl",
    x8g_metal_48xl: "x8g.metal-48xl",
    x8g_xlarge: "x8g.xlarge",
    z1d_12xlarge: "z1d.12xlarge",
    z1d_2xlarge: "z1d.2xlarge",
    z1d_3xlarge: "z1d.3xlarge",
    z1d_6xlarge: "z1d.6xlarge",
    z1d_large: "z1d.large",
    z1d_metal: "z1d.metal",
    z1d_xlarge: "z1d.xlarge",
};
const FleetCapacityReservationTenancy = {
    default: "default",
};
const CarrierGatewayState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const ClientVpnAuthenticationType = {
    certificate_authentication: "certificate-authentication",
    directory_service_authentication: "directory-service-authentication",
    federated_authentication: "federated-authentication",
};
const EndpointIpAddressType = {
    dual_stack: "dual-stack",
    ipv4: "ipv4",
    ipv6: "ipv6",
};
const SelfServicePortal = {
    disabled: "disabled",
    enabled: "enabled",
};
const TrafficIpAddressType = {
    dual_stack: "dual-stack",
    ipv4: "ipv4",
    ipv6: "ipv6",
};
const TransportProtocol = {
    tcp: "tcp",
    udp: "udp",
};
const ClientVpnEndpointStatusCode = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending_associate: "pending-associate",
};
const ClientVpnRouteStatusCode = {
    active: "active",
    creating: "creating",
    deleting: "deleting",
    failed: "failed",
};
const GatewayType = {
    ipsec_1: "ipsec.1",
};
const BlockPublicAccessMode = {
    block_bidirectional: "block-bidirectional",
    block_ingress: "block-ingress",
    off: "off",
};
const HostnameType = {
    ip_name: "ip-name",
    resource_name: "resource-name",
};
const SubnetState = {
    available: "available",
    failed: "failed",
    failed_insufficient_capacity: "failed-insufficient-capacity",
    pending: "pending",
    unavailable: "unavailable",
};
const VpcEncryptionControlMode = {
    enforce: "enforce",
    monitor: "monitor",
};
const VpcEncryptionControlExclusionState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
};
const VpcEncryptionControlState = {
    available: "available",
    creating: "creating",
    delete_failed: "delete-failed",
    deleted: "deleted",
    deleting: "deleting",
    enforce_failed: "enforce-failed",
    enforce_in_progress: "enforce-in-progress",
    monitor_failed: "monitor-failed",
    monitor_in_progress: "monitor-in-progress",
};
const Tenancy = {
    dedicated: "dedicated",
    default: "default",
    host: "host",
};
const VpcState = {
    available: "available",
    pending: "pending",
};
const MacSystemIntegrityProtectionSettingStatus = {
    disabled: "disabled",
    enabled: "enabled",
};
const MacModificationTaskState = {
    failed: "failed",
    inprogress: "in-progress",
    pending: "pending",
    successful: "successful",
};
const MacModificationTaskType = {
    SIPModification: "sip-modification",
    VolumeOwnershipDelegation: "volume-ownership-delegation",
};
const FleetExcessCapacityTerminationPolicy = {
    NO_TERMINATION: "no-termination",
    TERMINATION: "termination",
};
const VolumeType = {
    gp2: "gp2",
    gp3: "gp3",
    io1: "io1",
    io2: "io2",
    sc1: "sc1",
    st1: "st1",
    standard: "standard",
};
const BareMetal = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
const BurstablePerformance = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
const CpuManufacturer = {
    AMAZON_WEB_SERVICES: "amazon-web-services",
    AMD: "amd",
    APPLE: "apple",
    INTEL: "intel",
};
const InstanceGeneration = {
    CURRENT: "current",
    PREVIOUS: "previous",
};
const LocalStorage = {
    EXCLUDED: "excluded",
    INCLUDED: "included",
    REQUIRED: "required",
};
const LocalStorageType = {
    HDD: "hdd",
    SSD: "ssd",
};
const FleetOnDemandAllocationStrategy = {
    LOWEST_PRICE: "lowest-price",
    PRIORITIZED: "prioritized",
};
const FleetCapacityReservationUsageStrategy = {
    USE_CAPACITY_RESERVATIONS_FIRST: "use-capacity-reservations-first",
};
const SpotAllocationStrategy = {
    CAPACITY_OPTIMIZED: "capacity-optimized",
    CAPACITY_OPTIMIZED_PRIORITIZED: "capacity-optimized-prioritized",
    DIVERSIFIED: "diversified",
    LOWEST_PRICE: "lowest-price",
    PRICE_CAPACITY_OPTIMIZED: "price-capacity-optimized",
};
const SpotInstanceInterruptionBehavior = {
    hibernate: "hibernate",
    stop: "stop",
    terminate: "terminate",
};
const FleetReplacementStrategy = {
    LAUNCH: "launch",
    LAUNCH_BEFORE_TERMINATE: "launch-before-terminate",
};
const DefaultTargetCapacityType = {
    CAPACITY_BLOCK: "capacity-block",
    ON_DEMAND: "on-demand",
    SPOT: "spot",
};
const TargetCapacityUnitType = {
    MEMORY_MIB: "memory-mib",
    UNITS: "units",
    VCPU: "vcpu",
};
const FleetType = {
    INSTANT: "instant",
    MAINTAIN: "maintain",
    REQUEST: "request",
};
const InstanceLifecycle = {
    ON_DEMAND: "on-demand",
    SPOT: "spot",
};
const PlatformValues = {
    Windows: "Windows",
};
const DestinationFileFormat = {
    parquet: "parquet",
    plain_text: "plain-text",
};
const LogDestinationType = {
    cloud_watch_logs: "cloud-watch-logs",
    kinesis_data_firehose: "kinesis-data-firehose",
    s3: "s3",
};
const FlowLogsResourceType = {
    NetworkInterface: "NetworkInterface",
    Subnet: "Subnet",
    TransitGateway: "TransitGateway",
    TransitGatewayAttachment: "TransitGatewayAttachment",
    VPC: "VPC",
};
const TrafficType = {
    ACCEPT: "ACCEPT",
    ALL: "ALL",
    REJECT: "REJECT",
};
const SnapshotLocationEnum = {
    LOCAL: "local",
    REGIONAL: "regional",
};
const IpAddressType = {
    dualstack: "dualstack",
    ipv4: "ipv4",
    ipv6: "ipv6",
};
const Ec2InstanceConnectEndpointState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    update_complete: "update-complete",
    update_failed: "update-failed",
    update_in_progress: "update-in-progress",
};
const ContainerFormat = {
    ova: "ova",
};
const DiskImageFormat = {
    RAW: "RAW",
    VHD: "VHD",
    VMDK: "VMDK",
};
const ExportEnvironment = {
    citrix: "citrix",
    microsoft: "microsoft",
    vmware: "vmware",
};
const ExportTaskState = {
    active: "active",
    cancelled: "cancelled",
    cancelling: "cancelling",
    completed: "completed",
};
const IpamMeteredAccount = {
    ipam_owner: "ipam-owner",
    resource_owner: "resource-owner",
};
const IpamTier = {
    advanced: "advanced",
    free: "free",
};
const IpamState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    isolate_complete: "isolate-complete",
    isolate_in_progress: "isolate-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_in_progress: "restore-in-progress",
};
const IpamExternalResourceVerificationTokenState = {
    CREATE_COMPLETE: "create-complete",
    CREATE_FAILED: "create-failed",
    CREATE_IN_PROGRESS: "create-in-progress",
    DELETE_COMPLETE: "delete-complete",
    DELETE_FAILED: "delete-failed",
    DELETE_IN_PROGRESS: "delete-in-progress",
};
const TokenState = {
    expired: "expired",
    valid: "valid",
};
const IpamPoolAwsService = {
    ec2: "ec2",
};
const IpamPoolPublicIpSource = {
    amazon: "amazon",
    byoip: "byoip",
};
const IpamPoolSourceResourceType = {
    vpc: "vpc",
};
const IpamScopeType = {
    private: "private",
    public: "public",
};
const IpamPoolState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    isolate_complete: "isolate-complete",
    isolate_in_progress: "isolate-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_in_progress: "restore-in-progress",
};
const IpamResourceDiscoveryState = {
    CREATE_COMPLETE: "create-complete",
    CREATE_FAILED: "create-failed",
    CREATE_IN_PROGRESS: "create-in-progress",
    DELETE_COMPLETE: "delete-complete",
    DELETE_FAILED: "delete-failed",
    DELETE_IN_PROGRESS: "delete-in-progress",
    ISOLATE_COMPLETE: "isolate-complete",
    ISOLATE_IN_PROGRESS: "isolate-in-progress",
    MODIFY_COMPLETE: "modify-complete",
    MODIFY_FAILED: "modify-failed",
    MODIFY_IN_PROGRESS: "modify-in-progress",
    RESTORE_IN_PROGRESS: "restore-in-progress",
};
const IpamScopeState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    isolate_complete: "isolate-complete",
    isolate_in_progress: "isolate-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_in_progress: "restore-in-progress",
};
const KeyFormat = {
    pem: "pem",
    ppk: "ppk",
};
const KeyType = {
    ed25519: "ed25519",
    rsa: "rsa",
};
const CapacityReservationPreference = {
    capacity_reservations_only: "capacity-reservations-only",
    none: "none",
    open: "open",
};
const AmdSevSnpSpecification = {
    disabled: "disabled",
    enabled: "enabled",
};
const ShutdownBehavior = {
    stop: "stop",
    terminate: "terminate",
};
const MarketType = {
    capacity_block: "capacity-block",
    spot: "spot",
};
const InstanceInterruptionBehavior = {
    hibernate: "hibernate",
    stop: "stop",
    terminate: "terminate",
};
const SpotInstanceType = {
    one_time: "one-time",
    persistent: "persistent",
};
const LaunchTemplateAutoRecoveryState = {
    default: "default",
    disabled: "disabled",
};
const LaunchTemplateInstanceMetadataEndpointState = {
    disabled: "disabled",
    enabled: "enabled",
};
const LaunchTemplateInstanceMetadataProtocolIpv6 = {
    disabled: "disabled",
    enabled: "enabled",
};
const LaunchTemplateHttpTokensState = {
    optional: "optional",
    required: "required",
};
const LaunchTemplateInstanceMetadataTagsState = {
    disabled: "disabled",
    enabled: "enabled",
};
const InstanceBandwidthWeighting = {
    DEFAULT: "default",
    EBS_1: "ebs-1",
    VPC_1: "vpc-1",
};
const CopySnapshotRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PresignedUrl && { PresignedUrl: smithyClient.SENSITIVE_STRING }),
});
const CreateDelegateMacVolumeOwnershipTaskRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MacCredentials && { MacCredentials: smithyClient.SENSITIVE_STRING }),
});
const KeyPairFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyMaterial && { KeyMaterial: smithyClient.SENSITIVE_STRING }),
});
const RequestLaunchTemplateDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const CreateLaunchTemplateRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: RequestLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData),
    }),
});
const CreateLaunchTemplateVersionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: RequestLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData),
    }),
});

class CopySnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
        middlewareSdkEc2.getCopySnapshotPresignedUrlPlugin(config),
    ];
})
    .s("AmazonEC2", "CopySnapshot", {})
    .n("EC2Client", "CopySnapshotCommand")
    .f(CopySnapshotRequestFilterSensitiveLog, void 0)
    .ser(se_CopySnapshotCommand)
    .de(de_CopySnapshotCommand)
    .build() {
}

class CreateCapacityReservationBySplittingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCapacityReservationBySplitting", {})
    .n("EC2Client", "CreateCapacityReservationBySplittingCommand")
    .f(void 0, void 0)
    .ser(se_CreateCapacityReservationBySplittingCommand)
    .de(de_CreateCapacityReservationBySplittingCommand)
    .build() {
}

class CreateCapacityReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCapacityReservation", {})
    .n("EC2Client", "CreateCapacityReservationCommand")
    .f(void 0, void 0)
    .ser(se_CreateCapacityReservationCommand)
    .de(de_CreateCapacityReservationCommand)
    .build() {
}

class CreateCapacityReservationFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCapacityReservationFleet", {})
    .n("EC2Client", "CreateCapacityReservationFleetCommand")
    .f(void 0, void 0)
    .ser(se_CreateCapacityReservationFleetCommand)
    .de(de_CreateCapacityReservationFleetCommand)
    .build() {
}

class CreateCarrierGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCarrierGateway", {})
    .n("EC2Client", "CreateCarrierGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateCarrierGatewayCommand)
    .de(de_CreateCarrierGatewayCommand)
    .build() {
}

class CreateClientVpnEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateClientVpnEndpoint", {})
    .n("EC2Client", "CreateClientVpnEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateClientVpnEndpointCommand)
    .de(de_CreateClientVpnEndpointCommand)
    .build() {
}

class CreateClientVpnRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateClientVpnRoute", {})
    .n("EC2Client", "CreateClientVpnRouteCommand")
    .f(void 0, void 0)
    .ser(se_CreateClientVpnRouteCommand)
    .de(de_CreateClientVpnRouteCommand)
    .build() {
}

class CreateCoipCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCoipCidr", {})
    .n("EC2Client", "CreateCoipCidrCommand")
    .f(void 0, void 0)
    .ser(se_CreateCoipCidrCommand)
    .de(de_CreateCoipCidrCommand)
    .build() {
}

class CreateCoipPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCoipPool", {})
    .n("EC2Client", "CreateCoipPoolCommand")
    .f(void 0, void 0)
    .ser(se_CreateCoipPoolCommand)
    .de(de_CreateCoipPoolCommand)
    .build() {
}

class CreateCustomerGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateCustomerGateway", {})
    .n("EC2Client", "CreateCustomerGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateCustomerGatewayCommand)
    .de(de_CreateCustomerGatewayCommand)
    .build() {
}

class CreateDefaultSubnetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateDefaultSubnet", {})
    .n("EC2Client", "CreateDefaultSubnetCommand")
    .f(void 0, void 0)
    .ser(se_CreateDefaultSubnetCommand)
    .de(de_CreateDefaultSubnetCommand)
    .build() {
}

class CreateDefaultVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateDefaultVpc", {})
    .n("EC2Client", "CreateDefaultVpcCommand")
    .f(void 0, void 0)
    .ser(se_CreateDefaultVpcCommand)
    .de(de_CreateDefaultVpcCommand)
    .build() {
}

class CreateDelegateMacVolumeOwnershipTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateDelegateMacVolumeOwnershipTask", {})
    .n("EC2Client", "CreateDelegateMacVolumeOwnershipTaskCommand")
    .f(CreateDelegateMacVolumeOwnershipTaskRequestFilterSensitiveLog, void 0)
    .ser(se_CreateDelegateMacVolumeOwnershipTaskCommand)
    .de(de_CreateDelegateMacVolumeOwnershipTaskCommand)
    .build() {
}

class CreateDhcpOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateDhcpOptions", {})
    .n("EC2Client", "CreateDhcpOptionsCommand")
    .f(void 0, void 0)
    .ser(se_CreateDhcpOptionsCommand)
    .de(de_CreateDhcpOptionsCommand)
    .build() {
}

class CreateEgressOnlyInternetGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateEgressOnlyInternetGateway", {})
    .n("EC2Client", "CreateEgressOnlyInternetGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateEgressOnlyInternetGatewayCommand)
    .de(de_CreateEgressOnlyInternetGatewayCommand)
    .build() {
}

class CreateFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateFleet", {})
    .n("EC2Client", "CreateFleetCommand")
    .f(void 0, void 0)
    .ser(se_CreateFleetCommand)
    .de(de_CreateFleetCommand)
    .build() {
}

class CreateFlowLogsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateFlowLogs", {})
    .n("EC2Client", "CreateFlowLogsCommand")
    .f(void 0, void 0)
    .ser(se_CreateFlowLogsCommand)
    .de(de_CreateFlowLogsCommand)
    .build() {
}

class CreateFpgaImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateFpgaImage", {})
    .n("EC2Client", "CreateFpgaImageCommand")
    .f(void 0, void 0)
    .ser(se_CreateFpgaImageCommand)
    .de(de_CreateFpgaImageCommand)
    .build() {
}

class CreateImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateImage", {})
    .n("EC2Client", "CreateImageCommand")
    .f(void 0, void 0)
    .ser(se_CreateImageCommand)
    .de(de_CreateImageCommand)
    .build() {
}

class CreateImageUsageReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateImageUsageReport", {})
    .n("EC2Client", "CreateImageUsageReportCommand")
    .f(void 0, void 0)
    .ser(se_CreateImageUsageReportCommand)
    .de(de_CreateImageUsageReportCommand)
    .build() {
}

class CreateInstanceConnectEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateInstanceConnectEndpoint", {})
    .n("EC2Client", "CreateInstanceConnectEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateInstanceConnectEndpointCommand)
    .de(de_CreateInstanceConnectEndpointCommand)
    .build() {
}

class CreateInstanceEventWindowCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateInstanceEventWindow", {})
    .n("EC2Client", "CreateInstanceEventWindowCommand")
    .f(void 0, void 0)
    .ser(se_CreateInstanceEventWindowCommand)
    .de(de_CreateInstanceEventWindowCommand)
    .build() {
}

class CreateInstanceExportTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateInstanceExportTask", {})
    .n("EC2Client", "CreateInstanceExportTaskCommand")
    .f(void 0, void 0)
    .ser(se_CreateInstanceExportTaskCommand)
    .de(de_CreateInstanceExportTaskCommand)
    .build() {
}

class CreateInternetGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateInternetGateway", {})
    .n("EC2Client", "CreateInternetGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateInternetGatewayCommand)
    .de(de_CreateInternetGatewayCommand)
    .build() {
}

class CreateIpamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateIpam", {})
    .n("EC2Client", "CreateIpamCommand")
    .f(void 0, void 0)
    .ser(se_CreateIpamCommand)
    .de(de_CreateIpamCommand)
    .build() {
}

class CreateIpamExternalResourceVerificationTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateIpamExternalResourceVerificationToken", {})
    .n("EC2Client", "CreateIpamExternalResourceVerificationTokenCommand")
    .f(void 0, void 0)
    .ser(se_CreateIpamExternalResourceVerificationTokenCommand)
    .de(de_CreateIpamExternalResourceVerificationTokenCommand)
    .build() {
}

class CreateIpamPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateIpamPool", {})
    .n("EC2Client", "CreateIpamPoolCommand")
    .f(void 0, void 0)
    .ser(se_CreateIpamPoolCommand)
    .de(de_CreateIpamPoolCommand)
    .build() {
}

class CreateIpamResourceDiscoveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateIpamResourceDiscovery", {})
    .n("EC2Client", "CreateIpamResourceDiscoveryCommand")
    .f(void 0, void 0)
    .ser(se_CreateIpamResourceDiscoveryCommand)
    .de(de_CreateIpamResourceDiscoveryCommand)
    .build() {
}

class CreateIpamScopeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateIpamScope", {})
    .n("EC2Client", "CreateIpamScopeCommand")
    .f(void 0, void 0)
    .ser(se_CreateIpamScopeCommand)
    .de(de_CreateIpamScopeCommand)
    .build() {
}

class CreateKeyPairCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateKeyPair", {})
    .n("EC2Client", "CreateKeyPairCommand")
    .f(void 0, KeyPairFilterSensitiveLog)
    .ser(se_CreateKeyPairCommand)
    .de(de_CreateKeyPairCommand)
    .build() {
}

class CreateLaunchTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLaunchTemplate", {})
    .n("EC2Client", "CreateLaunchTemplateCommand")
    .f(CreateLaunchTemplateRequestFilterSensitiveLog, void 0)
    .ser(se_CreateLaunchTemplateCommand)
    .de(de_CreateLaunchTemplateCommand)
    .build() {
}

const LaunchTemplateInstanceMetadataOptionsState = {
    applied: "applied",
    pending: "pending",
};
const LocalGatewayRouteState = {
    active: "active",
    blackhole: "blackhole",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const LocalGatewayRouteType = {
    propagated: "propagated",
    static: "static",
};
const LocalGatewayRouteTableMode = {
    coip: "coip",
    direct_vpc_routing: "direct-vpc-routing",
};
const LocalGatewayVirtualInterfaceConfigurationState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const LocalGatewayVirtualInterfaceGroupConfigurationState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    incomplete: "incomplete",
    pending: "pending",
};
const PrefixListState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_failed: "delete-failed",
    delete_in_progress: "delete-in-progress",
    modify_complete: "modify-complete",
    modify_failed: "modify-failed",
    modify_in_progress: "modify-in-progress",
    restore_complete: "restore-complete",
    restore_failed: "restore-failed",
    restore_in_progress: "restore-in-progress",
};
const ConnectivityType = {
    PRIVATE: "private",
    PUBLIC: "public",
};
const NatGatewayState = {
    AVAILABLE: "available",
    DELETED: "deleted",
    DELETING: "deleting",
    FAILED: "failed",
    PENDING: "pending",
};
const RuleAction = {
    allow: "allow",
    deny: "deny",
};
const NetworkInterfaceCreationType = {
    branch: "branch",
    efa: "efa",
    efa_only: "efa-only",
    trunk: "trunk",
};
const NetworkInterfaceType = {
    api_gateway_managed: "api_gateway_managed",
    aws_codestar_connections_managed: "aws_codestar_connections_managed",
    branch: "branch",
    efa: "efa",
    efa_only: "efa-only",
    gateway_load_balancer: "gateway_load_balancer",
    gateway_load_balancer_endpoint: "gateway_load_balancer_endpoint",
    global_accelerator_managed: "global_accelerator_managed",
    interface: "interface",
    iot_rules_managed: "iot_rules_managed",
    lambda: "lambda",
    load_balancer: "load_balancer",
    natGateway: "natGateway",
    network_load_balancer: "network_load_balancer",
    quicksight: "quicksight",
    transit_gateway: "transit_gateway",
    trunk: "trunk",
    vpc_endpoint: "vpc_endpoint",
};
const NetworkInterfaceStatus = {
    associated: "associated",
    attaching: "attaching",
    available: "available",
    detaching: "detaching",
    in_use: "in-use",
};
const InterfacePermissionType = {
    EIP_ASSOCIATE: "EIP-ASSOCIATE",
    INSTANCE_ATTACH: "INSTANCE-ATTACH",
};
const NetworkInterfacePermissionStateCode = {
    granted: "granted",
    pending: "pending",
    revoked: "revoked",
    revoking: "revoking",
};
const SpreadLevel = {
    host: "host",
    rack: "rack",
};
const PlacementStrategy = {
    cluster: "cluster",
    partition: "partition",
    spread: "spread",
};
const PlacementGroupState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const ReplaceRootVolumeTaskState = {
    failed: "failed",
    failed_detached: "failed-detached",
    failing: "failing",
    in_progress: "in-progress",
    pending: "pending",
    succeeded: "succeeded",
};
const RouteServerPersistRoutesAction = {
    DISABLE: "disable",
    ENABLE: "enable",
    RESET: "reset",
};
const RouteServerPersistRoutesState = {
    DISABLED: "disabled",
    DISABLING: "disabling",
    ENABLED: "enabled",
    ENABLING: "enabling",
    MODIFYING: "modifying",
    RESETTING: "resetting",
};
const RouteServerState = {
    AVAILABLE: "available",
    DELETED: "deleted",
    DELETING: "deleting",
    MODIFYING: "modifying",
    PENDING: "pending",
};
const RouteServerEndpointState = {
    AVAILABLE: "available",
    DELETED: "deleted",
    DELETE_FAILED: "delete-failed",
    DELETING: "deleting",
    FAILED: "failed",
    FAILING: "failing",
    PENDING: "pending",
};
const RouteServerPeerLivenessMode = {
    BFD: "bfd",
    BGP_KEEPALIVE: "bgp-keepalive",
};
const RouteServerBfdState = {
    DOWN: "down",
    UP: "up",
};
const RouteServerBgpState = {
    DOWN: "down",
    UP: "up",
};
const RouteServerPeerState = {
    AVAILABLE: "available",
    DELETED: "deleted",
    DELETING: "deleting",
    FAILED: "failed",
    FAILING: "failing",
    PENDING: "pending",
};
const RouteOrigin = {
    Advertisement: "Advertisement",
    CreateRoute: "CreateRoute",
    CreateRouteTable: "CreateRouteTable",
    EnableVgwRoutePropagation: "EnableVgwRoutePropagation",
};
const RouteState = {
    active: "active",
    blackhole: "blackhole",
    filtered: "filtered",
};
const SSEType = {
    none: "none",
    sse_ebs: "sse-ebs",
    sse_kms: "sse-kms",
};
const SnapshotState = {
    completed: "completed",
    error: "error",
    pending: "pending",
    recoverable: "recoverable",
    recovering: "recovering",
};
const StorageTier = {
    archive: "archive",
    standard: "standard",
};
const TransferType = {
    standard: "standard",
    time_based: "time-based",
};
const CopyTagsFromSource = {
    volume: "volume",
};
const DatafeedSubscriptionState = {
    Active: "Active",
    Inactive: "Inactive",
};
const SubnetCidrReservationType = {
    explicit: "explicit",
    prefix: "prefix",
};
const TrafficMirrorRuleAction = {
    accept: "accept",
    reject: "reject",
};
const TrafficDirection = {
    egress: "egress",
    ingress: "ingress",
};
const TrafficMirrorNetworkService = {
    amazon_dns: "amazon-dns",
};
const TrafficMirrorTargetType = {
    gateway_load_balancer_endpoint: "gateway-load-balancer-endpoint",
    network_interface: "network-interface",
    network_load_balancer: "network-load-balancer",
};
const AutoAcceptSharedAttachmentsValue = {
    disable: "disable",
    enable: "enable",
};
const DefaultRouteTableAssociationValue = {
    disable: "disable",
    enable: "enable",
};
const DefaultRouteTablePropagationValue = {
    disable: "disable",
    enable: "enable",
};
const MulticastSupportValue = {
    disable: "disable",
    enable: "enable",
};
const VpnEcmpSupportValue = {
    disable: "disable",
    enable: "enable",
};
const TransitGatewayState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    modifying: "modifying",
    pending: "pending",
};
const ProtocolValue = {
    gre: "gre",
};
const BgpStatus = {
    down: "down",
    up: "up",
};
const TransitGatewayConnectPeerState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const AutoAcceptSharedAssociationsValue = {
    disable: "disable",
    enable: "enable",
};
const Igmpv2SupportValue = {
    disable: "disable",
    enable: "enable",
};
const StaticSourcesSupportValue = {
    disable: "disable",
    enable: "enable",
};
const TransitGatewayMulticastDomainState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const TransitGatewayPolicyTableState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const TransitGatewayPrefixListReferenceState = {
    available: "available",
    deleting: "deleting",
    modifying: "modifying",
    pending: "pending",
};
const TransitGatewayRouteState = {
    active: "active",
    blackhole: "blackhole",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const TransitGatewayRouteType = {
    propagated: "propagated",
    static: "static",
};
const TransitGatewayRouteTableState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const TransitGatewayRouteTableAnnouncementDirection = {
    incoming: "incoming",
    outgoing: "outgoing",
};
const TransitGatewayRouteTableAnnouncementState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    failed: "failed",
    failing: "failing",
    pending: "pending",
};
const VerifiedAccessEndpointAttachmentType = {
    vpc: "vpc",
};
const VerifiedAccessEndpointProtocol = {
    http: "http",
    https: "https",
    tcp: "tcp",
};
const VerifiedAccessEndpointType = {
    cidr: "cidr",
    load_balancer: "load-balancer",
    network_interface: "network-interface",
    rds: "rds",
};
const VerifiedAccessEndpointStatusCode = {
    active: "active",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
    updating: "updating",
};
const VolumeState = {
    available: "available",
    creating: "creating",
    deleted: "deleted",
    deleting: "deleting",
    error: "error",
    in_use: "in-use",
};
const InternetGatewayExclusionMode = {
    allow_bidirectional: "allow-bidirectional",
    allow_egress: "allow-egress",
};
const VpcBlockPublicAccessExclusionState = {
    create_complete: "create-complete",
    create_failed: "create-failed",
    create_in_progress: "create-in-progress",
    delete_complete: "delete-complete",
    delete_in_progress: "delete-in-progress",
    disable_complete: "disable-complete",
    disable_in_progress: "disable-in-progress",
    update_complete: "update-complete",
    update_failed: "update-failed",
    update_in_progress: "update-in-progress",
};
const DnsRecordIpType = {
    dualstack: "dualstack",
    ipv4: "ipv4",
    ipv6: "ipv6",
    service_defined: "service-defined",
};
const VpcEndpointType = {
    Gateway: "Gateway",
    GatewayLoadBalancer: "GatewayLoadBalancer",
    Interface: "Interface",
    Resource: "Resource",
    ServiceNetwork: "ServiceNetwork",
};
const ResponseLaunchTemplateDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const LaunchTemplateVersionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: ResponseLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData),
    }),
});
const CreateLaunchTemplateVersionResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateVersion && {
        LaunchTemplateVersion: LaunchTemplateVersionFilterSensitiveLog(obj.LaunchTemplateVersion),
    }),
});
const CreateMacSystemIntegrityProtectionModificationTaskRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.MacCredentials && { MacCredentials: smithyClient.SENSITIVE_STRING }),
});
const CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OidcOptions && {
        OidcOptions: CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog(obj.OidcOptions),
    }),
    ...(obj.NativeApplicationOidcOptions && {
        NativeApplicationOidcOptions: CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog(obj.NativeApplicationOidcOptions),
    }),
});
const CreateVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider),
    }),
});

class CreateLaunchTemplateVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLaunchTemplateVersion", {})
    .n("EC2Client", "CreateLaunchTemplateVersionCommand")
    .f(CreateLaunchTemplateVersionRequestFilterSensitiveLog, CreateLaunchTemplateVersionResultFilterSensitiveLog)
    .ser(se_CreateLaunchTemplateVersionCommand)
    .de(de_CreateLaunchTemplateVersionCommand)
    .build() {
}

class CreateLocalGatewayRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLocalGatewayRoute", {})
    .n("EC2Client", "CreateLocalGatewayRouteCommand")
    .f(void 0, void 0)
    .ser(se_CreateLocalGatewayRouteCommand)
    .de(de_CreateLocalGatewayRouteCommand)
    .build() {
}

class CreateLocalGatewayRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLocalGatewayRouteTable", {})
    .n("EC2Client", "CreateLocalGatewayRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_CreateLocalGatewayRouteTableCommand)
    .de(de_CreateLocalGatewayRouteTableCommand)
    .build() {
}

class CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociation", {})
    .n("EC2Client", "CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand)
    .de(de_CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand)
    .build() {
}

class CreateLocalGatewayRouteTableVpcAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLocalGatewayRouteTableVpcAssociation", {})
    .n("EC2Client", "CreateLocalGatewayRouteTableVpcAssociationCommand")
    .f(void 0, void 0)
    .ser(se_CreateLocalGatewayRouteTableVpcAssociationCommand)
    .de(de_CreateLocalGatewayRouteTableVpcAssociationCommand)
    .build() {
}

class CreateLocalGatewayVirtualInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLocalGatewayVirtualInterface", {})
    .n("EC2Client", "CreateLocalGatewayVirtualInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_CreateLocalGatewayVirtualInterfaceCommand)
    .de(de_CreateLocalGatewayVirtualInterfaceCommand)
    .build() {
}

class CreateLocalGatewayVirtualInterfaceGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateLocalGatewayVirtualInterfaceGroup", {})
    .n("EC2Client", "CreateLocalGatewayVirtualInterfaceGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateLocalGatewayVirtualInterfaceGroupCommand)
    .de(de_CreateLocalGatewayVirtualInterfaceGroupCommand)
    .build() {
}

class CreateMacSystemIntegrityProtectionModificationTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateMacSystemIntegrityProtectionModificationTask", {})
    .n("EC2Client", "CreateMacSystemIntegrityProtectionModificationTaskCommand")
    .f(CreateMacSystemIntegrityProtectionModificationTaskRequestFilterSensitiveLog, void 0)
    .ser(se_CreateMacSystemIntegrityProtectionModificationTaskCommand)
    .de(de_CreateMacSystemIntegrityProtectionModificationTaskCommand)
    .build() {
}

class CreateManagedPrefixListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateManagedPrefixList", {})
    .n("EC2Client", "CreateManagedPrefixListCommand")
    .f(void 0, void 0)
    .ser(se_CreateManagedPrefixListCommand)
    .de(de_CreateManagedPrefixListCommand)
    .build() {
}

class CreateNatGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNatGateway", {})
    .n("EC2Client", "CreateNatGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateNatGatewayCommand)
    .de(de_CreateNatGatewayCommand)
    .build() {
}

class CreateNetworkAclCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNetworkAcl", {})
    .n("EC2Client", "CreateNetworkAclCommand")
    .f(void 0, void 0)
    .ser(se_CreateNetworkAclCommand)
    .de(de_CreateNetworkAclCommand)
    .build() {
}

class CreateNetworkAclEntryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNetworkAclEntry", {})
    .n("EC2Client", "CreateNetworkAclEntryCommand")
    .f(void 0, void 0)
    .ser(se_CreateNetworkAclEntryCommand)
    .de(de_CreateNetworkAclEntryCommand)
    .build() {
}

class CreateNetworkInsightsAccessScopeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNetworkInsightsAccessScope", {})
    .n("EC2Client", "CreateNetworkInsightsAccessScopeCommand")
    .f(void 0, void 0)
    .ser(se_CreateNetworkInsightsAccessScopeCommand)
    .de(de_CreateNetworkInsightsAccessScopeCommand)
    .build() {
}

class CreateNetworkInsightsPathCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNetworkInsightsPath", {})
    .n("EC2Client", "CreateNetworkInsightsPathCommand")
    .f(void 0, void 0)
    .ser(se_CreateNetworkInsightsPathCommand)
    .de(de_CreateNetworkInsightsPathCommand)
    .build() {
}

class CreateNetworkInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNetworkInterface", {})
    .n("EC2Client", "CreateNetworkInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_CreateNetworkInterfaceCommand)
    .de(de_CreateNetworkInterfaceCommand)
    .build() {
}

class CreateNetworkInterfacePermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateNetworkInterfacePermission", {})
    .n("EC2Client", "CreateNetworkInterfacePermissionCommand")
    .f(void 0, void 0)
    .ser(se_CreateNetworkInterfacePermissionCommand)
    .de(de_CreateNetworkInterfacePermissionCommand)
    .build() {
}

class CreatePlacementGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreatePlacementGroup", {})
    .n("EC2Client", "CreatePlacementGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreatePlacementGroupCommand)
    .de(de_CreatePlacementGroupCommand)
    .build() {
}

class CreatePublicIpv4PoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreatePublicIpv4Pool", {})
    .n("EC2Client", "CreatePublicIpv4PoolCommand")
    .f(void 0, void 0)
    .ser(se_CreatePublicIpv4PoolCommand)
    .de(de_CreatePublicIpv4PoolCommand)
    .build() {
}

class CreateReplaceRootVolumeTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateReplaceRootVolumeTask", {})
    .n("EC2Client", "CreateReplaceRootVolumeTaskCommand")
    .f(void 0, void 0)
    .ser(se_CreateReplaceRootVolumeTaskCommand)
    .de(de_CreateReplaceRootVolumeTaskCommand)
    .build() {
}

class CreateReservedInstancesListingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateReservedInstancesListing", {})
    .n("EC2Client", "CreateReservedInstancesListingCommand")
    .f(void 0, void 0)
    .ser(se_CreateReservedInstancesListingCommand)
    .de(de_CreateReservedInstancesListingCommand)
    .build() {
}

class CreateRestoreImageTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateRestoreImageTask", {})
    .n("EC2Client", "CreateRestoreImageTaskCommand")
    .f(void 0, void 0)
    .ser(se_CreateRestoreImageTaskCommand)
    .de(de_CreateRestoreImageTaskCommand)
    .build() {
}

class CreateRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateRoute", {})
    .n("EC2Client", "CreateRouteCommand")
    .f(void 0, void 0)
    .ser(se_CreateRouteCommand)
    .de(de_CreateRouteCommand)
    .build() {
}

class CreateRouteServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateRouteServer", {})
    .n("EC2Client", "CreateRouteServerCommand")
    .f(void 0, void 0)
    .ser(se_CreateRouteServerCommand)
    .de(de_CreateRouteServerCommand)
    .build() {
}

class CreateRouteServerEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateRouteServerEndpoint", {})
    .n("EC2Client", "CreateRouteServerEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateRouteServerEndpointCommand)
    .de(de_CreateRouteServerEndpointCommand)
    .build() {
}

class CreateRouteServerPeerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateRouteServerPeer", {})
    .n("EC2Client", "CreateRouteServerPeerCommand")
    .f(void 0, void 0)
    .ser(se_CreateRouteServerPeerCommand)
    .de(de_CreateRouteServerPeerCommand)
    .build() {
}

class CreateRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateRouteTable", {})
    .n("EC2Client", "CreateRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_CreateRouteTableCommand)
    .de(de_CreateRouteTableCommand)
    .build() {
}

class CreateSecurityGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateSecurityGroup", {})
    .n("EC2Client", "CreateSecurityGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateSecurityGroupCommand)
    .de(de_CreateSecurityGroupCommand)
    .build() {
}

class CreateSnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateSnapshot", {})
    .n("EC2Client", "CreateSnapshotCommand")
    .f(void 0, void 0)
    .ser(se_CreateSnapshotCommand)
    .de(de_CreateSnapshotCommand)
    .build() {
}

class CreateSnapshotsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateSnapshots", {})
    .n("EC2Client", "CreateSnapshotsCommand")
    .f(void 0, void 0)
    .ser(se_CreateSnapshotsCommand)
    .de(de_CreateSnapshotsCommand)
    .build() {
}

class CreateSpotDatafeedSubscriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateSpotDatafeedSubscription", {})
    .n("EC2Client", "CreateSpotDatafeedSubscriptionCommand")
    .f(void 0, void 0)
    .ser(se_CreateSpotDatafeedSubscriptionCommand)
    .de(de_CreateSpotDatafeedSubscriptionCommand)
    .build() {
}

class CreateStoreImageTaskCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateStoreImageTask", {})
    .n("EC2Client", "CreateStoreImageTaskCommand")
    .f(void 0, void 0)
    .ser(se_CreateStoreImageTaskCommand)
    .de(de_CreateStoreImageTaskCommand)
    .build() {
}

class CreateSubnetCidrReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateSubnetCidrReservation", {})
    .n("EC2Client", "CreateSubnetCidrReservationCommand")
    .f(void 0, void 0)
    .ser(se_CreateSubnetCidrReservationCommand)
    .de(de_CreateSubnetCidrReservationCommand)
    .build() {
}

class CreateSubnetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateSubnet", {})
    .n("EC2Client", "CreateSubnetCommand")
    .f(void 0, void 0)
    .ser(se_CreateSubnetCommand)
    .de(de_CreateSubnetCommand)
    .build() {
}

class CreateTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTags", {})
    .n("EC2Client", "CreateTagsCommand")
    .f(void 0, void 0)
    .ser(se_CreateTagsCommand)
    .de(de_CreateTagsCommand)
    .build() {
}

class CreateTrafficMirrorFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTrafficMirrorFilter", {})
    .n("EC2Client", "CreateTrafficMirrorFilterCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficMirrorFilterCommand)
    .de(de_CreateTrafficMirrorFilterCommand)
    .build() {
}

class CreateTrafficMirrorFilterRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTrafficMirrorFilterRule", {})
    .n("EC2Client", "CreateTrafficMirrorFilterRuleCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficMirrorFilterRuleCommand)
    .de(de_CreateTrafficMirrorFilterRuleCommand)
    .build() {
}

class CreateTrafficMirrorSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTrafficMirrorSession", {})
    .n("EC2Client", "CreateTrafficMirrorSessionCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficMirrorSessionCommand)
    .de(de_CreateTrafficMirrorSessionCommand)
    .build() {
}

class CreateTrafficMirrorTargetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTrafficMirrorTarget", {})
    .n("EC2Client", "CreateTrafficMirrorTargetCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrafficMirrorTargetCommand)
    .de(de_CreateTrafficMirrorTargetCommand)
    .build() {
}

class CreateTransitGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGateway", {})
    .n("EC2Client", "CreateTransitGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayCommand)
    .de(de_CreateTransitGatewayCommand)
    .build() {
}

class CreateTransitGatewayConnectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayConnect", {})
    .n("EC2Client", "CreateTransitGatewayConnectCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayConnectCommand)
    .de(de_CreateTransitGatewayConnectCommand)
    .build() {
}

class CreateTransitGatewayConnectPeerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayConnectPeer", {})
    .n("EC2Client", "CreateTransitGatewayConnectPeerCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayConnectPeerCommand)
    .de(de_CreateTransitGatewayConnectPeerCommand)
    .build() {
}

class CreateTransitGatewayMulticastDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayMulticastDomain", {})
    .n("EC2Client", "CreateTransitGatewayMulticastDomainCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayMulticastDomainCommand)
    .de(de_CreateTransitGatewayMulticastDomainCommand)
    .build() {
}

class CreateTransitGatewayPeeringAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayPeeringAttachment", {})
    .n("EC2Client", "CreateTransitGatewayPeeringAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayPeeringAttachmentCommand)
    .de(de_CreateTransitGatewayPeeringAttachmentCommand)
    .build() {
}

class CreateTransitGatewayPolicyTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayPolicyTable", {})
    .n("EC2Client", "CreateTransitGatewayPolicyTableCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayPolicyTableCommand)
    .de(de_CreateTransitGatewayPolicyTableCommand)
    .build() {
}

class CreateTransitGatewayPrefixListReferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayPrefixListReference", {})
    .n("EC2Client", "CreateTransitGatewayPrefixListReferenceCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayPrefixListReferenceCommand)
    .de(de_CreateTransitGatewayPrefixListReferenceCommand)
    .build() {
}

class CreateTransitGatewayRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayRoute", {})
    .n("EC2Client", "CreateTransitGatewayRouteCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayRouteCommand)
    .de(de_CreateTransitGatewayRouteCommand)
    .build() {
}

class CreateTransitGatewayRouteTableAnnouncementCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayRouteTableAnnouncement", {})
    .n("EC2Client", "CreateTransitGatewayRouteTableAnnouncementCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayRouteTableAnnouncementCommand)
    .de(de_CreateTransitGatewayRouteTableAnnouncementCommand)
    .build() {
}

class CreateTransitGatewayRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayRouteTable", {})
    .n("EC2Client", "CreateTransitGatewayRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayRouteTableCommand)
    .de(de_CreateTransitGatewayRouteTableCommand)
    .build() {
}

class CreateTransitGatewayVpcAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateTransitGatewayVpcAttachment", {})
    .n("EC2Client", "CreateTransitGatewayVpcAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransitGatewayVpcAttachmentCommand)
    .de(de_CreateTransitGatewayVpcAttachmentCommand)
    .build() {
}

class CreateVerifiedAccessEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVerifiedAccessEndpoint", {})
    .n("EC2Client", "CreateVerifiedAccessEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateVerifiedAccessEndpointCommand)
    .de(de_CreateVerifiedAccessEndpointCommand)
    .build() {
}

class CreateVerifiedAccessGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVerifiedAccessGroup", {})
    .n("EC2Client", "CreateVerifiedAccessGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateVerifiedAccessGroupCommand)
    .de(de_CreateVerifiedAccessGroupCommand)
    .build() {
}

class CreateVerifiedAccessInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVerifiedAccessInstance", {})
    .n("EC2Client", "CreateVerifiedAccessInstanceCommand")
    .f(void 0, void 0)
    .ser(se_CreateVerifiedAccessInstanceCommand)
    .de(de_CreateVerifiedAccessInstanceCommand)
    .build() {
}

class CreateVerifiedAccessTrustProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVerifiedAccessTrustProvider", {})
    .n("EC2Client", "CreateVerifiedAccessTrustProviderCommand")
    .f(CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog, CreateVerifiedAccessTrustProviderResultFilterSensitiveLog)
    .ser(se_CreateVerifiedAccessTrustProviderCommand)
    .de(de_CreateVerifiedAccessTrustProviderCommand)
    .build() {
}

class CreateVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVolume", {})
    .n("EC2Client", "CreateVolumeCommand")
    .f(void 0, void 0)
    .ser(se_CreateVolumeCommand)
    .de(de_CreateVolumeCommand)
    .build() {
}

class CreateVpcBlockPublicAccessExclusionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpcBlockPublicAccessExclusion", {})
    .n("EC2Client", "CreateVpcBlockPublicAccessExclusionCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcBlockPublicAccessExclusionCommand)
    .de(de_CreateVpcBlockPublicAccessExclusionCommand)
    .build() {
}

class CreateVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpc", {})
    .n("EC2Client", "CreateVpcCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcCommand)
    .de(de_CreateVpcCommand)
    .build() {
}

class CreateVpcEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpcEndpoint", {})
    .n("EC2Client", "CreateVpcEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcEndpointCommand)
    .de(de_CreateVpcEndpointCommand)
    .build() {
}

class CreateVpcEndpointConnectionNotificationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpcEndpointConnectionNotification", {})
    .n("EC2Client", "CreateVpcEndpointConnectionNotificationCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcEndpointConnectionNotificationCommand)
    .de(de_CreateVpcEndpointConnectionNotificationCommand)
    .build() {
}

class CreateVpcEndpointServiceConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpcEndpointServiceConfiguration", {})
    .n("EC2Client", "CreateVpcEndpointServiceConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcEndpointServiceConfigurationCommand)
    .de(de_CreateVpcEndpointServiceConfigurationCommand)
    .build() {
}

class CreateVpcPeeringConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpcPeeringConnection", {})
    .n("EC2Client", "CreateVpcPeeringConnectionCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpcPeeringConnectionCommand)
    .de(de_CreateVpcPeeringConnectionCommand)
    .build() {
}

const State = {
    Available: "Available",
    Deleted: "Deleted",
    Deleting: "Deleting",
    Expired: "Expired",
    Failed: "Failed",
    Partial: "Partial",
    Pending: "Pending",
    PendingAcceptance: "PendingAcceptance",
    Rejected: "Rejected",
};
const ConnectionNotificationState = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
const ConnectionNotificationType = {
    Topic: "Topic",
};
const PayerResponsibility = {
    ServiceOwner: "ServiceOwner",
};
const DnsNameState = {
    Failed: "failed",
    PendingVerification: "pendingVerification",
    Verified: "verified",
};
const ServiceState = {
    Available: "Available",
    Deleted: "Deleted",
    Deleting: "Deleting",
    Failed: "Failed",
    Pending: "Pending",
};
const ServiceType = {
    Gateway: "Gateway",
    GatewayLoadBalancer: "GatewayLoadBalancer",
    Interface: "Interface",
};
const ServiceConnectivityType = {
    ipv4: "ipv4",
    ipv6: "ipv6",
};
const TunnelInsideIpVersion = {
    ipv4: "ipv4",
    ipv6: "ipv6",
};
const GatewayAssociationState = {
    associated: "associated",
    associating: "associating",
    disassociating: "disassociating",
    not_associated: "not-associated",
};
const VpnStaticRouteSource = {
    Static: "Static",
};
const VpnState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const TelemetryStatus = {
    DOWN: "DOWN",
    UP: "UP",
};
const FleetStateCode = {
    ACTIVE: "active",
    DELETED: "deleted",
    DELETED_RUNNING: "deleted_running",
    DELETED_TERMINATING_INSTANCES: "deleted_terminating",
    FAILED: "failed",
    MODIFYING: "modifying",
    SUBMITTED: "submitted",
};
const DeleteFleetErrorCode = {
    FLEET_ID_DOES_NOT_EXIST: "fleetIdDoesNotExist",
    FLEET_ID_MALFORMED: "fleetIdMalformed",
    FLEET_NOT_IN_DELETABLE_STATE: "fleetNotInDeletableState",
    UNEXPECTED_ERROR: "unexpectedError",
};
const LaunchTemplateErrorCode = {
    LAUNCH_TEMPLATE_ID_DOES_NOT_EXIST: "launchTemplateIdDoesNotExist",
    LAUNCH_TEMPLATE_ID_MALFORMED: "launchTemplateIdMalformed",
    LAUNCH_TEMPLATE_NAME_DOES_NOT_EXIST: "launchTemplateNameDoesNotExist",
    LAUNCH_TEMPLATE_NAME_MALFORMED: "launchTemplateNameMalformed",
    LAUNCH_TEMPLATE_VERSION_DOES_NOT_EXIST: "launchTemplateVersionDoesNotExist",
    UNEXPECTED_ERROR: "unexpectedError",
};
const DeleteQueuedReservedInstancesErrorCode = {
    RESERVED_INSTANCES_ID_INVALID: "reserved-instances-id-invalid",
    RESERVED_INSTANCES_NOT_IN_QUEUED_STATE: "reserved-instances-not-in-queued-state",
    UNEXPECTED_ERROR: "unexpected-error",
};
const AsnState = {
    deprovisioned: "deprovisioned",
    failed_deprovision: "failed-deprovision",
    failed_provision: "failed-provision",
    pending_deprovision: "pending-deprovision",
    pending_provision: "pending-provision",
    provisioned: "provisioned",
};
const IpamPoolCidrFailureCode = {
    cidr_not_available: "cidr-not-available",
    limit_exceeded: "limit-exceeded",
};
const IpamPoolCidrState = {
    deprovisioned: "deprovisioned",
    failed_deprovision: "failed-deprovision",
    failed_import: "failed-import",
    failed_provision: "failed-provision",
    pending_deprovision: "pending-deprovision",
    pending_import: "pending-import",
    pending_provision: "pending-provision",
    provisioned: "provisioned",
};
const SnapshotReturnCodes = {
    ERROR_CODE_CLIENT_ERROR: "client-error",
    ERROR_CODE_INTERNAL_ERROR: "internal-error",
    ERROR_MISSING_PERMISSIONS: "missing-permissions",
    SUCCESS: "success",
    WARN_SKIPPED: "skipped",
};
const AvailabilityZoneOptInStatus = {
    not_opted_in: "not-opted-in",
    opt_in_not_required: "opt-in-not-required",
    opted_in: "opted-in",
};
const AvailabilityZoneState = {
    available: "available",
    constrained: "constrained",
    impaired: "impaired",
    information: "information",
    unavailable: "unavailable",
};
const MetricType = {
    aggregate_latency: "aggregate-latency",
};
const PeriodType = {
    fifteen_minutes: "fifteen-minutes",
    five_minutes: "five-minutes",
    one_day: "one-day",
    one_hour: "one-hour",
    one_week: "one-week",
    three_hours: "three-hours",
};
const StatisticType = {
    p50: "p50",
};
const CapacityBlockExtensionStatus = {
    PAYMENT_FAILED: "payment-failed",
    PAYMENT_PENDING: "payment-pending",
    PAYMENT_SUCCEEDED: "payment-succeeded",
};
const CapacityBlockResourceState = {
    active: "active",
    cancelled: "cancelled",
    expired: "expired",
    failed: "failed",
    payment_failed: "payment-failed",
    payment_pending: "payment-pending",
    scheduled: "scheduled",
    unavailable: "unavailable",
};
const CapacityBlockInterconnectStatus = {
    impaired: "impaired",
    insufficient_data: "insufficient-data",
    ok: "ok",
};
const CallerRole = {
    odcr_owner: "odcr-owner",
    unused_reservation_billing_owner: "unused-reservation-billing-owner",
};
const VpnTunnelOptionsSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PreSharedKey && { PreSharedKey: smithyClient.SENSITIVE_STRING }),
});
const VpnConnectionOptionsSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TunnelOptions && {
        TunnelOptions: obj.TunnelOptions.map((item) => VpnTunnelOptionsSpecificationFilterSensitiveLog(item)),
    }),
});
const CreateVpnConnectionRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Options && { Options: VpnConnectionOptionsSpecificationFilterSensitiveLog(obj.Options) }),
});
const TunnelOptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PreSharedKey && { PreSharedKey: smithyClient.SENSITIVE_STRING }),
});
const VpnConnectionOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TunnelOptions && { TunnelOptions: obj.TunnelOptions.map((item) => TunnelOptionFilterSensitiveLog(item)) }),
});
const VpnConnectionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Options && { Options: VpnConnectionOptionsFilterSensitiveLog(obj.Options) }),
    ...(obj.CustomerGatewayConfiguration && { CustomerGatewayConfiguration: smithyClient.SENSITIVE_STRING }),
});
const CreateVpnConnectionResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }),
});
const DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider),
    }),
});
const DescribeBundleTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.BundleTasks && { BundleTasks: obj.BundleTasks.map((item) => BundleTaskFilterSensitiveLog(item)) }),
});

class CreateVpnConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpnConnection", {})
    .n("EC2Client", "CreateVpnConnectionCommand")
    .f(CreateVpnConnectionRequestFilterSensitiveLog, CreateVpnConnectionResultFilterSensitiveLog)
    .ser(se_CreateVpnConnectionCommand)
    .de(de_CreateVpnConnectionCommand)
    .build() {
}

class CreateVpnConnectionRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpnConnectionRoute", {})
    .n("EC2Client", "CreateVpnConnectionRouteCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpnConnectionRouteCommand)
    .de(de_CreateVpnConnectionRouteCommand)
    .build() {
}

class CreateVpnGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "CreateVpnGateway", {})
    .n("EC2Client", "CreateVpnGatewayCommand")
    .f(void 0, void 0)
    .ser(se_CreateVpnGatewayCommand)
    .de(de_CreateVpnGatewayCommand)
    .build() {
}

class DeleteCarrierGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteCarrierGateway", {})
    .n("EC2Client", "DeleteCarrierGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCarrierGatewayCommand)
    .de(de_DeleteCarrierGatewayCommand)
    .build() {
}

class DeleteClientVpnEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteClientVpnEndpoint", {})
    .n("EC2Client", "DeleteClientVpnEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClientVpnEndpointCommand)
    .de(de_DeleteClientVpnEndpointCommand)
    .build() {
}

class DeleteClientVpnRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteClientVpnRoute", {})
    .n("EC2Client", "DeleteClientVpnRouteCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClientVpnRouteCommand)
    .de(de_DeleteClientVpnRouteCommand)
    .build() {
}

class DeleteCoipCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteCoipCidr", {})
    .n("EC2Client", "DeleteCoipCidrCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCoipCidrCommand)
    .de(de_DeleteCoipCidrCommand)
    .build() {
}

class DeleteCoipPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteCoipPool", {})
    .n("EC2Client", "DeleteCoipPoolCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCoipPoolCommand)
    .de(de_DeleteCoipPoolCommand)
    .build() {
}

class DeleteCustomerGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteCustomerGateway", {})
    .n("EC2Client", "DeleteCustomerGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCustomerGatewayCommand)
    .de(de_DeleteCustomerGatewayCommand)
    .build() {
}

class DeleteDhcpOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteDhcpOptions", {})
    .n("EC2Client", "DeleteDhcpOptionsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDhcpOptionsCommand)
    .de(de_DeleteDhcpOptionsCommand)
    .build() {
}

class DeleteEgressOnlyInternetGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteEgressOnlyInternetGateway", {})
    .n("EC2Client", "DeleteEgressOnlyInternetGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEgressOnlyInternetGatewayCommand)
    .de(de_DeleteEgressOnlyInternetGatewayCommand)
    .build() {
}

class DeleteFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteFleets", {})
    .n("EC2Client", "DeleteFleetsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFleetsCommand)
    .de(de_DeleteFleetsCommand)
    .build() {
}

class DeleteFlowLogsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteFlowLogs", {})
    .n("EC2Client", "DeleteFlowLogsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFlowLogsCommand)
    .de(de_DeleteFlowLogsCommand)
    .build() {
}

class DeleteFpgaImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteFpgaImage", {})
    .n("EC2Client", "DeleteFpgaImageCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFpgaImageCommand)
    .de(de_DeleteFpgaImageCommand)
    .build() {
}

class DeleteImageUsageReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteImageUsageReport", {})
    .n("EC2Client", "DeleteImageUsageReportCommand")
    .f(void 0, void 0)
    .ser(se_DeleteImageUsageReportCommand)
    .de(de_DeleteImageUsageReportCommand)
    .build() {
}

class DeleteInstanceConnectEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteInstanceConnectEndpoint", {})
    .n("EC2Client", "DeleteInstanceConnectEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInstanceConnectEndpointCommand)
    .de(de_DeleteInstanceConnectEndpointCommand)
    .build() {
}

class DeleteInstanceEventWindowCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteInstanceEventWindow", {})
    .n("EC2Client", "DeleteInstanceEventWindowCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInstanceEventWindowCommand)
    .de(de_DeleteInstanceEventWindowCommand)
    .build() {
}

class DeleteInternetGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteInternetGateway", {})
    .n("EC2Client", "DeleteInternetGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInternetGatewayCommand)
    .de(de_DeleteInternetGatewayCommand)
    .build() {
}

class DeleteIpamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteIpam", {})
    .n("EC2Client", "DeleteIpamCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIpamCommand)
    .de(de_DeleteIpamCommand)
    .build() {
}

class DeleteIpamExternalResourceVerificationTokenCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteIpamExternalResourceVerificationToken", {})
    .n("EC2Client", "DeleteIpamExternalResourceVerificationTokenCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIpamExternalResourceVerificationTokenCommand)
    .de(de_DeleteIpamExternalResourceVerificationTokenCommand)
    .build() {
}

class DeleteIpamPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteIpamPool", {})
    .n("EC2Client", "DeleteIpamPoolCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIpamPoolCommand)
    .de(de_DeleteIpamPoolCommand)
    .build() {
}

class DeleteIpamResourceDiscoveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteIpamResourceDiscovery", {})
    .n("EC2Client", "DeleteIpamResourceDiscoveryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIpamResourceDiscoveryCommand)
    .de(de_DeleteIpamResourceDiscoveryCommand)
    .build() {
}

class DeleteIpamScopeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteIpamScope", {})
    .n("EC2Client", "DeleteIpamScopeCommand")
    .f(void 0, void 0)
    .ser(se_DeleteIpamScopeCommand)
    .de(de_DeleteIpamScopeCommand)
    .build() {
}

class DeleteKeyPairCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteKeyPair", {})
    .n("EC2Client", "DeleteKeyPairCommand")
    .f(void 0, void 0)
    .ser(se_DeleteKeyPairCommand)
    .de(de_DeleteKeyPairCommand)
    .build() {
}

class DeleteLaunchTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLaunchTemplate", {})
    .n("EC2Client", "DeleteLaunchTemplateCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLaunchTemplateCommand)
    .de(de_DeleteLaunchTemplateCommand)
    .build() {
}

class DeleteLaunchTemplateVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLaunchTemplateVersions", {})
    .n("EC2Client", "DeleteLaunchTemplateVersionsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLaunchTemplateVersionsCommand)
    .de(de_DeleteLaunchTemplateVersionsCommand)
    .build() {
}

class DeleteLocalGatewayRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLocalGatewayRoute", {})
    .n("EC2Client", "DeleteLocalGatewayRouteCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLocalGatewayRouteCommand)
    .de(de_DeleteLocalGatewayRouteCommand)
    .build() {
}

class DeleteLocalGatewayRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLocalGatewayRouteTable", {})
    .n("EC2Client", "DeleteLocalGatewayRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLocalGatewayRouteTableCommand)
    .de(de_DeleteLocalGatewayRouteTableCommand)
    .build() {
}

class DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociation", {})
    .n("EC2Client", "DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand)
    .de(de_DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand)
    .build() {
}

class DeleteLocalGatewayRouteTableVpcAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLocalGatewayRouteTableVpcAssociation", {})
    .n("EC2Client", "DeleteLocalGatewayRouteTableVpcAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLocalGatewayRouteTableVpcAssociationCommand)
    .de(de_DeleteLocalGatewayRouteTableVpcAssociationCommand)
    .build() {
}

class DeleteLocalGatewayVirtualInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLocalGatewayVirtualInterface", {})
    .n("EC2Client", "DeleteLocalGatewayVirtualInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLocalGatewayVirtualInterfaceCommand)
    .de(de_DeleteLocalGatewayVirtualInterfaceCommand)
    .build() {
}

class DeleteLocalGatewayVirtualInterfaceGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteLocalGatewayVirtualInterfaceGroup", {})
    .n("EC2Client", "DeleteLocalGatewayVirtualInterfaceGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteLocalGatewayVirtualInterfaceGroupCommand)
    .de(de_DeleteLocalGatewayVirtualInterfaceGroupCommand)
    .build() {
}

class DeleteManagedPrefixListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteManagedPrefixList", {})
    .n("EC2Client", "DeleteManagedPrefixListCommand")
    .f(void 0, void 0)
    .ser(se_DeleteManagedPrefixListCommand)
    .de(de_DeleteManagedPrefixListCommand)
    .build() {
}

class DeleteNatGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNatGateway", {})
    .n("EC2Client", "DeleteNatGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNatGatewayCommand)
    .de(de_DeleteNatGatewayCommand)
    .build() {
}

class DeleteNetworkAclCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkAcl", {})
    .n("EC2Client", "DeleteNetworkAclCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkAclCommand)
    .de(de_DeleteNetworkAclCommand)
    .build() {
}

class DeleteNetworkAclEntryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkAclEntry", {})
    .n("EC2Client", "DeleteNetworkAclEntryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkAclEntryCommand)
    .de(de_DeleteNetworkAclEntryCommand)
    .build() {
}

class DeleteNetworkInsightsAccessScopeAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkInsightsAccessScopeAnalysis", {})
    .n("EC2Client", "DeleteNetworkInsightsAccessScopeAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkInsightsAccessScopeAnalysisCommand)
    .de(de_DeleteNetworkInsightsAccessScopeAnalysisCommand)
    .build() {
}

class DeleteNetworkInsightsAccessScopeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkInsightsAccessScope", {})
    .n("EC2Client", "DeleteNetworkInsightsAccessScopeCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkInsightsAccessScopeCommand)
    .de(de_DeleteNetworkInsightsAccessScopeCommand)
    .build() {
}

class DeleteNetworkInsightsAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkInsightsAnalysis", {})
    .n("EC2Client", "DeleteNetworkInsightsAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkInsightsAnalysisCommand)
    .de(de_DeleteNetworkInsightsAnalysisCommand)
    .build() {
}

class DeleteNetworkInsightsPathCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkInsightsPath", {})
    .n("EC2Client", "DeleteNetworkInsightsPathCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkInsightsPathCommand)
    .de(de_DeleteNetworkInsightsPathCommand)
    .build() {
}

class DeleteNetworkInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkInterface", {})
    .n("EC2Client", "DeleteNetworkInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkInterfaceCommand)
    .de(de_DeleteNetworkInterfaceCommand)
    .build() {
}

class DeleteNetworkInterfacePermissionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteNetworkInterfacePermission", {})
    .n("EC2Client", "DeleteNetworkInterfacePermissionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNetworkInterfacePermissionCommand)
    .de(de_DeleteNetworkInterfacePermissionCommand)
    .build() {
}

class DeletePlacementGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeletePlacementGroup", {})
    .n("EC2Client", "DeletePlacementGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeletePlacementGroupCommand)
    .de(de_DeletePlacementGroupCommand)
    .build() {
}

class DeletePublicIpv4PoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeletePublicIpv4Pool", {})
    .n("EC2Client", "DeletePublicIpv4PoolCommand")
    .f(void 0, void 0)
    .ser(se_DeletePublicIpv4PoolCommand)
    .de(de_DeletePublicIpv4PoolCommand)
    .build() {
}

class DeleteQueuedReservedInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteQueuedReservedInstances", {})
    .n("EC2Client", "DeleteQueuedReservedInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DeleteQueuedReservedInstancesCommand)
    .de(de_DeleteQueuedReservedInstancesCommand)
    .build() {
}

class DeleteRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteRoute", {})
    .n("EC2Client", "DeleteRouteCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRouteCommand)
    .de(de_DeleteRouteCommand)
    .build() {
}

class DeleteRouteServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteRouteServer", {})
    .n("EC2Client", "DeleteRouteServerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRouteServerCommand)
    .de(de_DeleteRouteServerCommand)
    .build() {
}

class DeleteRouteServerEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteRouteServerEndpoint", {})
    .n("EC2Client", "DeleteRouteServerEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRouteServerEndpointCommand)
    .de(de_DeleteRouteServerEndpointCommand)
    .build() {
}

class DeleteRouteServerPeerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteRouteServerPeer", {})
    .n("EC2Client", "DeleteRouteServerPeerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRouteServerPeerCommand)
    .de(de_DeleteRouteServerPeerCommand)
    .build() {
}

class DeleteRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteRouteTable", {})
    .n("EC2Client", "DeleteRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_DeleteRouteTableCommand)
    .de(de_DeleteRouteTableCommand)
    .build() {
}

class DeleteSecurityGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteSecurityGroup", {})
    .n("EC2Client", "DeleteSecurityGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSecurityGroupCommand)
    .de(de_DeleteSecurityGroupCommand)
    .build() {
}

class DeleteSnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteSnapshot", {})
    .n("EC2Client", "DeleteSnapshotCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSnapshotCommand)
    .de(de_DeleteSnapshotCommand)
    .build() {
}

class DeleteSpotDatafeedSubscriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteSpotDatafeedSubscription", {})
    .n("EC2Client", "DeleteSpotDatafeedSubscriptionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSpotDatafeedSubscriptionCommand)
    .de(de_DeleteSpotDatafeedSubscriptionCommand)
    .build() {
}

class DeleteSubnetCidrReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteSubnetCidrReservation", {})
    .n("EC2Client", "DeleteSubnetCidrReservationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSubnetCidrReservationCommand)
    .de(de_DeleteSubnetCidrReservationCommand)
    .build() {
}

class DeleteSubnetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteSubnet", {})
    .n("EC2Client", "DeleteSubnetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSubnetCommand)
    .de(de_DeleteSubnetCommand)
    .build() {
}

class DeleteTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTags", {})
    .n("EC2Client", "DeleteTagsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTagsCommand)
    .de(de_DeleteTagsCommand)
    .build() {
}

class DeleteTrafficMirrorFilterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTrafficMirrorFilter", {})
    .n("EC2Client", "DeleteTrafficMirrorFilterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficMirrorFilterCommand)
    .de(de_DeleteTrafficMirrorFilterCommand)
    .build() {
}

class DeleteTrafficMirrorFilterRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTrafficMirrorFilterRule", {})
    .n("EC2Client", "DeleteTrafficMirrorFilterRuleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficMirrorFilterRuleCommand)
    .de(de_DeleteTrafficMirrorFilterRuleCommand)
    .build() {
}

class DeleteTrafficMirrorSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTrafficMirrorSession", {})
    .n("EC2Client", "DeleteTrafficMirrorSessionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficMirrorSessionCommand)
    .de(de_DeleteTrafficMirrorSessionCommand)
    .build() {
}

class DeleteTrafficMirrorTargetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTrafficMirrorTarget", {})
    .n("EC2Client", "DeleteTrafficMirrorTargetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrafficMirrorTargetCommand)
    .de(de_DeleteTrafficMirrorTargetCommand)
    .build() {
}

class DeleteTransitGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGateway", {})
    .n("EC2Client", "DeleteTransitGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayCommand)
    .de(de_DeleteTransitGatewayCommand)
    .build() {
}

class DeleteTransitGatewayConnectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayConnect", {})
    .n("EC2Client", "DeleteTransitGatewayConnectCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayConnectCommand)
    .de(de_DeleteTransitGatewayConnectCommand)
    .build() {
}

class DeleteTransitGatewayConnectPeerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayConnectPeer", {})
    .n("EC2Client", "DeleteTransitGatewayConnectPeerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayConnectPeerCommand)
    .de(de_DeleteTransitGatewayConnectPeerCommand)
    .build() {
}

class DeleteTransitGatewayMulticastDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayMulticastDomain", {})
    .n("EC2Client", "DeleteTransitGatewayMulticastDomainCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayMulticastDomainCommand)
    .de(de_DeleteTransitGatewayMulticastDomainCommand)
    .build() {
}

class DeleteTransitGatewayPeeringAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayPeeringAttachment", {})
    .n("EC2Client", "DeleteTransitGatewayPeeringAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayPeeringAttachmentCommand)
    .de(de_DeleteTransitGatewayPeeringAttachmentCommand)
    .build() {
}

class DeleteTransitGatewayPolicyTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayPolicyTable", {})
    .n("EC2Client", "DeleteTransitGatewayPolicyTableCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayPolicyTableCommand)
    .de(de_DeleteTransitGatewayPolicyTableCommand)
    .build() {
}

class DeleteTransitGatewayPrefixListReferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayPrefixListReference", {})
    .n("EC2Client", "DeleteTransitGatewayPrefixListReferenceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayPrefixListReferenceCommand)
    .de(de_DeleteTransitGatewayPrefixListReferenceCommand)
    .build() {
}

class DeleteTransitGatewayRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayRoute", {})
    .n("EC2Client", "DeleteTransitGatewayRouteCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayRouteCommand)
    .de(de_DeleteTransitGatewayRouteCommand)
    .build() {
}

class DeleteTransitGatewayRouteTableAnnouncementCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayRouteTableAnnouncement", {})
    .n("EC2Client", "DeleteTransitGatewayRouteTableAnnouncementCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayRouteTableAnnouncementCommand)
    .de(de_DeleteTransitGatewayRouteTableAnnouncementCommand)
    .build() {
}

class DeleteTransitGatewayRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayRouteTable", {})
    .n("EC2Client", "DeleteTransitGatewayRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayRouteTableCommand)
    .de(de_DeleteTransitGatewayRouteTableCommand)
    .build() {
}

class DeleteTransitGatewayVpcAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteTransitGatewayVpcAttachment", {})
    .n("EC2Client", "DeleteTransitGatewayVpcAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTransitGatewayVpcAttachmentCommand)
    .de(de_DeleteTransitGatewayVpcAttachmentCommand)
    .build() {
}

class DeleteVerifiedAccessEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVerifiedAccessEndpoint", {})
    .n("EC2Client", "DeleteVerifiedAccessEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVerifiedAccessEndpointCommand)
    .de(de_DeleteVerifiedAccessEndpointCommand)
    .build() {
}

class DeleteVerifiedAccessGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVerifiedAccessGroup", {})
    .n("EC2Client", "DeleteVerifiedAccessGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVerifiedAccessGroupCommand)
    .de(de_DeleteVerifiedAccessGroupCommand)
    .build() {
}

class DeleteVerifiedAccessInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVerifiedAccessInstance", {})
    .n("EC2Client", "DeleteVerifiedAccessInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVerifiedAccessInstanceCommand)
    .de(de_DeleteVerifiedAccessInstanceCommand)
    .build() {
}

class DeleteVerifiedAccessTrustProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVerifiedAccessTrustProvider", {})
    .n("EC2Client", "DeleteVerifiedAccessTrustProviderCommand")
    .f(void 0, DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog)
    .ser(se_DeleteVerifiedAccessTrustProviderCommand)
    .de(de_DeleteVerifiedAccessTrustProviderCommand)
    .build() {
}

class DeleteVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVolume", {})
    .n("EC2Client", "DeleteVolumeCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVolumeCommand)
    .de(de_DeleteVolumeCommand)
    .build() {
}

class DeleteVpcBlockPublicAccessExclusionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpcBlockPublicAccessExclusion", {})
    .n("EC2Client", "DeleteVpcBlockPublicAccessExclusionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcBlockPublicAccessExclusionCommand)
    .de(de_DeleteVpcBlockPublicAccessExclusionCommand)
    .build() {
}

class DeleteVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpc", {})
    .n("EC2Client", "DeleteVpcCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcCommand)
    .de(de_DeleteVpcCommand)
    .build() {
}

class DeleteVpcEndpointConnectionNotificationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpcEndpointConnectionNotifications", {})
    .n("EC2Client", "DeleteVpcEndpointConnectionNotificationsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcEndpointConnectionNotificationsCommand)
    .de(de_DeleteVpcEndpointConnectionNotificationsCommand)
    .build() {
}

class DeleteVpcEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpcEndpoints", {})
    .n("EC2Client", "DeleteVpcEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcEndpointsCommand)
    .de(de_DeleteVpcEndpointsCommand)
    .build() {
}

class DeleteVpcEndpointServiceConfigurationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpcEndpointServiceConfigurations", {})
    .n("EC2Client", "DeleteVpcEndpointServiceConfigurationsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcEndpointServiceConfigurationsCommand)
    .de(de_DeleteVpcEndpointServiceConfigurationsCommand)
    .build() {
}

class DeleteVpcPeeringConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpcPeeringConnection", {})
    .n("EC2Client", "DeleteVpcPeeringConnectionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpcPeeringConnectionCommand)
    .de(de_DeleteVpcPeeringConnectionCommand)
    .build() {
}

class DeleteVpnConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpnConnection", {})
    .n("EC2Client", "DeleteVpnConnectionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpnConnectionCommand)
    .de(de_DeleteVpnConnectionCommand)
    .build() {
}

class DeleteVpnConnectionRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpnConnectionRoute", {})
    .n("EC2Client", "DeleteVpnConnectionRouteCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpnConnectionRouteCommand)
    .de(de_DeleteVpnConnectionRouteCommand)
    .build() {
}

class DeleteVpnGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeleteVpnGateway", {})
    .n("EC2Client", "DeleteVpnGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DeleteVpnGatewayCommand)
    .de(de_DeleteVpnGatewayCommand)
    .build() {
}

class DeprovisionByoipCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeprovisionByoipCidr", {})
    .n("EC2Client", "DeprovisionByoipCidrCommand")
    .f(void 0, void 0)
    .ser(se_DeprovisionByoipCidrCommand)
    .de(de_DeprovisionByoipCidrCommand)
    .build() {
}

class DeprovisionIpamByoasnCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeprovisionIpamByoasn", {})
    .n("EC2Client", "DeprovisionIpamByoasnCommand")
    .f(void 0, void 0)
    .ser(se_DeprovisionIpamByoasnCommand)
    .de(de_DeprovisionIpamByoasnCommand)
    .build() {
}

class DeprovisionIpamPoolCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeprovisionIpamPoolCidr", {})
    .n("EC2Client", "DeprovisionIpamPoolCidrCommand")
    .f(void 0, void 0)
    .ser(se_DeprovisionIpamPoolCidrCommand)
    .de(de_DeprovisionIpamPoolCidrCommand)
    .build() {
}

class DeprovisionPublicIpv4PoolCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeprovisionPublicIpv4PoolCidr", {})
    .n("EC2Client", "DeprovisionPublicIpv4PoolCidrCommand")
    .f(void 0, void 0)
    .ser(se_DeprovisionPublicIpv4PoolCidrCommand)
    .de(de_DeprovisionPublicIpv4PoolCidrCommand)
    .build() {
}

class DeregisterImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeregisterImage", {})
    .n("EC2Client", "DeregisterImageCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterImageCommand)
    .de(de_DeregisterImageCommand)
    .build() {
}

class DeregisterInstanceEventNotificationAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeregisterInstanceEventNotificationAttributes", {})
    .n("EC2Client", "DeregisterInstanceEventNotificationAttributesCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterInstanceEventNotificationAttributesCommand)
    .de(de_DeregisterInstanceEventNotificationAttributesCommand)
    .build() {
}

class DeregisterTransitGatewayMulticastGroupMembersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeregisterTransitGatewayMulticastGroupMembers", {})
    .n("EC2Client", "DeregisterTransitGatewayMulticastGroupMembersCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterTransitGatewayMulticastGroupMembersCommand)
    .de(de_DeregisterTransitGatewayMulticastGroupMembersCommand)
    .build() {
}

class DeregisterTransitGatewayMulticastGroupSourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DeregisterTransitGatewayMulticastGroupSources", {})
    .n("EC2Client", "DeregisterTransitGatewayMulticastGroupSourcesCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterTransitGatewayMulticastGroupSourcesCommand)
    .de(de_DeregisterTransitGatewayMulticastGroupSourcesCommand)
    .build() {
}

class DescribeAccountAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAccountAttributes", {})
    .n("EC2Client", "DescribeAccountAttributesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAccountAttributesCommand)
    .de(de_DescribeAccountAttributesCommand)
    .build() {
}

class DescribeAddressesAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAddressesAttribute", {})
    .n("EC2Client", "DescribeAddressesAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAddressesAttributeCommand)
    .de(de_DescribeAddressesAttributeCommand)
    .build() {
}

class DescribeAddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAddresses", {})
    .n("EC2Client", "DescribeAddressesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAddressesCommand)
    .de(de_DescribeAddressesCommand)
    .build() {
}

class DescribeAddressTransfersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAddressTransfers", {})
    .n("EC2Client", "DescribeAddressTransfersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAddressTransfersCommand)
    .de(de_DescribeAddressTransfersCommand)
    .build() {
}

class DescribeAggregateIdFormatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAggregateIdFormat", {})
    .n("EC2Client", "DescribeAggregateIdFormatCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAggregateIdFormatCommand)
    .de(de_DescribeAggregateIdFormatCommand)
    .build() {
}

class DescribeAvailabilityZonesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAvailabilityZones", {})
    .n("EC2Client", "DescribeAvailabilityZonesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAvailabilityZonesCommand)
    .de(de_DescribeAvailabilityZonesCommand)
    .build() {
}

class DescribeAwsNetworkPerformanceMetricSubscriptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeAwsNetworkPerformanceMetricSubscriptions", {})
    .n("EC2Client", "DescribeAwsNetworkPerformanceMetricSubscriptionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand)
    .de(de_DescribeAwsNetworkPerformanceMetricSubscriptionsCommand)
    .build() {
}

class DescribeBundleTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeBundleTasks", {})
    .n("EC2Client", "DescribeBundleTasksCommand")
    .f(void 0, DescribeBundleTasksResultFilterSensitiveLog)
    .ser(se_DescribeBundleTasksCommand)
    .de(de_DescribeBundleTasksCommand)
    .build() {
}

class DescribeByoipCidrsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeByoipCidrs", {})
    .n("EC2Client", "DescribeByoipCidrsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeByoipCidrsCommand)
    .de(de_DescribeByoipCidrsCommand)
    .build() {
}

class DescribeCapacityBlockExtensionHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityBlockExtensionHistory", {})
    .n("EC2Client", "DescribeCapacityBlockExtensionHistoryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityBlockExtensionHistoryCommand)
    .de(de_DescribeCapacityBlockExtensionHistoryCommand)
    .build() {
}

class DescribeCapacityBlockExtensionOfferingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityBlockExtensionOfferings", {})
    .n("EC2Client", "DescribeCapacityBlockExtensionOfferingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityBlockExtensionOfferingsCommand)
    .de(de_DescribeCapacityBlockExtensionOfferingsCommand)
    .build() {
}

class DescribeCapacityBlockOfferingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityBlockOfferings", {})
    .n("EC2Client", "DescribeCapacityBlockOfferingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityBlockOfferingsCommand)
    .de(de_DescribeCapacityBlockOfferingsCommand)
    .build() {
}

class DescribeCapacityBlocksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityBlocks", {})
    .n("EC2Client", "DescribeCapacityBlocksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityBlocksCommand)
    .de(de_DescribeCapacityBlocksCommand)
    .build() {
}

class DescribeCapacityBlockStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityBlockStatus", {})
    .n("EC2Client", "DescribeCapacityBlockStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityBlockStatusCommand)
    .de(de_DescribeCapacityBlockStatusCommand)
    .build() {
}

class DescribeCapacityReservationBillingRequestsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityReservationBillingRequests", {})
    .n("EC2Client", "DescribeCapacityReservationBillingRequestsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityReservationBillingRequestsCommand)
    .de(de_DescribeCapacityReservationBillingRequestsCommand)
    .build() {
}

class DescribeCapacityReservationFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityReservationFleets", {})
    .n("EC2Client", "DescribeCapacityReservationFleetsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityReservationFleetsCommand)
    .de(de_DescribeCapacityReservationFleetsCommand)
    .build() {
}

class DescribeCapacityReservationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCapacityReservations", {})
    .n("EC2Client", "DescribeCapacityReservationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCapacityReservationsCommand)
    .de(de_DescribeCapacityReservationsCommand)
    .build() {
}

class DescribeCarrierGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCarrierGateways", {})
    .n("EC2Client", "DescribeCarrierGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCarrierGatewaysCommand)
    .de(de_DescribeCarrierGatewaysCommand)
    .build() {
}

class DescribeClassicLinkInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeClassicLinkInstances", {})
    .n("EC2Client", "DescribeClassicLinkInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClassicLinkInstancesCommand)
    .de(de_DescribeClassicLinkInstancesCommand)
    .build() {
}

class DescribeClientVpnAuthorizationRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeClientVpnAuthorizationRules", {})
    .n("EC2Client", "DescribeClientVpnAuthorizationRulesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClientVpnAuthorizationRulesCommand)
    .de(de_DescribeClientVpnAuthorizationRulesCommand)
    .build() {
}

class DescribeClientVpnConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeClientVpnConnections", {})
    .n("EC2Client", "DescribeClientVpnConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClientVpnConnectionsCommand)
    .de(de_DescribeClientVpnConnectionsCommand)
    .build() {
}

class DescribeClientVpnEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeClientVpnEndpoints", {})
    .n("EC2Client", "DescribeClientVpnEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClientVpnEndpointsCommand)
    .de(de_DescribeClientVpnEndpointsCommand)
    .build() {
}

class DescribeClientVpnRoutesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeClientVpnRoutes", {})
    .n("EC2Client", "DescribeClientVpnRoutesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClientVpnRoutesCommand)
    .de(de_DescribeClientVpnRoutesCommand)
    .build() {
}

class DescribeClientVpnTargetNetworksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeClientVpnTargetNetworks", {})
    .n("EC2Client", "DescribeClientVpnTargetNetworksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClientVpnTargetNetworksCommand)
    .de(de_DescribeClientVpnTargetNetworksCommand)
    .build() {
}

class DescribeCoipPoolsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCoipPools", {})
    .n("EC2Client", "DescribeCoipPoolsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCoipPoolsCommand)
    .de(de_DescribeCoipPoolsCommand)
    .build() {
}

const CapacityReservationBillingRequestStatus = {
    accepted: "accepted",
    cancelled: "cancelled",
    expired: "expired",
    pending: "pending",
    rejected: "rejected",
    revoked: "revoked",
};
const ClientVpnConnectionStatusCode = {
    active: "active",
    failed_to_terminate: "failed-to-terminate",
    terminated: "terminated",
    terminating: "terminating",
};
const AssociatedNetworkType = {
    vpc: "vpc",
};
const ClientVpnEndpointAttributeStatusCode = {
    applied: "applied",
    applying: "applying",
};
const VpnProtocol = {
    openvpn: "openvpn",
};
const ConversionTaskState = {
    active: "active",
    cancelled: "cancelled",
    cancelling: "cancelling",
    completed: "completed",
};
const ReportState = {
    cancelled: "cancelled",
    complete: "complete",
    error: "error",
    running: "running",
};
const ElasticGpuStatus = {
    Impaired: "IMPAIRED",
    Ok: "OK",
};
const ElasticGpuState = {
    Attached: "ATTACHED",
};
const FastLaunchResourceType = {
    SNAPSHOT: "snapshot",
};
const FastLaunchStateCode = {
    disabling: "disabling",
    disabling_failed: "disabling-failed",
    enabled: "enabled",
    enabled_failed: "enabled-failed",
    enabling: "enabling",
    enabling_failed: "enabling-failed",
};
const FastSnapshotRestoreStateCode = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
    optimizing: "optimizing",
};
const FleetEventType = {
    FLEET_CHANGE: "fleet-change",
    INSTANCE_CHANGE: "instance-change",
    SERVICE_ERROR: "service-error",
};
const FleetActivityStatus = {
    ERROR: "error",
    FULFILLED: "fulfilled",
    PENDING_FULFILLMENT: "pending_fulfillment",
    PENDING_TERMINATION: "pending_termination",
};
const FpgaImageAttributeName = {
    description: "description",
    loadPermission: "loadPermission",
    name: "name",
    productCodes: "productCodes",
};
const PermissionGroup = {
    all: "all",
};
const ProductCodeValues = {
    devpay: "devpay",
    marketplace: "marketplace",
};
const FpgaImageStateCode = {
    available: "available",
    failed: "failed",
    pending: "pending",
    unavailable: "unavailable",
};
const PaymentOption = {
    ALL_UPFRONT: "AllUpfront",
    NO_UPFRONT: "NoUpfront",
    PARTIAL_UPFRONT: "PartialUpfront",
};
const ReservationState = {
    ACTIVE: "active",
    PAYMENT_FAILED: "payment-failed",
    PAYMENT_PENDING: "payment-pending",
    RETIRED: "retired",
};
const ImageAttributeName = {
    blockDeviceMapping: "blockDeviceMapping",
    bootMode: "bootMode",
    deregistrationProtection: "deregistrationProtection",
    description: "description",
    imdsSupport: "imdsSupport",
    kernel: "kernel",
    lastLaunchedTime: "lastLaunchedTime",
    launchPermission: "launchPermission",
    productCodes: "productCodes",
    ramdisk: "ramdisk",
    sriovNetSupport: "sriovNetSupport",
    tpmSupport: "tpmSupport",
    uefiData: "uefiData",
};
const ImageReferenceResourceType = {
    EC2_INSTANCE: "ec2:Instance",
    EC2_LAUNCH_TEMPLATE: "ec2:LaunchTemplate",
    IMAGE_BUILDER_CONTAINER_RECIPE: "imagebuilder:ContainerRecipe",
    IMAGE_BUILDER_IMAGE_RECIPE: "imagebuilder:ImageRecipe",
    SSM_PARAMETER: "ssm:Parameter",
};
const ImageReferenceOptionName = {
    STATE_NAME: "state-name",
    VERSION_DEPTH: "version-depth",
};
const ArchitectureValues = {
    arm64: "arm64",
    arm64_mac: "arm64_mac",
    i386: "i386",
    x86_64: "x86_64",
    x86_64_mac: "x86_64_mac",
};
const BootModeValues = {
    legacy_bios: "legacy-bios",
    uefi: "uefi",
    uefi_preferred: "uefi-preferred",
};
const HypervisorType = {
    ovm: "ovm",
    xen: "xen",
};
const ImageTypeValues = {
    kernel: "kernel",
    machine: "machine",
    ramdisk: "ramdisk",
};
const ImdsSupportValues = {
    v2_0: "v2.0",
};
const DeviceType = {
    ebs: "ebs",
    instance_store: "instance-store",
};
const ImageState = {
    available: "available",
    deregistered: "deregistered",
    disabled: "disabled",
    error: "error",
    failed: "failed",
    invalid: "invalid",
    pending: "pending",
    transient: "transient",
};
const TpmSupportValues = {
    v2_0: "v2.0",
};
const VirtualizationType = {
    hvm: "hvm",
    paravirtual: "paravirtual",
};
const InstanceAttributeName = {
    blockDeviceMapping: "blockDeviceMapping",
    disableApiStop: "disableApiStop",
    disableApiTermination: "disableApiTermination",
    ebsOptimized: "ebsOptimized",
    enaSupport: "enaSupport",
    enclaveOptions: "enclaveOptions",
    groupSet: "groupSet",
    instanceInitiatedShutdownBehavior: "instanceInitiatedShutdownBehavior",
    instanceType: "instanceType",
    kernel: "kernel",
    productCodes: "productCodes",
    ramdisk: "ramdisk",
    rootDeviceName: "rootDeviceName",
    sourceDestCheck: "sourceDestCheck",
    sriovNetSupport: "sriovNetSupport",
    userData: "userData",
};
const InstanceStateName = {
    pending: "pending",
    running: "running",
    shutting_down: "shutting-down",
    stopped: "stopped",
    stopping: "stopping",
    terminated: "terminated",
};
const InstanceBootModeValues = {
    legacy_bios: "legacy-bios",
    uefi: "uefi",
};
const InstanceLifecycleType = {
    capacity_block: "capacity-block",
    scheduled: "scheduled",
    spot: "spot",
};
const InstanceAutoRecoveryState = {
    default: "default",
    disabled: "disabled",
};
const InstanceRebootMigrationState = {
    default: "default",
    disabled: "disabled",
};
const InstanceMetadataEndpointState = {
    disabled: "disabled",
    enabled: "enabled",
};
const InstanceMetadataProtocolState = {
    disabled: "disabled",
    enabled: "enabled",
};
const HttpTokensState = {
    optional: "optional",
    required: "required",
};
const InstanceMetadataTagsState = {
    disabled: "disabled",
    enabled: "enabled",
};
const InstanceMetadataOptionsState = {
    applied: "applied",
    pending: "pending",
};
const MonitoringState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    pending: "pending",
};
const StatusName = {
    reachability: "reachability",
};
const StatusType = {
    failed: "failed",
    initializing: "initializing",
    insufficient_data: "insufficient-data",
    passed: "passed",
};
const SummaryStatus = {
    impaired: "impaired",
    initializing: "initializing",
    insufficient_data: "insufficient-data",
    not_applicable: "not-applicable",
    ok: "ok",
};
const EventCode = {
    instance_reboot: "instance-reboot",
    instance_retirement: "instance-retirement",
    instance_stop: "instance-stop",
    system_maintenance: "system-maintenance",
    system_reboot: "system-reboot",
};
const LocationType = {
    availability_zone: "availability-zone",
    availability_zone_id: "availability-zone-id",
    outpost: "outpost",
    region: "region",
};
const AttachmentLimitType = {
    DEDICATED: "dedicated",
    SHARED: "shared",
};
const EbsOptimizedSupport = {
    default: "default",
    supported: "supported",
    unsupported: "unsupported",
};
const EbsEncryptionSupport = {
    supported: "supported",
    unsupported: "unsupported",
};
const EbsNvmeSupport = {
    REQUIRED: "required",
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const InstanceTypeHypervisor = {
    NITRO: "nitro",
    XEN: "xen",
};
const DiskType = {
    hdd: "hdd",
    ssd: "ssd",
};
const InstanceStorageEncryptionSupport = {
    required: "required",
    unsupported: "unsupported",
};
const EphemeralNvmeSupport = {
    REQUIRED: "required",
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const BandwidthWeightingType = {
    DEFAULT: "default",
    EBS_1: "ebs-1",
    VPC_1: "vpc-1",
};
const EnaSupport = {
    required: "required",
    supported: "supported",
    unsupported: "unsupported",
};
const FlexibleEnaQueuesSupport = {
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const NitroEnclavesSupport = {
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const DiskImageDescriptionFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportManifestUrl && { ImportManifestUrl: smithyClient.SENSITIVE_STRING }),
});
const ImportInstanceVolumeDetailItemFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: DiskImageDescriptionFilterSensitiveLog(obj.Image) }),
});
const ImportInstanceTaskDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Volumes && { Volumes: obj.Volumes.map((item) => ImportInstanceVolumeDetailItemFilterSensitiveLog(item)) }),
});
const ImportVolumeTaskDetailsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: DiskImageDescriptionFilterSensitiveLog(obj.Image) }),
});
const ConversionTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportInstance && { ImportInstance: ImportInstanceTaskDetailsFilterSensitiveLog(obj.ImportInstance) }),
    ...(obj.ImportVolume && { ImportVolume: ImportVolumeTaskDetailsFilterSensitiveLog(obj.ImportVolume) }),
});
const DescribeConversionTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConversionTasks && {
        ConversionTasks: obj.ConversionTasks.map((item) => ConversionTaskFilterSensitiveLog(item)),
    }),
});
const SnapshotDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithyClient.SENSITIVE_STRING }),
});
const ImportImageTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotDetails && {
        SnapshotDetails: obj.SnapshotDetails.map((item) => SnapshotDetailFilterSensitiveLog(item)),
    }),
});
const DescribeImportImageTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
});
const SnapshotTaskDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithyClient.SENSITIVE_STRING }),
});
const ImportSnapshotTaskFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotTaskDetail && { SnapshotTaskDetail: SnapshotTaskDetailFilterSensitiveLog(obj.SnapshotTaskDetail) }),
});
const DescribeImportSnapshotTasksResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportSnapshotTasks && {
        ImportSnapshotTasks: obj.ImportSnapshotTasks.map((item) => ImportSnapshotTaskFilterSensitiveLog(item)),
    }),
});

class DescribeConversionTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeConversionTasks", {})
    .n("EC2Client", "DescribeConversionTasksCommand")
    .f(void 0, DescribeConversionTasksResultFilterSensitiveLog)
    .ser(se_DescribeConversionTasksCommand)
    .de(de_DescribeConversionTasksCommand)
    .build() {
}

class DescribeCustomerGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeCustomerGateways", {})
    .n("EC2Client", "DescribeCustomerGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCustomerGatewaysCommand)
    .de(de_DescribeCustomerGatewaysCommand)
    .build() {
}

class DescribeDeclarativePoliciesReportsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeDeclarativePoliciesReports", {})
    .n("EC2Client", "DescribeDeclarativePoliciesReportsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDeclarativePoliciesReportsCommand)
    .de(de_DescribeDeclarativePoliciesReportsCommand)
    .build() {
}

class DescribeDhcpOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeDhcpOptions", {})
    .n("EC2Client", "DescribeDhcpOptionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDhcpOptionsCommand)
    .de(de_DescribeDhcpOptionsCommand)
    .build() {
}

class DescribeEgressOnlyInternetGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeEgressOnlyInternetGateways", {})
    .n("EC2Client", "DescribeEgressOnlyInternetGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEgressOnlyInternetGatewaysCommand)
    .de(de_DescribeEgressOnlyInternetGatewaysCommand)
    .build() {
}

class DescribeElasticGpusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeElasticGpus", {})
    .n("EC2Client", "DescribeElasticGpusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeElasticGpusCommand)
    .de(de_DescribeElasticGpusCommand)
    .build() {
}

class DescribeExportImageTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeExportImageTasks", {})
    .n("EC2Client", "DescribeExportImageTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeExportImageTasksCommand)
    .de(de_DescribeExportImageTasksCommand)
    .build() {
}

class DescribeExportTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeExportTasks", {})
    .n("EC2Client", "DescribeExportTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeExportTasksCommand)
    .de(de_DescribeExportTasksCommand)
    .build() {
}

class DescribeFastLaunchImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFastLaunchImages", {})
    .n("EC2Client", "DescribeFastLaunchImagesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFastLaunchImagesCommand)
    .de(de_DescribeFastLaunchImagesCommand)
    .build() {
}

class DescribeFastSnapshotRestoresCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFastSnapshotRestores", {})
    .n("EC2Client", "DescribeFastSnapshotRestoresCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFastSnapshotRestoresCommand)
    .de(de_DescribeFastSnapshotRestoresCommand)
    .build() {
}

class DescribeFleetHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFleetHistory", {})
    .n("EC2Client", "DescribeFleetHistoryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFleetHistoryCommand)
    .de(de_DescribeFleetHistoryCommand)
    .build() {
}

class DescribeFleetInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFleetInstances", {})
    .n("EC2Client", "DescribeFleetInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFleetInstancesCommand)
    .de(de_DescribeFleetInstancesCommand)
    .build() {
}

class DescribeFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFleets", {})
    .n("EC2Client", "DescribeFleetsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFleetsCommand)
    .de(de_DescribeFleetsCommand)
    .build() {
}

class DescribeFlowLogsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFlowLogs", {})
    .n("EC2Client", "DescribeFlowLogsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFlowLogsCommand)
    .de(de_DescribeFlowLogsCommand)
    .build() {
}

class DescribeFpgaImageAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFpgaImageAttribute", {})
    .n("EC2Client", "DescribeFpgaImageAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFpgaImageAttributeCommand)
    .de(de_DescribeFpgaImageAttributeCommand)
    .build() {
}

class DescribeFpgaImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeFpgaImages", {})
    .n("EC2Client", "DescribeFpgaImagesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFpgaImagesCommand)
    .de(de_DescribeFpgaImagesCommand)
    .build() {
}

class DescribeHostReservationOfferingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeHostReservationOfferings", {})
    .n("EC2Client", "DescribeHostReservationOfferingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHostReservationOfferingsCommand)
    .de(de_DescribeHostReservationOfferingsCommand)
    .build() {
}

class DescribeHostReservationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeHostReservations", {})
    .n("EC2Client", "DescribeHostReservationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHostReservationsCommand)
    .de(de_DescribeHostReservationsCommand)
    .build() {
}

class DescribeHostsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeHosts", {})
    .n("EC2Client", "DescribeHostsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHostsCommand)
    .de(de_DescribeHostsCommand)
    .build() {
}

class DescribeIamInstanceProfileAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIamInstanceProfileAssociations", {})
    .n("EC2Client", "DescribeIamInstanceProfileAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIamInstanceProfileAssociationsCommand)
    .de(de_DescribeIamInstanceProfileAssociationsCommand)
    .build() {
}

class DescribeIdentityIdFormatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIdentityIdFormat", {})
    .n("EC2Client", "DescribeIdentityIdFormatCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIdentityIdFormatCommand)
    .de(de_DescribeIdentityIdFormatCommand)
    .build() {
}

class DescribeIdFormatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIdFormat", {})
    .n("EC2Client", "DescribeIdFormatCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIdFormatCommand)
    .de(de_DescribeIdFormatCommand)
    .build() {
}

class DescribeImageAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImageAttribute", {})
    .n("EC2Client", "DescribeImageAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageAttributeCommand)
    .de(de_DescribeImageAttributeCommand)
    .build() {
}

class DescribeImageReferencesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImageReferences", {})
    .n("EC2Client", "DescribeImageReferencesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageReferencesCommand)
    .de(de_DescribeImageReferencesCommand)
    .build() {
}

class DescribeImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImages", {})
    .n("EC2Client", "DescribeImagesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImagesCommand)
    .de(de_DescribeImagesCommand)
    .build() {
}

class DescribeImageUsageReportEntriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImageUsageReportEntries", {})
    .n("EC2Client", "DescribeImageUsageReportEntriesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageUsageReportEntriesCommand)
    .de(de_DescribeImageUsageReportEntriesCommand)
    .build() {
}

class DescribeImageUsageReportsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImageUsageReports", {})
    .n("EC2Client", "DescribeImageUsageReportsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageUsageReportsCommand)
    .de(de_DescribeImageUsageReportsCommand)
    .build() {
}

class DescribeImportImageTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImportImageTasks", {})
    .n("EC2Client", "DescribeImportImageTasksCommand")
    .f(void 0, DescribeImportImageTasksResultFilterSensitiveLog)
    .ser(se_DescribeImportImageTasksCommand)
    .de(de_DescribeImportImageTasksCommand)
    .build() {
}

class DescribeImportSnapshotTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeImportSnapshotTasks", {})
    .n("EC2Client", "DescribeImportSnapshotTasksCommand")
    .f(void 0, DescribeImportSnapshotTasksResultFilterSensitiveLog)
    .ser(se_DescribeImportSnapshotTasksCommand)
    .de(de_DescribeImportSnapshotTasksCommand)
    .build() {
}

class DescribeInstanceAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceAttribute", {})
    .n("EC2Client", "DescribeInstanceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceAttributeCommand)
    .de(de_DescribeInstanceAttributeCommand)
    .build() {
}

class DescribeInstanceConnectEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceConnectEndpoints", {})
    .n("EC2Client", "DescribeInstanceConnectEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceConnectEndpointsCommand)
    .de(de_DescribeInstanceConnectEndpointsCommand)
    .build() {
}

class DescribeInstanceCreditSpecificationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceCreditSpecifications", {})
    .n("EC2Client", "DescribeInstanceCreditSpecificationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceCreditSpecificationsCommand)
    .de(de_DescribeInstanceCreditSpecificationsCommand)
    .build() {
}

class DescribeInstanceEventNotificationAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceEventNotificationAttributes", {})
    .n("EC2Client", "DescribeInstanceEventNotificationAttributesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceEventNotificationAttributesCommand)
    .de(de_DescribeInstanceEventNotificationAttributesCommand)
    .build() {
}

class DescribeInstanceEventWindowsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceEventWindows", {})
    .n("EC2Client", "DescribeInstanceEventWindowsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceEventWindowsCommand)
    .de(de_DescribeInstanceEventWindowsCommand)
    .build() {
}

class DescribeInstanceImageMetadataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceImageMetadata", {})
    .n("EC2Client", "DescribeInstanceImageMetadataCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceImageMetadataCommand)
    .de(de_DescribeInstanceImageMetadataCommand)
    .build() {
}

class DescribeInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstances", {})
    .n("EC2Client", "DescribeInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstancesCommand)
    .de(de_DescribeInstancesCommand)
    .build() {
}

class DescribeInstanceStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceStatus", {})
    .n("EC2Client", "DescribeInstanceStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceStatusCommand)
    .de(de_DescribeInstanceStatusCommand)
    .build() {
}

class DescribeInstanceTopologyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceTopology", {})
    .n("EC2Client", "DescribeInstanceTopologyCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceTopologyCommand)
    .de(de_DescribeInstanceTopologyCommand)
    .build() {
}

class DescribeInstanceTypeOfferingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceTypeOfferings", {})
    .n("EC2Client", "DescribeInstanceTypeOfferingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceTypeOfferingsCommand)
    .de(de_DescribeInstanceTypeOfferingsCommand)
    .build() {
}

class DescribeInstanceTypesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInstanceTypes", {})
    .n("EC2Client", "DescribeInstanceTypesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInstanceTypesCommand)
    .de(de_DescribeInstanceTypesCommand)
    .build() {
}

class DescribeInternetGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeInternetGateways", {})
    .n("EC2Client", "DescribeInternetGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInternetGatewaysCommand)
    .de(de_DescribeInternetGatewaysCommand)
    .build() {
}

class DescribeIpamByoasnCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpamByoasn", {})
    .n("EC2Client", "DescribeIpamByoasnCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamByoasnCommand)
    .de(de_DescribeIpamByoasnCommand)
    .build() {
}

class DescribeIpamExternalResourceVerificationTokensCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpamExternalResourceVerificationTokens", {})
    .n("EC2Client", "DescribeIpamExternalResourceVerificationTokensCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamExternalResourceVerificationTokensCommand)
    .de(de_DescribeIpamExternalResourceVerificationTokensCommand)
    .build() {
}

class DescribeIpamPoolsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpamPools", {})
    .n("EC2Client", "DescribeIpamPoolsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamPoolsCommand)
    .de(de_DescribeIpamPoolsCommand)
    .build() {
}

class DescribeIpamResourceDiscoveriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpamResourceDiscoveries", {})
    .n("EC2Client", "DescribeIpamResourceDiscoveriesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamResourceDiscoveriesCommand)
    .de(de_DescribeIpamResourceDiscoveriesCommand)
    .build() {
}

class DescribeIpamResourceDiscoveryAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpamResourceDiscoveryAssociations", {})
    .n("EC2Client", "DescribeIpamResourceDiscoveryAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamResourceDiscoveryAssociationsCommand)
    .de(de_DescribeIpamResourceDiscoveryAssociationsCommand)
    .build() {
}

class DescribeIpamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpams", {})
    .n("EC2Client", "DescribeIpamsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamsCommand)
    .de(de_DescribeIpamsCommand)
    .build() {
}

class DescribeIpamScopesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpamScopes", {})
    .n("EC2Client", "DescribeIpamScopesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpamScopesCommand)
    .de(de_DescribeIpamScopesCommand)
    .build() {
}

class DescribeIpv6PoolsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeIpv6Pools", {})
    .n("EC2Client", "DescribeIpv6PoolsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeIpv6PoolsCommand)
    .de(de_DescribeIpv6PoolsCommand)
    .build() {
}

class DescribeKeyPairsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeKeyPairs", {})
    .n("EC2Client", "DescribeKeyPairsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeKeyPairsCommand)
    .de(de_DescribeKeyPairsCommand)
    .build() {
}

class DescribeLaunchTemplatesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLaunchTemplates", {})
    .n("EC2Client", "DescribeLaunchTemplatesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLaunchTemplatesCommand)
    .de(de_DescribeLaunchTemplatesCommand)
    .build() {
}

const NitroTpmSupport = {
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const PhcSupport = {
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const PlacementGroupStrategy = {
    cluster: "cluster",
    partition: "partition",
    spread: "spread",
};
const ArchitectureType = {
    arm64: "arm64",
    arm64_mac: "arm64_mac",
    i386: "i386",
    x86_64: "x86_64",
    x86_64_mac: "x86_64_mac",
};
const SupportedAdditionalProcessorFeature = {
    AMD_SEV_SNP: "amd-sev-snp",
};
const RebootMigrationSupport = {
    SUPPORTED: "supported",
    UNSUPPORTED: "unsupported",
};
const BootModeType = {
    legacy_bios: "legacy-bios",
    uefi: "uefi",
};
const RootDeviceType = {
    ebs: "ebs",
    instance_store: "instance-store",
};
const UsageClassType = {
    capacity_block: "capacity-block",
    on_demand: "on-demand",
    spot: "spot",
};
const LockState = {
    compliance: "compliance",
    compliance_cooloff: "compliance-cooloff",
    expired: "expired",
    governance: "governance",
};
const MoveStatus = {
    movingToVpc: "movingToVpc",
    restoringToClassic: "restoringToClassic",
};
const FindingsFound = {
    false: "false",
    true: "true",
    unknown: "unknown",
};
const AnalysisStatus = {
    failed: "failed",
    running: "running",
    succeeded: "succeeded",
};
const NetworkInterfaceAttribute = {
    associatePublicIpAddress: "associatePublicIpAddress",
    attachment: "attachment",
    description: "description",
    groupSet: "groupSet",
    sourceDestCheck: "sourceDestCheck",
};
const OfferingClassType = {
    CONVERTIBLE: "convertible",
    STANDARD: "standard",
};
const OfferingTypeValues = {
    All_Upfront: "All Upfront",
    Heavy_Utilization: "Heavy Utilization",
    Light_Utilization: "Light Utilization",
    Medium_Utilization: "Medium Utilization",
    No_Upfront: "No Upfront",
    Partial_Upfront: "Partial Upfront",
};
const RIProductDescription = {
    Linux_UNIX: "Linux/UNIX",
    Linux_UNIX_Amazon_VPC_: "Linux/UNIX (Amazon VPC)",
    Windows: "Windows",
    Windows_Amazon_VPC_: "Windows (Amazon VPC)",
};
const RecurringChargeFrequency = {
    Hourly: "Hourly",
};
const Scope = {
    AVAILABILITY_ZONE: "Availability Zone",
    REGIONAL: "Region",
};
const ReservedInstanceState = {
    active: "active",
    payment_failed: "payment-failed",
    payment_pending: "payment-pending",
    queued: "queued",
    queued_deleted: "queued-deleted",
    retired: "retired",
};
const ServiceLinkVirtualInterfaceConfigurationState = {
    available: "available",
    deleted: "deleted",
    deleting: "deleting",
    pending: "pending",
};
const SnapshotAttributeName = {
    createVolumePermission: "createVolumePermission",
    productCodes: "productCodes",
};
const TieringOperationStatus = {
    archival_completed: "archival-completed",
    archival_failed: "archival-failed",
    archival_in_progress: "archival-in-progress",
    permanent_restore_completed: "permanent-restore-completed",
    permanent_restore_failed: "permanent-restore-failed",
    permanent_restore_in_progress: "permanent-restore-in-progress",
    temporary_restore_completed: "temporary-restore-completed",
    temporary_restore_failed: "temporary-restore-failed",
    temporary_restore_in_progress: "temporary-restore-in-progress",
};
const EventType = {
    BATCH_CHANGE: "fleetRequestChange",
    ERROR: "error",
    INFORMATION: "information",
    INSTANCE_CHANGE: "instanceChange",
};
const ExcessCapacityTerminationPolicy = {
    DEFAULT: "default",
    NO_TERMINATION: "noTermination",
};
const OnDemandAllocationStrategy = {
    LOWEST_PRICE: "lowestPrice",
    PRIORITIZED: "prioritized",
};
const ReplacementStrategy = {
    LAUNCH: "launch",
    LAUNCH_BEFORE_TERMINATE: "launch-before-terminate",
};
const SpotInstanceState = {
    active: "active",
    cancelled: "cancelled",
    closed: "closed",
    disabled: "disabled",
    failed: "failed",
    open: "open",
};
const VerifiedAccessLogDeliveryStatusCode = {
    FAILED: "failed",
    SUCCESS: "success",
};
const VolumeAttributeName = {
    autoEnableIO: "autoEnableIO",
    productCodes: "productCodes",
};
const VolumeModificationState = {
    completed: "completed",
    failed: "failed",
    modifying: "modifying",
    optimizing: "optimizing",
};
const InitializationType = {
    default: "default",
    provisioned_rate: "provisioned-rate",
};
const VolumeStatusName = {
    initialization_state: "initialization-state",
    io_enabled: "io-enabled",
    io_performance: "io-performance",
};
const VolumeStatusInfoStatus = {
    impaired: "impaired",
    insufficient_data: "insufficient-data",
    ok: "ok",
    warning: "warning",
};
const VpcAttributeName = {
    enableDnsHostnames: "enableDnsHostnames",
    enableDnsSupport: "enableDnsSupport",
    enableNetworkAddressUsageMetrics: "enableNetworkAddressUsageMetrics",
};
const DescribeLaunchTemplateVersionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateVersions && {
        LaunchTemplateVersions: obj.LaunchTemplateVersions.map((item) => LaunchTemplateVersionFilterSensitiveLog(item)),
    }),
});
const SpotFleetLaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const SpotFleetRequestConfigDataFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecifications && {
        LaunchSpecifications: obj.LaunchSpecifications.map((item) => SpotFleetLaunchSpecificationFilterSensitiveLog(item)),
    }),
});
const SpotFleetRequestConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SpotFleetRequestConfig && {
        SpotFleetRequestConfig: SpotFleetRequestConfigDataFilterSensitiveLog(obj.SpotFleetRequestConfig),
    }),
});
const DescribeSpotFleetRequestsResponseFilterSensitiveLog = (obj) => ({
    ...obj,
});
const LaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const SpotInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecification && {
        LaunchSpecification: LaunchSpecificationFilterSensitiveLog(obj.LaunchSpecification),
    }),
});
const DescribeSpotInstanceRequestsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SpotInstanceRequests && {
        SpotInstanceRequests: obj.SpotInstanceRequests.map((item) => SpotInstanceRequestFilterSensitiveLog(item)),
    }),
});
const DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProviders && {
        VerifiedAccessTrustProviders: obj.VerifiedAccessTrustProviders.map((item) => VerifiedAccessTrustProviderFilterSensitiveLog(item)),
    }),
});

class DescribeLaunchTemplateVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLaunchTemplateVersions", {})
    .n("EC2Client", "DescribeLaunchTemplateVersionsCommand")
    .f(void 0, DescribeLaunchTemplateVersionsResultFilterSensitiveLog)
    .ser(se_DescribeLaunchTemplateVersionsCommand)
    .de(de_DescribeLaunchTemplateVersionsCommand)
    .build() {
}

class DescribeLocalGatewayRouteTablesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLocalGatewayRouteTables", {})
    .n("EC2Client", "DescribeLocalGatewayRouteTablesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLocalGatewayRouteTablesCommand)
    .de(de_DescribeLocalGatewayRouteTablesCommand)
    .build() {
}

class DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations", {})
    .n("EC2Client", "DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand)
    .de(de_DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand)
    .build() {
}

class DescribeLocalGatewayRouteTableVpcAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLocalGatewayRouteTableVpcAssociations", {})
    .n("EC2Client", "DescribeLocalGatewayRouteTableVpcAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLocalGatewayRouteTableVpcAssociationsCommand)
    .de(de_DescribeLocalGatewayRouteTableVpcAssociationsCommand)
    .build() {
}

class DescribeLocalGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLocalGateways", {})
    .n("EC2Client", "DescribeLocalGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLocalGatewaysCommand)
    .de(de_DescribeLocalGatewaysCommand)
    .build() {
}

class DescribeLocalGatewayVirtualInterfaceGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLocalGatewayVirtualInterfaceGroups", {})
    .n("EC2Client", "DescribeLocalGatewayVirtualInterfaceGroupsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLocalGatewayVirtualInterfaceGroupsCommand)
    .de(de_DescribeLocalGatewayVirtualInterfaceGroupsCommand)
    .build() {
}

class DescribeLocalGatewayVirtualInterfacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLocalGatewayVirtualInterfaces", {})
    .n("EC2Client", "DescribeLocalGatewayVirtualInterfacesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLocalGatewayVirtualInterfacesCommand)
    .de(de_DescribeLocalGatewayVirtualInterfacesCommand)
    .build() {
}

class DescribeLockedSnapshotsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeLockedSnapshots", {})
    .n("EC2Client", "DescribeLockedSnapshotsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLockedSnapshotsCommand)
    .de(de_DescribeLockedSnapshotsCommand)
    .build() {
}

class DescribeMacHostsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeMacHosts", {})
    .n("EC2Client", "DescribeMacHostsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMacHostsCommand)
    .de(de_DescribeMacHostsCommand)
    .build() {
}

class DescribeMacModificationTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeMacModificationTasks", {})
    .n("EC2Client", "DescribeMacModificationTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMacModificationTasksCommand)
    .de(de_DescribeMacModificationTasksCommand)
    .build() {
}

class DescribeManagedPrefixListsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeManagedPrefixLists", {})
    .n("EC2Client", "DescribeManagedPrefixListsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeManagedPrefixListsCommand)
    .de(de_DescribeManagedPrefixListsCommand)
    .build() {
}

class DescribeMovingAddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeMovingAddresses", {})
    .n("EC2Client", "DescribeMovingAddressesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMovingAddressesCommand)
    .de(de_DescribeMovingAddressesCommand)
    .build() {
}

class DescribeNatGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNatGateways", {})
    .n("EC2Client", "DescribeNatGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNatGatewaysCommand)
    .de(de_DescribeNatGatewaysCommand)
    .build() {
}

class DescribeNetworkAclsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkAcls", {})
    .n("EC2Client", "DescribeNetworkAclsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkAclsCommand)
    .de(de_DescribeNetworkAclsCommand)
    .build() {
}

class DescribeNetworkInsightsAccessScopeAnalysesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInsightsAccessScopeAnalyses", {})
    .n("EC2Client", "DescribeNetworkInsightsAccessScopeAnalysesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInsightsAccessScopeAnalysesCommand)
    .de(de_DescribeNetworkInsightsAccessScopeAnalysesCommand)
    .build() {
}

class DescribeNetworkInsightsAccessScopesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInsightsAccessScopes", {})
    .n("EC2Client", "DescribeNetworkInsightsAccessScopesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInsightsAccessScopesCommand)
    .de(de_DescribeNetworkInsightsAccessScopesCommand)
    .build() {
}

class DescribeNetworkInsightsAnalysesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInsightsAnalyses", {})
    .n("EC2Client", "DescribeNetworkInsightsAnalysesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInsightsAnalysesCommand)
    .de(de_DescribeNetworkInsightsAnalysesCommand)
    .build() {
}

class DescribeNetworkInsightsPathsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInsightsPaths", {})
    .n("EC2Client", "DescribeNetworkInsightsPathsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInsightsPathsCommand)
    .de(de_DescribeNetworkInsightsPathsCommand)
    .build() {
}

class DescribeNetworkInterfaceAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInterfaceAttribute", {})
    .n("EC2Client", "DescribeNetworkInterfaceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInterfaceAttributeCommand)
    .de(de_DescribeNetworkInterfaceAttributeCommand)
    .build() {
}

class DescribeNetworkInterfacePermissionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInterfacePermissions", {})
    .n("EC2Client", "DescribeNetworkInterfacePermissionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInterfacePermissionsCommand)
    .de(de_DescribeNetworkInterfacePermissionsCommand)
    .build() {
}

class DescribeNetworkInterfacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeNetworkInterfaces", {})
    .n("EC2Client", "DescribeNetworkInterfacesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNetworkInterfacesCommand)
    .de(de_DescribeNetworkInterfacesCommand)
    .build() {
}

class DescribeOutpostLagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeOutpostLags", {})
    .n("EC2Client", "DescribeOutpostLagsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeOutpostLagsCommand)
    .de(de_DescribeOutpostLagsCommand)
    .build() {
}

class DescribePlacementGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribePlacementGroups", {})
    .n("EC2Client", "DescribePlacementGroupsCommand")
    .f(void 0, void 0)
    .ser(se_DescribePlacementGroupsCommand)
    .de(de_DescribePlacementGroupsCommand)
    .build() {
}

class DescribePrefixListsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribePrefixLists", {})
    .n("EC2Client", "DescribePrefixListsCommand")
    .f(void 0, void 0)
    .ser(se_DescribePrefixListsCommand)
    .de(de_DescribePrefixListsCommand)
    .build() {
}

class DescribePrincipalIdFormatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribePrincipalIdFormat", {})
    .n("EC2Client", "DescribePrincipalIdFormatCommand")
    .f(void 0, void 0)
    .ser(se_DescribePrincipalIdFormatCommand)
    .de(de_DescribePrincipalIdFormatCommand)
    .build() {
}

class DescribePublicIpv4PoolsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribePublicIpv4Pools", {})
    .n("EC2Client", "DescribePublicIpv4PoolsCommand")
    .f(void 0, void 0)
    .ser(se_DescribePublicIpv4PoolsCommand)
    .de(de_DescribePublicIpv4PoolsCommand)
    .build() {
}

class DescribeRegionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeRegions", {})
    .n("EC2Client", "DescribeRegionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRegionsCommand)
    .de(de_DescribeRegionsCommand)
    .build() {
}

class DescribeReplaceRootVolumeTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeReplaceRootVolumeTasks", {})
    .n("EC2Client", "DescribeReplaceRootVolumeTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReplaceRootVolumeTasksCommand)
    .de(de_DescribeReplaceRootVolumeTasksCommand)
    .build() {
}

class DescribeReservedInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeReservedInstances", {})
    .n("EC2Client", "DescribeReservedInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReservedInstancesCommand)
    .de(de_DescribeReservedInstancesCommand)
    .build() {
}

class DescribeReservedInstancesListingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeReservedInstancesListings", {})
    .n("EC2Client", "DescribeReservedInstancesListingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReservedInstancesListingsCommand)
    .de(de_DescribeReservedInstancesListingsCommand)
    .build() {
}

class DescribeReservedInstancesModificationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeReservedInstancesModifications", {})
    .n("EC2Client", "DescribeReservedInstancesModificationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReservedInstancesModificationsCommand)
    .de(de_DescribeReservedInstancesModificationsCommand)
    .build() {
}

class DescribeReservedInstancesOfferingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeReservedInstancesOfferings", {})
    .n("EC2Client", "DescribeReservedInstancesOfferingsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReservedInstancesOfferingsCommand)
    .de(de_DescribeReservedInstancesOfferingsCommand)
    .build() {
}

class DescribeRouteServerEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeRouteServerEndpoints", {})
    .n("EC2Client", "DescribeRouteServerEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRouteServerEndpointsCommand)
    .de(de_DescribeRouteServerEndpointsCommand)
    .build() {
}

class DescribeRouteServerPeersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeRouteServerPeers", {})
    .n("EC2Client", "DescribeRouteServerPeersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRouteServerPeersCommand)
    .de(de_DescribeRouteServerPeersCommand)
    .build() {
}

class DescribeRouteServersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeRouteServers", {})
    .n("EC2Client", "DescribeRouteServersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRouteServersCommand)
    .de(de_DescribeRouteServersCommand)
    .build() {
}

class DescribeRouteTablesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeRouteTables", {})
    .n("EC2Client", "DescribeRouteTablesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeRouteTablesCommand)
    .de(de_DescribeRouteTablesCommand)
    .build() {
}

class DescribeScheduledInstanceAvailabilityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeScheduledInstanceAvailability", {})
    .n("EC2Client", "DescribeScheduledInstanceAvailabilityCommand")
    .f(void 0, void 0)
    .ser(se_DescribeScheduledInstanceAvailabilityCommand)
    .de(de_DescribeScheduledInstanceAvailabilityCommand)
    .build() {
}

class DescribeScheduledInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeScheduledInstances", {})
    .n("EC2Client", "DescribeScheduledInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeScheduledInstancesCommand)
    .de(de_DescribeScheduledInstancesCommand)
    .build() {
}

class DescribeSecurityGroupReferencesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSecurityGroupReferences", {})
    .n("EC2Client", "DescribeSecurityGroupReferencesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSecurityGroupReferencesCommand)
    .de(de_DescribeSecurityGroupReferencesCommand)
    .build() {
}

class DescribeSecurityGroupRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSecurityGroupRules", {})
    .n("EC2Client", "DescribeSecurityGroupRulesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSecurityGroupRulesCommand)
    .de(de_DescribeSecurityGroupRulesCommand)
    .build() {
}

class DescribeSecurityGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSecurityGroups", {})
    .n("EC2Client", "DescribeSecurityGroupsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSecurityGroupsCommand)
    .de(de_DescribeSecurityGroupsCommand)
    .build() {
}

class DescribeSecurityGroupVpcAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSecurityGroupVpcAssociations", {})
    .n("EC2Client", "DescribeSecurityGroupVpcAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSecurityGroupVpcAssociationsCommand)
    .de(de_DescribeSecurityGroupVpcAssociationsCommand)
    .build() {
}

class DescribeServiceLinkVirtualInterfacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeServiceLinkVirtualInterfaces", {})
    .n("EC2Client", "DescribeServiceLinkVirtualInterfacesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeServiceLinkVirtualInterfacesCommand)
    .de(de_DescribeServiceLinkVirtualInterfacesCommand)
    .build() {
}

class DescribeSnapshotAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSnapshotAttribute", {})
    .n("EC2Client", "DescribeSnapshotAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSnapshotAttributeCommand)
    .de(de_DescribeSnapshotAttributeCommand)
    .build() {
}

class DescribeSnapshotsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSnapshots", {})
    .n("EC2Client", "DescribeSnapshotsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSnapshotsCommand)
    .de(de_DescribeSnapshotsCommand)
    .build() {
}

class DescribeSnapshotTierStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSnapshotTierStatus", {})
    .n("EC2Client", "DescribeSnapshotTierStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSnapshotTierStatusCommand)
    .de(de_DescribeSnapshotTierStatusCommand)
    .build() {
}

class DescribeSpotDatafeedSubscriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSpotDatafeedSubscription", {})
    .n("EC2Client", "DescribeSpotDatafeedSubscriptionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSpotDatafeedSubscriptionCommand)
    .de(de_DescribeSpotDatafeedSubscriptionCommand)
    .build() {
}

class DescribeSpotFleetInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSpotFleetInstances", {})
    .n("EC2Client", "DescribeSpotFleetInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSpotFleetInstancesCommand)
    .de(de_DescribeSpotFleetInstancesCommand)
    .build() {
}

class DescribeSpotFleetRequestHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSpotFleetRequestHistory", {})
    .n("EC2Client", "DescribeSpotFleetRequestHistoryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSpotFleetRequestHistoryCommand)
    .de(de_DescribeSpotFleetRequestHistoryCommand)
    .build() {
}

class DescribeSpotFleetRequestsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSpotFleetRequests", {})
    .n("EC2Client", "DescribeSpotFleetRequestsCommand")
    .f(void 0, DescribeSpotFleetRequestsResponseFilterSensitiveLog)
    .ser(se_DescribeSpotFleetRequestsCommand)
    .de(de_DescribeSpotFleetRequestsCommand)
    .build() {
}

class DescribeSpotInstanceRequestsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSpotInstanceRequests", {})
    .n("EC2Client", "DescribeSpotInstanceRequestsCommand")
    .f(void 0, DescribeSpotInstanceRequestsResultFilterSensitiveLog)
    .ser(se_DescribeSpotInstanceRequestsCommand)
    .de(de_DescribeSpotInstanceRequestsCommand)
    .build() {
}

class DescribeSpotPriceHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSpotPriceHistory", {})
    .n("EC2Client", "DescribeSpotPriceHistoryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSpotPriceHistoryCommand)
    .de(de_DescribeSpotPriceHistoryCommand)
    .build() {
}

class DescribeStaleSecurityGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeStaleSecurityGroups", {})
    .n("EC2Client", "DescribeStaleSecurityGroupsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStaleSecurityGroupsCommand)
    .de(de_DescribeStaleSecurityGroupsCommand)
    .build() {
}

class DescribeStoreImageTasksCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeStoreImageTasks", {})
    .n("EC2Client", "DescribeStoreImageTasksCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStoreImageTasksCommand)
    .de(de_DescribeStoreImageTasksCommand)
    .build() {
}

class DescribeSubnetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeSubnets", {})
    .n("EC2Client", "DescribeSubnetsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSubnetsCommand)
    .de(de_DescribeSubnetsCommand)
    .build() {
}

class DescribeTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTags", {})
    .n("EC2Client", "DescribeTagsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTagsCommand)
    .de(de_DescribeTagsCommand)
    .build() {
}

class DescribeTrafficMirrorFilterRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTrafficMirrorFilterRules", {})
    .n("EC2Client", "DescribeTrafficMirrorFilterRulesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrafficMirrorFilterRulesCommand)
    .de(de_DescribeTrafficMirrorFilterRulesCommand)
    .build() {
}

class DescribeTrafficMirrorFiltersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTrafficMirrorFilters", {})
    .n("EC2Client", "DescribeTrafficMirrorFiltersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrafficMirrorFiltersCommand)
    .de(de_DescribeTrafficMirrorFiltersCommand)
    .build() {
}

class DescribeTrafficMirrorSessionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTrafficMirrorSessions", {})
    .n("EC2Client", "DescribeTrafficMirrorSessionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrafficMirrorSessionsCommand)
    .de(de_DescribeTrafficMirrorSessionsCommand)
    .build() {
}

class DescribeTrafficMirrorTargetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTrafficMirrorTargets", {})
    .n("EC2Client", "DescribeTrafficMirrorTargetsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrafficMirrorTargetsCommand)
    .de(de_DescribeTrafficMirrorTargetsCommand)
    .build() {
}

class DescribeTransitGatewayAttachmentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayAttachments", {})
    .n("EC2Client", "DescribeTransitGatewayAttachmentsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayAttachmentsCommand)
    .de(de_DescribeTransitGatewayAttachmentsCommand)
    .build() {
}

class DescribeTransitGatewayConnectPeersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayConnectPeers", {})
    .n("EC2Client", "DescribeTransitGatewayConnectPeersCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayConnectPeersCommand)
    .de(de_DescribeTransitGatewayConnectPeersCommand)
    .build() {
}

class DescribeTransitGatewayConnectsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayConnects", {})
    .n("EC2Client", "DescribeTransitGatewayConnectsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayConnectsCommand)
    .de(de_DescribeTransitGatewayConnectsCommand)
    .build() {
}

class DescribeTransitGatewayMulticastDomainsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayMulticastDomains", {})
    .n("EC2Client", "DescribeTransitGatewayMulticastDomainsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayMulticastDomainsCommand)
    .de(de_DescribeTransitGatewayMulticastDomainsCommand)
    .build() {
}

class DescribeTransitGatewayPeeringAttachmentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayPeeringAttachments", {})
    .n("EC2Client", "DescribeTransitGatewayPeeringAttachmentsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayPeeringAttachmentsCommand)
    .de(de_DescribeTransitGatewayPeeringAttachmentsCommand)
    .build() {
}

class DescribeTransitGatewayPolicyTablesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayPolicyTables", {})
    .n("EC2Client", "DescribeTransitGatewayPolicyTablesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayPolicyTablesCommand)
    .de(de_DescribeTransitGatewayPolicyTablesCommand)
    .build() {
}

class DescribeTransitGatewayRouteTableAnnouncementsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayRouteTableAnnouncements", {})
    .n("EC2Client", "DescribeTransitGatewayRouteTableAnnouncementsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayRouteTableAnnouncementsCommand)
    .de(de_DescribeTransitGatewayRouteTableAnnouncementsCommand)
    .build() {
}

class DescribeTransitGatewayRouteTablesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayRouteTables", {})
    .n("EC2Client", "DescribeTransitGatewayRouteTablesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayRouteTablesCommand)
    .de(de_DescribeTransitGatewayRouteTablesCommand)
    .build() {
}

class DescribeTransitGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGateways", {})
    .n("EC2Client", "DescribeTransitGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewaysCommand)
    .de(de_DescribeTransitGatewaysCommand)
    .build() {
}

class DescribeTransitGatewayVpcAttachmentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTransitGatewayVpcAttachments", {})
    .n("EC2Client", "DescribeTransitGatewayVpcAttachmentsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransitGatewayVpcAttachmentsCommand)
    .de(de_DescribeTransitGatewayVpcAttachmentsCommand)
    .build() {
}

class DescribeTrunkInterfaceAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeTrunkInterfaceAssociations", {})
    .n("EC2Client", "DescribeTrunkInterfaceAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrunkInterfaceAssociationsCommand)
    .de(de_DescribeTrunkInterfaceAssociationsCommand)
    .build() {
}

class DescribeVerifiedAccessEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVerifiedAccessEndpoints", {})
    .n("EC2Client", "DescribeVerifiedAccessEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVerifiedAccessEndpointsCommand)
    .de(de_DescribeVerifiedAccessEndpointsCommand)
    .build() {
}

class DescribeVerifiedAccessGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVerifiedAccessGroups", {})
    .n("EC2Client", "DescribeVerifiedAccessGroupsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVerifiedAccessGroupsCommand)
    .de(de_DescribeVerifiedAccessGroupsCommand)
    .build() {
}

class DescribeVerifiedAccessInstanceLoggingConfigurationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVerifiedAccessInstanceLoggingConfigurations", {})
    .n("EC2Client", "DescribeVerifiedAccessInstanceLoggingConfigurationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand)
    .de(de_DescribeVerifiedAccessInstanceLoggingConfigurationsCommand)
    .build() {
}

class DescribeVerifiedAccessInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVerifiedAccessInstances", {})
    .n("EC2Client", "DescribeVerifiedAccessInstancesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVerifiedAccessInstancesCommand)
    .de(de_DescribeVerifiedAccessInstancesCommand)
    .build() {
}

class DescribeVerifiedAccessTrustProvidersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVerifiedAccessTrustProviders", {})
    .n("EC2Client", "DescribeVerifiedAccessTrustProvidersCommand")
    .f(void 0, DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog)
    .ser(se_DescribeVerifiedAccessTrustProvidersCommand)
    .de(de_DescribeVerifiedAccessTrustProvidersCommand)
    .build() {
}

class DescribeVolumeAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVolumeAttribute", {})
    .n("EC2Client", "DescribeVolumeAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVolumeAttributeCommand)
    .de(de_DescribeVolumeAttributeCommand)
    .build() {
}

class DescribeVolumesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVolumes", {})
    .n("EC2Client", "DescribeVolumesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVolumesCommand)
    .de(de_DescribeVolumesCommand)
    .build() {
}

class DescribeVolumesModificationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVolumesModifications", {})
    .n("EC2Client", "DescribeVolumesModificationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVolumesModificationsCommand)
    .de(de_DescribeVolumesModificationsCommand)
    .build() {
}

class DescribeVolumeStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVolumeStatus", {})
    .n("EC2Client", "DescribeVolumeStatusCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVolumeStatusCommand)
    .de(de_DescribeVolumeStatusCommand)
    .build() {
}

class DescribeVpcAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcAttribute", {})
    .n("EC2Client", "DescribeVpcAttributeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcAttributeCommand)
    .de(de_DescribeVpcAttributeCommand)
    .build() {
}

class DescribeVpcBlockPublicAccessExclusionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcBlockPublicAccessExclusions", {})
    .n("EC2Client", "DescribeVpcBlockPublicAccessExclusionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcBlockPublicAccessExclusionsCommand)
    .de(de_DescribeVpcBlockPublicAccessExclusionsCommand)
    .build() {
}

class DescribeVpcBlockPublicAccessOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcBlockPublicAccessOptions", {})
    .n("EC2Client", "DescribeVpcBlockPublicAccessOptionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcBlockPublicAccessOptionsCommand)
    .de(de_DescribeVpcBlockPublicAccessOptionsCommand)
    .build() {
}

class DescribeVpcClassicLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcClassicLink", {})
    .n("EC2Client", "DescribeVpcClassicLinkCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcClassicLinkCommand)
    .de(de_DescribeVpcClassicLinkCommand)
    .build() {
}

class DescribeVpcClassicLinkDnsSupportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcClassicLinkDnsSupport", {})
    .n("EC2Client", "DescribeVpcClassicLinkDnsSupportCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcClassicLinkDnsSupportCommand)
    .de(de_DescribeVpcClassicLinkDnsSupportCommand)
    .build() {
}

class DescribeVpcEndpointAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpointAssociations", {})
    .n("EC2Client", "DescribeVpcEndpointAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointAssociationsCommand)
    .de(de_DescribeVpcEndpointAssociationsCommand)
    .build() {
}

class DescribeVpcEndpointConnectionNotificationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpointConnectionNotifications", {})
    .n("EC2Client", "DescribeVpcEndpointConnectionNotificationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointConnectionNotificationsCommand)
    .de(de_DescribeVpcEndpointConnectionNotificationsCommand)
    .build() {
}

class DescribeVpcEndpointConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpointConnections", {})
    .n("EC2Client", "DescribeVpcEndpointConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointConnectionsCommand)
    .de(de_DescribeVpcEndpointConnectionsCommand)
    .build() {
}

class DescribeVpcEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpoints", {})
    .n("EC2Client", "DescribeVpcEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointsCommand)
    .de(de_DescribeVpcEndpointsCommand)
    .build() {
}

class DescribeVpcEndpointServiceConfigurationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpointServiceConfigurations", {})
    .n("EC2Client", "DescribeVpcEndpointServiceConfigurationsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointServiceConfigurationsCommand)
    .de(de_DescribeVpcEndpointServiceConfigurationsCommand)
    .build() {
}

class DescribeVpcEndpointServicePermissionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpointServicePermissions", {})
    .n("EC2Client", "DescribeVpcEndpointServicePermissionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointServicePermissionsCommand)
    .de(de_DescribeVpcEndpointServicePermissionsCommand)
    .build() {
}

class DescribeVpcEndpointServicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcEndpointServices", {})
    .n("EC2Client", "DescribeVpcEndpointServicesCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcEndpointServicesCommand)
    .de(de_DescribeVpcEndpointServicesCommand)
    .build() {
}

class DescribeVpcPeeringConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcPeeringConnections", {})
    .n("EC2Client", "DescribeVpcPeeringConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcPeeringConnectionsCommand)
    .de(de_DescribeVpcPeeringConnectionsCommand)
    .build() {
}

class DescribeVpcsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpcs", {})
    .n("EC2Client", "DescribeVpcsCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpcsCommand)
    .de(de_DescribeVpcsCommand)
    .build() {
}

const VpcBlockPublicAccessExclusionsAllowed = {
    allowed: "allowed",
    not_allowed: "not-allowed",
};
const InternetGatewayBlockMode = {
    block_bidirectional: "block-bidirectional",
    block_ingress: "block-ingress",
    off: "off",
};
const ManagedBy = {
    account: "account",
    declarative_policy: "declarative-policy",
};
const VpcBlockPublicAccessState = {
    default_state: "default-state",
    update_complete: "update-complete",
    update_in_progress: "update-in-progress",
};
const ImageBlockPublicAccessDisabledState = {
    unblocked: "unblocked",
};
const RouteServerPropagationState = {
    AVAILABLE: "available",
    DELETING: "deleting",
    PENDING: "pending",
};
const SnapshotBlockPublicAccessState = {
    block_all_sharing: "block-all-sharing",
    block_new_sharing: "block-new-sharing",
    unblocked: "unblocked",
};
const TransitGatewayPropagationState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
};
const ImageBlockPublicAccessEnabledState = {
    block_new_sharing: "block-new-sharing",
};
const ClientCertificateRevocationListStatusCode = {
    active: "active",
    pending: "pending",
};
const UnlimitedSupportedInstanceFamily = {
    t2: "t2",
    t3: "t3",
    t3a: "t3a",
    t4g: "t4g",
};
const PartitionLoadFrequency = {
    DAILY: "daily",
    MONTHLY: "monthly",
    NONE: "none",
    WEEKLY: "weekly",
};
const EkPubKeyFormat = {
    der: "der",
    tpmt: "tpmt",
};
const EkPubKeyType = {
    ECC_SEC_P384: "ecc-sec-p384",
    RSA_2048: "rsa-2048",
};
const IpamComplianceStatus = {
    compliant: "compliant",
    ignored: "ignored",
    noncompliant: "noncompliant",
    unmanaged: "unmanaged",
};
const IpamOverlapStatus = {
    ignored: "ignored",
    nonoverlapping: "nonoverlapping",
    overlapping: "overlapping",
};
const IpamAddressHistoryResourceType = {
    eip: "eip",
    instance: "instance",
    network_interface: "network-interface",
    subnet: "subnet",
    vpc: "vpc",
};
const IpamDiscoveryFailureCode = {
    assume_role_failure: "assume-role-failure",
    throttling_failure: "throttling-failure",
    unauthorized_failure: "unauthorized-failure",
};
const IpamPublicAddressType = {
    AMAZON_OWNED_CONTIG: "amazon-owned-contig",
    AMAZON_OWNED_EIP: "amazon-owned-eip",
    BYOIP: "byoip",
    EC2_PUBLIC_IP: "ec2-public-ip",
    SERVICE_MANAGED_BYOIP: "service-managed-byoip",
    SERVICE_MANAGED_IP: "service-managed-ip",
};
const IpamPublicAddressAssociationStatus = {
    ASSOCIATED: "associated",
    DISASSOCIATED: "disassociated",
};
const IpamPublicAddressAwsService = {
    AGA: "global-accelerator",
    DMS: "database-migration-service",
    EC2_LB: "load-balancer",
    ECS: "elastic-container-service",
    NAT_GATEWAY: "nat-gateway",
    OTHER: "other",
    RDS: "relational-database-service",
    REDSHIFT: "redshift",
    S2S_VPN: "site-to-site-vpn",
};
const IpamResourceCidrIpSource = {
    amazon: "amazon",
    byoip: "byoip",
    none: "none",
};
const IpamNetworkInterfaceAttachmentStatus = {
    available: "available",
    in_use: "in-use",
};
const IpamResourceType = {
    eip: "eip",
    eni: "eni",
    ipv6_pool: "ipv6-pool",
    public_ipv4_pool: "public-ipv4-pool",
    subnet: "subnet",
    vpc: "vpc",
};
const IpamManagementState = {
    ignored: "ignored",
    managed: "managed",
    unmanaged: "unmanaged",
};
const DescribeVpnConnectionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnections && {
        VpnConnections: obj.VpnConnections.map((item) => VpnConnectionFilterSensitiveLog(item)),
    }),
});
const DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider),
    }),
});
const VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserTrustProvider && {
        UserTrustProvider: VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog(obj.UserTrustProvider),
    }),
});
const GetInstanceTpmEkPubResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.KeyValue && { KeyValue: smithyClient.SENSITIVE_STRING }),
});
const GetLaunchTemplateDataResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchTemplateData && {
        LaunchTemplateData: ResponseLaunchTemplateDataFilterSensitiveLog(obj.LaunchTemplateData),
    }),
});

class DescribeVpnConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpnConnections", {})
    .n("EC2Client", "DescribeVpnConnectionsCommand")
    .f(void 0, DescribeVpnConnectionsResultFilterSensitiveLog)
    .ser(se_DescribeVpnConnectionsCommand)
    .de(de_DescribeVpnConnectionsCommand)
    .build() {
}

class DescribeVpnGatewaysCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DescribeVpnGateways", {})
    .n("EC2Client", "DescribeVpnGatewaysCommand")
    .f(void 0, void 0)
    .ser(se_DescribeVpnGatewaysCommand)
    .de(de_DescribeVpnGatewaysCommand)
    .build() {
}

class DetachClassicLinkVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DetachClassicLinkVpc", {})
    .n("EC2Client", "DetachClassicLinkVpcCommand")
    .f(void 0, void 0)
    .ser(se_DetachClassicLinkVpcCommand)
    .de(de_DetachClassicLinkVpcCommand)
    .build() {
}

class DetachInternetGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DetachInternetGateway", {})
    .n("EC2Client", "DetachInternetGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DetachInternetGatewayCommand)
    .de(de_DetachInternetGatewayCommand)
    .build() {
}

class DetachNetworkInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DetachNetworkInterface", {})
    .n("EC2Client", "DetachNetworkInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_DetachNetworkInterfaceCommand)
    .de(de_DetachNetworkInterfaceCommand)
    .build() {
}

class DetachVerifiedAccessTrustProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DetachVerifiedAccessTrustProvider", {})
    .n("EC2Client", "DetachVerifiedAccessTrustProviderCommand")
    .f(void 0, DetachVerifiedAccessTrustProviderResultFilterSensitiveLog)
    .ser(se_DetachVerifiedAccessTrustProviderCommand)
    .de(de_DetachVerifiedAccessTrustProviderCommand)
    .build() {
}

class DetachVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DetachVolume", {})
    .n("EC2Client", "DetachVolumeCommand")
    .f(void 0, void 0)
    .ser(se_DetachVolumeCommand)
    .de(de_DetachVolumeCommand)
    .build() {
}

class DetachVpnGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DetachVpnGateway", {})
    .n("EC2Client", "DetachVpnGatewayCommand")
    .f(void 0, void 0)
    .ser(se_DetachVpnGatewayCommand)
    .de(de_DetachVpnGatewayCommand)
    .build() {
}

class DisableAddressTransferCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableAddressTransfer", {})
    .n("EC2Client", "DisableAddressTransferCommand")
    .f(void 0, void 0)
    .ser(se_DisableAddressTransferCommand)
    .de(de_DisableAddressTransferCommand)
    .build() {
}

class DisableAllowedImagesSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableAllowedImagesSettings", {})
    .n("EC2Client", "DisableAllowedImagesSettingsCommand")
    .f(void 0, void 0)
    .ser(se_DisableAllowedImagesSettingsCommand)
    .de(de_DisableAllowedImagesSettingsCommand)
    .build() {
}

class DisableAwsNetworkPerformanceMetricSubscriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableAwsNetworkPerformanceMetricSubscription", {})
    .n("EC2Client", "DisableAwsNetworkPerformanceMetricSubscriptionCommand")
    .f(void 0, void 0)
    .ser(se_DisableAwsNetworkPerformanceMetricSubscriptionCommand)
    .de(de_DisableAwsNetworkPerformanceMetricSubscriptionCommand)
    .build() {
}

class DisableEbsEncryptionByDefaultCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableEbsEncryptionByDefault", {})
    .n("EC2Client", "DisableEbsEncryptionByDefaultCommand")
    .f(void 0, void 0)
    .ser(se_DisableEbsEncryptionByDefaultCommand)
    .de(de_DisableEbsEncryptionByDefaultCommand)
    .build() {
}

class DisableFastLaunchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableFastLaunch", {})
    .n("EC2Client", "DisableFastLaunchCommand")
    .f(void 0, void 0)
    .ser(se_DisableFastLaunchCommand)
    .de(de_DisableFastLaunchCommand)
    .build() {
}

class DisableFastSnapshotRestoresCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableFastSnapshotRestores", {})
    .n("EC2Client", "DisableFastSnapshotRestoresCommand")
    .f(void 0, void 0)
    .ser(se_DisableFastSnapshotRestoresCommand)
    .de(de_DisableFastSnapshotRestoresCommand)
    .build() {
}

class DisableImageBlockPublicAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableImageBlockPublicAccess", {})
    .n("EC2Client", "DisableImageBlockPublicAccessCommand")
    .f(void 0, void 0)
    .ser(se_DisableImageBlockPublicAccessCommand)
    .de(de_DisableImageBlockPublicAccessCommand)
    .build() {
}

class DisableImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableImage", {})
    .n("EC2Client", "DisableImageCommand")
    .f(void 0, void 0)
    .ser(se_DisableImageCommand)
    .de(de_DisableImageCommand)
    .build() {
}

class DisableImageDeprecationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableImageDeprecation", {})
    .n("EC2Client", "DisableImageDeprecationCommand")
    .f(void 0, void 0)
    .ser(se_DisableImageDeprecationCommand)
    .de(de_DisableImageDeprecationCommand)
    .build() {
}

class DisableImageDeregistrationProtectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableImageDeregistrationProtection", {})
    .n("EC2Client", "DisableImageDeregistrationProtectionCommand")
    .f(void 0, void 0)
    .ser(se_DisableImageDeregistrationProtectionCommand)
    .de(de_DisableImageDeregistrationProtectionCommand)
    .build() {
}

class DisableIpamOrganizationAdminAccountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableIpamOrganizationAdminAccount", {})
    .n("EC2Client", "DisableIpamOrganizationAdminAccountCommand")
    .f(void 0, void 0)
    .ser(se_DisableIpamOrganizationAdminAccountCommand)
    .de(de_DisableIpamOrganizationAdminAccountCommand)
    .build() {
}

class DisableRouteServerPropagationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableRouteServerPropagation", {})
    .n("EC2Client", "DisableRouteServerPropagationCommand")
    .f(void 0, void 0)
    .ser(se_DisableRouteServerPropagationCommand)
    .de(de_DisableRouteServerPropagationCommand)
    .build() {
}

class DisableSerialConsoleAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableSerialConsoleAccess", {})
    .n("EC2Client", "DisableSerialConsoleAccessCommand")
    .f(void 0, void 0)
    .ser(se_DisableSerialConsoleAccessCommand)
    .de(de_DisableSerialConsoleAccessCommand)
    .build() {
}

class DisableSnapshotBlockPublicAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableSnapshotBlockPublicAccess", {})
    .n("EC2Client", "DisableSnapshotBlockPublicAccessCommand")
    .f(void 0, void 0)
    .ser(se_DisableSnapshotBlockPublicAccessCommand)
    .de(de_DisableSnapshotBlockPublicAccessCommand)
    .build() {
}

class DisableTransitGatewayRouteTablePropagationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableTransitGatewayRouteTablePropagation", {})
    .n("EC2Client", "DisableTransitGatewayRouteTablePropagationCommand")
    .f(void 0, void 0)
    .ser(se_DisableTransitGatewayRouteTablePropagationCommand)
    .de(de_DisableTransitGatewayRouteTablePropagationCommand)
    .build() {
}

class DisableVgwRoutePropagationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableVgwRoutePropagation", {})
    .n("EC2Client", "DisableVgwRoutePropagationCommand")
    .f(void 0, void 0)
    .ser(se_DisableVgwRoutePropagationCommand)
    .de(de_DisableVgwRoutePropagationCommand)
    .build() {
}

class DisableVpcClassicLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableVpcClassicLink", {})
    .n("EC2Client", "DisableVpcClassicLinkCommand")
    .f(void 0, void 0)
    .ser(se_DisableVpcClassicLinkCommand)
    .de(de_DisableVpcClassicLinkCommand)
    .build() {
}

class DisableVpcClassicLinkDnsSupportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisableVpcClassicLinkDnsSupport", {})
    .n("EC2Client", "DisableVpcClassicLinkDnsSupportCommand")
    .f(void 0, void 0)
    .ser(se_DisableVpcClassicLinkDnsSupportCommand)
    .de(de_DisableVpcClassicLinkDnsSupportCommand)
    .build() {
}

class DisassociateAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateAddress", {})
    .n("EC2Client", "DisassociateAddressCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateAddressCommand)
    .de(de_DisassociateAddressCommand)
    .build() {
}

class DisassociateCapacityReservationBillingOwnerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateCapacityReservationBillingOwner", {})
    .n("EC2Client", "DisassociateCapacityReservationBillingOwnerCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateCapacityReservationBillingOwnerCommand)
    .de(de_DisassociateCapacityReservationBillingOwnerCommand)
    .build() {
}

class DisassociateClientVpnTargetNetworkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateClientVpnTargetNetwork", {})
    .n("EC2Client", "DisassociateClientVpnTargetNetworkCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateClientVpnTargetNetworkCommand)
    .de(de_DisassociateClientVpnTargetNetworkCommand)
    .build() {
}

class DisassociateEnclaveCertificateIamRoleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateEnclaveCertificateIamRole", {})
    .n("EC2Client", "DisassociateEnclaveCertificateIamRoleCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateEnclaveCertificateIamRoleCommand)
    .de(de_DisassociateEnclaveCertificateIamRoleCommand)
    .build() {
}

class DisassociateIamInstanceProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateIamInstanceProfile", {})
    .n("EC2Client", "DisassociateIamInstanceProfileCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateIamInstanceProfileCommand)
    .de(de_DisassociateIamInstanceProfileCommand)
    .build() {
}

class DisassociateInstanceEventWindowCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateInstanceEventWindow", {})
    .n("EC2Client", "DisassociateInstanceEventWindowCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateInstanceEventWindowCommand)
    .de(de_DisassociateInstanceEventWindowCommand)
    .build() {
}

class DisassociateIpamByoasnCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateIpamByoasn", {})
    .n("EC2Client", "DisassociateIpamByoasnCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateIpamByoasnCommand)
    .de(de_DisassociateIpamByoasnCommand)
    .build() {
}

class DisassociateIpamResourceDiscoveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateIpamResourceDiscovery", {})
    .n("EC2Client", "DisassociateIpamResourceDiscoveryCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateIpamResourceDiscoveryCommand)
    .de(de_DisassociateIpamResourceDiscoveryCommand)
    .build() {
}

class DisassociateNatGatewayAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateNatGatewayAddress", {})
    .n("EC2Client", "DisassociateNatGatewayAddressCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateNatGatewayAddressCommand)
    .de(de_DisassociateNatGatewayAddressCommand)
    .build() {
}

class DisassociateRouteServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateRouteServer", {})
    .n("EC2Client", "DisassociateRouteServerCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateRouteServerCommand)
    .de(de_DisassociateRouteServerCommand)
    .build() {
}

class DisassociateRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateRouteTable", {})
    .n("EC2Client", "DisassociateRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateRouteTableCommand)
    .de(de_DisassociateRouteTableCommand)
    .build() {
}

class DisassociateSecurityGroupVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateSecurityGroupVpc", {})
    .n("EC2Client", "DisassociateSecurityGroupVpcCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateSecurityGroupVpcCommand)
    .de(de_DisassociateSecurityGroupVpcCommand)
    .build() {
}

class DisassociateSubnetCidrBlockCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateSubnetCidrBlock", {})
    .n("EC2Client", "DisassociateSubnetCidrBlockCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateSubnetCidrBlockCommand)
    .de(de_DisassociateSubnetCidrBlockCommand)
    .build() {
}

class DisassociateTransitGatewayMulticastDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateTransitGatewayMulticastDomain", {})
    .n("EC2Client", "DisassociateTransitGatewayMulticastDomainCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateTransitGatewayMulticastDomainCommand)
    .de(de_DisassociateTransitGatewayMulticastDomainCommand)
    .build() {
}

class DisassociateTransitGatewayPolicyTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateTransitGatewayPolicyTable", {})
    .n("EC2Client", "DisassociateTransitGatewayPolicyTableCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateTransitGatewayPolicyTableCommand)
    .de(de_DisassociateTransitGatewayPolicyTableCommand)
    .build() {
}

class DisassociateTransitGatewayRouteTableCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateTransitGatewayRouteTable", {})
    .n("EC2Client", "DisassociateTransitGatewayRouteTableCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateTransitGatewayRouteTableCommand)
    .de(de_DisassociateTransitGatewayRouteTableCommand)
    .build() {
}

class DisassociateTrunkInterfaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateTrunkInterface", {})
    .n("EC2Client", "DisassociateTrunkInterfaceCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateTrunkInterfaceCommand)
    .de(de_DisassociateTrunkInterfaceCommand)
    .build() {
}

class DisassociateVpcCidrBlockCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "DisassociateVpcCidrBlock", {})
    .n("EC2Client", "DisassociateVpcCidrBlockCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateVpcCidrBlockCommand)
    .de(de_DisassociateVpcCidrBlockCommand)
    .build() {
}

class EnableAddressTransferCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableAddressTransfer", {})
    .n("EC2Client", "EnableAddressTransferCommand")
    .f(void 0, void 0)
    .ser(se_EnableAddressTransferCommand)
    .de(de_EnableAddressTransferCommand)
    .build() {
}

class EnableAllowedImagesSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableAllowedImagesSettings", {})
    .n("EC2Client", "EnableAllowedImagesSettingsCommand")
    .f(void 0, void 0)
    .ser(se_EnableAllowedImagesSettingsCommand)
    .de(de_EnableAllowedImagesSettingsCommand)
    .build() {
}

class EnableAwsNetworkPerformanceMetricSubscriptionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableAwsNetworkPerformanceMetricSubscription", {})
    .n("EC2Client", "EnableAwsNetworkPerformanceMetricSubscriptionCommand")
    .f(void 0, void 0)
    .ser(se_EnableAwsNetworkPerformanceMetricSubscriptionCommand)
    .de(de_EnableAwsNetworkPerformanceMetricSubscriptionCommand)
    .build() {
}

class EnableEbsEncryptionByDefaultCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableEbsEncryptionByDefault", {})
    .n("EC2Client", "EnableEbsEncryptionByDefaultCommand")
    .f(void 0, void 0)
    .ser(se_EnableEbsEncryptionByDefaultCommand)
    .de(de_EnableEbsEncryptionByDefaultCommand)
    .build() {
}

class EnableFastLaunchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableFastLaunch", {})
    .n("EC2Client", "EnableFastLaunchCommand")
    .f(void 0, void 0)
    .ser(se_EnableFastLaunchCommand)
    .de(de_EnableFastLaunchCommand)
    .build() {
}

class EnableFastSnapshotRestoresCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableFastSnapshotRestores", {})
    .n("EC2Client", "EnableFastSnapshotRestoresCommand")
    .f(void 0, void 0)
    .ser(se_EnableFastSnapshotRestoresCommand)
    .de(de_EnableFastSnapshotRestoresCommand)
    .build() {
}

class EnableImageBlockPublicAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableImageBlockPublicAccess", {})
    .n("EC2Client", "EnableImageBlockPublicAccessCommand")
    .f(void 0, void 0)
    .ser(se_EnableImageBlockPublicAccessCommand)
    .de(de_EnableImageBlockPublicAccessCommand)
    .build() {
}

class EnableImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableImage", {})
    .n("EC2Client", "EnableImageCommand")
    .f(void 0, void 0)
    .ser(se_EnableImageCommand)
    .de(de_EnableImageCommand)
    .build() {
}

class EnableImageDeprecationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableImageDeprecation", {})
    .n("EC2Client", "EnableImageDeprecationCommand")
    .f(void 0, void 0)
    .ser(se_EnableImageDeprecationCommand)
    .de(de_EnableImageDeprecationCommand)
    .build() {
}

class EnableImageDeregistrationProtectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableImageDeregistrationProtection", {})
    .n("EC2Client", "EnableImageDeregistrationProtectionCommand")
    .f(void 0, void 0)
    .ser(se_EnableImageDeregistrationProtectionCommand)
    .de(de_EnableImageDeregistrationProtectionCommand)
    .build() {
}

class EnableIpamOrganizationAdminAccountCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableIpamOrganizationAdminAccount", {})
    .n("EC2Client", "EnableIpamOrganizationAdminAccountCommand")
    .f(void 0, void 0)
    .ser(se_EnableIpamOrganizationAdminAccountCommand)
    .de(de_EnableIpamOrganizationAdminAccountCommand)
    .build() {
}

class EnableReachabilityAnalyzerOrganizationSharingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableReachabilityAnalyzerOrganizationSharing", {})
    .n("EC2Client", "EnableReachabilityAnalyzerOrganizationSharingCommand")
    .f(void 0, void 0)
    .ser(se_EnableReachabilityAnalyzerOrganizationSharingCommand)
    .de(de_EnableReachabilityAnalyzerOrganizationSharingCommand)
    .build() {
}

class EnableRouteServerPropagationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableRouteServerPropagation", {})
    .n("EC2Client", "EnableRouteServerPropagationCommand")
    .f(void 0, void 0)
    .ser(se_EnableRouteServerPropagationCommand)
    .de(de_EnableRouteServerPropagationCommand)
    .build() {
}

class EnableSerialConsoleAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableSerialConsoleAccess", {})
    .n("EC2Client", "EnableSerialConsoleAccessCommand")
    .f(void 0, void 0)
    .ser(se_EnableSerialConsoleAccessCommand)
    .de(de_EnableSerialConsoleAccessCommand)
    .build() {
}

class EnableSnapshotBlockPublicAccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableSnapshotBlockPublicAccess", {})
    .n("EC2Client", "EnableSnapshotBlockPublicAccessCommand")
    .f(void 0, void 0)
    .ser(se_EnableSnapshotBlockPublicAccessCommand)
    .de(de_EnableSnapshotBlockPublicAccessCommand)
    .build() {
}

class EnableTransitGatewayRouteTablePropagationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableTransitGatewayRouteTablePropagation", {})
    .n("EC2Client", "EnableTransitGatewayRouteTablePropagationCommand")
    .f(void 0, void 0)
    .ser(se_EnableTransitGatewayRouteTablePropagationCommand)
    .de(de_EnableTransitGatewayRouteTablePropagationCommand)
    .build() {
}

class EnableVgwRoutePropagationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableVgwRoutePropagation", {})
    .n("EC2Client", "EnableVgwRoutePropagationCommand")
    .f(void 0, void 0)
    .ser(se_EnableVgwRoutePropagationCommand)
    .de(de_EnableVgwRoutePropagationCommand)
    .build() {
}

class EnableVolumeIOCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableVolumeIO", {})
    .n("EC2Client", "EnableVolumeIOCommand")
    .f(void 0, void 0)
    .ser(se_EnableVolumeIOCommand)
    .de(de_EnableVolumeIOCommand)
    .build() {
}

class EnableVpcClassicLinkCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableVpcClassicLink", {})
    .n("EC2Client", "EnableVpcClassicLinkCommand")
    .f(void 0, void 0)
    .ser(se_EnableVpcClassicLinkCommand)
    .de(de_EnableVpcClassicLinkCommand)
    .build() {
}

class EnableVpcClassicLinkDnsSupportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "EnableVpcClassicLinkDnsSupport", {})
    .n("EC2Client", "EnableVpcClassicLinkDnsSupportCommand")
    .f(void 0, void 0)
    .ser(se_EnableVpcClassicLinkDnsSupportCommand)
    .de(de_EnableVpcClassicLinkDnsSupportCommand)
    .build() {
}

class ExportClientVpnClientCertificateRevocationListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ExportClientVpnClientCertificateRevocationList", {})
    .n("EC2Client", "ExportClientVpnClientCertificateRevocationListCommand")
    .f(void 0, void 0)
    .ser(se_ExportClientVpnClientCertificateRevocationListCommand)
    .de(de_ExportClientVpnClientCertificateRevocationListCommand)
    .build() {
}

class ExportClientVpnClientConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ExportClientVpnClientConfiguration", {})
    .n("EC2Client", "ExportClientVpnClientConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_ExportClientVpnClientConfigurationCommand)
    .de(de_ExportClientVpnClientConfigurationCommand)
    .build() {
}

class ExportImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ExportImage", {})
    .n("EC2Client", "ExportImageCommand")
    .f(void 0, void 0)
    .ser(se_ExportImageCommand)
    .de(de_ExportImageCommand)
    .build() {
}

class ExportTransitGatewayRoutesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ExportTransitGatewayRoutes", {})
    .n("EC2Client", "ExportTransitGatewayRoutesCommand")
    .f(void 0, void 0)
    .ser(se_ExportTransitGatewayRoutesCommand)
    .de(de_ExportTransitGatewayRoutesCommand)
    .build() {
}

class ExportVerifiedAccessInstanceClientConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ExportVerifiedAccessInstanceClientConfiguration", {})
    .n("EC2Client", "ExportVerifiedAccessInstanceClientConfigurationCommand")
    .f(void 0, ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog)
    .ser(se_ExportVerifiedAccessInstanceClientConfigurationCommand)
    .de(de_ExportVerifiedAccessInstanceClientConfigurationCommand)
    .build() {
}

class GetActiveVpnTunnelStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetActiveVpnTunnelStatus", {})
    .n("EC2Client", "GetActiveVpnTunnelStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetActiveVpnTunnelStatusCommand)
    .de(de_GetActiveVpnTunnelStatusCommand)
    .build() {
}

class GetAllowedImagesSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetAllowedImagesSettings", {})
    .n("EC2Client", "GetAllowedImagesSettingsCommand")
    .f(void 0, void 0)
    .ser(se_GetAllowedImagesSettingsCommand)
    .de(de_GetAllowedImagesSettingsCommand)
    .build() {
}

class GetAssociatedEnclaveCertificateIamRolesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetAssociatedEnclaveCertificateIamRoles", {})
    .n("EC2Client", "GetAssociatedEnclaveCertificateIamRolesCommand")
    .f(void 0, void 0)
    .ser(se_GetAssociatedEnclaveCertificateIamRolesCommand)
    .de(de_GetAssociatedEnclaveCertificateIamRolesCommand)
    .build() {
}

class GetAssociatedIpv6PoolCidrsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetAssociatedIpv6PoolCidrs", {})
    .n("EC2Client", "GetAssociatedIpv6PoolCidrsCommand")
    .f(void 0, void 0)
    .ser(se_GetAssociatedIpv6PoolCidrsCommand)
    .de(de_GetAssociatedIpv6PoolCidrsCommand)
    .build() {
}

class GetAwsNetworkPerformanceDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetAwsNetworkPerformanceData", {})
    .n("EC2Client", "GetAwsNetworkPerformanceDataCommand")
    .f(void 0, void 0)
    .ser(se_GetAwsNetworkPerformanceDataCommand)
    .de(de_GetAwsNetworkPerformanceDataCommand)
    .build() {
}

class GetCapacityReservationUsageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetCapacityReservationUsage", {})
    .n("EC2Client", "GetCapacityReservationUsageCommand")
    .f(void 0, void 0)
    .ser(se_GetCapacityReservationUsageCommand)
    .de(de_GetCapacityReservationUsageCommand)
    .build() {
}

class GetCoipPoolUsageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetCoipPoolUsage", {})
    .n("EC2Client", "GetCoipPoolUsageCommand")
    .f(void 0, void 0)
    .ser(se_GetCoipPoolUsageCommand)
    .de(de_GetCoipPoolUsageCommand)
    .build() {
}

class GetConsoleOutputCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetConsoleOutput", {})
    .n("EC2Client", "GetConsoleOutputCommand")
    .f(void 0, void 0)
    .ser(se_GetConsoleOutputCommand)
    .de(de_GetConsoleOutputCommand)
    .build() {
}

class GetConsoleScreenshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetConsoleScreenshot", {})
    .n("EC2Client", "GetConsoleScreenshotCommand")
    .f(void 0, void 0)
    .ser(se_GetConsoleScreenshotCommand)
    .de(de_GetConsoleScreenshotCommand)
    .build() {
}

class GetDeclarativePoliciesReportSummaryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetDeclarativePoliciesReportSummary", {})
    .n("EC2Client", "GetDeclarativePoliciesReportSummaryCommand")
    .f(void 0, void 0)
    .ser(se_GetDeclarativePoliciesReportSummaryCommand)
    .de(de_GetDeclarativePoliciesReportSummaryCommand)
    .build() {
}

class GetDefaultCreditSpecificationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetDefaultCreditSpecification", {})
    .n("EC2Client", "GetDefaultCreditSpecificationCommand")
    .f(void 0, void 0)
    .ser(se_GetDefaultCreditSpecificationCommand)
    .de(de_GetDefaultCreditSpecificationCommand)
    .build() {
}

class GetEbsDefaultKmsKeyIdCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetEbsDefaultKmsKeyId", {})
    .n("EC2Client", "GetEbsDefaultKmsKeyIdCommand")
    .f(void 0, void 0)
    .ser(se_GetEbsDefaultKmsKeyIdCommand)
    .de(de_GetEbsDefaultKmsKeyIdCommand)
    .build() {
}

class GetEbsEncryptionByDefaultCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetEbsEncryptionByDefault", {})
    .n("EC2Client", "GetEbsEncryptionByDefaultCommand")
    .f(void 0, void 0)
    .ser(se_GetEbsEncryptionByDefaultCommand)
    .de(de_GetEbsEncryptionByDefaultCommand)
    .build() {
}

class GetFlowLogsIntegrationTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetFlowLogsIntegrationTemplate", {})
    .n("EC2Client", "GetFlowLogsIntegrationTemplateCommand")
    .f(void 0, void 0)
    .ser(se_GetFlowLogsIntegrationTemplateCommand)
    .de(de_GetFlowLogsIntegrationTemplateCommand)
    .build() {
}

class GetGroupsForCapacityReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetGroupsForCapacityReservation", {})
    .n("EC2Client", "GetGroupsForCapacityReservationCommand")
    .f(void 0, void 0)
    .ser(se_GetGroupsForCapacityReservationCommand)
    .de(de_GetGroupsForCapacityReservationCommand)
    .build() {
}

class GetHostReservationPurchasePreviewCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetHostReservationPurchasePreview", {})
    .n("EC2Client", "GetHostReservationPurchasePreviewCommand")
    .f(void 0, void 0)
    .ser(se_GetHostReservationPurchasePreviewCommand)
    .de(de_GetHostReservationPurchasePreviewCommand)
    .build() {
}

class GetImageBlockPublicAccessStateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetImageBlockPublicAccessState", {})
    .n("EC2Client", "GetImageBlockPublicAccessStateCommand")
    .f(void 0, void 0)
    .ser(se_GetImageBlockPublicAccessStateCommand)
    .de(de_GetImageBlockPublicAccessStateCommand)
    .build() {
}

class GetInstanceMetadataDefaultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetInstanceMetadataDefaults", {})
    .n("EC2Client", "GetInstanceMetadataDefaultsCommand")
    .f(void 0, void 0)
    .ser(se_GetInstanceMetadataDefaultsCommand)
    .de(de_GetInstanceMetadataDefaultsCommand)
    .build() {
}

class GetInstanceTpmEkPubCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetInstanceTpmEkPub", {})
    .n("EC2Client", "GetInstanceTpmEkPubCommand")
    .f(void 0, GetInstanceTpmEkPubResultFilterSensitiveLog)
    .ser(se_GetInstanceTpmEkPubCommand)
    .de(de_GetInstanceTpmEkPubCommand)
    .build() {
}

class GetInstanceTypesFromInstanceRequirementsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetInstanceTypesFromInstanceRequirements", {})
    .n("EC2Client", "GetInstanceTypesFromInstanceRequirementsCommand")
    .f(void 0, void 0)
    .ser(se_GetInstanceTypesFromInstanceRequirementsCommand)
    .de(de_GetInstanceTypesFromInstanceRequirementsCommand)
    .build() {
}

class GetInstanceUefiDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetInstanceUefiData", {})
    .n("EC2Client", "GetInstanceUefiDataCommand")
    .f(void 0, void 0)
    .ser(se_GetInstanceUefiDataCommand)
    .de(de_GetInstanceUefiDataCommand)
    .build() {
}

class GetIpamAddressHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamAddressHistory", {})
    .n("EC2Client", "GetIpamAddressHistoryCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamAddressHistoryCommand)
    .de(de_GetIpamAddressHistoryCommand)
    .build() {
}

class GetIpamDiscoveredAccountsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamDiscoveredAccounts", {})
    .n("EC2Client", "GetIpamDiscoveredAccountsCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamDiscoveredAccountsCommand)
    .de(de_GetIpamDiscoveredAccountsCommand)
    .build() {
}

class GetIpamDiscoveredPublicAddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamDiscoveredPublicAddresses", {})
    .n("EC2Client", "GetIpamDiscoveredPublicAddressesCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamDiscoveredPublicAddressesCommand)
    .de(de_GetIpamDiscoveredPublicAddressesCommand)
    .build() {
}

class GetIpamDiscoveredResourceCidrsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamDiscoveredResourceCidrs", {})
    .n("EC2Client", "GetIpamDiscoveredResourceCidrsCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamDiscoveredResourceCidrsCommand)
    .de(de_GetIpamDiscoveredResourceCidrsCommand)
    .build() {
}

class GetIpamPoolAllocationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamPoolAllocations", {})
    .n("EC2Client", "GetIpamPoolAllocationsCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamPoolAllocationsCommand)
    .de(de_GetIpamPoolAllocationsCommand)
    .build() {
}

class GetIpamPoolCidrsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamPoolCidrs", {})
    .n("EC2Client", "GetIpamPoolCidrsCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamPoolCidrsCommand)
    .de(de_GetIpamPoolCidrsCommand)
    .build() {
}

class GetIpamResourceCidrsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetIpamResourceCidrs", {})
    .n("EC2Client", "GetIpamResourceCidrsCommand")
    .f(void 0, void 0)
    .ser(se_GetIpamResourceCidrsCommand)
    .de(de_GetIpamResourceCidrsCommand)
    .build() {
}

class GetLaunchTemplateDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetLaunchTemplateData", {})
    .n("EC2Client", "GetLaunchTemplateDataCommand")
    .f(void 0, GetLaunchTemplateDataResultFilterSensitiveLog)
    .ser(se_GetLaunchTemplateDataCommand)
    .de(de_GetLaunchTemplateDataCommand)
    .build() {
}

class GetManagedPrefixListAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetManagedPrefixListAssociations", {})
    .n("EC2Client", "GetManagedPrefixListAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_GetManagedPrefixListAssociationsCommand)
    .de(de_GetManagedPrefixListAssociationsCommand)
    .build() {
}

class GetManagedPrefixListEntriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetManagedPrefixListEntries", {})
    .n("EC2Client", "GetManagedPrefixListEntriesCommand")
    .f(void 0, void 0)
    .ser(se_GetManagedPrefixListEntriesCommand)
    .de(de_GetManagedPrefixListEntriesCommand)
    .build() {
}

class GetNetworkInsightsAccessScopeAnalysisFindingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetNetworkInsightsAccessScopeAnalysisFindings", {})
    .n("EC2Client", "GetNetworkInsightsAccessScopeAnalysisFindingsCommand")
    .f(void 0, void 0)
    .ser(se_GetNetworkInsightsAccessScopeAnalysisFindingsCommand)
    .de(de_GetNetworkInsightsAccessScopeAnalysisFindingsCommand)
    .build() {
}

class GetNetworkInsightsAccessScopeContentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetNetworkInsightsAccessScopeContent", {})
    .n("EC2Client", "GetNetworkInsightsAccessScopeContentCommand")
    .f(void 0, void 0)
    .ser(se_GetNetworkInsightsAccessScopeContentCommand)
    .de(de_GetNetworkInsightsAccessScopeContentCommand)
    .build() {
}

const RouteServerRouteInstallationStatus = {
    INSTALLED: "installed",
    REJECTED: "rejected",
};
const RouteServerRouteStatus = {
    IN_FIB: "in-fib",
    IN_RIB: "in-rib",
};
const LockMode = {
    compliance: "compliance",
    governance: "governance",
};
const ModifyAvailabilityZoneOptInStatus = {
    not_opted_in: "not-opted-in",
    opted_in: "opted-in",
};
const OperationType = {
    add: "add",
    remove: "remove",
};
const UnsuccessfulInstanceCreditSpecificationErrorCode = {
    INCORRECT_INSTANCE_STATE: "IncorrectInstanceState",
    INSTANCE_CREDIT_SPECIFICATION_NOT_SUPPORTED: "InstanceCreditSpecification.NotSupported",
    INSTANCE_NOT_FOUND: "InvalidInstanceID.NotFound",
    INVALID_INSTANCE_ID: "InvalidInstanceID.Malformed",
};
const DefaultInstanceMetadataEndpointState = {
    disabled: "disabled",
    enabled: "enabled",
    no_preference: "no-preference",
};
const MetadataDefaultHttpTokensState = {
    no_preference: "no-preference",
    optional: "optional",
    required: "required",
};
const DefaultInstanceMetadataTagsState = {
    disabled: "disabled",
    enabled: "enabled",
    no_preference: "no-preference",
};
const HostTenancy = {
    dedicated: "dedicated",
    default: "default",
    host: "host",
};
const PublicIpDnsOption = {
    public_dual_stack_dns_name: "public-dual-stack-dns-name",
    public_ipv4_dns_name: "public-ipv4-dns-name",
    public_ipv6_dns_name: "public-ipv6-dns-name",
};
const TargetStorageTier = {
    archive: "archive",
};
const TrafficMirrorFilterRuleField = {
    description: "description",
    destination_port_range: "destination-port-range",
    protocol: "protocol",
    source_port_range: "source-port-range",
};
const TrafficMirrorSessionField = {
    description: "description",
    packet_length: "packet-length",
    virtual_network_id: "virtual-network-id",
};
const VpcTenancy = {
    default: "default",
};
const Status = {
    inClassic: "InClassic",
    inVpc: "InVpc",
    moveInProgress: "MoveInProgress",
};
const GetPasswordDataResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PasswordData && { PasswordData: smithyClient.SENSITIVE_STRING }),
});
const GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnectionDeviceSampleConfiguration && { VpnConnectionDeviceSampleConfiguration: smithyClient.SENSITIVE_STRING }),
});
const ImageDiskContainerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithyClient.SENSITIVE_STRING }),
});
const ImportImageRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DiskContainers && {
        DiskContainers: obj.DiskContainers.map((item) => ImageDiskContainerFilterSensitiveLog(item)),
    }),
});
const ImportImageResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotDetails && {
        SnapshotDetails: obj.SnapshotDetails.map((item) => SnapshotDetailFilterSensitiveLog(item)),
    }),
});
const DiskImageDetailFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ImportManifestUrl && { ImportManifestUrl: smithyClient.SENSITIVE_STRING }),
});
const DiskImageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: DiskImageDetailFilterSensitiveLog(obj.Image) }),
});
const UserDataFilterSensitiveLog = (obj) => ({
    ...obj,
});
const ImportInstanceLaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const ImportInstanceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecification && {
        LaunchSpecification: ImportInstanceLaunchSpecificationFilterSensitiveLog(obj.LaunchSpecification),
    }),
    ...(obj.DiskImages && { DiskImages: obj.DiskImages.map((item) => DiskImageFilterSensitiveLog(item)) }),
});
const ImportInstanceResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConversionTask && { ConversionTask: ConversionTaskFilterSensitiveLog(obj.ConversionTask) }),
});
const SnapshotDiskContainerFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Url && { Url: smithyClient.SENSITIVE_STRING }),
});
const ImportSnapshotRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.DiskContainer && { DiskContainer: SnapshotDiskContainerFilterSensitiveLog(obj.DiskContainer) }),
});
const ImportSnapshotResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SnapshotTaskDetail && { SnapshotTaskDetail: SnapshotTaskDetailFilterSensitiveLog(obj.SnapshotTaskDetail) }),
});
const ImportVolumeRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Image && { Image: DiskImageDetailFilterSensitiveLog(obj.Image) }),
});
const ImportVolumeResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ConversionTask && { ConversionTask: ConversionTaskFilterSensitiveLog(obj.ConversionTask) }),
});
const ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OidcOptions && {
        OidcOptions: ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog(obj.OidcOptions),
    }),
    ...(obj.NativeApplicationOidcOptions && {
        NativeApplicationOidcOptions: ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog(obj.NativeApplicationOidcOptions),
    }),
});
const ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: VerifiedAccessTrustProviderFilterSensitiveLog(obj.VerifiedAccessTrustProvider),
    }),
});
const ModifyVpnConnectionResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }),
});
const ModifyVpnConnectionOptionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }),
});
const ModifyVpnTunnelCertificateResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }),
});
const ModifyVpnTunnelOptionsSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.PreSharedKey && { PreSharedKey: smithyClient.SENSITIVE_STRING }),
});
const ModifyVpnTunnelOptionsRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TunnelOptions && { TunnelOptions: smithyClient.SENSITIVE_STRING }),
});
const ModifyVpnTunnelOptionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnection && { VpnConnection: VpnConnectionFilterSensitiveLog(obj.VpnConnection) }),
});

class GetPasswordDataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetPasswordData", {})
    .n("EC2Client", "GetPasswordDataCommand")
    .f(void 0, GetPasswordDataResultFilterSensitiveLog)
    .ser(se_GetPasswordDataCommand)
    .de(de_GetPasswordDataCommand)
    .build() {
}

class GetReservedInstancesExchangeQuoteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetReservedInstancesExchangeQuote", {})
    .n("EC2Client", "GetReservedInstancesExchangeQuoteCommand")
    .f(void 0, void 0)
    .ser(se_GetReservedInstancesExchangeQuoteCommand)
    .de(de_GetReservedInstancesExchangeQuoteCommand)
    .build() {
}

class GetRouteServerAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetRouteServerAssociations", {})
    .n("EC2Client", "GetRouteServerAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_GetRouteServerAssociationsCommand)
    .de(de_GetRouteServerAssociationsCommand)
    .build() {
}

class GetRouteServerPropagationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetRouteServerPropagations", {})
    .n("EC2Client", "GetRouteServerPropagationsCommand")
    .f(void 0, void 0)
    .ser(se_GetRouteServerPropagationsCommand)
    .de(de_GetRouteServerPropagationsCommand)
    .build() {
}

class GetRouteServerRoutingDatabaseCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetRouteServerRoutingDatabase", {})
    .n("EC2Client", "GetRouteServerRoutingDatabaseCommand")
    .f(void 0, void 0)
    .ser(se_GetRouteServerRoutingDatabaseCommand)
    .de(de_GetRouteServerRoutingDatabaseCommand)
    .build() {
}

class GetSecurityGroupsForVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetSecurityGroupsForVpc", {})
    .n("EC2Client", "GetSecurityGroupsForVpcCommand")
    .f(void 0, void 0)
    .ser(se_GetSecurityGroupsForVpcCommand)
    .de(de_GetSecurityGroupsForVpcCommand)
    .build() {
}

class GetSerialConsoleAccessStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetSerialConsoleAccessStatus", {})
    .n("EC2Client", "GetSerialConsoleAccessStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetSerialConsoleAccessStatusCommand)
    .de(de_GetSerialConsoleAccessStatusCommand)
    .build() {
}

class GetSnapshotBlockPublicAccessStateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetSnapshotBlockPublicAccessState", {})
    .n("EC2Client", "GetSnapshotBlockPublicAccessStateCommand")
    .f(void 0, void 0)
    .ser(se_GetSnapshotBlockPublicAccessStateCommand)
    .de(de_GetSnapshotBlockPublicAccessStateCommand)
    .build() {
}

class GetSpotPlacementScoresCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetSpotPlacementScores", {})
    .n("EC2Client", "GetSpotPlacementScoresCommand")
    .f(void 0, void 0)
    .ser(se_GetSpotPlacementScoresCommand)
    .de(de_GetSpotPlacementScoresCommand)
    .build() {
}

class GetSubnetCidrReservationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetSubnetCidrReservations", {})
    .n("EC2Client", "GetSubnetCidrReservationsCommand")
    .f(void 0, void 0)
    .ser(se_GetSubnetCidrReservationsCommand)
    .de(de_GetSubnetCidrReservationsCommand)
    .build() {
}

class GetTransitGatewayAttachmentPropagationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayAttachmentPropagations", {})
    .n("EC2Client", "GetTransitGatewayAttachmentPropagationsCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayAttachmentPropagationsCommand)
    .de(de_GetTransitGatewayAttachmentPropagationsCommand)
    .build() {
}

class GetTransitGatewayMulticastDomainAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayMulticastDomainAssociations", {})
    .n("EC2Client", "GetTransitGatewayMulticastDomainAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayMulticastDomainAssociationsCommand)
    .de(de_GetTransitGatewayMulticastDomainAssociationsCommand)
    .build() {
}

class GetTransitGatewayPolicyTableAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayPolicyTableAssociations", {})
    .n("EC2Client", "GetTransitGatewayPolicyTableAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayPolicyTableAssociationsCommand)
    .de(de_GetTransitGatewayPolicyTableAssociationsCommand)
    .build() {
}

class GetTransitGatewayPolicyTableEntriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayPolicyTableEntries", {})
    .n("EC2Client", "GetTransitGatewayPolicyTableEntriesCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayPolicyTableEntriesCommand)
    .de(de_GetTransitGatewayPolicyTableEntriesCommand)
    .build() {
}

class GetTransitGatewayPrefixListReferencesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayPrefixListReferences", {})
    .n("EC2Client", "GetTransitGatewayPrefixListReferencesCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayPrefixListReferencesCommand)
    .de(de_GetTransitGatewayPrefixListReferencesCommand)
    .build() {
}

class GetTransitGatewayRouteTableAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayRouteTableAssociations", {})
    .n("EC2Client", "GetTransitGatewayRouteTableAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayRouteTableAssociationsCommand)
    .de(de_GetTransitGatewayRouteTableAssociationsCommand)
    .build() {
}

class GetTransitGatewayRouteTablePropagationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetTransitGatewayRouteTablePropagations", {})
    .n("EC2Client", "GetTransitGatewayRouteTablePropagationsCommand")
    .f(void 0, void 0)
    .ser(se_GetTransitGatewayRouteTablePropagationsCommand)
    .de(de_GetTransitGatewayRouteTablePropagationsCommand)
    .build() {
}

class GetVerifiedAccessEndpointPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetVerifiedAccessEndpointPolicy", {})
    .n("EC2Client", "GetVerifiedAccessEndpointPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetVerifiedAccessEndpointPolicyCommand)
    .de(de_GetVerifiedAccessEndpointPolicyCommand)
    .build() {
}

class GetVerifiedAccessEndpointTargetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetVerifiedAccessEndpointTargets", {})
    .n("EC2Client", "GetVerifiedAccessEndpointTargetsCommand")
    .f(void 0, void 0)
    .ser(se_GetVerifiedAccessEndpointTargetsCommand)
    .de(de_GetVerifiedAccessEndpointTargetsCommand)
    .build() {
}

class GetVerifiedAccessGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetVerifiedAccessGroupPolicy", {})
    .n("EC2Client", "GetVerifiedAccessGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetVerifiedAccessGroupPolicyCommand)
    .de(de_GetVerifiedAccessGroupPolicyCommand)
    .build() {
}

class GetVpnConnectionDeviceSampleConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetVpnConnectionDeviceSampleConfiguration", {})
    .n("EC2Client", "GetVpnConnectionDeviceSampleConfigurationCommand")
    .f(void 0, GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog)
    .ser(se_GetVpnConnectionDeviceSampleConfigurationCommand)
    .de(de_GetVpnConnectionDeviceSampleConfigurationCommand)
    .build() {
}

class GetVpnConnectionDeviceTypesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetVpnConnectionDeviceTypes", {})
    .n("EC2Client", "GetVpnConnectionDeviceTypesCommand")
    .f(void 0, void 0)
    .ser(se_GetVpnConnectionDeviceTypesCommand)
    .de(de_GetVpnConnectionDeviceTypesCommand)
    .build() {
}

class GetVpnTunnelReplacementStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "GetVpnTunnelReplacementStatus", {})
    .n("EC2Client", "GetVpnTunnelReplacementStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetVpnTunnelReplacementStatusCommand)
    .de(de_GetVpnTunnelReplacementStatusCommand)
    .build() {
}

class ImportClientVpnClientCertificateRevocationListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ImportClientVpnClientCertificateRevocationList", {})
    .n("EC2Client", "ImportClientVpnClientCertificateRevocationListCommand")
    .f(void 0, void 0)
    .ser(se_ImportClientVpnClientCertificateRevocationListCommand)
    .de(de_ImportClientVpnClientCertificateRevocationListCommand)
    .build() {
}

class ImportImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ImportImage", {})
    .n("EC2Client", "ImportImageCommand")
    .f(ImportImageRequestFilterSensitiveLog, ImportImageResultFilterSensitiveLog)
    .ser(se_ImportImageCommand)
    .de(de_ImportImageCommand)
    .build() {
}

class ImportInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ImportInstance", {})
    .n("EC2Client", "ImportInstanceCommand")
    .f(ImportInstanceRequestFilterSensitiveLog, ImportInstanceResultFilterSensitiveLog)
    .ser(se_ImportInstanceCommand)
    .de(de_ImportInstanceCommand)
    .build() {
}

class ImportKeyPairCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ImportKeyPair", {})
    .n("EC2Client", "ImportKeyPairCommand")
    .f(void 0, void 0)
    .ser(se_ImportKeyPairCommand)
    .de(de_ImportKeyPairCommand)
    .build() {
}

class ImportSnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ImportSnapshot", {})
    .n("EC2Client", "ImportSnapshotCommand")
    .f(ImportSnapshotRequestFilterSensitiveLog, ImportSnapshotResultFilterSensitiveLog)
    .ser(se_ImportSnapshotCommand)
    .de(de_ImportSnapshotCommand)
    .build() {
}

class ImportVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ImportVolume", {})
    .n("EC2Client", "ImportVolumeCommand")
    .f(ImportVolumeRequestFilterSensitiveLog, ImportVolumeResultFilterSensitiveLog)
    .ser(se_ImportVolumeCommand)
    .de(de_ImportVolumeCommand)
    .build() {
}

class ListImagesInRecycleBinCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ListImagesInRecycleBin", {})
    .n("EC2Client", "ListImagesInRecycleBinCommand")
    .f(void 0, void 0)
    .ser(se_ListImagesInRecycleBinCommand)
    .de(de_ListImagesInRecycleBinCommand)
    .build() {
}

class ListSnapshotsInRecycleBinCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ListSnapshotsInRecycleBin", {})
    .n("EC2Client", "ListSnapshotsInRecycleBinCommand")
    .f(void 0, void 0)
    .ser(se_ListSnapshotsInRecycleBinCommand)
    .de(de_ListSnapshotsInRecycleBinCommand)
    .build() {
}

class LockSnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "LockSnapshot", {})
    .n("EC2Client", "LockSnapshotCommand")
    .f(void 0, void 0)
    .ser(se_LockSnapshotCommand)
    .de(de_LockSnapshotCommand)
    .build() {
}

class ModifyAddressAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyAddressAttribute", {})
    .n("EC2Client", "ModifyAddressAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyAddressAttributeCommand)
    .de(de_ModifyAddressAttributeCommand)
    .build() {
}

class ModifyAvailabilityZoneGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyAvailabilityZoneGroup", {})
    .n("EC2Client", "ModifyAvailabilityZoneGroupCommand")
    .f(void 0, void 0)
    .ser(se_ModifyAvailabilityZoneGroupCommand)
    .de(de_ModifyAvailabilityZoneGroupCommand)
    .build() {
}

class ModifyCapacityReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyCapacityReservation", {})
    .n("EC2Client", "ModifyCapacityReservationCommand")
    .f(void 0, void 0)
    .ser(se_ModifyCapacityReservationCommand)
    .de(de_ModifyCapacityReservationCommand)
    .build() {
}

class ModifyCapacityReservationFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyCapacityReservationFleet", {})
    .n("EC2Client", "ModifyCapacityReservationFleetCommand")
    .f(void 0, void 0)
    .ser(se_ModifyCapacityReservationFleetCommand)
    .de(de_ModifyCapacityReservationFleetCommand)
    .build() {
}

class ModifyClientVpnEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyClientVpnEndpoint", {})
    .n("EC2Client", "ModifyClientVpnEndpointCommand")
    .f(void 0, void 0)
    .ser(se_ModifyClientVpnEndpointCommand)
    .de(de_ModifyClientVpnEndpointCommand)
    .build() {
}

class ModifyDefaultCreditSpecificationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyDefaultCreditSpecification", {})
    .n("EC2Client", "ModifyDefaultCreditSpecificationCommand")
    .f(void 0, void 0)
    .ser(se_ModifyDefaultCreditSpecificationCommand)
    .de(de_ModifyDefaultCreditSpecificationCommand)
    .build() {
}

class ModifyEbsDefaultKmsKeyIdCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyEbsDefaultKmsKeyId", {})
    .n("EC2Client", "ModifyEbsDefaultKmsKeyIdCommand")
    .f(void 0, void 0)
    .ser(se_ModifyEbsDefaultKmsKeyIdCommand)
    .de(de_ModifyEbsDefaultKmsKeyIdCommand)
    .build() {
}

class ModifyFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyFleet", {})
    .n("EC2Client", "ModifyFleetCommand")
    .f(void 0, void 0)
    .ser(se_ModifyFleetCommand)
    .de(de_ModifyFleetCommand)
    .build() {
}

class ModifyFpgaImageAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyFpgaImageAttribute", {})
    .n("EC2Client", "ModifyFpgaImageAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyFpgaImageAttributeCommand)
    .de(de_ModifyFpgaImageAttributeCommand)
    .build() {
}

class ModifyHostsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyHosts", {})
    .n("EC2Client", "ModifyHostsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyHostsCommand)
    .de(de_ModifyHostsCommand)
    .build() {
}

class ModifyIdentityIdFormatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIdentityIdFormat", {})
    .n("EC2Client", "ModifyIdentityIdFormatCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIdentityIdFormatCommand)
    .de(de_ModifyIdentityIdFormatCommand)
    .build() {
}

class ModifyIdFormatCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIdFormat", {})
    .n("EC2Client", "ModifyIdFormatCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIdFormatCommand)
    .de(de_ModifyIdFormatCommand)
    .build() {
}

class ModifyImageAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyImageAttribute", {})
    .n("EC2Client", "ModifyImageAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyImageAttributeCommand)
    .de(de_ModifyImageAttributeCommand)
    .build() {
}

class ModifyInstanceAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceAttribute", {})
    .n("EC2Client", "ModifyInstanceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceAttributeCommand)
    .de(de_ModifyInstanceAttributeCommand)
    .build() {
}

class ModifyInstanceCapacityReservationAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceCapacityReservationAttributes", {})
    .n("EC2Client", "ModifyInstanceCapacityReservationAttributesCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceCapacityReservationAttributesCommand)
    .de(de_ModifyInstanceCapacityReservationAttributesCommand)
    .build() {
}

class ModifyInstanceConnectEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceConnectEndpoint", {})
    .n("EC2Client", "ModifyInstanceConnectEndpointCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceConnectEndpointCommand)
    .de(de_ModifyInstanceConnectEndpointCommand)
    .build() {
}

class ModifyInstanceCpuOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceCpuOptions", {})
    .n("EC2Client", "ModifyInstanceCpuOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceCpuOptionsCommand)
    .de(de_ModifyInstanceCpuOptionsCommand)
    .build() {
}

class ModifyInstanceCreditSpecificationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceCreditSpecification", {})
    .n("EC2Client", "ModifyInstanceCreditSpecificationCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceCreditSpecificationCommand)
    .de(de_ModifyInstanceCreditSpecificationCommand)
    .build() {
}

class ModifyInstanceEventStartTimeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceEventStartTime", {})
    .n("EC2Client", "ModifyInstanceEventStartTimeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceEventStartTimeCommand)
    .de(de_ModifyInstanceEventStartTimeCommand)
    .build() {
}

class ModifyInstanceEventWindowCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceEventWindow", {})
    .n("EC2Client", "ModifyInstanceEventWindowCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceEventWindowCommand)
    .de(de_ModifyInstanceEventWindowCommand)
    .build() {
}

class ModifyInstanceMaintenanceOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceMaintenanceOptions", {})
    .n("EC2Client", "ModifyInstanceMaintenanceOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceMaintenanceOptionsCommand)
    .de(de_ModifyInstanceMaintenanceOptionsCommand)
    .build() {
}

class ModifyInstanceMetadataDefaultsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceMetadataDefaults", {})
    .n("EC2Client", "ModifyInstanceMetadataDefaultsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceMetadataDefaultsCommand)
    .de(de_ModifyInstanceMetadataDefaultsCommand)
    .build() {
}

class ModifyInstanceMetadataOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceMetadataOptions", {})
    .n("EC2Client", "ModifyInstanceMetadataOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceMetadataOptionsCommand)
    .de(de_ModifyInstanceMetadataOptionsCommand)
    .build() {
}

class ModifyInstanceNetworkPerformanceOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstanceNetworkPerformanceOptions", {})
    .n("EC2Client", "ModifyInstanceNetworkPerformanceOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstanceNetworkPerformanceOptionsCommand)
    .de(de_ModifyInstanceNetworkPerformanceOptionsCommand)
    .build() {
}

class ModifyInstancePlacementCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyInstancePlacement", {})
    .n("EC2Client", "ModifyInstancePlacementCommand")
    .f(void 0, void 0)
    .ser(se_ModifyInstancePlacementCommand)
    .de(de_ModifyInstancePlacementCommand)
    .build() {
}

class ModifyIpamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIpam", {})
    .n("EC2Client", "ModifyIpamCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIpamCommand)
    .de(de_ModifyIpamCommand)
    .build() {
}

class ModifyIpamPoolCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIpamPool", {})
    .n("EC2Client", "ModifyIpamPoolCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIpamPoolCommand)
    .de(de_ModifyIpamPoolCommand)
    .build() {
}

class ModifyIpamResourceCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIpamResourceCidr", {})
    .n("EC2Client", "ModifyIpamResourceCidrCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIpamResourceCidrCommand)
    .de(de_ModifyIpamResourceCidrCommand)
    .build() {
}

class ModifyIpamResourceDiscoveryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIpamResourceDiscovery", {})
    .n("EC2Client", "ModifyIpamResourceDiscoveryCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIpamResourceDiscoveryCommand)
    .de(de_ModifyIpamResourceDiscoveryCommand)
    .build() {
}

class ModifyIpamScopeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyIpamScope", {})
    .n("EC2Client", "ModifyIpamScopeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyIpamScopeCommand)
    .de(de_ModifyIpamScopeCommand)
    .build() {
}

class ModifyLaunchTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyLaunchTemplate", {})
    .n("EC2Client", "ModifyLaunchTemplateCommand")
    .f(void 0, void 0)
    .ser(se_ModifyLaunchTemplateCommand)
    .de(de_ModifyLaunchTemplateCommand)
    .build() {
}

class ModifyLocalGatewayRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyLocalGatewayRoute", {})
    .n("EC2Client", "ModifyLocalGatewayRouteCommand")
    .f(void 0, void 0)
    .ser(se_ModifyLocalGatewayRouteCommand)
    .de(de_ModifyLocalGatewayRouteCommand)
    .build() {
}

class ModifyManagedPrefixListCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyManagedPrefixList", {})
    .n("EC2Client", "ModifyManagedPrefixListCommand")
    .f(void 0, void 0)
    .ser(se_ModifyManagedPrefixListCommand)
    .de(de_ModifyManagedPrefixListCommand)
    .build() {
}

class ModifyNetworkInterfaceAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyNetworkInterfaceAttribute", {})
    .n("EC2Client", "ModifyNetworkInterfaceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyNetworkInterfaceAttributeCommand)
    .de(de_ModifyNetworkInterfaceAttributeCommand)
    .build() {
}

class ModifyPrivateDnsNameOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyPrivateDnsNameOptions", {})
    .n("EC2Client", "ModifyPrivateDnsNameOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyPrivateDnsNameOptionsCommand)
    .de(de_ModifyPrivateDnsNameOptionsCommand)
    .build() {
}

class ModifyPublicIpDnsNameOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyPublicIpDnsNameOptions", {})
    .n("EC2Client", "ModifyPublicIpDnsNameOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyPublicIpDnsNameOptionsCommand)
    .de(de_ModifyPublicIpDnsNameOptionsCommand)
    .build() {
}

class ModifyReservedInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyReservedInstances", {})
    .n("EC2Client", "ModifyReservedInstancesCommand")
    .f(void 0, void 0)
    .ser(se_ModifyReservedInstancesCommand)
    .de(de_ModifyReservedInstancesCommand)
    .build() {
}

class ModifyRouteServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyRouteServer", {})
    .n("EC2Client", "ModifyRouteServerCommand")
    .f(void 0, void 0)
    .ser(se_ModifyRouteServerCommand)
    .de(de_ModifyRouteServerCommand)
    .build() {
}

class ModifySecurityGroupRulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifySecurityGroupRules", {})
    .n("EC2Client", "ModifySecurityGroupRulesCommand")
    .f(void 0, void 0)
    .ser(se_ModifySecurityGroupRulesCommand)
    .de(de_ModifySecurityGroupRulesCommand)
    .build() {
}

class ModifySnapshotAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifySnapshotAttribute", {})
    .n("EC2Client", "ModifySnapshotAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifySnapshotAttributeCommand)
    .de(de_ModifySnapshotAttributeCommand)
    .build() {
}

class ModifySnapshotTierCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifySnapshotTier", {})
    .n("EC2Client", "ModifySnapshotTierCommand")
    .f(void 0, void 0)
    .ser(se_ModifySnapshotTierCommand)
    .de(de_ModifySnapshotTierCommand)
    .build() {
}

class ModifySpotFleetRequestCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifySpotFleetRequest", {})
    .n("EC2Client", "ModifySpotFleetRequestCommand")
    .f(void 0, void 0)
    .ser(se_ModifySpotFleetRequestCommand)
    .de(de_ModifySpotFleetRequestCommand)
    .build() {
}

class ModifySubnetAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifySubnetAttribute", {})
    .n("EC2Client", "ModifySubnetAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifySubnetAttributeCommand)
    .de(de_ModifySubnetAttributeCommand)
    .build() {
}

class ModifyTrafficMirrorFilterNetworkServicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyTrafficMirrorFilterNetworkServices", {})
    .n("EC2Client", "ModifyTrafficMirrorFilterNetworkServicesCommand")
    .f(void 0, void 0)
    .ser(se_ModifyTrafficMirrorFilterNetworkServicesCommand)
    .de(de_ModifyTrafficMirrorFilterNetworkServicesCommand)
    .build() {
}

class ModifyTrafficMirrorFilterRuleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyTrafficMirrorFilterRule", {})
    .n("EC2Client", "ModifyTrafficMirrorFilterRuleCommand")
    .f(void 0, void 0)
    .ser(se_ModifyTrafficMirrorFilterRuleCommand)
    .de(de_ModifyTrafficMirrorFilterRuleCommand)
    .build() {
}

class ModifyTrafficMirrorSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyTrafficMirrorSession", {})
    .n("EC2Client", "ModifyTrafficMirrorSessionCommand")
    .f(void 0, void 0)
    .ser(se_ModifyTrafficMirrorSessionCommand)
    .de(de_ModifyTrafficMirrorSessionCommand)
    .build() {
}

class ModifyTransitGatewayCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyTransitGateway", {})
    .n("EC2Client", "ModifyTransitGatewayCommand")
    .f(void 0, void 0)
    .ser(se_ModifyTransitGatewayCommand)
    .de(de_ModifyTransitGatewayCommand)
    .build() {
}

class ModifyTransitGatewayPrefixListReferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyTransitGatewayPrefixListReference", {})
    .n("EC2Client", "ModifyTransitGatewayPrefixListReferenceCommand")
    .f(void 0, void 0)
    .ser(se_ModifyTransitGatewayPrefixListReferenceCommand)
    .de(de_ModifyTransitGatewayPrefixListReferenceCommand)
    .build() {
}

class ModifyTransitGatewayVpcAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyTransitGatewayVpcAttachment", {})
    .n("EC2Client", "ModifyTransitGatewayVpcAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_ModifyTransitGatewayVpcAttachmentCommand)
    .de(de_ModifyTransitGatewayVpcAttachmentCommand)
    .build() {
}

class ModifyVerifiedAccessEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessEndpoint", {})
    .n("EC2Client", "ModifyVerifiedAccessEndpointCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVerifiedAccessEndpointCommand)
    .de(de_ModifyVerifiedAccessEndpointCommand)
    .build() {
}

class ModifyVerifiedAccessEndpointPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessEndpointPolicy", {})
    .n("EC2Client", "ModifyVerifiedAccessEndpointPolicyCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVerifiedAccessEndpointPolicyCommand)
    .de(de_ModifyVerifiedAccessEndpointPolicyCommand)
    .build() {
}

class ModifyVerifiedAccessGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessGroup", {})
    .n("EC2Client", "ModifyVerifiedAccessGroupCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVerifiedAccessGroupCommand)
    .de(de_ModifyVerifiedAccessGroupCommand)
    .build() {
}

class ModifyVerifiedAccessGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessGroupPolicy", {})
    .n("EC2Client", "ModifyVerifiedAccessGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVerifiedAccessGroupPolicyCommand)
    .de(de_ModifyVerifiedAccessGroupPolicyCommand)
    .build() {
}

class ModifyVerifiedAccessInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessInstance", {})
    .n("EC2Client", "ModifyVerifiedAccessInstanceCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVerifiedAccessInstanceCommand)
    .de(de_ModifyVerifiedAccessInstanceCommand)
    .build() {
}

class ModifyVerifiedAccessInstanceLoggingConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessInstanceLoggingConfiguration", {})
    .n("EC2Client", "ModifyVerifiedAccessInstanceLoggingConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVerifiedAccessInstanceLoggingConfigurationCommand)
    .de(de_ModifyVerifiedAccessInstanceLoggingConfigurationCommand)
    .build() {
}

class ModifyVerifiedAccessTrustProviderCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVerifiedAccessTrustProvider", {})
    .n("EC2Client", "ModifyVerifiedAccessTrustProviderCommand")
    .f(ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog, ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog)
    .ser(se_ModifyVerifiedAccessTrustProviderCommand)
    .de(de_ModifyVerifiedAccessTrustProviderCommand)
    .build() {
}

class ModifyVolumeAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVolumeAttribute", {})
    .n("EC2Client", "ModifyVolumeAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVolumeAttributeCommand)
    .de(de_ModifyVolumeAttributeCommand)
    .build() {
}

class ModifyVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVolume", {})
    .n("EC2Client", "ModifyVolumeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVolumeCommand)
    .de(de_ModifyVolumeCommand)
    .build() {
}

class ModifyVpcAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcAttribute", {})
    .n("EC2Client", "ModifyVpcAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcAttributeCommand)
    .de(de_ModifyVpcAttributeCommand)
    .build() {
}

class ModifyVpcBlockPublicAccessExclusionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcBlockPublicAccessExclusion", {})
    .n("EC2Client", "ModifyVpcBlockPublicAccessExclusionCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcBlockPublicAccessExclusionCommand)
    .de(de_ModifyVpcBlockPublicAccessExclusionCommand)
    .build() {
}

class ModifyVpcBlockPublicAccessOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcBlockPublicAccessOptions", {})
    .n("EC2Client", "ModifyVpcBlockPublicAccessOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcBlockPublicAccessOptionsCommand)
    .de(de_ModifyVpcBlockPublicAccessOptionsCommand)
    .build() {
}

class ModifyVpcEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcEndpoint", {})
    .n("EC2Client", "ModifyVpcEndpointCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcEndpointCommand)
    .de(de_ModifyVpcEndpointCommand)
    .build() {
}

class ModifyVpcEndpointConnectionNotificationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcEndpointConnectionNotification", {})
    .n("EC2Client", "ModifyVpcEndpointConnectionNotificationCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcEndpointConnectionNotificationCommand)
    .de(de_ModifyVpcEndpointConnectionNotificationCommand)
    .build() {
}

class ModifyVpcEndpointServiceConfigurationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcEndpointServiceConfiguration", {})
    .n("EC2Client", "ModifyVpcEndpointServiceConfigurationCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcEndpointServiceConfigurationCommand)
    .de(de_ModifyVpcEndpointServiceConfigurationCommand)
    .build() {
}

class ModifyVpcEndpointServicePayerResponsibilityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcEndpointServicePayerResponsibility", {})
    .n("EC2Client", "ModifyVpcEndpointServicePayerResponsibilityCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcEndpointServicePayerResponsibilityCommand)
    .de(de_ModifyVpcEndpointServicePayerResponsibilityCommand)
    .build() {
}

class ModifyVpcEndpointServicePermissionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcEndpointServicePermissions", {})
    .n("EC2Client", "ModifyVpcEndpointServicePermissionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcEndpointServicePermissionsCommand)
    .de(de_ModifyVpcEndpointServicePermissionsCommand)
    .build() {
}

class ModifyVpcPeeringConnectionOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcPeeringConnectionOptions", {})
    .n("EC2Client", "ModifyVpcPeeringConnectionOptionsCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcPeeringConnectionOptionsCommand)
    .de(de_ModifyVpcPeeringConnectionOptionsCommand)
    .build() {
}

class ModifyVpcTenancyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpcTenancy", {})
    .n("EC2Client", "ModifyVpcTenancyCommand")
    .f(void 0, void 0)
    .ser(se_ModifyVpcTenancyCommand)
    .de(de_ModifyVpcTenancyCommand)
    .build() {
}

class ModifyVpnConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpnConnection", {})
    .n("EC2Client", "ModifyVpnConnectionCommand")
    .f(void 0, ModifyVpnConnectionResultFilterSensitiveLog)
    .ser(se_ModifyVpnConnectionCommand)
    .de(de_ModifyVpnConnectionCommand)
    .build() {
}

class ModifyVpnConnectionOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpnConnectionOptions", {})
    .n("EC2Client", "ModifyVpnConnectionOptionsCommand")
    .f(void 0, ModifyVpnConnectionOptionsResultFilterSensitiveLog)
    .ser(se_ModifyVpnConnectionOptionsCommand)
    .de(de_ModifyVpnConnectionOptionsCommand)
    .build() {
}

class ModifyVpnTunnelCertificateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpnTunnelCertificate", {})
    .n("EC2Client", "ModifyVpnTunnelCertificateCommand")
    .f(void 0, ModifyVpnTunnelCertificateResultFilterSensitiveLog)
    .ser(se_ModifyVpnTunnelCertificateCommand)
    .de(de_ModifyVpnTunnelCertificateCommand)
    .build() {
}

class ModifyVpnTunnelOptionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ModifyVpnTunnelOptions", {})
    .n("EC2Client", "ModifyVpnTunnelOptionsCommand")
    .f(ModifyVpnTunnelOptionsRequestFilterSensitiveLog, ModifyVpnTunnelOptionsResultFilterSensitiveLog)
    .ser(se_ModifyVpnTunnelOptionsCommand)
    .de(de_ModifyVpnTunnelOptionsCommand)
    .build() {
}

class MonitorInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "MonitorInstances", {})
    .n("EC2Client", "MonitorInstancesCommand")
    .f(void 0, void 0)
    .ser(se_MonitorInstancesCommand)
    .de(de_MonitorInstancesCommand)
    .build() {
}

class MoveAddressToVpcCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "MoveAddressToVpc", {})
    .n("EC2Client", "MoveAddressToVpcCommand")
    .f(void 0, void 0)
    .ser(se_MoveAddressToVpcCommand)
    .de(de_MoveAddressToVpcCommand)
    .build() {
}

class MoveByoipCidrToIpamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "MoveByoipCidrToIpam", {})
    .n("EC2Client", "MoveByoipCidrToIpamCommand")
    .f(void 0, void 0)
    .ser(se_MoveByoipCidrToIpamCommand)
    .de(de_MoveByoipCidrToIpamCommand)
    .build() {
}

class MoveCapacityReservationInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "MoveCapacityReservationInstances", {})
    .n("EC2Client", "MoveCapacityReservationInstancesCommand")
    .f(void 0, void 0)
    .ser(se_MoveCapacityReservationInstancesCommand)
    .de(de_MoveCapacityReservationInstancesCommand)
    .build() {
}

class ProvisionByoipCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ProvisionByoipCidr", {})
    .n("EC2Client", "ProvisionByoipCidrCommand")
    .f(void 0, void 0)
    .ser(se_ProvisionByoipCidrCommand)
    .de(de_ProvisionByoipCidrCommand)
    .build() {
}

class ProvisionIpamByoasnCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ProvisionIpamByoasn", {})
    .n("EC2Client", "ProvisionIpamByoasnCommand")
    .f(void 0, void 0)
    .ser(se_ProvisionIpamByoasnCommand)
    .de(de_ProvisionIpamByoasnCommand)
    .build() {
}

class ProvisionIpamPoolCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ProvisionIpamPoolCidr", {})
    .n("EC2Client", "ProvisionIpamPoolCidrCommand")
    .f(void 0, void 0)
    .ser(se_ProvisionIpamPoolCidrCommand)
    .de(de_ProvisionIpamPoolCidrCommand)
    .build() {
}

class ProvisionPublicIpv4PoolCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ProvisionPublicIpv4PoolCidr", {})
    .n("EC2Client", "ProvisionPublicIpv4PoolCidrCommand")
    .f(void 0, void 0)
    .ser(se_ProvisionPublicIpv4PoolCidrCommand)
    .de(de_ProvisionPublicIpv4PoolCidrCommand)
    .build() {
}

class PurchaseCapacityBlockCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "PurchaseCapacityBlock", {})
    .n("EC2Client", "PurchaseCapacityBlockCommand")
    .f(void 0, void 0)
    .ser(se_PurchaseCapacityBlockCommand)
    .de(de_PurchaseCapacityBlockCommand)
    .build() {
}

class PurchaseCapacityBlockExtensionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "PurchaseCapacityBlockExtension", {})
    .n("EC2Client", "PurchaseCapacityBlockExtensionCommand")
    .f(void 0, void 0)
    .ser(se_PurchaseCapacityBlockExtensionCommand)
    .de(de_PurchaseCapacityBlockExtensionCommand)
    .build() {
}

class PurchaseHostReservationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "PurchaseHostReservation", {})
    .n("EC2Client", "PurchaseHostReservationCommand")
    .f(void 0, void 0)
    .ser(se_PurchaseHostReservationCommand)
    .de(de_PurchaseHostReservationCommand)
    .build() {
}

class PurchaseReservedInstancesOfferingCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "PurchaseReservedInstancesOffering", {})
    .n("EC2Client", "PurchaseReservedInstancesOfferingCommand")
    .f(void 0, void 0)
    .ser(se_PurchaseReservedInstancesOfferingCommand)
    .de(de_PurchaseReservedInstancesOfferingCommand)
    .build() {
}

class PurchaseScheduledInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "PurchaseScheduledInstances", {})
    .n("EC2Client", "PurchaseScheduledInstancesCommand")
    .f(void 0, void 0)
    .ser(se_PurchaseScheduledInstancesCommand)
    .de(de_PurchaseScheduledInstancesCommand)
    .build() {
}

class RebootInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RebootInstances", {})
    .n("EC2Client", "RebootInstancesCommand")
    .f(void 0, void 0)
    .ser(se_RebootInstancesCommand)
    .de(de_RebootInstancesCommand)
    .build() {
}

class RegisterImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RegisterImage", {})
    .n("EC2Client", "RegisterImageCommand")
    .f(void 0, void 0)
    .ser(se_RegisterImageCommand)
    .de(de_RegisterImageCommand)
    .build() {
}

class RegisterInstanceEventNotificationAttributesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RegisterInstanceEventNotificationAttributes", {})
    .n("EC2Client", "RegisterInstanceEventNotificationAttributesCommand")
    .f(void 0, void 0)
    .ser(se_RegisterInstanceEventNotificationAttributesCommand)
    .de(de_RegisterInstanceEventNotificationAttributesCommand)
    .build() {
}

class RegisterTransitGatewayMulticastGroupMembersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RegisterTransitGatewayMulticastGroupMembers", {})
    .n("EC2Client", "RegisterTransitGatewayMulticastGroupMembersCommand")
    .f(void 0, void 0)
    .ser(se_RegisterTransitGatewayMulticastGroupMembersCommand)
    .de(de_RegisterTransitGatewayMulticastGroupMembersCommand)
    .build() {
}

class RegisterTransitGatewayMulticastGroupSourcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RegisterTransitGatewayMulticastGroupSources", {})
    .n("EC2Client", "RegisterTransitGatewayMulticastGroupSourcesCommand")
    .f(void 0, void 0)
    .ser(se_RegisterTransitGatewayMulticastGroupSourcesCommand)
    .de(de_RegisterTransitGatewayMulticastGroupSourcesCommand)
    .build() {
}

class RejectCapacityReservationBillingOwnershipCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RejectCapacityReservationBillingOwnership", {})
    .n("EC2Client", "RejectCapacityReservationBillingOwnershipCommand")
    .f(void 0, void 0)
    .ser(se_RejectCapacityReservationBillingOwnershipCommand)
    .de(de_RejectCapacityReservationBillingOwnershipCommand)
    .build() {
}

class RejectTransitGatewayMulticastDomainAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RejectTransitGatewayMulticastDomainAssociations", {})
    .n("EC2Client", "RejectTransitGatewayMulticastDomainAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_RejectTransitGatewayMulticastDomainAssociationsCommand)
    .de(de_RejectTransitGatewayMulticastDomainAssociationsCommand)
    .build() {
}

class RejectTransitGatewayPeeringAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RejectTransitGatewayPeeringAttachment", {})
    .n("EC2Client", "RejectTransitGatewayPeeringAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_RejectTransitGatewayPeeringAttachmentCommand)
    .de(de_RejectTransitGatewayPeeringAttachmentCommand)
    .build() {
}

class RejectTransitGatewayVpcAttachmentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RejectTransitGatewayVpcAttachment", {})
    .n("EC2Client", "RejectTransitGatewayVpcAttachmentCommand")
    .f(void 0, void 0)
    .ser(se_RejectTransitGatewayVpcAttachmentCommand)
    .de(de_RejectTransitGatewayVpcAttachmentCommand)
    .build() {
}

class RejectVpcEndpointConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RejectVpcEndpointConnections", {})
    .n("EC2Client", "RejectVpcEndpointConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_RejectVpcEndpointConnectionsCommand)
    .de(de_RejectVpcEndpointConnectionsCommand)
    .build() {
}

class RejectVpcPeeringConnectionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RejectVpcPeeringConnection", {})
    .n("EC2Client", "RejectVpcPeeringConnectionCommand")
    .f(void 0, void 0)
    .ser(se_RejectVpcPeeringConnectionCommand)
    .de(de_RejectVpcPeeringConnectionCommand)
    .build() {
}

class ReleaseAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReleaseAddress", {})
    .n("EC2Client", "ReleaseAddressCommand")
    .f(void 0, void 0)
    .ser(se_ReleaseAddressCommand)
    .de(de_ReleaseAddressCommand)
    .build() {
}

class ReleaseHostsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReleaseHosts", {})
    .n("EC2Client", "ReleaseHostsCommand")
    .f(void 0, void 0)
    .ser(se_ReleaseHostsCommand)
    .de(de_ReleaseHostsCommand)
    .build() {
}

class ReleaseIpamPoolAllocationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReleaseIpamPoolAllocation", {})
    .n("EC2Client", "ReleaseIpamPoolAllocationCommand")
    .f(void 0, void 0)
    .ser(se_ReleaseIpamPoolAllocationCommand)
    .de(de_ReleaseIpamPoolAllocationCommand)
    .build() {
}

class ReplaceIamInstanceProfileAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceIamInstanceProfileAssociation", {})
    .n("EC2Client", "ReplaceIamInstanceProfileAssociationCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceIamInstanceProfileAssociationCommand)
    .de(de_ReplaceIamInstanceProfileAssociationCommand)
    .build() {
}

class ReplaceImageCriteriaInAllowedImagesSettingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceImageCriteriaInAllowedImagesSettings", {})
    .n("EC2Client", "ReplaceImageCriteriaInAllowedImagesSettingsCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceImageCriteriaInAllowedImagesSettingsCommand)
    .de(de_ReplaceImageCriteriaInAllowedImagesSettingsCommand)
    .build() {
}

class ReplaceNetworkAclAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceNetworkAclAssociation", {})
    .n("EC2Client", "ReplaceNetworkAclAssociationCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceNetworkAclAssociationCommand)
    .de(de_ReplaceNetworkAclAssociationCommand)
    .build() {
}

class ReplaceNetworkAclEntryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceNetworkAclEntry", {})
    .n("EC2Client", "ReplaceNetworkAclEntryCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceNetworkAclEntryCommand)
    .de(de_ReplaceNetworkAclEntryCommand)
    .build() {
}

class ReplaceRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceRoute", {})
    .n("EC2Client", "ReplaceRouteCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceRouteCommand)
    .de(de_ReplaceRouteCommand)
    .build() {
}

class ReplaceRouteTableAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceRouteTableAssociation", {})
    .n("EC2Client", "ReplaceRouteTableAssociationCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceRouteTableAssociationCommand)
    .de(de_ReplaceRouteTableAssociationCommand)
    .build() {
}

class ReplaceTransitGatewayRouteCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceTransitGatewayRoute", {})
    .n("EC2Client", "ReplaceTransitGatewayRouteCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceTransitGatewayRouteCommand)
    .de(de_ReplaceTransitGatewayRouteCommand)
    .build() {
}

class ReplaceVpnTunnelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReplaceVpnTunnel", {})
    .n("EC2Client", "ReplaceVpnTunnelCommand")
    .f(void 0, void 0)
    .ser(se_ReplaceVpnTunnelCommand)
    .de(de_ReplaceVpnTunnelCommand)
    .build() {
}

const VerificationMethod = {
    dns_token: "dns-token",
    remarks_x509: "remarks-x509",
};
const ReportInstanceReasonCodes = {
    instance_stuck_in_state: "instance-stuck-in-state",
    not_accepting_credentials: "not-accepting-credentials",
    other: "other",
    password_not_available: "password-not-available",
    performance_ebs_volume: "performance-ebs-volume",
    performance_instance_store: "performance-instance-store",
    performance_network: "performance-network",
    performance_other: "performance-other",
    unresponsive: "unresponsive",
};
const ReportStatusType = {
    impaired: "impaired",
    ok: "ok",
};
const ResetFpgaImageAttributeName = {
    loadPermission: "loadPermission",
};
const ResetImageAttributeName = {
    launchPermission: "launchPermission",
};
const MembershipType = {
    igmp: "igmp",
    static: "static",
};
const ReportInstanceStatusRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Description && { Description: smithyClient.SENSITIVE_STRING }),
});
const RequestSpotFleetRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SpotFleetRequestConfig && {
        SpotFleetRequestConfig: SpotFleetRequestConfigDataFilterSensitiveLog(obj.SpotFleetRequestConfig),
    }),
});
const RequestSpotLaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const RequestSpotInstancesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecification && {
        LaunchSpecification: RequestSpotLaunchSpecificationFilterSensitiveLog(obj.LaunchSpecification),
    }),
});
const RequestSpotInstancesResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.SpotInstanceRequests && {
        SpotInstanceRequests: obj.SpotInstanceRequests.map((item) => SpotInstanceRequestFilterSensitiveLog(item)),
    }),
});
const RunInstancesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.UserData && { UserData: smithyClient.SENSITIVE_STRING }),
});
const ScheduledInstancesLaunchSpecificationFilterSensitiveLog = (obj) => ({
    ...obj,
});
const RunScheduledInstancesRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.LaunchSpecification && { LaunchSpecification: smithyClient.SENSITIVE_STRING }),
});

class ReportInstanceStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ReportInstanceStatus", {})
    .n("EC2Client", "ReportInstanceStatusCommand")
    .f(ReportInstanceStatusRequestFilterSensitiveLog, void 0)
    .ser(se_ReportInstanceStatusCommand)
    .de(de_ReportInstanceStatusCommand)
    .build() {
}

class RequestSpotFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RequestSpotFleet", {})
    .n("EC2Client", "RequestSpotFleetCommand")
    .f(RequestSpotFleetRequestFilterSensitiveLog, void 0)
    .ser(se_RequestSpotFleetCommand)
    .de(de_RequestSpotFleetCommand)
    .build() {
}

class RequestSpotInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RequestSpotInstances", {})
    .n("EC2Client", "RequestSpotInstancesCommand")
    .f(RequestSpotInstancesRequestFilterSensitiveLog, RequestSpotInstancesResultFilterSensitiveLog)
    .ser(se_RequestSpotInstancesCommand)
    .de(de_RequestSpotInstancesCommand)
    .build() {
}

class ResetAddressAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetAddressAttribute", {})
    .n("EC2Client", "ResetAddressAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ResetAddressAttributeCommand)
    .de(de_ResetAddressAttributeCommand)
    .build() {
}

class ResetEbsDefaultKmsKeyIdCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetEbsDefaultKmsKeyId", {})
    .n("EC2Client", "ResetEbsDefaultKmsKeyIdCommand")
    .f(void 0, void 0)
    .ser(se_ResetEbsDefaultKmsKeyIdCommand)
    .de(de_ResetEbsDefaultKmsKeyIdCommand)
    .build() {
}

class ResetFpgaImageAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetFpgaImageAttribute", {})
    .n("EC2Client", "ResetFpgaImageAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ResetFpgaImageAttributeCommand)
    .de(de_ResetFpgaImageAttributeCommand)
    .build() {
}

class ResetImageAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetImageAttribute", {})
    .n("EC2Client", "ResetImageAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ResetImageAttributeCommand)
    .de(de_ResetImageAttributeCommand)
    .build() {
}

class ResetInstanceAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetInstanceAttribute", {})
    .n("EC2Client", "ResetInstanceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ResetInstanceAttributeCommand)
    .de(de_ResetInstanceAttributeCommand)
    .build() {
}

class ResetNetworkInterfaceAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetNetworkInterfaceAttribute", {})
    .n("EC2Client", "ResetNetworkInterfaceAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ResetNetworkInterfaceAttributeCommand)
    .de(de_ResetNetworkInterfaceAttributeCommand)
    .build() {
}

class ResetSnapshotAttributeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "ResetSnapshotAttribute", {})
    .n("EC2Client", "ResetSnapshotAttributeCommand")
    .f(void 0, void 0)
    .ser(se_ResetSnapshotAttributeCommand)
    .de(de_ResetSnapshotAttributeCommand)
    .build() {
}

class RestoreAddressToClassicCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RestoreAddressToClassic", {})
    .n("EC2Client", "RestoreAddressToClassicCommand")
    .f(void 0, void 0)
    .ser(se_RestoreAddressToClassicCommand)
    .de(de_RestoreAddressToClassicCommand)
    .build() {
}

class RestoreImageFromRecycleBinCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RestoreImageFromRecycleBin", {})
    .n("EC2Client", "RestoreImageFromRecycleBinCommand")
    .f(void 0, void 0)
    .ser(se_RestoreImageFromRecycleBinCommand)
    .de(de_RestoreImageFromRecycleBinCommand)
    .build() {
}

class RestoreManagedPrefixListVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RestoreManagedPrefixListVersion", {})
    .n("EC2Client", "RestoreManagedPrefixListVersionCommand")
    .f(void 0, void 0)
    .ser(se_RestoreManagedPrefixListVersionCommand)
    .de(de_RestoreManagedPrefixListVersionCommand)
    .build() {
}

class RestoreSnapshotFromRecycleBinCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RestoreSnapshotFromRecycleBin", {})
    .n("EC2Client", "RestoreSnapshotFromRecycleBinCommand")
    .f(void 0, void 0)
    .ser(se_RestoreSnapshotFromRecycleBinCommand)
    .de(de_RestoreSnapshotFromRecycleBinCommand)
    .build() {
}

class RestoreSnapshotTierCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RestoreSnapshotTier", {})
    .n("EC2Client", "RestoreSnapshotTierCommand")
    .f(void 0, void 0)
    .ser(se_RestoreSnapshotTierCommand)
    .de(de_RestoreSnapshotTierCommand)
    .build() {
}

class RevokeClientVpnIngressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RevokeClientVpnIngress", {})
    .n("EC2Client", "RevokeClientVpnIngressCommand")
    .f(void 0, void 0)
    .ser(se_RevokeClientVpnIngressCommand)
    .de(de_RevokeClientVpnIngressCommand)
    .build() {
}

class RevokeSecurityGroupEgressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RevokeSecurityGroupEgress", {})
    .n("EC2Client", "RevokeSecurityGroupEgressCommand")
    .f(void 0, void 0)
    .ser(se_RevokeSecurityGroupEgressCommand)
    .de(de_RevokeSecurityGroupEgressCommand)
    .build() {
}

class RevokeSecurityGroupIngressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RevokeSecurityGroupIngress", {})
    .n("EC2Client", "RevokeSecurityGroupIngressCommand")
    .f(void 0, void 0)
    .ser(se_RevokeSecurityGroupIngressCommand)
    .de(de_RevokeSecurityGroupIngressCommand)
    .build() {
}

class RunInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RunInstances", {})
    .n("EC2Client", "RunInstancesCommand")
    .f(RunInstancesRequestFilterSensitiveLog, void 0)
    .ser(se_RunInstancesCommand)
    .de(de_RunInstancesCommand)
    .build() {
}

class RunScheduledInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "RunScheduledInstances", {})
    .n("EC2Client", "RunScheduledInstancesCommand")
    .f(RunScheduledInstancesRequestFilterSensitiveLog, void 0)
    .ser(se_RunScheduledInstancesCommand)
    .de(de_RunScheduledInstancesCommand)
    .build() {
}

class SearchLocalGatewayRoutesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "SearchLocalGatewayRoutes", {})
    .n("EC2Client", "SearchLocalGatewayRoutesCommand")
    .f(void 0, void 0)
    .ser(se_SearchLocalGatewayRoutesCommand)
    .de(de_SearchLocalGatewayRoutesCommand)
    .build() {
}

class SearchTransitGatewayMulticastGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "SearchTransitGatewayMulticastGroups", {})
    .n("EC2Client", "SearchTransitGatewayMulticastGroupsCommand")
    .f(void 0, void 0)
    .ser(se_SearchTransitGatewayMulticastGroupsCommand)
    .de(de_SearchTransitGatewayMulticastGroupsCommand)
    .build() {
}

class SearchTransitGatewayRoutesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "SearchTransitGatewayRoutes", {})
    .n("EC2Client", "SearchTransitGatewayRoutesCommand")
    .f(void 0, void 0)
    .ser(se_SearchTransitGatewayRoutesCommand)
    .de(de_SearchTransitGatewayRoutesCommand)
    .build() {
}

class SendDiagnosticInterruptCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "SendDiagnosticInterrupt", {})
    .n("EC2Client", "SendDiagnosticInterruptCommand")
    .f(void 0, void 0)
    .ser(se_SendDiagnosticInterruptCommand)
    .de(de_SendDiagnosticInterruptCommand)
    .build() {
}

class StartDeclarativePoliciesReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "StartDeclarativePoliciesReport", {})
    .n("EC2Client", "StartDeclarativePoliciesReportCommand")
    .f(void 0, void 0)
    .ser(se_StartDeclarativePoliciesReportCommand)
    .de(de_StartDeclarativePoliciesReportCommand)
    .build() {
}

class StartInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "StartInstances", {})
    .n("EC2Client", "StartInstancesCommand")
    .f(void 0, void 0)
    .ser(se_StartInstancesCommand)
    .de(de_StartInstancesCommand)
    .build() {
}

class StartNetworkInsightsAccessScopeAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "StartNetworkInsightsAccessScopeAnalysis", {})
    .n("EC2Client", "StartNetworkInsightsAccessScopeAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_StartNetworkInsightsAccessScopeAnalysisCommand)
    .de(de_StartNetworkInsightsAccessScopeAnalysisCommand)
    .build() {
}

class StartNetworkInsightsAnalysisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "StartNetworkInsightsAnalysis", {})
    .n("EC2Client", "StartNetworkInsightsAnalysisCommand")
    .f(void 0, void 0)
    .ser(se_StartNetworkInsightsAnalysisCommand)
    .de(de_StartNetworkInsightsAnalysisCommand)
    .build() {
}

class StartVpcEndpointServicePrivateDnsVerificationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "StartVpcEndpointServicePrivateDnsVerification", {})
    .n("EC2Client", "StartVpcEndpointServicePrivateDnsVerificationCommand")
    .f(void 0, void 0)
    .ser(se_StartVpcEndpointServicePrivateDnsVerificationCommand)
    .de(de_StartVpcEndpointServicePrivateDnsVerificationCommand)
    .build() {
}

class StopInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "StopInstances", {})
    .n("EC2Client", "StopInstancesCommand")
    .f(void 0, void 0)
    .ser(se_StopInstancesCommand)
    .de(de_StopInstancesCommand)
    .build() {
}

class TerminateClientVpnConnectionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "TerminateClientVpnConnections", {})
    .n("EC2Client", "TerminateClientVpnConnectionsCommand")
    .f(void 0, void 0)
    .ser(se_TerminateClientVpnConnectionsCommand)
    .de(de_TerminateClientVpnConnectionsCommand)
    .build() {
}

class TerminateInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "TerminateInstances", {})
    .n("EC2Client", "TerminateInstancesCommand")
    .f(void 0, void 0)
    .ser(se_TerminateInstancesCommand)
    .de(de_TerminateInstancesCommand)
    .build() {
}

class UnassignIpv6AddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UnassignIpv6Addresses", {})
    .n("EC2Client", "UnassignIpv6AddressesCommand")
    .f(void 0, void 0)
    .ser(se_UnassignIpv6AddressesCommand)
    .de(de_UnassignIpv6AddressesCommand)
    .build() {
}

class UnassignPrivateIpAddressesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UnassignPrivateIpAddresses", {})
    .n("EC2Client", "UnassignPrivateIpAddressesCommand")
    .f(void 0, void 0)
    .ser(se_UnassignPrivateIpAddressesCommand)
    .de(de_UnassignPrivateIpAddressesCommand)
    .build() {
}

class UnassignPrivateNatGatewayAddressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UnassignPrivateNatGatewayAddress", {})
    .n("EC2Client", "UnassignPrivateNatGatewayAddressCommand")
    .f(void 0, void 0)
    .ser(se_UnassignPrivateNatGatewayAddressCommand)
    .de(de_UnassignPrivateNatGatewayAddressCommand)
    .build() {
}

class UnlockSnapshotCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UnlockSnapshot", {})
    .n("EC2Client", "UnlockSnapshotCommand")
    .f(void 0, void 0)
    .ser(se_UnlockSnapshotCommand)
    .de(de_UnlockSnapshotCommand)
    .build() {
}

class UnmonitorInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UnmonitorInstances", {})
    .n("EC2Client", "UnmonitorInstancesCommand")
    .f(void 0, void 0)
    .ser(se_UnmonitorInstancesCommand)
    .de(de_UnmonitorInstancesCommand)
    .build() {
}

class UpdateSecurityGroupRuleDescriptionsEgressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UpdateSecurityGroupRuleDescriptionsEgress", {})
    .n("EC2Client", "UpdateSecurityGroupRuleDescriptionsEgressCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSecurityGroupRuleDescriptionsEgressCommand)
    .de(de_UpdateSecurityGroupRuleDescriptionsEgressCommand)
    .build() {
}

class UpdateSecurityGroupRuleDescriptionsIngressCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "UpdateSecurityGroupRuleDescriptionsIngress", {})
    .n("EC2Client", "UpdateSecurityGroupRuleDescriptionsIngressCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSecurityGroupRuleDescriptionsIngressCommand)
    .de(de_UpdateSecurityGroupRuleDescriptionsIngressCommand)
    .build() {
}

class WithdrawByoipCidrCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("AmazonEC2", "WithdrawByoipCidr", {})
    .n("EC2Client", "WithdrawByoipCidrCommand")
    .f(void 0, void 0)
    .ser(se_WithdrawByoipCidrCommand)
    .de(de_WithdrawByoipCidrCommand)
    .build() {
}

const commands = {
    AcceptAddressTransferCommand,
    AcceptCapacityReservationBillingOwnershipCommand,
    AcceptReservedInstancesExchangeQuoteCommand,
    AcceptTransitGatewayMulticastDomainAssociationsCommand,
    AcceptTransitGatewayPeeringAttachmentCommand,
    AcceptTransitGatewayVpcAttachmentCommand,
    AcceptVpcEndpointConnectionsCommand,
    AcceptVpcPeeringConnectionCommand,
    AdvertiseByoipCidrCommand,
    AllocateAddressCommand,
    AllocateHostsCommand,
    AllocateIpamPoolCidrCommand,
    ApplySecurityGroupsToClientVpnTargetNetworkCommand,
    AssignIpv6AddressesCommand,
    AssignPrivateIpAddressesCommand,
    AssignPrivateNatGatewayAddressCommand,
    AssociateAddressCommand,
    AssociateCapacityReservationBillingOwnerCommand,
    AssociateClientVpnTargetNetworkCommand,
    AssociateDhcpOptionsCommand,
    AssociateEnclaveCertificateIamRoleCommand,
    AssociateIamInstanceProfileCommand,
    AssociateInstanceEventWindowCommand,
    AssociateIpamByoasnCommand,
    AssociateIpamResourceDiscoveryCommand,
    AssociateNatGatewayAddressCommand,
    AssociateRouteServerCommand,
    AssociateRouteTableCommand,
    AssociateSecurityGroupVpcCommand,
    AssociateSubnetCidrBlockCommand,
    AssociateTransitGatewayMulticastDomainCommand,
    AssociateTransitGatewayPolicyTableCommand,
    AssociateTransitGatewayRouteTableCommand,
    AssociateTrunkInterfaceCommand,
    AssociateVpcCidrBlockCommand,
    AttachClassicLinkVpcCommand,
    AttachInternetGatewayCommand,
    AttachNetworkInterfaceCommand,
    AttachVerifiedAccessTrustProviderCommand,
    AttachVolumeCommand,
    AttachVpnGatewayCommand,
    AuthorizeClientVpnIngressCommand,
    AuthorizeSecurityGroupEgressCommand,
    AuthorizeSecurityGroupIngressCommand,
    BundleInstanceCommand,
    CancelBundleTaskCommand,
    CancelCapacityReservationCommand,
    CancelCapacityReservationFleetsCommand,
    CancelConversionTaskCommand,
    CancelDeclarativePoliciesReportCommand,
    CancelExportTaskCommand,
    CancelImageLaunchPermissionCommand,
    CancelImportTaskCommand,
    CancelReservedInstancesListingCommand,
    CancelSpotFleetRequestsCommand,
    CancelSpotInstanceRequestsCommand,
    ConfirmProductInstanceCommand,
    CopyFpgaImageCommand,
    CopyImageCommand,
    CopySnapshotCommand,
    CreateCapacityReservationCommand,
    CreateCapacityReservationBySplittingCommand,
    CreateCapacityReservationFleetCommand,
    CreateCarrierGatewayCommand,
    CreateClientVpnEndpointCommand,
    CreateClientVpnRouteCommand,
    CreateCoipCidrCommand,
    CreateCoipPoolCommand,
    CreateCustomerGatewayCommand,
    CreateDefaultSubnetCommand,
    CreateDefaultVpcCommand,
    CreateDelegateMacVolumeOwnershipTaskCommand,
    CreateDhcpOptionsCommand,
    CreateEgressOnlyInternetGatewayCommand,
    CreateFleetCommand,
    CreateFlowLogsCommand,
    CreateFpgaImageCommand,
    CreateImageCommand,
    CreateImageUsageReportCommand,
    CreateInstanceConnectEndpointCommand,
    CreateInstanceEventWindowCommand,
    CreateInstanceExportTaskCommand,
    CreateInternetGatewayCommand,
    CreateIpamCommand,
    CreateIpamExternalResourceVerificationTokenCommand,
    CreateIpamPoolCommand,
    CreateIpamResourceDiscoveryCommand,
    CreateIpamScopeCommand,
    CreateKeyPairCommand,
    CreateLaunchTemplateCommand,
    CreateLaunchTemplateVersionCommand,
    CreateLocalGatewayRouteCommand,
    CreateLocalGatewayRouteTableCommand,
    CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand,
    CreateLocalGatewayRouteTableVpcAssociationCommand,
    CreateLocalGatewayVirtualInterfaceCommand,
    CreateLocalGatewayVirtualInterfaceGroupCommand,
    CreateMacSystemIntegrityProtectionModificationTaskCommand,
    CreateManagedPrefixListCommand,
    CreateNatGatewayCommand,
    CreateNetworkAclCommand,
    CreateNetworkAclEntryCommand,
    CreateNetworkInsightsAccessScopeCommand,
    CreateNetworkInsightsPathCommand,
    CreateNetworkInterfaceCommand,
    CreateNetworkInterfacePermissionCommand,
    CreatePlacementGroupCommand,
    CreatePublicIpv4PoolCommand,
    CreateReplaceRootVolumeTaskCommand,
    CreateReservedInstancesListingCommand,
    CreateRestoreImageTaskCommand,
    CreateRouteCommand,
    CreateRouteServerCommand,
    CreateRouteServerEndpointCommand,
    CreateRouteServerPeerCommand,
    CreateRouteTableCommand,
    CreateSecurityGroupCommand,
    CreateSnapshotCommand,
    CreateSnapshotsCommand,
    CreateSpotDatafeedSubscriptionCommand,
    CreateStoreImageTaskCommand,
    CreateSubnetCommand,
    CreateSubnetCidrReservationCommand,
    CreateTagsCommand,
    CreateTrafficMirrorFilterCommand,
    CreateTrafficMirrorFilterRuleCommand,
    CreateTrafficMirrorSessionCommand,
    CreateTrafficMirrorTargetCommand,
    CreateTransitGatewayCommand,
    CreateTransitGatewayConnectCommand,
    CreateTransitGatewayConnectPeerCommand,
    CreateTransitGatewayMulticastDomainCommand,
    CreateTransitGatewayPeeringAttachmentCommand,
    CreateTransitGatewayPolicyTableCommand,
    CreateTransitGatewayPrefixListReferenceCommand,
    CreateTransitGatewayRouteCommand,
    CreateTransitGatewayRouteTableCommand,
    CreateTransitGatewayRouteTableAnnouncementCommand,
    CreateTransitGatewayVpcAttachmentCommand,
    CreateVerifiedAccessEndpointCommand,
    CreateVerifiedAccessGroupCommand,
    CreateVerifiedAccessInstanceCommand,
    CreateVerifiedAccessTrustProviderCommand,
    CreateVolumeCommand,
    CreateVpcCommand,
    CreateVpcBlockPublicAccessExclusionCommand,
    CreateVpcEndpointCommand,
    CreateVpcEndpointConnectionNotificationCommand,
    CreateVpcEndpointServiceConfigurationCommand,
    CreateVpcPeeringConnectionCommand,
    CreateVpnConnectionCommand,
    CreateVpnConnectionRouteCommand,
    CreateVpnGatewayCommand,
    DeleteCarrierGatewayCommand,
    DeleteClientVpnEndpointCommand,
    DeleteClientVpnRouteCommand,
    DeleteCoipCidrCommand,
    DeleteCoipPoolCommand,
    DeleteCustomerGatewayCommand,
    DeleteDhcpOptionsCommand,
    DeleteEgressOnlyInternetGatewayCommand,
    DeleteFleetsCommand,
    DeleteFlowLogsCommand,
    DeleteFpgaImageCommand,
    DeleteImageUsageReportCommand,
    DeleteInstanceConnectEndpointCommand,
    DeleteInstanceEventWindowCommand,
    DeleteInternetGatewayCommand,
    DeleteIpamCommand,
    DeleteIpamExternalResourceVerificationTokenCommand,
    DeleteIpamPoolCommand,
    DeleteIpamResourceDiscoveryCommand,
    DeleteIpamScopeCommand,
    DeleteKeyPairCommand,
    DeleteLaunchTemplateCommand,
    DeleteLaunchTemplateVersionsCommand,
    DeleteLocalGatewayRouteCommand,
    DeleteLocalGatewayRouteTableCommand,
    DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand,
    DeleteLocalGatewayRouteTableVpcAssociationCommand,
    DeleteLocalGatewayVirtualInterfaceCommand,
    DeleteLocalGatewayVirtualInterfaceGroupCommand,
    DeleteManagedPrefixListCommand,
    DeleteNatGatewayCommand,
    DeleteNetworkAclCommand,
    DeleteNetworkAclEntryCommand,
    DeleteNetworkInsightsAccessScopeCommand,
    DeleteNetworkInsightsAccessScopeAnalysisCommand,
    DeleteNetworkInsightsAnalysisCommand,
    DeleteNetworkInsightsPathCommand,
    DeleteNetworkInterfaceCommand,
    DeleteNetworkInterfacePermissionCommand,
    DeletePlacementGroupCommand,
    DeletePublicIpv4PoolCommand,
    DeleteQueuedReservedInstancesCommand,
    DeleteRouteCommand,
    DeleteRouteServerCommand,
    DeleteRouteServerEndpointCommand,
    DeleteRouteServerPeerCommand,
    DeleteRouteTableCommand,
    DeleteSecurityGroupCommand,
    DeleteSnapshotCommand,
    DeleteSpotDatafeedSubscriptionCommand,
    DeleteSubnetCommand,
    DeleteSubnetCidrReservationCommand,
    DeleteTagsCommand,
    DeleteTrafficMirrorFilterCommand,
    DeleteTrafficMirrorFilterRuleCommand,
    DeleteTrafficMirrorSessionCommand,
    DeleteTrafficMirrorTargetCommand,
    DeleteTransitGatewayCommand,
    DeleteTransitGatewayConnectCommand,
    DeleteTransitGatewayConnectPeerCommand,
    DeleteTransitGatewayMulticastDomainCommand,
    DeleteTransitGatewayPeeringAttachmentCommand,
    DeleteTransitGatewayPolicyTableCommand,
    DeleteTransitGatewayPrefixListReferenceCommand,
    DeleteTransitGatewayRouteCommand,
    DeleteTransitGatewayRouteTableCommand,
    DeleteTransitGatewayRouteTableAnnouncementCommand,
    DeleteTransitGatewayVpcAttachmentCommand,
    DeleteVerifiedAccessEndpointCommand,
    DeleteVerifiedAccessGroupCommand,
    DeleteVerifiedAccessInstanceCommand,
    DeleteVerifiedAccessTrustProviderCommand,
    DeleteVolumeCommand,
    DeleteVpcCommand,
    DeleteVpcBlockPublicAccessExclusionCommand,
    DeleteVpcEndpointConnectionNotificationsCommand,
    DeleteVpcEndpointsCommand,
    DeleteVpcEndpointServiceConfigurationsCommand,
    DeleteVpcPeeringConnectionCommand,
    DeleteVpnConnectionCommand,
    DeleteVpnConnectionRouteCommand,
    DeleteVpnGatewayCommand,
    DeprovisionByoipCidrCommand,
    DeprovisionIpamByoasnCommand,
    DeprovisionIpamPoolCidrCommand,
    DeprovisionPublicIpv4PoolCidrCommand,
    DeregisterImageCommand,
    DeregisterInstanceEventNotificationAttributesCommand,
    DeregisterTransitGatewayMulticastGroupMembersCommand,
    DeregisterTransitGatewayMulticastGroupSourcesCommand,
    DescribeAccountAttributesCommand,
    DescribeAddressesCommand,
    DescribeAddressesAttributeCommand,
    DescribeAddressTransfersCommand,
    DescribeAggregateIdFormatCommand,
    DescribeAvailabilityZonesCommand,
    DescribeAwsNetworkPerformanceMetricSubscriptionsCommand,
    DescribeBundleTasksCommand,
    DescribeByoipCidrsCommand,
    DescribeCapacityBlockExtensionHistoryCommand,
    DescribeCapacityBlockExtensionOfferingsCommand,
    DescribeCapacityBlockOfferingsCommand,
    DescribeCapacityBlocksCommand,
    DescribeCapacityBlockStatusCommand,
    DescribeCapacityReservationBillingRequestsCommand,
    DescribeCapacityReservationFleetsCommand,
    DescribeCapacityReservationsCommand,
    DescribeCarrierGatewaysCommand,
    DescribeClassicLinkInstancesCommand,
    DescribeClientVpnAuthorizationRulesCommand,
    DescribeClientVpnConnectionsCommand,
    DescribeClientVpnEndpointsCommand,
    DescribeClientVpnRoutesCommand,
    DescribeClientVpnTargetNetworksCommand,
    DescribeCoipPoolsCommand,
    DescribeConversionTasksCommand,
    DescribeCustomerGatewaysCommand,
    DescribeDeclarativePoliciesReportsCommand,
    DescribeDhcpOptionsCommand,
    DescribeEgressOnlyInternetGatewaysCommand,
    DescribeElasticGpusCommand,
    DescribeExportImageTasksCommand,
    DescribeExportTasksCommand,
    DescribeFastLaunchImagesCommand,
    DescribeFastSnapshotRestoresCommand,
    DescribeFleetHistoryCommand,
    DescribeFleetInstancesCommand,
    DescribeFleetsCommand,
    DescribeFlowLogsCommand,
    DescribeFpgaImageAttributeCommand,
    DescribeFpgaImagesCommand,
    DescribeHostReservationOfferingsCommand,
    DescribeHostReservationsCommand,
    DescribeHostsCommand,
    DescribeIamInstanceProfileAssociationsCommand,
    DescribeIdentityIdFormatCommand,
    DescribeIdFormatCommand,
    DescribeImageAttributeCommand,
    DescribeImageReferencesCommand,
    DescribeImagesCommand,
    DescribeImageUsageReportEntriesCommand,
    DescribeImageUsageReportsCommand,
    DescribeImportImageTasksCommand,
    DescribeImportSnapshotTasksCommand,
    DescribeInstanceAttributeCommand,
    DescribeInstanceConnectEndpointsCommand,
    DescribeInstanceCreditSpecificationsCommand,
    DescribeInstanceEventNotificationAttributesCommand,
    DescribeInstanceEventWindowsCommand,
    DescribeInstanceImageMetadataCommand,
    DescribeInstancesCommand,
    DescribeInstanceStatusCommand,
    DescribeInstanceTopologyCommand,
    DescribeInstanceTypeOfferingsCommand,
    DescribeInstanceTypesCommand,
    DescribeInternetGatewaysCommand,
    DescribeIpamByoasnCommand,
    DescribeIpamExternalResourceVerificationTokensCommand,
    DescribeIpamPoolsCommand,
    DescribeIpamResourceDiscoveriesCommand,
    DescribeIpamResourceDiscoveryAssociationsCommand,
    DescribeIpamsCommand,
    DescribeIpamScopesCommand,
    DescribeIpv6PoolsCommand,
    DescribeKeyPairsCommand,
    DescribeLaunchTemplatesCommand,
    DescribeLaunchTemplateVersionsCommand,
    DescribeLocalGatewayRouteTablesCommand,
    DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand,
    DescribeLocalGatewayRouteTableVpcAssociationsCommand,
    DescribeLocalGatewaysCommand,
    DescribeLocalGatewayVirtualInterfaceGroupsCommand,
    DescribeLocalGatewayVirtualInterfacesCommand,
    DescribeLockedSnapshotsCommand,
    DescribeMacHostsCommand,
    DescribeMacModificationTasksCommand,
    DescribeManagedPrefixListsCommand,
    DescribeMovingAddressesCommand,
    DescribeNatGatewaysCommand,
    DescribeNetworkAclsCommand,
    DescribeNetworkInsightsAccessScopeAnalysesCommand,
    DescribeNetworkInsightsAccessScopesCommand,
    DescribeNetworkInsightsAnalysesCommand,
    DescribeNetworkInsightsPathsCommand,
    DescribeNetworkInterfaceAttributeCommand,
    DescribeNetworkInterfacePermissionsCommand,
    DescribeNetworkInterfacesCommand,
    DescribeOutpostLagsCommand,
    DescribePlacementGroupsCommand,
    DescribePrefixListsCommand,
    DescribePrincipalIdFormatCommand,
    DescribePublicIpv4PoolsCommand,
    DescribeRegionsCommand,
    DescribeReplaceRootVolumeTasksCommand,
    DescribeReservedInstancesCommand,
    DescribeReservedInstancesListingsCommand,
    DescribeReservedInstancesModificationsCommand,
    DescribeReservedInstancesOfferingsCommand,
    DescribeRouteServerEndpointsCommand,
    DescribeRouteServerPeersCommand,
    DescribeRouteServersCommand,
    DescribeRouteTablesCommand,
    DescribeScheduledInstanceAvailabilityCommand,
    DescribeScheduledInstancesCommand,
    DescribeSecurityGroupReferencesCommand,
    DescribeSecurityGroupRulesCommand,
    DescribeSecurityGroupsCommand,
    DescribeSecurityGroupVpcAssociationsCommand,
    DescribeServiceLinkVirtualInterfacesCommand,
    DescribeSnapshotAttributeCommand,
    DescribeSnapshotsCommand,
    DescribeSnapshotTierStatusCommand,
    DescribeSpotDatafeedSubscriptionCommand,
    DescribeSpotFleetInstancesCommand,
    DescribeSpotFleetRequestHistoryCommand,
    DescribeSpotFleetRequestsCommand,
    DescribeSpotInstanceRequestsCommand,
    DescribeSpotPriceHistoryCommand,
    DescribeStaleSecurityGroupsCommand,
    DescribeStoreImageTasksCommand,
    DescribeSubnetsCommand,
    DescribeTagsCommand,
    DescribeTrafficMirrorFilterRulesCommand,
    DescribeTrafficMirrorFiltersCommand,
    DescribeTrafficMirrorSessionsCommand,
    DescribeTrafficMirrorTargetsCommand,
    DescribeTransitGatewayAttachmentsCommand,
    DescribeTransitGatewayConnectPeersCommand,
    DescribeTransitGatewayConnectsCommand,
    DescribeTransitGatewayMulticastDomainsCommand,
    DescribeTransitGatewayPeeringAttachmentsCommand,
    DescribeTransitGatewayPolicyTablesCommand,
    DescribeTransitGatewayRouteTableAnnouncementsCommand,
    DescribeTransitGatewayRouteTablesCommand,
    DescribeTransitGatewaysCommand,
    DescribeTransitGatewayVpcAttachmentsCommand,
    DescribeTrunkInterfaceAssociationsCommand,
    DescribeVerifiedAccessEndpointsCommand,
    DescribeVerifiedAccessGroupsCommand,
    DescribeVerifiedAccessInstanceLoggingConfigurationsCommand,
    DescribeVerifiedAccessInstancesCommand,
    DescribeVerifiedAccessTrustProvidersCommand,
    DescribeVolumeAttributeCommand,
    DescribeVolumesCommand,
    DescribeVolumesModificationsCommand,
    DescribeVolumeStatusCommand,
    DescribeVpcAttributeCommand,
    DescribeVpcBlockPublicAccessExclusionsCommand,
    DescribeVpcBlockPublicAccessOptionsCommand,
    DescribeVpcClassicLinkCommand,
    DescribeVpcClassicLinkDnsSupportCommand,
    DescribeVpcEndpointAssociationsCommand,
    DescribeVpcEndpointConnectionNotificationsCommand,
    DescribeVpcEndpointConnectionsCommand,
    DescribeVpcEndpointsCommand,
    DescribeVpcEndpointServiceConfigurationsCommand,
    DescribeVpcEndpointServicePermissionsCommand,
    DescribeVpcEndpointServicesCommand,
    DescribeVpcPeeringConnectionsCommand,
    DescribeVpcsCommand,
    DescribeVpnConnectionsCommand,
    DescribeVpnGatewaysCommand,
    DetachClassicLinkVpcCommand,
    DetachInternetGatewayCommand,
    DetachNetworkInterfaceCommand,
    DetachVerifiedAccessTrustProviderCommand,
    DetachVolumeCommand,
    DetachVpnGatewayCommand,
    DisableAddressTransferCommand,
    DisableAllowedImagesSettingsCommand,
    DisableAwsNetworkPerformanceMetricSubscriptionCommand,
    DisableEbsEncryptionByDefaultCommand,
    DisableFastLaunchCommand,
    DisableFastSnapshotRestoresCommand,
    DisableImageCommand,
    DisableImageBlockPublicAccessCommand,
    DisableImageDeprecationCommand,
    DisableImageDeregistrationProtectionCommand,
    DisableIpamOrganizationAdminAccountCommand,
    DisableRouteServerPropagationCommand,
    DisableSerialConsoleAccessCommand,
    DisableSnapshotBlockPublicAccessCommand,
    DisableTransitGatewayRouteTablePropagationCommand,
    DisableVgwRoutePropagationCommand,
    DisableVpcClassicLinkCommand,
    DisableVpcClassicLinkDnsSupportCommand,
    DisassociateAddressCommand,
    DisassociateCapacityReservationBillingOwnerCommand,
    DisassociateClientVpnTargetNetworkCommand,
    DisassociateEnclaveCertificateIamRoleCommand,
    DisassociateIamInstanceProfileCommand,
    DisassociateInstanceEventWindowCommand,
    DisassociateIpamByoasnCommand,
    DisassociateIpamResourceDiscoveryCommand,
    DisassociateNatGatewayAddressCommand,
    DisassociateRouteServerCommand,
    DisassociateRouteTableCommand,
    DisassociateSecurityGroupVpcCommand,
    DisassociateSubnetCidrBlockCommand,
    DisassociateTransitGatewayMulticastDomainCommand,
    DisassociateTransitGatewayPolicyTableCommand,
    DisassociateTransitGatewayRouteTableCommand,
    DisassociateTrunkInterfaceCommand,
    DisassociateVpcCidrBlockCommand,
    EnableAddressTransferCommand,
    EnableAllowedImagesSettingsCommand,
    EnableAwsNetworkPerformanceMetricSubscriptionCommand,
    EnableEbsEncryptionByDefaultCommand,
    EnableFastLaunchCommand,
    EnableFastSnapshotRestoresCommand,
    EnableImageCommand,
    EnableImageBlockPublicAccessCommand,
    EnableImageDeprecationCommand,
    EnableImageDeregistrationProtectionCommand,
    EnableIpamOrganizationAdminAccountCommand,
    EnableReachabilityAnalyzerOrganizationSharingCommand,
    EnableRouteServerPropagationCommand,
    EnableSerialConsoleAccessCommand,
    EnableSnapshotBlockPublicAccessCommand,
    EnableTransitGatewayRouteTablePropagationCommand,
    EnableVgwRoutePropagationCommand,
    EnableVolumeIOCommand,
    EnableVpcClassicLinkCommand,
    EnableVpcClassicLinkDnsSupportCommand,
    ExportClientVpnClientCertificateRevocationListCommand,
    ExportClientVpnClientConfigurationCommand,
    ExportImageCommand,
    ExportTransitGatewayRoutesCommand,
    ExportVerifiedAccessInstanceClientConfigurationCommand,
    GetActiveVpnTunnelStatusCommand,
    GetAllowedImagesSettingsCommand,
    GetAssociatedEnclaveCertificateIamRolesCommand,
    GetAssociatedIpv6PoolCidrsCommand,
    GetAwsNetworkPerformanceDataCommand,
    GetCapacityReservationUsageCommand,
    GetCoipPoolUsageCommand,
    GetConsoleOutputCommand,
    GetConsoleScreenshotCommand,
    GetDeclarativePoliciesReportSummaryCommand,
    GetDefaultCreditSpecificationCommand,
    GetEbsDefaultKmsKeyIdCommand,
    GetEbsEncryptionByDefaultCommand,
    GetFlowLogsIntegrationTemplateCommand,
    GetGroupsForCapacityReservationCommand,
    GetHostReservationPurchasePreviewCommand,
    GetImageBlockPublicAccessStateCommand,
    GetInstanceMetadataDefaultsCommand,
    GetInstanceTpmEkPubCommand,
    GetInstanceTypesFromInstanceRequirementsCommand,
    GetInstanceUefiDataCommand,
    GetIpamAddressHistoryCommand,
    GetIpamDiscoveredAccountsCommand,
    GetIpamDiscoveredPublicAddressesCommand,
    GetIpamDiscoveredResourceCidrsCommand,
    GetIpamPoolAllocationsCommand,
    GetIpamPoolCidrsCommand,
    GetIpamResourceCidrsCommand,
    GetLaunchTemplateDataCommand,
    GetManagedPrefixListAssociationsCommand,
    GetManagedPrefixListEntriesCommand,
    GetNetworkInsightsAccessScopeAnalysisFindingsCommand,
    GetNetworkInsightsAccessScopeContentCommand,
    GetPasswordDataCommand,
    GetReservedInstancesExchangeQuoteCommand,
    GetRouteServerAssociationsCommand,
    GetRouteServerPropagationsCommand,
    GetRouteServerRoutingDatabaseCommand,
    GetSecurityGroupsForVpcCommand,
    GetSerialConsoleAccessStatusCommand,
    GetSnapshotBlockPublicAccessStateCommand,
    GetSpotPlacementScoresCommand,
    GetSubnetCidrReservationsCommand,
    GetTransitGatewayAttachmentPropagationsCommand,
    GetTransitGatewayMulticastDomainAssociationsCommand,
    GetTransitGatewayPolicyTableAssociationsCommand,
    GetTransitGatewayPolicyTableEntriesCommand,
    GetTransitGatewayPrefixListReferencesCommand,
    GetTransitGatewayRouteTableAssociationsCommand,
    GetTransitGatewayRouteTablePropagationsCommand,
    GetVerifiedAccessEndpointPolicyCommand,
    GetVerifiedAccessEndpointTargetsCommand,
    GetVerifiedAccessGroupPolicyCommand,
    GetVpnConnectionDeviceSampleConfigurationCommand,
    GetVpnConnectionDeviceTypesCommand,
    GetVpnTunnelReplacementStatusCommand,
    ImportClientVpnClientCertificateRevocationListCommand,
    ImportImageCommand,
    ImportInstanceCommand,
    ImportKeyPairCommand,
    ImportSnapshotCommand,
    ImportVolumeCommand,
    ListImagesInRecycleBinCommand,
    ListSnapshotsInRecycleBinCommand,
    LockSnapshotCommand,
    ModifyAddressAttributeCommand,
    ModifyAvailabilityZoneGroupCommand,
    ModifyCapacityReservationCommand,
    ModifyCapacityReservationFleetCommand,
    ModifyClientVpnEndpointCommand,
    ModifyDefaultCreditSpecificationCommand,
    ModifyEbsDefaultKmsKeyIdCommand,
    ModifyFleetCommand,
    ModifyFpgaImageAttributeCommand,
    ModifyHostsCommand,
    ModifyIdentityIdFormatCommand,
    ModifyIdFormatCommand,
    ModifyImageAttributeCommand,
    ModifyInstanceAttributeCommand,
    ModifyInstanceCapacityReservationAttributesCommand,
    ModifyInstanceConnectEndpointCommand,
    ModifyInstanceCpuOptionsCommand,
    ModifyInstanceCreditSpecificationCommand,
    ModifyInstanceEventStartTimeCommand,
    ModifyInstanceEventWindowCommand,
    ModifyInstanceMaintenanceOptionsCommand,
    ModifyInstanceMetadataDefaultsCommand,
    ModifyInstanceMetadataOptionsCommand,
    ModifyInstanceNetworkPerformanceOptionsCommand,
    ModifyInstancePlacementCommand,
    ModifyIpamCommand,
    ModifyIpamPoolCommand,
    ModifyIpamResourceCidrCommand,
    ModifyIpamResourceDiscoveryCommand,
    ModifyIpamScopeCommand,
    ModifyLaunchTemplateCommand,
    ModifyLocalGatewayRouteCommand,
    ModifyManagedPrefixListCommand,
    ModifyNetworkInterfaceAttributeCommand,
    ModifyPrivateDnsNameOptionsCommand,
    ModifyPublicIpDnsNameOptionsCommand,
    ModifyReservedInstancesCommand,
    ModifyRouteServerCommand,
    ModifySecurityGroupRulesCommand,
    ModifySnapshotAttributeCommand,
    ModifySnapshotTierCommand,
    ModifySpotFleetRequestCommand,
    ModifySubnetAttributeCommand,
    ModifyTrafficMirrorFilterNetworkServicesCommand,
    ModifyTrafficMirrorFilterRuleCommand,
    ModifyTrafficMirrorSessionCommand,
    ModifyTransitGatewayCommand,
    ModifyTransitGatewayPrefixListReferenceCommand,
    ModifyTransitGatewayVpcAttachmentCommand,
    ModifyVerifiedAccessEndpointCommand,
    ModifyVerifiedAccessEndpointPolicyCommand,
    ModifyVerifiedAccessGroupCommand,
    ModifyVerifiedAccessGroupPolicyCommand,
    ModifyVerifiedAccessInstanceCommand,
    ModifyVerifiedAccessInstanceLoggingConfigurationCommand,
    ModifyVerifiedAccessTrustProviderCommand,
    ModifyVolumeCommand,
    ModifyVolumeAttributeCommand,
    ModifyVpcAttributeCommand,
    ModifyVpcBlockPublicAccessExclusionCommand,
    ModifyVpcBlockPublicAccessOptionsCommand,
    ModifyVpcEndpointCommand,
    ModifyVpcEndpointConnectionNotificationCommand,
    ModifyVpcEndpointServiceConfigurationCommand,
    ModifyVpcEndpointServicePayerResponsibilityCommand,
    ModifyVpcEndpointServicePermissionsCommand,
    ModifyVpcPeeringConnectionOptionsCommand,
    ModifyVpcTenancyCommand,
    ModifyVpnConnectionCommand,
    ModifyVpnConnectionOptionsCommand,
    ModifyVpnTunnelCertificateCommand,
    ModifyVpnTunnelOptionsCommand,
    MonitorInstancesCommand,
    MoveAddressToVpcCommand,
    MoveByoipCidrToIpamCommand,
    MoveCapacityReservationInstancesCommand,
    ProvisionByoipCidrCommand,
    ProvisionIpamByoasnCommand,
    ProvisionIpamPoolCidrCommand,
    ProvisionPublicIpv4PoolCidrCommand,
    PurchaseCapacityBlockCommand,
    PurchaseCapacityBlockExtensionCommand,
    PurchaseHostReservationCommand,
    PurchaseReservedInstancesOfferingCommand,
    PurchaseScheduledInstancesCommand,
    RebootInstancesCommand,
    RegisterImageCommand,
    RegisterInstanceEventNotificationAttributesCommand,
    RegisterTransitGatewayMulticastGroupMembersCommand,
    RegisterTransitGatewayMulticastGroupSourcesCommand,
    RejectCapacityReservationBillingOwnershipCommand,
    RejectTransitGatewayMulticastDomainAssociationsCommand,
    RejectTransitGatewayPeeringAttachmentCommand,
    RejectTransitGatewayVpcAttachmentCommand,
    RejectVpcEndpointConnectionsCommand,
    RejectVpcPeeringConnectionCommand,
    ReleaseAddressCommand,
    ReleaseHostsCommand,
    ReleaseIpamPoolAllocationCommand,
    ReplaceIamInstanceProfileAssociationCommand,
    ReplaceImageCriteriaInAllowedImagesSettingsCommand,
    ReplaceNetworkAclAssociationCommand,
    ReplaceNetworkAclEntryCommand,
    ReplaceRouteCommand,
    ReplaceRouteTableAssociationCommand,
    ReplaceTransitGatewayRouteCommand,
    ReplaceVpnTunnelCommand,
    ReportInstanceStatusCommand,
    RequestSpotFleetCommand,
    RequestSpotInstancesCommand,
    ResetAddressAttributeCommand,
    ResetEbsDefaultKmsKeyIdCommand,
    ResetFpgaImageAttributeCommand,
    ResetImageAttributeCommand,
    ResetInstanceAttributeCommand,
    ResetNetworkInterfaceAttributeCommand,
    ResetSnapshotAttributeCommand,
    RestoreAddressToClassicCommand,
    RestoreImageFromRecycleBinCommand,
    RestoreManagedPrefixListVersionCommand,
    RestoreSnapshotFromRecycleBinCommand,
    RestoreSnapshotTierCommand,
    RevokeClientVpnIngressCommand,
    RevokeSecurityGroupEgressCommand,
    RevokeSecurityGroupIngressCommand,
    RunInstancesCommand,
    RunScheduledInstancesCommand,
    SearchLocalGatewayRoutesCommand,
    SearchTransitGatewayMulticastGroupsCommand,
    SearchTransitGatewayRoutesCommand,
    SendDiagnosticInterruptCommand,
    StartDeclarativePoliciesReportCommand,
    StartInstancesCommand,
    StartNetworkInsightsAccessScopeAnalysisCommand,
    StartNetworkInsightsAnalysisCommand,
    StartVpcEndpointServicePrivateDnsVerificationCommand,
    StopInstancesCommand,
    TerminateClientVpnConnectionsCommand,
    TerminateInstancesCommand,
    UnassignIpv6AddressesCommand,
    UnassignPrivateIpAddressesCommand,
    UnassignPrivateNatGatewayAddressCommand,
    UnlockSnapshotCommand,
    UnmonitorInstancesCommand,
    UpdateSecurityGroupRuleDescriptionsEgressCommand,
    UpdateSecurityGroupRuleDescriptionsIngressCommand,
    WithdrawByoipCidrCommand,
};
class EC2 extends EC2Client {
}
smithyClient.createAggregatedClient(commands, EC2);

const paginateDescribeAddressTransfers = core.createPaginator(EC2Client, DescribeAddressTransfersCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeAddressesAttribute = core.createPaginator(EC2Client, DescribeAddressesAttributeCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeAwsNetworkPerformanceMetricSubscriptions = core.createPaginator(EC2Client, DescribeAwsNetworkPerformanceMetricSubscriptionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeByoipCidrs = core.createPaginator(EC2Client, DescribeByoipCidrsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityBlockExtensionHistory = core.createPaginator(EC2Client, DescribeCapacityBlockExtensionHistoryCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityBlockExtensionOfferings = core.createPaginator(EC2Client, DescribeCapacityBlockExtensionOfferingsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityBlockOfferings = core.createPaginator(EC2Client, DescribeCapacityBlockOfferingsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityBlockStatus = core.createPaginator(EC2Client, DescribeCapacityBlockStatusCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityBlocks = core.createPaginator(EC2Client, DescribeCapacityBlocksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityReservationBillingRequests = core.createPaginator(EC2Client, DescribeCapacityReservationBillingRequestsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityReservationFleets = core.createPaginator(EC2Client, DescribeCapacityReservationFleetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCapacityReservations = core.createPaginator(EC2Client, DescribeCapacityReservationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCarrierGateways = core.createPaginator(EC2Client, DescribeCarrierGatewaysCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeClassicLinkInstances = core.createPaginator(EC2Client, DescribeClassicLinkInstancesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeClientVpnAuthorizationRules = core.createPaginator(EC2Client, DescribeClientVpnAuthorizationRulesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeClientVpnConnections = core.createPaginator(EC2Client, DescribeClientVpnConnectionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeClientVpnEndpoints = core.createPaginator(EC2Client, DescribeClientVpnEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeClientVpnRoutes = core.createPaginator(EC2Client, DescribeClientVpnRoutesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeClientVpnTargetNetworks = core.createPaginator(EC2Client, DescribeClientVpnTargetNetworksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeCoipPools = core.createPaginator(EC2Client, DescribeCoipPoolsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeDhcpOptions = core.createPaginator(EC2Client, DescribeDhcpOptionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeEgressOnlyInternetGateways = core.createPaginator(EC2Client, DescribeEgressOnlyInternetGatewaysCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeExportImageTasks = core.createPaginator(EC2Client, DescribeExportImageTasksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeFastLaunchImages = core.createPaginator(EC2Client, DescribeFastLaunchImagesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeFastSnapshotRestores = core.createPaginator(EC2Client, DescribeFastSnapshotRestoresCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeFleets = core.createPaginator(EC2Client, DescribeFleetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeFlowLogs = core.createPaginator(EC2Client, DescribeFlowLogsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeFpgaImages = core.createPaginator(EC2Client, DescribeFpgaImagesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeHostReservationOfferings = core.createPaginator(EC2Client, DescribeHostReservationOfferingsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeHostReservations = core.createPaginator(EC2Client, DescribeHostReservationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeHosts = core.createPaginator(EC2Client, DescribeHostsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIamInstanceProfileAssociations = core.createPaginator(EC2Client, DescribeIamInstanceProfileAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeImageReferences = core.createPaginator(EC2Client, DescribeImageReferencesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeImageUsageReportEntries = core.createPaginator(EC2Client, DescribeImageUsageReportEntriesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeImageUsageReports = core.createPaginator(EC2Client, DescribeImageUsageReportsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeImages = core.createPaginator(EC2Client, DescribeImagesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeImportImageTasks = core.createPaginator(EC2Client, DescribeImportImageTasksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeImportSnapshotTasks = core.createPaginator(EC2Client, DescribeImportSnapshotTasksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceConnectEndpoints = core.createPaginator(EC2Client, DescribeInstanceConnectEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceCreditSpecifications = core.createPaginator(EC2Client, DescribeInstanceCreditSpecificationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceEventWindows = core.createPaginator(EC2Client, DescribeInstanceEventWindowsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceImageMetadata = core.createPaginator(EC2Client, DescribeInstanceImageMetadataCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceStatus = core.createPaginator(EC2Client, DescribeInstanceStatusCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceTopology = core.createPaginator(EC2Client, DescribeInstanceTopologyCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceTypeOfferings = core.createPaginator(EC2Client, DescribeInstanceTypeOfferingsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstanceTypes = core.createPaginator(EC2Client, DescribeInstanceTypesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInstances = core.createPaginator(EC2Client, DescribeInstancesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeInternetGateways = core.createPaginator(EC2Client, DescribeInternetGatewaysCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIpamPools = core.createPaginator(EC2Client, DescribeIpamPoolsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIpamResourceDiscoveries = core.createPaginator(EC2Client, DescribeIpamResourceDiscoveriesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIpamResourceDiscoveryAssociations = core.createPaginator(EC2Client, DescribeIpamResourceDiscoveryAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIpamScopes = core.createPaginator(EC2Client, DescribeIpamScopesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIpams = core.createPaginator(EC2Client, DescribeIpamsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeIpv6Pools = core.createPaginator(EC2Client, DescribeIpv6PoolsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLaunchTemplateVersions = core.createPaginator(EC2Client, DescribeLaunchTemplateVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLaunchTemplates = core.createPaginator(EC2Client, DescribeLaunchTemplatesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = core.createPaginator(EC2Client, DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLocalGatewayRouteTableVpcAssociations = core.createPaginator(EC2Client, DescribeLocalGatewayRouteTableVpcAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLocalGatewayRouteTables = core.createPaginator(EC2Client, DescribeLocalGatewayRouteTablesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLocalGatewayVirtualInterfaceGroups = core.createPaginator(EC2Client, DescribeLocalGatewayVirtualInterfaceGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLocalGatewayVirtualInterfaces = core.createPaginator(EC2Client, DescribeLocalGatewayVirtualInterfacesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeLocalGateways = core.createPaginator(EC2Client, DescribeLocalGatewaysCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeMacHosts = core.createPaginator(EC2Client, DescribeMacHostsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeMacModificationTasks = core.createPaginator(EC2Client, DescribeMacModificationTasksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeManagedPrefixLists = core.createPaginator(EC2Client, DescribeManagedPrefixListsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeMovingAddresses = core.createPaginator(EC2Client, DescribeMovingAddressesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNatGateways = core.createPaginator(EC2Client, DescribeNatGatewaysCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkAcls = core.createPaginator(EC2Client, DescribeNetworkAclsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkInsightsAccessScopeAnalyses = core.createPaginator(EC2Client, DescribeNetworkInsightsAccessScopeAnalysesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkInsightsAccessScopes = core.createPaginator(EC2Client, DescribeNetworkInsightsAccessScopesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkInsightsAnalyses = core.createPaginator(EC2Client, DescribeNetworkInsightsAnalysesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkInsightsPaths = core.createPaginator(EC2Client, DescribeNetworkInsightsPathsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkInterfacePermissions = core.createPaginator(EC2Client, DescribeNetworkInterfacePermissionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeNetworkInterfaces = core.createPaginator(EC2Client, DescribeNetworkInterfacesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribePrefixLists = core.createPaginator(EC2Client, DescribePrefixListsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribePrincipalIdFormat = core.createPaginator(EC2Client, DescribePrincipalIdFormatCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribePublicIpv4Pools = core.createPaginator(EC2Client, DescribePublicIpv4PoolsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeReplaceRootVolumeTasks = core.createPaginator(EC2Client, DescribeReplaceRootVolumeTasksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeReservedInstancesModifications = core.createPaginator(EC2Client, DescribeReservedInstancesModificationsCommand, "NextToken", "NextToken", "");

const paginateDescribeReservedInstancesOfferings = core.createPaginator(EC2Client, DescribeReservedInstancesOfferingsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeRouteServerEndpoints = core.createPaginator(EC2Client, DescribeRouteServerEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeRouteServerPeers = core.createPaginator(EC2Client, DescribeRouteServerPeersCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeRouteServers = core.createPaginator(EC2Client, DescribeRouteServersCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeRouteTables = core.createPaginator(EC2Client, DescribeRouteTablesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeScheduledInstanceAvailability = core.createPaginator(EC2Client, DescribeScheduledInstanceAvailabilityCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeScheduledInstances = core.createPaginator(EC2Client, DescribeScheduledInstancesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSecurityGroupRules = core.createPaginator(EC2Client, DescribeSecurityGroupRulesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSecurityGroupVpcAssociations = core.createPaginator(EC2Client, DescribeSecurityGroupVpcAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSecurityGroups = core.createPaginator(EC2Client, DescribeSecurityGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSnapshotTierStatus = core.createPaginator(EC2Client, DescribeSnapshotTierStatusCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSnapshots = core.createPaginator(EC2Client, DescribeSnapshotsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSpotFleetRequests = core.createPaginator(EC2Client, DescribeSpotFleetRequestsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSpotInstanceRequests = core.createPaginator(EC2Client, DescribeSpotInstanceRequestsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSpotPriceHistory = core.createPaginator(EC2Client, DescribeSpotPriceHistoryCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeStaleSecurityGroups = core.createPaginator(EC2Client, DescribeStaleSecurityGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeStoreImageTasks = core.createPaginator(EC2Client, DescribeStoreImageTasksCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeSubnets = core.createPaginator(EC2Client, DescribeSubnetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTags = core.createPaginator(EC2Client, DescribeTagsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTrafficMirrorFilters = core.createPaginator(EC2Client, DescribeTrafficMirrorFiltersCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTrafficMirrorSessions = core.createPaginator(EC2Client, DescribeTrafficMirrorSessionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTrafficMirrorTargets = core.createPaginator(EC2Client, DescribeTrafficMirrorTargetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayAttachments = core.createPaginator(EC2Client, DescribeTransitGatewayAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayConnectPeers = core.createPaginator(EC2Client, DescribeTransitGatewayConnectPeersCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayConnects = core.createPaginator(EC2Client, DescribeTransitGatewayConnectsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayMulticastDomains = core.createPaginator(EC2Client, DescribeTransitGatewayMulticastDomainsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayPeeringAttachments = core.createPaginator(EC2Client, DescribeTransitGatewayPeeringAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayPolicyTables = core.createPaginator(EC2Client, DescribeTransitGatewayPolicyTablesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayRouteTableAnnouncements = core.createPaginator(EC2Client, DescribeTransitGatewayRouteTableAnnouncementsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayRouteTables = core.createPaginator(EC2Client, DescribeTransitGatewayRouteTablesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGatewayVpcAttachments = core.createPaginator(EC2Client, DescribeTransitGatewayVpcAttachmentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTransitGateways = core.createPaginator(EC2Client, DescribeTransitGatewaysCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeTrunkInterfaceAssociations = core.createPaginator(EC2Client, DescribeTrunkInterfaceAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVerifiedAccessEndpoints = core.createPaginator(EC2Client, DescribeVerifiedAccessEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVerifiedAccessGroups = core.createPaginator(EC2Client, DescribeVerifiedAccessGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVerifiedAccessInstanceLoggingConfigurations = core.createPaginator(EC2Client, DescribeVerifiedAccessInstanceLoggingConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVerifiedAccessInstances = core.createPaginator(EC2Client, DescribeVerifiedAccessInstancesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVerifiedAccessTrustProviders = core.createPaginator(EC2Client, DescribeVerifiedAccessTrustProvidersCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVolumeStatus = core.createPaginator(EC2Client, DescribeVolumeStatusCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVolumesModifications = core.createPaginator(EC2Client, DescribeVolumesModificationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVolumes = core.createPaginator(EC2Client, DescribeVolumesCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcClassicLinkDnsSupport = core.createPaginator(EC2Client, DescribeVpcClassicLinkDnsSupportCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcEndpointConnectionNotifications = core.createPaginator(EC2Client, DescribeVpcEndpointConnectionNotificationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcEndpointConnections = core.createPaginator(EC2Client, DescribeVpcEndpointConnectionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcEndpointServiceConfigurations = core.createPaginator(EC2Client, DescribeVpcEndpointServiceConfigurationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcEndpointServicePermissions = core.createPaginator(EC2Client, DescribeVpcEndpointServicePermissionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcEndpoints = core.createPaginator(EC2Client, DescribeVpcEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcPeeringConnections = core.createPaginator(EC2Client, DescribeVpcPeeringConnectionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateDescribeVpcs = core.createPaginator(EC2Client, DescribeVpcsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetAssociatedIpv6PoolCidrs = core.createPaginator(EC2Client, GetAssociatedIpv6PoolCidrsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetAwsNetworkPerformanceData = core.createPaginator(EC2Client, GetAwsNetworkPerformanceDataCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetGroupsForCapacityReservation = core.createPaginator(EC2Client, GetGroupsForCapacityReservationCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetInstanceTypesFromInstanceRequirements = core.createPaginator(EC2Client, GetInstanceTypesFromInstanceRequirementsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetIpamAddressHistory = core.createPaginator(EC2Client, GetIpamAddressHistoryCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetIpamDiscoveredAccounts = core.createPaginator(EC2Client, GetIpamDiscoveredAccountsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetIpamDiscoveredResourceCidrs = core.createPaginator(EC2Client, GetIpamDiscoveredResourceCidrsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetIpamPoolAllocations = core.createPaginator(EC2Client, GetIpamPoolAllocationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetIpamPoolCidrs = core.createPaginator(EC2Client, GetIpamPoolCidrsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetIpamResourceCidrs = core.createPaginator(EC2Client, GetIpamResourceCidrsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetManagedPrefixListAssociations = core.createPaginator(EC2Client, GetManagedPrefixListAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetManagedPrefixListEntries = core.createPaginator(EC2Client, GetManagedPrefixListEntriesCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetNetworkInsightsAccessScopeAnalysisFindings = core.createPaginator(EC2Client, GetNetworkInsightsAccessScopeAnalysisFindingsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetSecurityGroupsForVpc = core.createPaginator(EC2Client, GetSecurityGroupsForVpcCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetSpotPlacementScores = core.createPaginator(EC2Client, GetSpotPlacementScoresCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTransitGatewayAttachmentPropagations = core.createPaginator(EC2Client, GetTransitGatewayAttachmentPropagationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTransitGatewayMulticastDomainAssociations = core.createPaginator(EC2Client, GetTransitGatewayMulticastDomainAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTransitGatewayPolicyTableAssociations = core.createPaginator(EC2Client, GetTransitGatewayPolicyTableAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTransitGatewayPrefixListReferences = core.createPaginator(EC2Client, GetTransitGatewayPrefixListReferencesCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTransitGatewayRouteTableAssociations = core.createPaginator(EC2Client, GetTransitGatewayRouteTableAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetTransitGatewayRouteTablePropagations = core.createPaginator(EC2Client, GetTransitGatewayRouteTablePropagationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateGetVpnConnectionDeviceTypes = core.createPaginator(EC2Client, GetVpnConnectionDeviceTypesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListImagesInRecycleBin = core.createPaginator(EC2Client, ListImagesInRecycleBinCommand, "NextToken", "NextToken", "MaxResults");

const paginateListSnapshotsInRecycleBin = core.createPaginator(EC2Client, ListSnapshotsInRecycleBinCommand, "NextToken", "NextToken", "MaxResults");

const paginateSearchLocalGatewayRoutes = core.createPaginator(EC2Client, SearchLocalGatewayRoutesCommand, "NextToken", "NextToken", "MaxResults");

const paginateSearchTransitGatewayMulticastGroups = core.createPaginator(EC2Client, SearchTransitGatewayMulticastGroupsCommand, "NextToken", "NextToken", "MaxResults");

const checkState$C = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeBundleTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.BundleTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "complete";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.BundleTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForBundleTaskComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$C);
};
const waitUntilBundleTaskComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$C);
    return utilWaiter.checkExceptions(result);
};

const checkState$B = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeConversionTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ConversionTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "cancelled";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForConversionTaskCancelled = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$B);
};
const waitUntilConversionTaskCancelled = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$B);
    return utilWaiter.checkExceptions(result);
};

const checkState$A = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeConversionTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ConversionTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "completed";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ConversionTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "cancelled") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ConversionTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "cancelling") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForConversionTaskCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$A);
};
const waitUntilConversionTaskCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$A);
    return utilWaiter.checkExceptions(result);
};

const checkState$z = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeConversionTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ConversionTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "deleted";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForConversionTaskDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$z);
};
const waitUntilConversionTaskDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$z);
    return utilWaiter.checkExceptions(result);
};

const checkState$y = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeCustomerGatewaysCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.CustomerGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.CustomerGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleted") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.CustomerGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleting") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForCustomerGatewayAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$y);
};
const waitUntilCustomerGatewayAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$y);
    return utilWaiter.checkExceptions(result);
};

const checkState$x = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeExportTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ExportTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "cancelled";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForExportTaskCancelled = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$x);
};
const waitUntilExportTaskCancelled = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$x);
    return utilWaiter.checkExceptions(result);
};

const checkState$w = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeExportTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ExportTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "completed";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForExportTaskCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$w);
};
const waitUntilExportTaskCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$w);
    return utilWaiter.checkExceptions(result);
};

const checkState$v = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImagesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Images);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Images);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$v);
};
const waitUntilImageAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$v);
    return utilWaiter.checkExceptions(result);
};

const checkState$u = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImagesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Images);
                return flat_1.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidAMIID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageExists = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$u);
};
const waitUntilImageExists = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$u);
    return utilWaiter.checkExceptions(result);
};

const checkState$t = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageUsageReportsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ImageUsageReports);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ImageUsageReports);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageUsageReportAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$t);
};
const waitUntilImageUsageReportAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$t);
    return utilWaiter.checkExceptions(result);
};

const checkState$s = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInstancesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                return flat_1.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidInstanceID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInstanceExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$s);
};
const waitUntilInstanceExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$s);
    return utilWaiter.checkExceptions(result);
};

const checkState$r = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInstancesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            let allStringEq_8 = returnComparator().length > 0;
            for (const element_7 of returnComparator()) {
                allStringEq_8 = allStringEq_8 && element_7 == "running";
            }
            if (allStringEq_8) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "shutting-down") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "terminated") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "stopping") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidInstanceID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInstanceRunning = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$r);
};
const waitUntilInstanceRunning = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$r);
    return utilWaiter.checkExceptions(result);
};

const checkState$q = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInstanceStatusCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.InstanceStatuses);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.InstanceStatus.Status;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "ok";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidInstanceID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInstanceStatusOk = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$q);
};
const waitUntilInstanceStatusOk = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$q);
    return utilWaiter.checkExceptions(result);
};

const checkState$p = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInstancesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            let allStringEq_8 = returnComparator().length > 0;
            for (const element_7 of returnComparator()) {
                allStringEq_8 = allStringEq_8 && element_7 == "stopped";
            }
            if (allStringEq_8) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "pending") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "terminated") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInstanceStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$p);
};
const waitUntilInstanceStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$p);
    return utilWaiter.checkExceptions(result);
};

const checkState$o = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInstancesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            let allStringEq_8 = returnComparator().length > 0;
            for (const element_7 of returnComparator()) {
                allStringEq_8 = allStringEq_8 && element_7 == "terminated";
            }
            if (allStringEq_8) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "pending") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Reservations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Instances;
                });
                const flat_4 = [].concat(...projection_3);
                const projection_6 = flat_4.map((element_5) => {
                    return element_5.State.Name;
                });
                return projection_6;
            };
            for (const anyStringEq_7 of returnComparator()) {
                if (anyStringEq_7 == "stopping") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInstanceTerminated = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$o);
};
const waitUntilInstanceTerminated = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$o);
    return utilWaiter.checkExceptions(result);
};

const checkState$n = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInternetGatewaysCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.InternetGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.InternetGatewayId;
                });
                return projection_3.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidInternetGateway.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForInternetGatewayExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$n);
};
const waitUntilInternetGatewayExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$n);
    return utilWaiter.checkExceptions(result);
};

const checkState$m = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeKeyPairsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.KeyPairs);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.KeyName;
                });
                return projection_3.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidKeyPair.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForKeyPairExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$m);
};
const waitUntilKeyPairExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$m);
    return utilWaiter.checkExceptions(result);
};

const checkState$l = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeNatGatewaysCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.NatGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.NatGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.NatGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleting") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.NatGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleted") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NatGatewayNotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForNatGatewayAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$l);
};
const waitUntilNatGatewayAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$l);
    return utilWaiter.checkExceptions(result);
};

const checkState$k = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeNatGatewaysCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.NatGateways);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "deleted";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NatGatewayNotFound") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForNatGatewayDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$k);
};
const waitUntilNatGatewayDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$k);
    return utilWaiter.checkExceptions(result);
};

const checkState$j = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeNetworkInterfacesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.NetworkInterfaces);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidNetworkInterfaceID.NotFound") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForNetworkInterfaceAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 20, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$j);
};
const waitUntilNetworkInterfaceAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 20, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$j);
    return utilWaiter.checkExceptions(result);
};

const checkState$i = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImportSnapshotTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ImportSnapshotTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.SnapshotTaskDetail.Status;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "completed";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.ImportSnapshotTasks);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.SnapshotTaskDetail.Status;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "error") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSnapshotImported = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$i);
};
const waitUntilSnapshotImported = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$i);
    return utilWaiter.checkExceptions(result);
};

const checkState$h = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeSecurityGroupsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroups);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.GroupId;
                });
                return projection_3.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidGroup.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSecurityGroupExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$h);
};
const waitUntilSecurityGroupExists = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$h);
    return utilWaiter.checkExceptions(result);
};

const checkState$g = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeSecurityGroupVpcAssociationsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "associated";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "associating") {
                    return { state: utilWaiter.WaiterState.RETRY, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "association-failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSecurityGroupVpcAssociationAssociated = async (params, input) => {
    const serviceDefaults = { minDelay: 10, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$g);
};
const waitUntilSecurityGroupVpcAssociationAssociated = async (params, input) => {
    const serviceDefaults = { minDelay: 10, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$g);
    return utilWaiter.checkExceptions(result);
};

const checkState$f = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeSecurityGroupVpcAssociationsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "disassociated";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "disassociating") {
                    return { state: utilWaiter.WaiterState.RETRY, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "disassociation-failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SecurityGroupVpcAssociations);
                return flat_1.length == 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSecurityGroupVpcAssociationDisassociated = async (params, input) => {
    const serviceDefaults = { minDelay: 10, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$f);
};
const waitUntilSecurityGroupVpcAssociationDisassociated = async (params, input) => {
    const serviceDefaults = { minDelay: 10, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$f);
    return utilWaiter.checkExceptions(result);
};

const checkState$e = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeSnapshotsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Snapshots);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "completed";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Snapshots);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "error") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSnapshotCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$e);
};
const waitUntilSnapshotCompleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$e);
    return utilWaiter.checkExceptions(result);
};

const checkState$d = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeSpotInstanceRequestsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SpotInstanceRequests);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "fulfilled";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SpotInstanceRequests);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "request-canceled-and-instance-running";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SpotInstanceRequests);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "schedule-expired") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SpotInstanceRequests);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "canceled-before-fulfillment") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SpotInstanceRequests);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "bad-parameters") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.SpotInstanceRequests);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "system-error") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidSpotInstanceRequestID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSpotInstanceRequestFulfilled = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$d);
};
const waitUntilSpotInstanceRequestFulfilled = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$d);
    return utilWaiter.checkExceptions(result);
};

const checkState$c = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeInstanceStatusCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.InstanceStatuses);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.SystemStatus.Status;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "ok";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSystemStatusOk = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$c);
};
const waitUntilSystemStatusOk = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$c);
    return utilWaiter.checkExceptions(result);
};

const checkState$b = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeStoreImageTasksCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.StoreImageTaskResults);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StoreTaskState;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "Completed";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.StoreImageTaskResults);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StoreTaskState;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "Failed") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.StoreImageTaskResults);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.StoreTaskState;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "InProgress") {
                    return { state: utilWaiter.WaiterState.RETRY, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForStoreImageTaskComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$b);
};
const waitUntilStoreImageTaskComplete = async (params, input) => {
    const serviceDefaults = { minDelay: 5, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$b);
    return utilWaiter.checkExceptions(result);
};

const checkState$a = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new GetPasswordDataCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.PasswordData.length > 0.0;
            };
            if (returnComparator() == true) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForPasswordDataAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$a);
};
const waitUntilPasswordDataAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$a);
    return utilWaiter.checkExceptions(result);
};

const checkState$9 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeSubnetsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Subnets);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForSubnetAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$9);
};
const waitUntilSubnetAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$9);
    return utilWaiter.checkExceptions(result);
};

const checkState$8 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVolumesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Volumes);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Volumes);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleted") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVolumeAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$8);
};
const waitUntilVolumeAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$8);
    return utilWaiter.checkExceptions(result);
};

const checkState$7 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVolumesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Volumes);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "deleted";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidVolume.NotFound") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVolumeDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$7);
};
const waitUntilVolumeDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$7);
    return utilWaiter.checkExceptions(result);
};

const checkState$6 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVolumesCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Volumes);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "in-use";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Volumes);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleted") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVolumeInUse = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$6);
};
const waitUntilVolumeInUse = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$6);
    return utilWaiter.checkExceptions(result);
};

const checkState$5 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVpcsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.Vpcs);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVpcAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$5);
};
const waitUntilVpcAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$5);
    return utilWaiter.checkExceptions(result);
};

const checkState$4 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVpcsCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidVpcID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVpcExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$4);
};
const waitUntilVpcExists = async (params, input) => {
    const serviceDefaults = { minDelay: 1, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$4);
    return utilWaiter.checkExceptions(result);
};

const checkState$3 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVpcPeeringConnectionsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.VpcPeeringConnections);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.Status.Code;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "deleted";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidVpcPeeringConnectionID.NotFound") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVpcPeeringConnectionDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
};
const waitUntilVpcPeeringConnectionDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
    return utilWaiter.checkExceptions(result);
};

const checkState$2 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVpcPeeringConnectionsCommand(input));
        reason = result;
        return { state: utilWaiter.WaiterState.SUCCESS, reason };
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "InvalidVpcPeeringConnectionID.NotFound") {
            return { state: utilWaiter.WaiterState.RETRY, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVpcPeeringConnectionExists = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
};
const waitUntilVpcPeeringConnectionExists = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
    return utilWaiter.checkExceptions(result);
};

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVpnConnectionsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.VpnConnections);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "available";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.VpnConnections);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleting") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.VpnConnections);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "deleted") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVpnConnectionAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilVpnConnectionAvailable = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeVpnConnectionsCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.VpnConnections);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            let allStringEq_5 = returnComparator().length > 0;
            for (const element_4 of returnComparator()) {
                allStringEq_5 = allStringEq_5 && element_4 == "deleted";
            }
            if (allStringEq_5) {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                const flat_1 = [].concat(...result.VpnConnections);
                const projection_3 = flat_1.map((element_2) => {
                    return element_2.State;
                });
                return projection_3;
            };
            for (const anyStringEq_4 of returnComparator()) {
                if (anyStringEq_4 == "pending") {
                    return { state: utilWaiter.WaiterState.FAILURE, reason };
                }
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForVpnConnectionDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilVpnConnectionDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 15, maxDelay: 120 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.AcceleratorManufacturer = AcceleratorManufacturer;
exports.AcceleratorName = AcceleratorName;
exports.AcceleratorType = AcceleratorType;
exports.AcceptAddressTransferCommand = AcceptAddressTransferCommand;
exports.AcceptCapacityReservationBillingOwnershipCommand = AcceptCapacityReservationBillingOwnershipCommand;
exports.AcceptReservedInstancesExchangeQuoteCommand = AcceptReservedInstancesExchangeQuoteCommand;
exports.AcceptTransitGatewayMulticastDomainAssociationsCommand = AcceptTransitGatewayMulticastDomainAssociationsCommand;
exports.AcceptTransitGatewayPeeringAttachmentCommand = AcceptTransitGatewayPeeringAttachmentCommand;
exports.AcceptTransitGatewayVpcAttachmentCommand = AcceptTransitGatewayVpcAttachmentCommand;
exports.AcceptVpcEndpointConnectionsCommand = AcceptVpcEndpointConnectionsCommand;
exports.AcceptVpcPeeringConnectionCommand = AcceptVpcPeeringConnectionCommand;
exports.AccountAttributeName = AccountAttributeName;
exports.ActivityStatus = ActivityStatus;
exports.AddressAttributeName = AddressAttributeName;
exports.AddressFamily = AddressFamily;
exports.AddressTransferStatus = AddressTransferStatus;
exports.AdvertiseByoipCidrCommand = AdvertiseByoipCidrCommand;
exports.Affinity = Affinity;
exports.AllocateAddressCommand = AllocateAddressCommand;
exports.AllocateHostsCommand = AllocateHostsCommand;
exports.AllocateIpamPoolCidrCommand = AllocateIpamPoolCidrCommand;
exports.AllocationState = AllocationState;
exports.AllocationStrategy = AllocationStrategy;
exports.AllocationType = AllocationType;
exports.AllowedImagesSettingsDisabledState = AllowedImagesSettingsDisabledState;
exports.AllowedImagesSettingsEnabledState = AllowedImagesSettingsEnabledState;
exports.AllowsMultipleInstanceTypes = AllowsMultipleInstanceTypes;
exports.AmdSevSnpSpecification = AmdSevSnpSpecification;
exports.AnalysisStatus = AnalysisStatus;
exports.ApplianceModeSupportValue = ApplianceModeSupportValue;
exports.ApplySecurityGroupsToClientVpnTargetNetworkCommand = ApplySecurityGroupsToClientVpnTargetNetworkCommand;
exports.ArchitectureType = ArchitectureType;
exports.ArchitectureValues = ArchitectureValues;
exports.AsnAssociationState = AsnAssociationState;
exports.AsnState = AsnState;
exports.AssignIpv6AddressesCommand = AssignIpv6AddressesCommand;
exports.AssignPrivateIpAddressesCommand = AssignPrivateIpAddressesCommand;
exports.AssignPrivateNatGatewayAddressCommand = AssignPrivateNatGatewayAddressCommand;
exports.AssociateAddressCommand = AssociateAddressCommand;
exports.AssociateCapacityReservationBillingOwnerCommand = AssociateCapacityReservationBillingOwnerCommand;
exports.AssociateClientVpnTargetNetworkCommand = AssociateClientVpnTargetNetworkCommand;
exports.AssociateDhcpOptionsCommand = AssociateDhcpOptionsCommand;
exports.AssociateEnclaveCertificateIamRoleCommand = AssociateEnclaveCertificateIamRoleCommand;
exports.AssociateIamInstanceProfileCommand = AssociateIamInstanceProfileCommand;
exports.AssociateInstanceEventWindowCommand = AssociateInstanceEventWindowCommand;
exports.AssociateIpamByoasnCommand = AssociateIpamByoasnCommand;
exports.AssociateIpamResourceDiscoveryCommand = AssociateIpamResourceDiscoveryCommand;
exports.AssociateNatGatewayAddressCommand = AssociateNatGatewayAddressCommand;
exports.AssociateRouteServerCommand = AssociateRouteServerCommand;
exports.AssociateRouteTableCommand = AssociateRouteTableCommand;
exports.AssociateSecurityGroupVpcCommand = AssociateSecurityGroupVpcCommand;
exports.AssociateSubnetCidrBlockCommand = AssociateSubnetCidrBlockCommand;
exports.AssociateTransitGatewayMulticastDomainCommand = AssociateTransitGatewayMulticastDomainCommand;
exports.AssociateTransitGatewayPolicyTableCommand = AssociateTransitGatewayPolicyTableCommand;
exports.AssociateTransitGatewayRouteTableCommand = AssociateTransitGatewayRouteTableCommand;
exports.AssociateTrunkInterfaceCommand = AssociateTrunkInterfaceCommand;
exports.AssociateVpcCidrBlockCommand = AssociateVpcCidrBlockCommand;
exports.AssociatedNetworkType = AssociatedNetworkType;
exports.AssociationStatusCode = AssociationStatusCode;
exports.AttachClassicLinkVpcCommand = AttachClassicLinkVpcCommand;
exports.AttachInternetGatewayCommand = AttachInternetGatewayCommand;
exports.AttachNetworkInterfaceCommand = AttachNetworkInterfaceCommand;
exports.AttachVerifiedAccessTrustProviderCommand = AttachVerifiedAccessTrustProviderCommand;
exports.AttachVerifiedAccessTrustProviderResultFilterSensitiveLog = AttachVerifiedAccessTrustProviderResultFilterSensitiveLog;
exports.AttachVolumeCommand = AttachVolumeCommand;
exports.AttachVpnGatewayCommand = AttachVpnGatewayCommand;
exports.AttachmentLimitType = AttachmentLimitType;
exports.AttachmentStatus = AttachmentStatus;
exports.AuthorizeClientVpnIngressCommand = AuthorizeClientVpnIngressCommand;
exports.AuthorizeSecurityGroupEgressCommand = AuthorizeSecurityGroupEgressCommand;
exports.AuthorizeSecurityGroupIngressCommand = AuthorizeSecurityGroupIngressCommand;
exports.AutoAcceptSharedAssociationsValue = AutoAcceptSharedAssociationsValue;
exports.AutoAcceptSharedAttachmentsValue = AutoAcceptSharedAttachmentsValue;
exports.AutoPlacement = AutoPlacement;
exports.AvailabilityZoneOptInStatus = AvailabilityZoneOptInStatus;
exports.AvailabilityZoneState = AvailabilityZoneState;
exports.BandwidthWeightingType = BandwidthWeightingType;
exports.BareMetal = BareMetal;
exports.BatchState = BatchState;
exports.BgpStatus = BgpStatus;
exports.BlockPublicAccessMode = BlockPublicAccessMode;
exports.BootModeType = BootModeType;
exports.BootModeValues = BootModeValues;
exports.BundleInstanceCommand = BundleInstanceCommand;
exports.BundleInstanceRequestFilterSensitiveLog = BundleInstanceRequestFilterSensitiveLog;
exports.BundleInstanceResultFilterSensitiveLog = BundleInstanceResultFilterSensitiveLog;
exports.BundleTaskFilterSensitiveLog = BundleTaskFilterSensitiveLog;
exports.BundleTaskState = BundleTaskState;
exports.BurstablePerformance = BurstablePerformance;
exports.ByoipCidrState = ByoipCidrState;
exports.CallerRole = CallerRole;
exports.CancelBatchErrorCode = CancelBatchErrorCode;
exports.CancelBundleTaskCommand = CancelBundleTaskCommand;
exports.CancelBundleTaskResultFilterSensitiveLog = CancelBundleTaskResultFilterSensitiveLog;
exports.CancelCapacityReservationCommand = CancelCapacityReservationCommand;
exports.CancelCapacityReservationFleetsCommand = CancelCapacityReservationFleetsCommand;
exports.CancelConversionTaskCommand = CancelConversionTaskCommand;
exports.CancelDeclarativePoliciesReportCommand = CancelDeclarativePoliciesReportCommand;
exports.CancelExportTaskCommand = CancelExportTaskCommand;
exports.CancelImageLaunchPermissionCommand = CancelImageLaunchPermissionCommand;
exports.CancelImportTaskCommand = CancelImportTaskCommand;
exports.CancelReservedInstancesListingCommand = CancelReservedInstancesListingCommand;
exports.CancelSpotFleetRequestsCommand = CancelSpotFleetRequestsCommand;
exports.CancelSpotInstanceRequestState = CancelSpotInstanceRequestState;
exports.CancelSpotInstanceRequestsCommand = CancelSpotInstanceRequestsCommand;
exports.CapacityBlockExtensionStatus = CapacityBlockExtensionStatus;
exports.CapacityBlockInterconnectStatus = CapacityBlockInterconnectStatus;
exports.CapacityBlockResourceState = CapacityBlockResourceState;
exports.CapacityReservationBillingRequestStatus = CapacityReservationBillingRequestStatus;
exports.CapacityReservationDeliveryPreference = CapacityReservationDeliveryPreference;
exports.CapacityReservationFleetState = CapacityReservationFleetState;
exports.CapacityReservationInstancePlatform = CapacityReservationInstancePlatform;
exports.CapacityReservationPreference = CapacityReservationPreference;
exports.CapacityReservationState = CapacityReservationState;
exports.CapacityReservationTenancy = CapacityReservationTenancy;
exports.CapacityReservationType = CapacityReservationType;
exports.CarrierGatewayState = CarrierGatewayState;
exports.ClientCertificateRevocationListStatusCode = ClientCertificateRevocationListStatusCode;
exports.ClientVpnAuthenticationType = ClientVpnAuthenticationType;
exports.ClientVpnAuthorizationRuleStatusCode = ClientVpnAuthorizationRuleStatusCode;
exports.ClientVpnConnectionStatusCode = ClientVpnConnectionStatusCode;
exports.ClientVpnEndpointAttributeStatusCode = ClientVpnEndpointAttributeStatusCode;
exports.ClientVpnEndpointStatusCode = ClientVpnEndpointStatusCode;
exports.ClientVpnRouteStatusCode = ClientVpnRouteStatusCode;
exports.ConfirmProductInstanceCommand = ConfirmProductInstanceCommand;
exports.ConnectionNotificationState = ConnectionNotificationState;
exports.ConnectionNotificationType = ConnectionNotificationType;
exports.ConnectivityType = ConnectivityType;
exports.ContainerFormat = ContainerFormat;
exports.ConversionTaskFilterSensitiveLog = ConversionTaskFilterSensitiveLog;
exports.ConversionTaskState = ConversionTaskState;
exports.CopyFpgaImageCommand = CopyFpgaImageCommand;
exports.CopyImageCommand = CopyImageCommand;
exports.CopySnapshotCommand = CopySnapshotCommand;
exports.CopySnapshotRequestFilterSensitiveLog = CopySnapshotRequestFilterSensitiveLog;
exports.CopyTagsFromSource = CopyTagsFromSource;
exports.CpuManufacturer = CpuManufacturer;
exports.CreateCapacityReservationBySplittingCommand = CreateCapacityReservationBySplittingCommand;
exports.CreateCapacityReservationCommand = CreateCapacityReservationCommand;
exports.CreateCapacityReservationFleetCommand = CreateCapacityReservationFleetCommand;
exports.CreateCarrierGatewayCommand = CreateCarrierGatewayCommand;
exports.CreateClientVpnEndpointCommand = CreateClientVpnEndpointCommand;
exports.CreateClientVpnRouteCommand = CreateClientVpnRouteCommand;
exports.CreateCoipCidrCommand = CreateCoipCidrCommand;
exports.CreateCoipPoolCommand = CreateCoipPoolCommand;
exports.CreateCustomerGatewayCommand = CreateCustomerGatewayCommand;
exports.CreateDefaultSubnetCommand = CreateDefaultSubnetCommand;
exports.CreateDefaultVpcCommand = CreateDefaultVpcCommand;
exports.CreateDelegateMacVolumeOwnershipTaskCommand = CreateDelegateMacVolumeOwnershipTaskCommand;
exports.CreateDelegateMacVolumeOwnershipTaskRequestFilterSensitiveLog = CreateDelegateMacVolumeOwnershipTaskRequestFilterSensitiveLog;
exports.CreateDhcpOptionsCommand = CreateDhcpOptionsCommand;
exports.CreateEgressOnlyInternetGatewayCommand = CreateEgressOnlyInternetGatewayCommand;
exports.CreateFleetCommand = CreateFleetCommand;
exports.CreateFlowLogsCommand = CreateFlowLogsCommand;
exports.CreateFpgaImageCommand = CreateFpgaImageCommand;
exports.CreateImageCommand = CreateImageCommand;
exports.CreateImageUsageReportCommand = CreateImageUsageReportCommand;
exports.CreateInstanceConnectEndpointCommand = CreateInstanceConnectEndpointCommand;
exports.CreateInstanceEventWindowCommand = CreateInstanceEventWindowCommand;
exports.CreateInstanceExportTaskCommand = CreateInstanceExportTaskCommand;
exports.CreateInternetGatewayCommand = CreateInternetGatewayCommand;
exports.CreateIpamCommand = CreateIpamCommand;
exports.CreateIpamExternalResourceVerificationTokenCommand = CreateIpamExternalResourceVerificationTokenCommand;
exports.CreateIpamPoolCommand = CreateIpamPoolCommand;
exports.CreateIpamResourceDiscoveryCommand = CreateIpamResourceDiscoveryCommand;
exports.CreateIpamScopeCommand = CreateIpamScopeCommand;
exports.CreateKeyPairCommand = CreateKeyPairCommand;
exports.CreateLaunchTemplateCommand = CreateLaunchTemplateCommand;
exports.CreateLaunchTemplateRequestFilterSensitiveLog = CreateLaunchTemplateRequestFilterSensitiveLog;
exports.CreateLaunchTemplateVersionCommand = CreateLaunchTemplateVersionCommand;
exports.CreateLaunchTemplateVersionRequestFilterSensitiveLog = CreateLaunchTemplateVersionRequestFilterSensitiveLog;
exports.CreateLaunchTemplateVersionResultFilterSensitiveLog = CreateLaunchTemplateVersionResultFilterSensitiveLog;
exports.CreateLocalGatewayRouteCommand = CreateLocalGatewayRouteCommand;
exports.CreateLocalGatewayRouteTableCommand = CreateLocalGatewayRouteTableCommand;
exports.CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = CreateLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand;
exports.CreateLocalGatewayRouteTableVpcAssociationCommand = CreateLocalGatewayRouteTableVpcAssociationCommand;
exports.CreateLocalGatewayVirtualInterfaceCommand = CreateLocalGatewayVirtualInterfaceCommand;
exports.CreateLocalGatewayVirtualInterfaceGroupCommand = CreateLocalGatewayVirtualInterfaceGroupCommand;
exports.CreateMacSystemIntegrityProtectionModificationTaskCommand = CreateMacSystemIntegrityProtectionModificationTaskCommand;
exports.CreateMacSystemIntegrityProtectionModificationTaskRequestFilterSensitiveLog = CreateMacSystemIntegrityProtectionModificationTaskRequestFilterSensitiveLog;
exports.CreateManagedPrefixListCommand = CreateManagedPrefixListCommand;
exports.CreateNatGatewayCommand = CreateNatGatewayCommand;
exports.CreateNetworkAclCommand = CreateNetworkAclCommand;
exports.CreateNetworkAclEntryCommand = CreateNetworkAclEntryCommand;
exports.CreateNetworkInsightsAccessScopeCommand = CreateNetworkInsightsAccessScopeCommand;
exports.CreateNetworkInsightsPathCommand = CreateNetworkInsightsPathCommand;
exports.CreateNetworkInterfaceCommand = CreateNetworkInterfaceCommand;
exports.CreateNetworkInterfacePermissionCommand = CreateNetworkInterfacePermissionCommand;
exports.CreatePlacementGroupCommand = CreatePlacementGroupCommand;
exports.CreatePublicIpv4PoolCommand = CreatePublicIpv4PoolCommand;
exports.CreateReplaceRootVolumeTaskCommand = CreateReplaceRootVolumeTaskCommand;
exports.CreateReservedInstancesListingCommand = CreateReservedInstancesListingCommand;
exports.CreateRestoreImageTaskCommand = CreateRestoreImageTaskCommand;
exports.CreateRouteCommand = CreateRouteCommand;
exports.CreateRouteServerCommand = CreateRouteServerCommand;
exports.CreateRouteServerEndpointCommand = CreateRouteServerEndpointCommand;
exports.CreateRouteServerPeerCommand = CreateRouteServerPeerCommand;
exports.CreateRouteTableCommand = CreateRouteTableCommand;
exports.CreateSecurityGroupCommand = CreateSecurityGroupCommand;
exports.CreateSnapshotCommand = CreateSnapshotCommand;
exports.CreateSnapshotsCommand = CreateSnapshotsCommand;
exports.CreateSpotDatafeedSubscriptionCommand = CreateSpotDatafeedSubscriptionCommand;
exports.CreateStoreImageTaskCommand = CreateStoreImageTaskCommand;
exports.CreateSubnetCidrReservationCommand = CreateSubnetCidrReservationCommand;
exports.CreateSubnetCommand = CreateSubnetCommand;
exports.CreateTagsCommand = CreateTagsCommand;
exports.CreateTrafficMirrorFilterCommand = CreateTrafficMirrorFilterCommand;
exports.CreateTrafficMirrorFilterRuleCommand = CreateTrafficMirrorFilterRuleCommand;
exports.CreateTrafficMirrorSessionCommand = CreateTrafficMirrorSessionCommand;
exports.CreateTrafficMirrorTargetCommand = CreateTrafficMirrorTargetCommand;
exports.CreateTransitGatewayCommand = CreateTransitGatewayCommand;
exports.CreateTransitGatewayConnectCommand = CreateTransitGatewayConnectCommand;
exports.CreateTransitGatewayConnectPeerCommand = CreateTransitGatewayConnectPeerCommand;
exports.CreateTransitGatewayMulticastDomainCommand = CreateTransitGatewayMulticastDomainCommand;
exports.CreateTransitGatewayPeeringAttachmentCommand = CreateTransitGatewayPeeringAttachmentCommand;
exports.CreateTransitGatewayPolicyTableCommand = CreateTransitGatewayPolicyTableCommand;
exports.CreateTransitGatewayPrefixListReferenceCommand = CreateTransitGatewayPrefixListReferenceCommand;
exports.CreateTransitGatewayRouteCommand = CreateTransitGatewayRouteCommand;
exports.CreateTransitGatewayRouteTableAnnouncementCommand = CreateTransitGatewayRouteTableAnnouncementCommand;
exports.CreateTransitGatewayRouteTableCommand = CreateTransitGatewayRouteTableCommand;
exports.CreateTransitGatewayVpcAttachmentCommand = CreateTransitGatewayVpcAttachmentCommand;
exports.CreateVerifiedAccessEndpointCommand = CreateVerifiedAccessEndpointCommand;
exports.CreateVerifiedAccessGroupCommand = CreateVerifiedAccessGroupCommand;
exports.CreateVerifiedAccessInstanceCommand = CreateVerifiedAccessInstanceCommand;
exports.CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog = CreateVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog;
exports.CreateVerifiedAccessTrustProviderCommand = CreateVerifiedAccessTrustProviderCommand;
exports.CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = CreateVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog;
exports.CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog = CreateVerifiedAccessTrustProviderRequestFilterSensitiveLog;
exports.CreateVerifiedAccessTrustProviderResultFilterSensitiveLog = CreateVerifiedAccessTrustProviderResultFilterSensitiveLog;
exports.CreateVolumeCommand = CreateVolumeCommand;
exports.CreateVpcBlockPublicAccessExclusionCommand = CreateVpcBlockPublicAccessExclusionCommand;
exports.CreateVpcCommand = CreateVpcCommand;
exports.CreateVpcEndpointCommand = CreateVpcEndpointCommand;
exports.CreateVpcEndpointConnectionNotificationCommand = CreateVpcEndpointConnectionNotificationCommand;
exports.CreateVpcEndpointServiceConfigurationCommand = CreateVpcEndpointServiceConfigurationCommand;
exports.CreateVpcPeeringConnectionCommand = CreateVpcPeeringConnectionCommand;
exports.CreateVpnConnectionCommand = CreateVpnConnectionCommand;
exports.CreateVpnConnectionRequestFilterSensitiveLog = CreateVpnConnectionRequestFilterSensitiveLog;
exports.CreateVpnConnectionResultFilterSensitiveLog = CreateVpnConnectionResultFilterSensitiveLog;
exports.CreateVpnConnectionRouteCommand = CreateVpnConnectionRouteCommand;
exports.CreateVpnGatewayCommand = CreateVpnGatewayCommand;
exports.CurrencyCodeValues = CurrencyCodeValues;
exports.DatafeedSubscriptionState = DatafeedSubscriptionState;
exports.DefaultInstanceMetadataEndpointState = DefaultInstanceMetadataEndpointState;
exports.DefaultInstanceMetadataTagsState = DefaultInstanceMetadataTagsState;
exports.DefaultRouteTableAssociationValue = DefaultRouteTableAssociationValue;
exports.DefaultRouteTablePropagationValue = DefaultRouteTablePropagationValue;
exports.DefaultTargetCapacityType = DefaultTargetCapacityType;
exports.DeleteCarrierGatewayCommand = DeleteCarrierGatewayCommand;
exports.DeleteClientVpnEndpointCommand = DeleteClientVpnEndpointCommand;
exports.DeleteClientVpnRouteCommand = DeleteClientVpnRouteCommand;
exports.DeleteCoipCidrCommand = DeleteCoipCidrCommand;
exports.DeleteCoipPoolCommand = DeleteCoipPoolCommand;
exports.DeleteCustomerGatewayCommand = DeleteCustomerGatewayCommand;
exports.DeleteDhcpOptionsCommand = DeleteDhcpOptionsCommand;
exports.DeleteEgressOnlyInternetGatewayCommand = DeleteEgressOnlyInternetGatewayCommand;
exports.DeleteFleetErrorCode = DeleteFleetErrorCode;
exports.DeleteFleetsCommand = DeleteFleetsCommand;
exports.DeleteFlowLogsCommand = DeleteFlowLogsCommand;
exports.DeleteFpgaImageCommand = DeleteFpgaImageCommand;
exports.DeleteImageUsageReportCommand = DeleteImageUsageReportCommand;
exports.DeleteInstanceConnectEndpointCommand = DeleteInstanceConnectEndpointCommand;
exports.DeleteInstanceEventWindowCommand = DeleteInstanceEventWindowCommand;
exports.DeleteInternetGatewayCommand = DeleteInternetGatewayCommand;
exports.DeleteIpamCommand = DeleteIpamCommand;
exports.DeleteIpamExternalResourceVerificationTokenCommand = DeleteIpamExternalResourceVerificationTokenCommand;
exports.DeleteIpamPoolCommand = DeleteIpamPoolCommand;
exports.DeleteIpamResourceDiscoveryCommand = DeleteIpamResourceDiscoveryCommand;
exports.DeleteIpamScopeCommand = DeleteIpamScopeCommand;
exports.DeleteKeyPairCommand = DeleteKeyPairCommand;
exports.DeleteLaunchTemplateCommand = DeleteLaunchTemplateCommand;
exports.DeleteLaunchTemplateVersionsCommand = DeleteLaunchTemplateVersionsCommand;
exports.DeleteLocalGatewayRouteCommand = DeleteLocalGatewayRouteCommand;
exports.DeleteLocalGatewayRouteTableCommand = DeleteLocalGatewayRouteTableCommand;
exports.DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand = DeleteLocalGatewayRouteTableVirtualInterfaceGroupAssociationCommand;
exports.DeleteLocalGatewayRouteTableVpcAssociationCommand = DeleteLocalGatewayRouteTableVpcAssociationCommand;
exports.DeleteLocalGatewayVirtualInterfaceCommand = DeleteLocalGatewayVirtualInterfaceCommand;
exports.DeleteLocalGatewayVirtualInterfaceGroupCommand = DeleteLocalGatewayVirtualInterfaceGroupCommand;
exports.DeleteManagedPrefixListCommand = DeleteManagedPrefixListCommand;
exports.DeleteNatGatewayCommand = DeleteNatGatewayCommand;
exports.DeleteNetworkAclCommand = DeleteNetworkAclCommand;
exports.DeleteNetworkAclEntryCommand = DeleteNetworkAclEntryCommand;
exports.DeleteNetworkInsightsAccessScopeAnalysisCommand = DeleteNetworkInsightsAccessScopeAnalysisCommand;
exports.DeleteNetworkInsightsAccessScopeCommand = DeleteNetworkInsightsAccessScopeCommand;
exports.DeleteNetworkInsightsAnalysisCommand = DeleteNetworkInsightsAnalysisCommand;
exports.DeleteNetworkInsightsPathCommand = DeleteNetworkInsightsPathCommand;
exports.DeleteNetworkInterfaceCommand = DeleteNetworkInterfaceCommand;
exports.DeleteNetworkInterfacePermissionCommand = DeleteNetworkInterfacePermissionCommand;
exports.DeletePlacementGroupCommand = DeletePlacementGroupCommand;
exports.DeletePublicIpv4PoolCommand = DeletePublicIpv4PoolCommand;
exports.DeleteQueuedReservedInstancesCommand = DeleteQueuedReservedInstancesCommand;
exports.DeleteQueuedReservedInstancesErrorCode = DeleteQueuedReservedInstancesErrorCode;
exports.DeleteRouteCommand = DeleteRouteCommand;
exports.DeleteRouteServerCommand = DeleteRouteServerCommand;
exports.DeleteRouteServerEndpointCommand = DeleteRouteServerEndpointCommand;
exports.DeleteRouteServerPeerCommand = DeleteRouteServerPeerCommand;
exports.DeleteRouteTableCommand = DeleteRouteTableCommand;
exports.DeleteSecurityGroupCommand = DeleteSecurityGroupCommand;
exports.DeleteSnapshotCommand = DeleteSnapshotCommand;
exports.DeleteSpotDatafeedSubscriptionCommand = DeleteSpotDatafeedSubscriptionCommand;
exports.DeleteSubnetCidrReservationCommand = DeleteSubnetCidrReservationCommand;
exports.DeleteSubnetCommand = DeleteSubnetCommand;
exports.DeleteTagsCommand = DeleteTagsCommand;
exports.DeleteTrafficMirrorFilterCommand = DeleteTrafficMirrorFilterCommand;
exports.DeleteTrafficMirrorFilterRuleCommand = DeleteTrafficMirrorFilterRuleCommand;
exports.DeleteTrafficMirrorSessionCommand = DeleteTrafficMirrorSessionCommand;
exports.DeleteTrafficMirrorTargetCommand = DeleteTrafficMirrorTargetCommand;
exports.DeleteTransitGatewayCommand = DeleteTransitGatewayCommand;
exports.DeleteTransitGatewayConnectCommand = DeleteTransitGatewayConnectCommand;
exports.DeleteTransitGatewayConnectPeerCommand = DeleteTransitGatewayConnectPeerCommand;
exports.DeleteTransitGatewayMulticastDomainCommand = DeleteTransitGatewayMulticastDomainCommand;
exports.DeleteTransitGatewayPeeringAttachmentCommand = DeleteTransitGatewayPeeringAttachmentCommand;
exports.DeleteTransitGatewayPolicyTableCommand = DeleteTransitGatewayPolicyTableCommand;
exports.DeleteTransitGatewayPrefixListReferenceCommand = DeleteTransitGatewayPrefixListReferenceCommand;
exports.DeleteTransitGatewayRouteCommand = DeleteTransitGatewayRouteCommand;
exports.DeleteTransitGatewayRouteTableAnnouncementCommand = DeleteTransitGatewayRouteTableAnnouncementCommand;
exports.DeleteTransitGatewayRouteTableCommand = DeleteTransitGatewayRouteTableCommand;
exports.DeleteTransitGatewayVpcAttachmentCommand = DeleteTransitGatewayVpcAttachmentCommand;
exports.DeleteVerifiedAccessEndpointCommand = DeleteVerifiedAccessEndpointCommand;
exports.DeleteVerifiedAccessGroupCommand = DeleteVerifiedAccessGroupCommand;
exports.DeleteVerifiedAccessInstanceCommand = DeleteVerifiedAccessInstanceCommand;
exports.DeleteVerifiedAccessTrustProviderCommand = DeleteVerifiedAccessTrustProviderCommand;
exports.DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog = DeleteVerifiedAccessTrustProviderResultFilterSensitiveLog;
exports.DeleteVolumeCommand = DeleteVolumeCommand;
exports.DeleteVpcBlockPublicAccessExclusionCommand = DeleteVpcBlockPublicAccessExclusionCommand;
exports.DeleteVpcCommand = DeleteVpcCommand;
exports.DeleteVpcEndpointConnectionNotificationsCommand = DeleteVpcEndpointConnectionNotificationsCommand;
exports.DeleteVpcEndpointServiceConfigurationsCommand = DeleteVpcEndpointServiceConfigurationsCommand;
exports.DeleteVpcEndpointsCommand = DeleteVpcEndpointsCommand;
exports.DeleteVpcPeeringConnectionCommand = DeleteVpcPeeringConnectionCommand;
exports.DeleteVpnConnectionCommand = DeleteVpnConnectionCommand;
exports.DeleteVpnConnectionRouteCommand = DeleteVpnConnectionRouteCommand;
exports.DeleteVpnGatewayCommand = DeleteVpnGatewayCommand;
exports.DeprovisionByoipCidrCommand = DeprovisionByoipCidrCommand;
exports.DeprovisionIpamByoasnCommand = DeprovisionIpamByoasnCommand;
exports.DeprovisionIpamPoolCidrCommand = DeprovisionIpamPoolCidrCommand;
exports.DeprovisionPublicIpv4PoolCidrCommand = DeprovisionPublicIpv4PoolCidrCommand;
exports.DeregisterImageCommand = DeregisterImageCommand;
exports.DeregisterInstanceEventNotificationAttributesCommand = DeregisterInstanceEventNotificationAttributesCommand;
exports.DeregisterTransitGatewayMulticastGroupMembersCommand = DeregisterTransitGatewayMulticastGroupMembersCommand;
exports.DeregisterTransitGatewayMulticastGroupSourcesCommand = DeregisterTransitGatewayMulticastGroupSourcesCommand;
exports.DescribeAccountAttributesCommand = DescribeAccountAttributesCommand;
exports.DescribeAddressTransfersCommand = DescribeAddressTransfersCommand;
exports.DescribeAddressesAttributeCommand = DescribeAddressesAttributeCommand;
exports.DescribeAddressesCommand = DescribeAddressesCommand;
exports.DescribeAggregateIdFormatCommand = DescribeAggregateIdFormatCommand;
exports.DescribeAvailabilityZonesCommand = DescribeAvailabilityZonesCommand;
exports.DescribeAwsNetworkPerformanceMetricSubscriptionsCommand = DescribeAwsNetworkPerformanceMetricSubscriptionsCommand;
exports.DescribeBundleTasksCommand = DescribeBundleTasksCommand;
exports.DescribeBundleTasksResultFilterSensitiveLog = DescribeBundleTasksResultFilterSensitiveLog;
exports.DescribeByoipCidrsCommand = DescribeByoipCidrsCommand;
exports.DescribeCapacityBlockExtensionHistoryCommand = DescribeCapacityBlockExtensionHistoryCommand;
exports.DescribeCapacityBlockExtensionOfferingsCommand = DescribeCapacityBlockExtensionOfferingsCommand;
exports.DescribeCapacityBlockOfferingsCommand = DescribeCapacityBlockOfferingsCommand;
exports.DescribeCapacityBlockStatusCommand = DescribeCapacityBlockStatusCommand;
exports.DescribeCapacityBlocksCommand = DescribeCapacityBlocksCommand;
exports.DescribeCapacityReservationBillingRequestsCommand = DescribeCapacityReservationBillingRequestsCommand;
exports.DescribeCapacityReservationFleetsCommand = DescribeCapacityReservationFleetsCommand;
exports.DescribeCapacityReservationsCommand = DescribeCapacityReservationsCommand;
exports.DescribeCarrierGatewaysCommand = DescribeCarrierGatewaysCommand;
exports.DescribeClassicLinkInstancesCommand = DescribeClassicLinkInstancesCommand;
exports.DescribeClientVpnAuthorizationRulesCommand = DescribeClientVpnAuthorizationRulesCommand;
exports.DescribeClientVpnConnectionsCommand = DescribeClientVpnConnectionsCommand;
exports.DescribeClientVpnEndpointsCommand = DescribeClientVpnEndpointsCommand;
exports.DescribeClientVpnRoutesCommand = DescribeClientVpnRoutesCommand;
exports.DescribeClientVpnTargetNetworksCommand = DescribeClientVpnTargetNetworksCommand;
exports.DescribeCoipPoolsCommand = DescribeCoipPoolsCommand;
exports.DescribeConversionTasksCommand = DescribeConversionTasksCommand;
exports.DescribeConversionTasksResultFilterSensitiveLog = DescribeConversionTasksResultFilterSensitiveLog;
exports.DescribeCustomerGatewaysCommand = DescribeCustomerGatewaysCommand;
exports.DescribeDeclarativePoliciesReportsCommand = DescribeDeclarativePoliciesReportsCommand;
exports.DescribeDhcpOptionsCommand = DescribeDhcpOptionsCommand;
exports.DescribeEgressOnlyInternetGatewaysCommand = DescribeEgressOnlyInternetGatewaysCommand;
exports.DescribeElasticGpusCommand = DescribeElasticGpusCommand;
exports.DescribeExportImageTasksCommand = DescribeExportImageTasksCommand;
exports.DescribeExportTasksCommand = DescribeExportTasksCommand;
exports.DescribeFastLaunchImagesCommand = DescribeFastLaunchImagesCommand;
exports.DescribeFastSnapshotRestoresCommand = DescribeFastSnapshotRestoresCommand;
exports.DescribeFleetHistoryCommand = DescribeFleetHistoryCommand;
exports.DescribeFleetInstancesCommand = DescribeFleetInstancesCommand;
exports.DescribeFleetsCommand = DescribeFleetsCommand;
exports.DescribeFlowLogsCommand = DescribeFlowLogsCommand;
exports.DescribeFpgaImageAttributeCommand = DescribeFpgaImageAttributeCommand;
exports.DescribeFpgaImagesCommand = DescribeFpgaImagesCommand;
exports.DescribeHostReservationOfferingsCommand = DescribeHostReservationOfferingsCommand;
exports.DescribeHostReservationsCommand = DescribeHostReservationsCommand;
exports.DescribeHostsCommand = DescribeHostsCommand;
exports.DescribeIamInstanceProfileAssociationsCommand = DescribeIamInstanceProfileAssociationsCommand;
exports.DescribeIdFormatCommand = DescribeIdFormatCommand;
exports.DescribeIdentityIdFormatCommand = DescribeIdentityIdFormatCommand;
exports.DescribeImageAttributeCommand = DescribeImageAttributeCommand;
exports.DescribeImageReferencesCommand = DescribeImageReferencesCommand;
exports.DescribeImageUsageReportEntriesCommand = DescribeImageUsageReportEntriesCommand;
exports.DescribeImageUsageReportsCommand = DescribeImageUsageReportsCommand;
exports.DescribeImagesCommand = DescribeImagesCommand;
exports.DescribeImportImageTasksCommand = DescribeImportImageTasksCommand;
exports.DescribeImportImageTasksResultFilterSensitiveLog = DescribeImportImageTasksResultFilterSensitiveLog;
exports.DescribeImportSnapshotTasksCommand = DescribeImportSnapshotTasksCommand;
exports.DescribeImportSnapshotTasksResultFilterSensitiveLog = DescribeImportSnapshotTasksResultFilterSensitiveLog;
exports.DescribeInstanceAttributeCommand = DescribeInstanceAttributeCommand;
exports.DescribeInstanceConnectEndpointsCommand = DescribeInstanceConnectEndpointsCommand;
exports.DescribeInstanceCreditSpecificationsCommand = DescribeInstanceCreditSpecificationsCommand;
exports.DescribeInstanceEventNotificationAttributesCommand = DescribeInstanceEventNotificationAttributesCommand;
exports.DescribeInstanceEventWindowsCommand = DescribeInstanceEventWindowsCommand;
exports.DescribeInstanceImageMetadataCommand = DescribeInstanceImageMetadataCommand;
exports.DescribeInstanceStatusCommand = DescribeInstanceStatusCommand;
exports.DescribeInstanceTopologyCommand = DescribeInstanceTopologyCommand;
exports.DescribeInstanceTypeOfferingsCommand = DescribeInstanceTypeOfferingsCommand;
exports.DescribeInstanceTypesCommand = DescribeInstanceTypesCommand;
exports.DescribeInstancesCommand = DescribeInstancesCommand;
exports.DescribeInternetGatewaysCommand = DescribeInternetGatewaysCommand;
exports.DescribeIpamByoasnCommand = DescribeIpamByoasnCommand;
exports.DescribeIpamExternalResourceVerificationTokensCommand = DescribeIpamExternalResourceVerificationTokensCommand;
exports.DescribeIpamPoolsCommand = DescribeIpamPoolsCommand;
exports.DescribeIpamResourceDiscoveriesCommand = DescribeIpamResourceDiscoveriesCommand;
exports.DescribeIpamResourceDiscoveryAssociationsCommand = DescribeIpamResourceDiscoveryAssociationsCommand;
exports.DescribeIpamScopesCommand = DescribeIpamScopesCommand;
exports.DescribeIpamsCommand = DescribeIpamsCommand;
exports.DescribeIpv6PoolsCommand = DescribeIpv6PoolsCommand;
exports.DescribeKeyPairsCommand = DescribeKeyPairsCommand;
exports.DescribeLaunchTemplateVersionsCommand = DescribeLaunchTemplateVersionsCommand;
exports.DescribeLaunchTemplateVersionsResultFilterSensitiveLog = DescribeLaunchTemplateVersionsResultFilterSensitiveLog;
exports.DescribeLaunchTemplatesCommand = DescribeLaunchTemplatesCommand;
exports.DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand = DescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociationsCommand;
exports.DescribeLocalGatewayRouteTableVpcAssociationsCommand = DescribeLocalGatewayRouteTableVpcAssociationsCommand;
exports.DescribeLocalGatewayRouteTablesCommand = DescribeLocalGatewayRouteTablesCommand;
exports.DescribeLocalGatewayVirtualInterfaceGroupsCommand = DescribeLocalGatewayVirtualInterfaceGroupsCommand;
exports.DescribeLocalGatewayVirtualInterfacesCommand = DescribeLocalGatewayVirtualInterfacesCommand;
exports.DescribeLocalGatewaysCommand = DescribeLocalGatewaysCommand;
exports.DescribeLockedSnapshotsCommand = DescribeLockedSnapshotsCommand;
exports.DescribeMacHostsCommand = DescribeMacHostsCommand;
exports.DescribeMacModificationTasksCommand = DescribeMacModificationTasksCommand;
exports.DescribeManagedPrefixListsCommand = DescribeManagedPrefixListsCommand;
exports.DescribeMovingAddressesCommand = DescribeMovingAddressesCommand;
exports.DescribeNatGatewaysCommand = DescribeNatGatewaysCommand;
exports.DescribeNetworkAclsCommand = DescribeNetworkAclsCommand;
exports.DescribeNetworkInsightsAccessScopeAnalysesCommand = DescribeNetworkInsightsAccessScopeAnalysesCommand;
exports.DescribeNetworkInsightsAccessScopesCommand = DescribeNetworkInsightsAccessScopesCommand;
exports.DescribeNetworkInsightsAnalysesCommand = DescribeNetworkInsightsAnalysesCommand;
exports.DescribeNetworkInsightsPathsCommand = DescribeNetworkInsightsPathsCommand;
exports.DescribeNetworkInterfaceAttributeCommand = DescribeNetworkInterfaceAttributeCommand;
exports.DescribeNetworkInterfacePermissionsCommand = DescribeNetworkInterfacePermissionsCommand;
exports.DescribeNetworkInterfacesCommand = DescribeNetworkInterfacesCommand;
exports.DescribeOutpostLagsCommand = DescribeOutpostLagsCommand;
exports.DescribePlacementGroupsCommand = DescribePlacementGroupsCommand;
exports.DescribePrefixListsCommand = DescribePrefixListsCommand;
exports.DescribePrincipalIdFormatCommand = DescribePrincipalIdFormatCommand;
exports.DescribePublicIpv4PoolsCommand = DescribePublicIpv4PoolsCommand;
exports.DescribeRegionsCommand = DescribeRegionsCommand;
exports.DescribeReplaceRootVolumeTasksCommand = DescribeReplaceRootVolumeTasksCommand;
exports.DescribeReservedInstancesCommand = DescribeReservedInstancesCommand;
exports.DescribeReservedInstancesListingsCommand = DescribeReservedInstancesListingsCommand;
exports.DescribeReservedInstancesModificationsCommand = DescribeReservedInstancesModificationsCommand;
exports.DescribeReservedInstancesOfferingsCommand = DescribeReservedInstancesOfferingsCommand;
exports.DescribeRouteServerEndpointsCommand = DescribeRouteServerEndpointsCommand;
exports.DescribeRouteServerPeersCommand = DescribeRouteServerPeersCommand;
exports.DescribeRouteServersCommand = DescribeRouteServersCommand;
exports.DescribeRouteTablesCommand = DescribeRouteTablesCommand;
exports.DescribeScheduledInstanceAvailabilityCommand = DescribeScheduledInstanceAvailabilityCommand;
exports.DescribeScheduledInstancesCommand = DescribeScheduledInstancesCommand;
exports.DescribeSecurityGroupReferencesCommand = DescribeSecurityGroupReferencesCommand;
exports.DescribeSecurityGroupRulesCommand = DescribeSecurityGroupRulesCommand;
exports.DescribeSecurityGroupVpcAssociationsCommand = DescribeSecurityGroupVpcAssociationsCommand;
exports.DescribeSecurityGroupsCommand = DescribeSecurityGroupsCommand;
exports.DescribeServiceLinkVirtualInterfacesCommand = DescribeServiceLinkVirtualInterfacesCommand;
exports.DescribeSnapshotAttributeCommand = DescribeSnapshotAttributeCommand;
exports.DescribeSnapshotTierStatusCommand = DescribeSnapshotTierStatusCommand;
exports.DescribeSnapshotsCommand = DescribeSnapshotsCommand;
exports.DescribeSpotDatafeedSubscriptionCommand = DescribeSpotDatafeedSubscriptionCommand;
exports.DescribeSpotFleetInstancesCommand = DescribeSpotFleetInstancesCommand;
exports.DescribeSpotFleetRequestHistoryCommand = DescribeSpotFleetRequestHistoryCommand;
exports.DescribeSpotFleetRequestsCommand = DescribeSpotFleetRequestsCommand;
exports.DescribeSpotFleetRequestsResponseFilterSensitiveLog = DescribeSpotFleetRequestsResponseFilterSensitiveLog;
exports.DescribeSpotInstanceRequestsCommand = DescribeSpotInstanceRequestsCommand;
exports.DescribeSpotInstanceRequestsResultFilterSensitiveLog = DescribeSpotInstanceRequestsResultFilterSensitiveLog;
exports.DescribeSpotPriceHistoryCommand = DescribeSpotPriceHistoryCommand;
exports.DescribeStaleSecurityGroupsCommand = DescribeStaleSecurityGroupsCommand;
exports.DescribeStoreImageTasksCommand = DescribeStoreImageTasksCommand;
exports.DescribeSubnetsCommand = DescribeSubnetsCommand;
exports.DescribeTagsCommand = DescribeTagsCommand;
exports.DescribeTrafficMirrorFilterRulesCommand = DescribeTrafficMirrorFilterRulesCommand;
exports.DescribeTrafficMirrorFiltersCommand = DescribeTrafficMirrorFiltersCommand;
exports.DescribeTrafficMirrorSessionsCommand = DescribeTrafficMirrorSessionsCommand;
exports.DescribeTrafficMirrorTargetsCommand = DescribeTrafficMirrorTargetsCommand;
exports.DescribeTransitGatewayAttachmentsCommand = DescribeTransitGatewayAttachmentsCommand;
exports.DescribeTransitGatewayConnectPeersCommand = DescribeTransitGatewayConnectPeersCommand;
exports.DescribeTransitGatewayConnectsCommand = DescribeTransitGatewayConnectsCommand;
exports.DescribeTransitGatewayMulticastDomainsCommand = DescribeTransitGatewayMulticastDomainsCommand;
exports.DescribeTransitGatewayPeeringAttachmentsCommand = DescribeTransitGatewayPeeringAttachmentsCommand;
exports.DescribeTransitGatewayPolicyTablesCommand = DescribeTransitGatewayPolicyTablesCommand;
exports.DescribeTransitGatewayRouteTableAnnouncementsCommand = DescribeTransitGatewayRouteTableAnnouncementsCommand;
exports.DescribeTransitGatewayRouteTablesCommand = DescribeTransitGatewayRouteTablesCommand;
exports.DescribeTransitGatewayVpcAttachmentsCommand = DescribeTransitGatewayVpcAttachmentsCommand;
exports.DescribeTransitGatewaysCommand = DescribeTransitGatewaysCommand;
exports.DescribeTrunkInterfaceAssociationsCommand = DescribeTrunkInterfaceAssociationsCommand;
exports.DescribeVerifiedAccessEndpointsCommand = DescribeVerifiedAccessEndpointsCommand;
exports.DescribeVerifiedAccessGroupsCommand = DescribeVerifiedAccessGroupsCommand;
exports.DescribeVerifiedAccessInstanceLoggingConfigurationsCommand = DescribeVerifiedAccessInstanceLoggingConfigurationsCommand;
exports.DescribeVerifiedAccessInstancesCommand = DescribeVerifiedAccessInstancesCommand;
exports.DescribeVerifiedAccessTrustProvidersCommand = DescribeVerifiedAccessTrustProvidersCommand;
exports.DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog;
exports.DescribeVolumeAttributeCommand = DescribeVolumeAttributeCommand;
exports.DescribeVolumeStatusCommand = DescribeVolumeStatusCommand;
exports.DescribeVolumesCommand = DescribeVolumesCommand;
exports.DescribeVolumesModificationsCommand = DescribeVolumesModificationsCommand;
exports.DescribeVpcAttributeCommand = DescribeVpcAttributeCommand;
exports.DescribeVpcBlockPublicAccessExclusionsCommand = DescribeVpcBlockPublicAccessExclusionsCommand;
exports.DescribeVpcBlockPublicAccessOptionsCommand = DescribeVpcBlockPublicAccessOptionsCommand;
exports.DescribeVpcClassicLinkCommand = DescribeVpcClassicLinkCommand;
exports.DescribeVpcClassicLinkDnsSupportCommand = DescribeVpcClassicLinkDnsSupportCommand;
exports.DescribeVpcEndpointAssociationsCommand = DescribeVpcEndpointAssociationsCommand;
exports.DescribeVpcEndpointConnectionNotificationsCommand = DescribeVpcEndpointConnectionNotificationsCommand;
exports.DescribeVpcEndpointConnectionsCommand = DescribeVpcEndpointConnectionsCommand;
exports.DescribeVpcEndpointServiceConfigurationsCommand = DescribeVpcEndpointServiceConfigurationsCommand;
exports.DescribeVpcEndpointServicePermissionsCommand = DescribeVpcEndpointServicePermissionsCommand;
exports.DescribeVpcEndpointServicesCommand = DescribeVpcEndpointServicesCommand;
exports.DescribeVpcEndpointsCommand = DescribeVpcEndpointsCommand;
exports.DescribeVpcPeeringConnectionsCommand = DescribeVpcPeeringConnectionsCommand;
exports.DescribeVpcsCommand = DescribeVpcsCommand;
exports.DescribeVpnConnectionsCommand = DescribeVpnConnectionsCommand;
exports.DescribeVpnConnectionsResultFilterSensitiveLog = DescribeVpnConnectionsResultFilterSensitiveLog;
exports.DescribeVpnGatewaysCommand = DescribeVpnGatewaysCommand;
exports.DestinationFileFormat = DestinationFileFormat;
exports.DetachClassicLinkVpcCommand = DetachClassicLinkVpcCommand;
exports.DetachInternetGatewayCommand = DetachInternetGatewayCommand;
exports.DetachNetworkInterfaceCommand = DetachNetworkInterfaceCommand;
exports.DetachVerifiedAccessTrustProviderCommand = DetachVerifiedAccessTrustProviderCommand;
exports.DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = DetachVerifiedAccessTrustProviderResultFilterSensitiveLog;
exports.DetachVolumeCommand = DetachVolumeCommand;
exports.DetachVpnGatewayCommand = DetachVpnGatewayCommand;
exports.DeviceTrustProviderType = DeviceTrustProviderType;
exports.DeviceType = DeviceType;
exports.DisableAddressTransferCommand = DisableAddressTransferCommand;
exports.DisableAllowedImagesSettingsCommand = DisableAllowedImagesSettingsCommand;
exports.DisableAwsNetworkPerformanceMetricSubscriptionCommand = DisableAwsNetworkPerformanceMetricSubscriptionCommand;
exports.DisableEbsEncryptionByDefaultCommand = DisableEbsEncryptionByDefaultCommand;
exports.DisableFastLaunchCommand = DisableFastLaunchCommand;
exports.DisableFastSnapshotRestoresCommand = DisableFastSnapshotRestoresCommand;
exports.DisableImageBlockPublicAccessCommand = DisableImageBlockPublicAccessCommand;
exports.DisableImageCommand = DisableImageCommand;
exports.DisableImageDeprecationCommand = DisableImageDeprecationCommand;
exports.DisableImageDeregistrationProtectionCommand = DisableImageDeregistrationProtectionCommand;
exports.DisableIpamOrganizationAdminAccountCommand = DisableIpamOrganizationAdminAccountCommand;
exports.DisableRouteServerPropagationCommand = DisableRouteServerPropagationCommand;
exports.DisableSerialConsoleAccessCommand = DisableSerialConsoleAccessCommand;
exports.DisableSnapshotBlockPublicAccessCommand = DisableSnapshotBlockPublicAccessCommand;
exports.DisableTransitGatewayRouteTablePropagationCommand = DisableTransitGatewayRouteTablePropagationCommand;
exports.DisableVgwRoutePropagationCommand = DisableVgwRoutePropagationCommand;
exports.DisableVpcClassicLinkCommand = DisableVpcClassicLinkCommand;
exports.DisableVpcClassicLinkDnsSupportCommand = DisableVpcClassicLinkDnsSupportCommand;
exports.DisassociateAddressCommand = DisassociateAddressCommand;
exports.DisassociateCapacityReservationBillingOwnerCommand = DisassociateCapacityReservationBillingOwnerCommand;
exports.DisassociateClientVpnTargetNetworkCommand = DisassociateClientVpnTargetNetworkCommand;
exports.DisassociateEnclaveCertificateIamRoleCommand = DisassociateEnclaveCertificateIamRoleCommand;
exports.DisassociateIamInstanceProfileCommand = DisassociateIamInstanceProfileCommand;
exports.DisassociateInstanceEventWindowCommand = DisassociateInstanceEventWindowCommand;
exports.DisassociateIpamByoasnCommand = DisassociateIpamByoasnCommand;
exports.DisassociateIpamResourceDiscoveryCommand = DisassociateIpamResourceDiscoveryCommand;
exports.DisassociateNatGatewayAddressCommand = DisassociateNatGatewayAddressCommand;
exports.DisassociateRouteServerCommand = DisassociateRouteServerCommand;
exports.DisassociateRouteTableCommand = DisassociateRouteTableCommand;
exports.DisassociateSecurityGroupVpcCommand = DisassociateSecurityGroupVpcCommand;
exports.DisassociateSubnetCidrBlockCommand = DisassociateSubnetCidrBlockCommand;
exports.DisassociateTransitGatewayMulticastDomainCommand = DisassociateTransitGatewayMulticastDomainCommand;
exports.DisassociateTransitGatewayPolicyTableCommand = DisassociateTransitGatewayPolicyTableCommand;
exports.DisassociateTransitGatewayRouteTableCommand = DisassociateTransitGatewayRouteTableCommand;
exports.DisassociateTrunkInterfaceCommand = DisassociateTrunkInterfaceCommand;
exports.DisassociateVpcCidrBlockCommand = DisassociateVpcCidrBlockCommand;
exports.DiskImageDescriptionFilterSensitiveLog = DiskImageDescriptionFilterSensitiveLog;
exports.DiskImageDetailFilterSensitiveLog = DiskImageDetailFilterSensitiveLog;
exports.DiskImageFilterSensitiveLog = DiskImageFilterSensitiveLog;
exports.DiskImageFormat = DiskImageFormat;
exports.DiskType = DiskType;
exports.DnsNameState = DnsNameState;
exports.DnsRecordIpType = DnsRecordIpType;
exports.DnsSupportValue = DnsSupportValue;
exports.DomainType = DomainType;
exports.DynamicRoutingValue = DynamicRoutingValue;
exports.EC2 = EC2;
exports.EC2Client = EC2Client;
exports.EC2ServiceException = EC2ServiceException;
exports.EbsEncryptionSupport = EbsEncryptionSupport;
exports.EbsNvmeSupport = EbsNvmeSupport;
exports.EbsOptimizedSupport = EbsOptimizedSupport;
exports.Ec2InstanceConnectEndpointState = Ec2InstanceConnectEndpointState;
exports.EkPubKeyFormat = EkPubKeyFormat;
exports.EkPubKeyType = EkPubKeyType;
exports.ElasticGpuState = ElasticGpuState;
exports.ElasticGpuStatus = ElasticGpuStatus;
exports.EnaSupport = EnaSupport;
exports.EnableAddressTransferCommand = EnableAddressTransferCommand;
exports.EnableAllowedImagesSettingsCommand = EnableAllowedImagesSettingsCommand;
exports.EnableAwsNetworkPerformanceMetricSubscriptionCommand = EnableAwsNetworkPerformanceMetricSubscriptionCommand;
exports.EnableEbsEncryptionByDefaultCommand = EnableEbsEncryptionByDefaultCommand;
exports.EnableFastLaunchCommand = EnableFastLaunchCommand;
exports.EnableFastSnapshotRestoresCommand = EnableFastSnapshotRestoresCommand;
exports.EnableImageBlockPublicAccessCommand = EnableImageBlockPublicAccessCommand;
exports.EnableImageCommand = EnableImageCommand;
exports.EnableImageDeprecationCommand = EnableImageDeprecationCommand;
exports.EnableImageDeregistrationProtectionCommand = EnableImageDeregistrationProtectionCommand;
exports.EnableIpamOrganizationAdminAccountCommand = EnableIpamOrganizationAdminAccountCommand;
exports.EnableReachabilityAnalyzerOrganizationSharingCommand = EnableReachabilityAnalyzerOrganizationSharingCommand;
exports.EnableRouteServerPropagationCommand = EnableRouteServerPropagationCommand;
exports.EnableSerialConsoleAccessCommand = EnableSerialConsoleAccessCommand;
exports.EnableSnapshotBlockPublicAccessCommand = EnableSnapshotBlockPublicAccessCommand;
exports.EnableTransitGatewayRouteTablePropagationCommand = EnableTransitGatewayRouteTablePropagationCommand;
exports.EnableVgwRoutePropagationCommand = EnableVgwRoutePropagationCommand;
exports.EnableVolumeIOCommand = EnableVolumeIOCommand;
exports.EnableVpcClassicLinkCommand = EnableVpcClassicLinkCommand;
exports.EnableVpcClassicLinkDnsSupportCommand = EnableVpcClassicLinkDnsSupportCommand;
exports.EndDateType = EndDateType;
exports.EndpointIpAddressType = EndpointIpAddressType;
exports.EphemeralNvmeSupport = EphemeralNvmeSupport;
exports.EventCode = EventCode;
exports.EventType = EventType;
exports.ExcessCapacityTerminationPolicy = ExcessCapacityTerminationPolicy;
exports.ExportClientVpnClientCertificateRevocationListCommand = ExportClientVpnClientCertificateRevocationListCommand;
exports.ExportClientVpnClientConfigurationCommand = ExportClientVpnClientConfigurationCommand;
exports.ExportEnvironment = ExportEnvironment;
exports.ExportImageCommand = ExportImageCommand;
exports.ExportTaskState = ExportTaskState;
exports.ExportTransitGatewayRoutesCommand = ExportTransitGatewayRoutesCommand;
exports.ExportVerifiedAccessInstanceClientConfigurationCommand = ExportVerifiedAccessInstanceClientConfigurationCommand;
exports.ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog = ExportVerifiedAccessInstanceClientConfigurationResultFilterSensitiveLog;
exports.FastLaunchResourceType = FastLaunchResourceType;
exports.FastLaunchStateCode = FastLaunchStateCode;
exports.FastSnapshotRestoreStateCode = FastSnapshotRestoreStateCode;
exports.FindingsFound = FindingsFound;
exports.FleetActivityStatus = FleetActivityStatus;
exports.FleetCapacityReservationTenancy = FleetCapacityReservationTenancy;
exports.FleetCapacityReservationUsageStrategy = FleetCapacityReservationUsageStrategy;
exports.FleetEventType = FleetEventType;
exports.FleetExcessCapacityTerminationPolicy = FleetExcessCapacityTerminationPolicy;
exports.FleetInstanceMatchCriteria = FleetInstanceMatchCriteria;
exports.FleetOnDemandAllocationStrategy = FleetOnDemandAllocationStrategy;
exports.FleetReplacementStrategy = FleetReplacementStrategy;
exports.FleetStateCode = FleetStateCode;
exports.FleetType = FleetType;
exports.FlexibleEnaQueuesSupport = FlexibleEnaQueuesSupport;
exports.FlowLogsResourceType = FlowLogsResourceType;
exports.FpgaImageAttributeName = FpgaImageAttributeName;
exports.FpgaImageStateCode = FpgaImageStateCode;
exports.GatewayAssociationState = GatewayAssociationState;
exports.GatewayType = GatewayType;
exports.GetActiveVpnTunnelStatusCommand = GetActiveVpnTunnelStatusCommand;
exports.GetAllowedImagesSettingsCommand = GetAllowedImagesSettingsCommand;
exports.GetAssociatedEnclaveCertificateIamRolesCommand = GetAssociatedEnclaveCertificateIamRolesCommand;
exports.GetAssociatedIpv6PoolCidrsCommand = GetAssociatedIpv6PoolCidrsCommand;
exports.GetAwsNetworkPerformanceDataCommand = GetAwsNetworkPerformanceDataCommand;
exports.GetCapacityReservationUsageCommand = GetCapacityReservationUsageCommand;
exports.GetCoipPoolUsageCommand = GetCoipPoolUsageCommand;
exports.GetConsoleOutputCommand = GetConsoleOutputCommand;
exports.GetConsoleScreenshotCommand = GetConsoleScreenshotCommand;
exports.GetDeclarativePoliciesReportSummaryCommand = GetDeclarativePoliciesReportSummaryCommand;
exports.GetDefaultCreditSpecificationCommand = GetDefaultCreditSpecificationCommand;
exports.GetEbsDefaultKmsKeyIdCommand = GetEbsDefaultKmsKeyIdCommand;
exports.GetEbsEncryptionByDefaultCommand = GetEbsEncryptionByDefaultCommand;
exports.GetFlowLogsIntegrationTemplateCommand = GetFlowLogsIntegrationTemplateCommand;
exports.GetGroupsForCapacityReservationCommand = GetGroupsForCapacityReservationCommand;
exports.GetHostReservationPurchasePreviewCommand = GetHostReservationPurchasePreviewCommand;
exports.GetImageBlockPublicAccessStateCommand = GetImageBlockPublicAccessStateCommand;
exports.GetInstanceMetadataDefaultsCommand = GetInstanceMetadataDefaultsCommand;
exports.GetInstanceTpmEkPubCommand = GetInstanceTpmEkPubCommand;
exports.GetInstanceTpmEkPubResultFilterSensitiveLog = GetInstanceTpmEkPubResultFilterSensitiveLog;
exports.GetInstanceTypesFromInstanceRequirementsCommand = GetInstanceTypesFromInstanceRequirementsCommand;
exports.GetInstanceUefiDataCommand = GetInstanceUefiDataCommand;
exports.GetIpamAddressHistoryCommand = GetIpamAddressHistoryCommand;
exports.GetIpamDiscoveredAccountsCommand = GetIpamDiscoveredAccountsCommand;
exports.GetIpamDiscoveredPublicAddressesCommand = GetIpamDiscoveredPublicAddressesCommand;
exports.GetIpamDiscoveredResourceCidrsCommand = GetIpamDiscoveredResourceCidrsCommand;
exports.GetIpamPoolAllocationsCommand = GetIpamPoolAllocationsCommand;
exports.GetIpamPoolCidrsCommand = GetIpamPoolCidrsCommand;
exports.GetIpamResourceCidrsCommand = GetIpamResourceCidrsCommand;
exports.GetLaunchTemplateDataCommand = GetLaunchTemplateDataCommand;
exports.GetLaunchTemplateDataResultFilterSensitiveLog = GetLaunchTemplateDataResultFilterSensitiveLog;
exports.GetManagedPrefixListAssociationsCommand = GetManagedPrefixListAssociationsCommand;
exports.GetManagedPrefixListEntriesCommand = GetManagedPrefixListEntriesCommand;
exports.GetNetworkInsightsAccessScopeAnalysisFindingsCommand = GetNetworkInsightsAccessScopeAnalysisFindingsCommand;
exports.GetNetworkInsightsAccessScopeContentCommand = GetNetworkInsightsAccessScopeContentCommand;
exports.GetPasswordDataCommand = GetPasswordDataCommand;
exports.GetPasswordDataResultFilterSensitiveLog = GetPasswordDataResultFilterSensitiveLog;
exports.GetReservedInstancesExchangeQuoteCommand = GetReservedInstancesExchangeQuoteCommand;
exports.GetRouteServerAssociationsCommand = GetRouteServerAssociationsCommand;
exports.GetRouteServerPropagationsCommand = GetRouteServerPropagationsCommand;
exports.GetRouteServerRoutingDatabaseCommand = GetRouteServerRoutingDatabaseCommand;
exports.GetSecurityGroupsForVpcCommand = GetSecurityGroupsForVpcCommand;
exports.GetSerialConsoleAccessStatusCommand = GetSerialConsoleAccessStatusCommand;
exports.GetSnapshotBlockPublicAccessStateCommand = GetSnapshotBlockPublicAccessStateCommand;
exports.GetSpotPlacementScoresCommand = GetSpotPlacementScoresCommand;
exports.GetSubnetCidrReservationsCommand = GetSubnetCidrReservationsCommand;
exports.GetTransitGatewayAttachmentPropagationsCommand = GetTransitGatewayAttachmentPropagationsCommand;
exports.GetTransitGatewayMulticastDomainAssociationsCommand = GetTransitGatewayMulticastDomainAssociationsCommand;
exports.GetTransitGatewayPolicyTableAssociationsCommand = GetTransitGatewayPolicyTableAssociationsCommand;
exports.GetTransitGatewayPolicyTableEntriesCommand = GetTransitGatewayPolicyTableEntriesCommand;
exports.GetTransitGatewayPrefixListReferencesCommand = GetTransitGatewayPrefixListReferencesCommand;
exports.GetTransitGatewayRouteTableAssociationsCommand = GetTransitGatewayRouteTableAssociationsCommand;
exports.GetTransitGatewayRouteTablePropagationsCommand = GetTransitGatewayRouteTablePropagationsCommand;
exports.GetVerifiedAccessEndpointPolicyCommand = GetVerifiedAccessEndpointPolicyCommand;
exports.GetVerifiedAccessEndpointTargetsCommand = GetVerifiedAccessEndpointTargetsCommand;
exports.GetVerifiedAccessGroupPolicyCommand = GetVerifiedAccessGroupPolicyCommand;
exports.GetVpnConnectionDeviceSampleConfigurationCommand = GetVpnConnectionDeviceSampleConfigurationCommand;
exports.GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog = GetVpnConnectionDeviceSampleConfigurationResultFilterSensitiveLog;
exports.GetVpnConnectionDeviceTypesCommand = GetVpnConnectionDeviceTypesCommand;
exports.GetVpnTunnelReplacementStatusCommand = GetVpnTunnelReplacementStatusCommand;
exports.HostMaintenance = HostMaintenance;
exports.HostRecovery = HostRecovery;
exports.HostTenancy = HostTenancy;
exports.HostnameType = HostnameType;
exports.HttpTokensState = HttpTokensState;
exports.HypervisorType = HypervisorType;
exports.IamInstanceProfileAssociationState = IamInstanceProfileAssociationState;
exports.Igmpv2SupportValue = Igmpv2SupportValue;
exports.ImageAttributeName = ImageAttributeName;
exports.ImageBlockPublicAccessDisabledState = ImageBlockPublicAccessDisabledState;
exports.ImageBlockPublicAccessEnabledState = ImageBlockPublicAccessEnabledState;
exports.ImageDiskContainerFilterSensitiveLog = ImageDiskContainerFilterSensitiveLog;
exports.ImageReferenceOptionName = ImageReferenceOptionName;
exports.ImageReferenceResourceType = ImageReferenceResourceType;
exports.ImageState = ImageState;
exports.ImageTypeValues = ImageTypeValues;
exports.ImdsSupportValues = ImdsSupportValues;
exports.ImportClientVpnClientCertificateRevocationListCommand = ImportClientVpnClientCertificateRevocationListCommand;
exports.ImportImageCommand = ImportImageCommand;
exports.ImportImageRequestFilterSensitiveLog = ImportImageRequestFilterSensitiveLog;
exports.ImportImageResultFilterSensitiveLog = ImportImageResultFilterSensitiveLog;
exports.ImportImageTaskFilterSensitiveLog = ImportImageTaskFilterSensitiveLog;
exports.ImportInstanceCommand = ImportInstanceCommand;
exports.ImportInstanceLaunchSpecificationFilterSensitiveLog = ImportInstanceLaunchSpecificationFilterSensitiveLog;
exports.ImportInstanceRequestFilterSensitiveLog = ImportInstanceRequestFilterSensitiveLog;
exports.ImportInstanceResultFilterSensitiveLog = ImportInstanceResultFilterSensitiveLog;
exports.ImportInstanceTaskDetailsFilterSensitiveLog = ImportInstanceTaskDetailsFilterSensitiveLog;
exports.ImportInstanceVolumeDetailItemFilterSensitiveLog = ImportInstanceVolumeDetailItemFilterSensitiveLog;
exports.ImportKeyPairCommand = ImportKeyPairCommand;
exports.ImportSnapshotCommand = ImportSnapshotCommand;
exports.ImportSnapshotRequestFilterSensitiveLog = ImportSnapshotRequestFilterSensitiveLog;
exports.ImportSnapshotResultFilterSensitiveLog = ImportSnapshotResultFilterSensitiveLog;
exports.ImportSnapshotTaskFilterSensitiveLog = ImportSnapshotTaskFilterSensitiveLog;
exports.ImportVolumeCommand = ImportVolumeCommand;
exports.ImportVolumeRequestFilterSensitiveLog = ImportVolumeRequestFilterSensitiveLog;
exports.ImportVolumeResultFilterSensitiveLog = ImportVolumeResultFilterSensitiveLog;
exports.ImportVolumeTaskDetailsFilterSensitiveLog = ImportVolumeTaskDetailsFilterSensitiveLog;
exports.InitializationType = InitializationType;
exports.InstanceAttributeName = InstanceAttributeName;
exports.InstanceAutoRecoveryState = InstanceAutoRecoveryState;
exports.InstanceBandwidthWeighting = InstanceBandwidthWeighting;
exports.InstanceBootModeValues = InstanceBootModeValues;
exports.InstanceEventWindowState = InstanceEventWindowState;
exports.InstanceGeneration = InstanceGeneration;
exports.InstanceHealthStatus = InstanceHealthStatus;
exports.InstanceInterruptionBehavior = InstanceInterruptionBehavior;
exports.InstanceLifecycle = InstanceLifecycle;
exports.InstanceLifecycleType = InstanceLifecycleType;
exports.InstanceMatchCriteria = InstanceMatchCriteria;
exports.InstanceMetadataEndpointState = InstanceMetadataEndpointState;
exports.InstanceMetadataOptionsState = InstanceMetadataOptionsState;
exports.InstanceMetadataProtocolState = InstanceMetadataProtocolState;
exports.InstanceMetadataTagsState = InstanceMetadataTagsState;
exports.InstanceRebootMigrationState = InstanceRebootMigrationState;
exports.InstanceStateName = InstanceStateName;
exports.InstanceStorageEncryptionSupport = InstanceStorageEncryptionSupport;
exports.InstanceTypeHypervisor = InstanceTypeHypervisor;
exports.InterfacePermissionType = InterfacePermissionType;
exports.InterfaceProtocolType = InterfaceProtocolType;
exports.InternetGatewayBlockMode = InternetGatewayBlockMode;
exports.InternetGatewayExclusionMode = InternetGatewayExclusionMode;
exports.IpAddressType = IpAddressType;
exports.IpSource = IpSource;
exports.IpamAddressHistoryResourceType = IpamAddressHistoryResourceType;
exports.IpamAssociatedResourceDiscoveryStatus = IpamAssociatedResourceDiscoveryStatus;
exports.IpamComplianceStatus = IpamComplianceStatus;
exports.IpamDiscoveryFailureCode = IpamDiscoveryFailureCode;
exports.IpamExternalResourceVerificationTokenState = IpamExternalResourceVerificationTokenState;
exports.IpamManagementState = IpamManagementState;
exports.IpamMeteredAccount = IpamMeteredAccount;
exports.IpamNetworkInterfaceAttachmentStatus = IpamNetworkInterfaceAttachmentStatus;
exports.IpamOverlapStatus = IpamOverlapStatus;
exports.IpamPoolAllocationResourceType = IpamPoolAllocationResourceType;
exports.IpamPoolAwsService = IpamPoolAwsService;
exports.IpamPoolCidrFailureCode = IpamPoolCidrFailureCode;
exports.IpamPoolCidrState = IpamPoolCidrState;
exports.IpamPoolPublicIpSource = IpamPoolPublicIpSource;
exports.IpamPoolSourceResourceType = IpamPoolSourceResourceType;
exports.IpamPoolState = IpamPoolState;
exports.IpamPublicAddressAssociationStatus = IpamPublicAddressAssociationStatus;
exports.IpamPublicAddressAwsService = IpamPublicAddressAwsService;
exports.IpamPublicAddressType = IpamPublicAddressType;
exports.IpamResourceCidrIpSource = IpamResourceCidrIpSource;
exports.IpamResourceDiscoveryAssociationState = IpamResourceDiscoveryAssociationState;
exports.IpamResourceDiscoveryState = IpamResourceDiscoveryState;
exports.IpamResourceType = IpamResourceType;
exports.IpamScopeState = IpamScopeState;
exports.IpamScopeType = IpamScopeType;
exports.IpamState = IpamState;
exports.IpamTier = IpamTier;
exports.Ipv6AddressAttribute = Ipv6AddressAttribute;
exports.Ipv6SupportValue = Ipv6SupportValue;
exports.KeyFormat = KeyFormat;
exports.KeyPairFilterSensitiveLog = KeyPairFilterSensitiveLog;
exports.KeyType = KeyType;
exports.LaunchSpecificationFilterSensitiveLog = LaunchSpecificationFilterSensitiveLog;
exports.LaunchTemplateAutoRecoveryState = LaunchTemplateAutoRecoveryState;
exports.LaunchTemplateErrorCode = LaunchTemplateErrorCode;
exports.LaunchTemplateHttpTokensState = LaunchTemplateHttpTokensState;
exports.LaunchTemplateInstanceMetadataEndpointState = LaunchTemplateInstanceMetadataEndpointState;
exports.LaunchTemplateInstanceMetadataOptionsState = LaunchTemplateInstanceMetadataOptionsState;
exports.LaunchTemplateInstanceMetadataProtocolIpv6 = LaunchTemplateInstanceMetadataProtocolIpv6;
exports.LaunchTemplateInstanceMetadataTagsState = LaunchTemplateInstanceMetadataTagsState;
exports.LaunchTemplateVersionFilterSensitiveLog = LaunchTemplateVersionFilterSensitiveLog;
exports.ListImagesInRecycleBinCommand = ListImagesInRecycleBinCommand;
exports.ListSnapshotsInRecycleBinCommand = ListSnapshotsInRecycleBinCommand;
exports.ListingState = ListingState;
exports.ListingStatus = ListingStatus;
exports.LocalGatewayRouteState = LocalGatewayRouteState;
exports.LocalGatewayRouteTableMode = LocalGatewayRouteTableMode;
exports.LocalGatewayRouteType = LocalGatewayRouteType;
exports.LocalGatewayVirtualInterfaceConfigurationState = LocalGatewayVirtualInterfaceConfigurationState;
exports.LocalGatewayVirtualInterfaceGroupConfigurationState = LocalGatewayVirtualInterfaceGroupConfigurationState;
exports.LocalStorage = LocalStorage;
exports.LocalStorageType = LocalStorageType;
exports.LocationType = LocationType;
exports.LockMode = LockMode;
exports.LockSnapshotCommand = LockSnapshotCommand;
exports.LockState = LockState;
exports.LogDestinationType = LogDestinationType;
exports.MacModificationTaskState = MacModificationTaskState;
exports.MacModificationTaskType = MacModificationTaskType;
exports.MacSystemIntegrityProtectionSettingStatus = MacSystemIntegrityProtectionSettingStatus;
exports.ManagedBy = ManagedBy;
exports.MarketType = MarketType;
exports.MembershipType = MembershipType;
exports.MetadataDefaultHttpTokensState = MetadataDefaultHttpTokensState;
exports.MetricType = MetricType;
exports.ModifyAddressAttributeCommand = ModifyAddressAttributeCommand;
exports.ModifyAvailabilityZoneGroupCommand = ModifyAvailabilityZoneGroupCommand;
exports.ModifyAvailabilityZoneOptInStatus = ModifyAvailabilityZoneOptInStatus;
exports.ModifyCapacityReservationCommand = ModifyCapacityReservationCommand;
exports.ModifyCapacityReservationFleetCommand = ModifyCapacityReservationFleetCommand;
exports.ModifyClientVpnEndpointCommand = ModifyClientVpnEndpointCommand;
exports.ModifyDefaultCreditSpecificationCommand = ModifyDefaultCreditSpecificationCommand;
exports.ModifyEbsDefaultKmsKeyIdCommand = ModifyEbsDefaultKmsKeyIdCommand;
exports.ModifyFleetCommand = ModifyFleetCommand;
exports.ModifyFpgaImageAttributeCommand = ModifyFpgaImageAttributeCommand;
exports.ModifyHostsCommand = ModifyHostsCommand;
exports.ModifyIdFormatCommand = ModifyIdFormatCommand;
exports.ModifyIdentityIdFormatCommand = ModifyIdentityIdFormatCommand;
exports.ModifyImageAttributeCommand = ModifyImageAttributeCommand;
exports.ModifyInstanceAttributeCommand = ModifyInstanceAttributeCommand;
exports.ModifyInstanceCapacityReservationAttributesCommand = ModifyInstanceCapacityReservationAttributesCommand;
exports.ModifyInstanceConnectEndpointCommand = ModifyInstanceConnectEndpointCommand;
exports.ModifyInstanceCpuOptionsCommand = ModifyInstanceCpuOptionsCommand;
exports.ModifyInstanceCreditSpecificationCommand = ModifyInstanceCreditSpecificationCommand;
exports.ModifyInstanceEventStartTimeCommand = ModifyInstanceEventStartTimeCommand;
exports.ModifyInstanceEventWindowCommand = ModifyInstanceEventWindowCommand;
exports.ModifyInstanceMaintenanceOptionsCommand = ModifyInstanceMaintenanceOptionsCommand;
exports.ModifyInstanceMetadataDefaultsCommand = ModifyInstanceMetadataDefaultsCommand;
exports.ModifyInstanceMetadataOptionsCommand = ModifyInstanceMetadataOptionsCommand;
exports.ModifyInstanceNetworkPerformanceOptionsCommand = ModifyInstanceNetworkPerformanceOptionsCommand;
exports.ModifyInstancePlacementCommand = ModifyInstancePlacementCommand;
exports.ModifyIpamCommand = ModifyIpamCommand;
exports.ModifyIpamPoolCommand = ModifyIpamPoolCommand;
exports.ModifyIpamResourceCidrCommand = ModifyIpamResourceCidrCommand;
exports.ModifyIpamResourceDiscoveryCommand = ModifyIpamResourceDiscoveryCommand;
exports.ModifyIpamScopeCommand = ModifyIpamScopeCommand;
exports.ModifyLaunchTemplateCommand = ModifyLaunchTemplateCommand;
exports.ModifyLocalGatewayRouteCommand = ModifyLocalGatewayRouteCommand;
exports.ModifyManagedPrefixListCommand = ModifyManagedPrefixListCommand;
exports.ModifyNetworkInterfaceAttributeCommand = ModifyNetworkInterfaceAttributeCommand;
exports.ModifyPrivateDnsNameOptionsCommand = ModifyPrivateDnsNameOptionsCommand;
exports.ModifyPublicIpDnsNameOptionsCommand = ModifyPublicIpDnsNameOptionsCommand;
exports.ModifyReservedInstancesCommand = ModifyReservedInstancesCommand;
exports.ModifyRouteServerCommand = ModifyRouteServerCommand;
exports.ModifySecurityGroupRulesCommand = ModifySecurityGroupRulesCommand;
exports.ModifySnapshotAttributeCommand = ModifySnapshotAttributeCommand;
exports.ModifySnapshotTierCommand = ModifySnapshotTierCommand;
exports.ModifySpotFleetRequestCommand = ModifySpotFleetRequestCommand;
exports.ModifySubnetAttributeCommand = ModifySubnetAttributeCommand;
exports.ModifyTrafficMirrorFilterNetworkServicesCommand = ModifyTrafficMirrorFilterNetworkServicesCommand;
exports.ModifyTrafficMirrorFilterRuleCommand = ModifyTrafficMirrorFilterRuleCommand;
exports.ModifyTrafficMirrorSessionCommand = ModifyTrafficMirrorSessionCommand;
exports.ModifyTransitGatewayCommand = ModifyTransitGatewayCommand;
exports.ModifyTransitGatewayPrefixListReferenceCommand = ModifyTransitGatewayPrefixListReferenceCommand;
exports.ModifyTransitGatewayVpcAttachmentCommand = ModifyTransitGatewayVpcAttachmentCommand;
exports.ModifyVerifiedAccessEndpointCommand = ModifyVerifiedAccessEndpointCommand;
exports.ModifyVerifiedAccessEndpointPolicyCommand = ModifyVerifiedAccessEndpointPolicyCommand;
exports.ModifyVerifiedAccessGroupCommand = ModifyVerifiedAccessGroupCommand;
exports.ModifyVerifiedAccessGroupPolicyCommand = ModifyVerifiedAccessGroupPolicyCommand;
exports.ModifyVerifiedAccessInstanceCommand = ModifyVerifiedAccessInstanceCommand;
exports.ModifyVerifiedAccessInstanceLoggingConfigurationCommand = ModifyVerifiedAccessInstanceLoggingConfigurationCommand;
exports.ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog = ModifyVerifiedAccessNativeApplicationOidcOptionsFilterSensitiveLog;
exports.ModifyVerifiedAccessTrustProviderCommand = ModifyVerifiedAccessTrustProviderCommand;
exports.ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog = ModifyVerifiedAccessTrustProviderOidcOptionsFilterSensitiveLog;
exports.ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog = ModifyVerifiedAccessTrustProviderRequestFilterSensitiveLog;
exports.ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog = ModifyVerifiedAccessTrustProviderResultFilterSensitiveLog;
exports.ModifyVolumeAttributeCommand = ModifyVolumeAttributeCommand;
exports.ModifyVolumeCommand = ModifyVolumeCommand;
exports.ModifyVpcAttributeCommand = ModifyVpcAttributeCommand;
exports.ModifyVpcBlockPublicAccessExclusionCommand = ModifyVpcBlockPublicAccessExclusionCommand;
exports.ModifyVpcBlockPublicAccessOptionsCommand = ModifyVpcBlockPublicAccessOptionsCommand;
exports.ModifyVpcEndpointCommand = ModifyVpcEndpointCommand;
exports.ModifyVpcEndpointConnectionNotificationCommand = ModifyVpcEndpointConnectionNotificationCommand;
exports.ModifyVpcEndpointServiceConfigurationCommand = ModifyVpcEndpointServiceConfigurationCommand;
exports.ModifyVpcEndpointServicePayerResponsibilityCommand = ModifyVpcEndpointServicePayerResponsibilityCommand;
exports.ModifyVpcEndpointServicePermissionsCommand = ModifyVpcEndpointServicePermissionsCommand;
exports.ModifyVpcPeeringConnectionOptionsCommand = ModifyVpcPeeringConnectionOptionsCommand;
exports.ModifyVpcTenancyCommand = ModifyVpcTenancyCommand;
exports.ModifyVpnConnectionCommand = ModifyVpnConnectionCommand;
exports.ModifyVpnConnectionOptionsCommand = ModifyVpnConnectionOptionsCommand;
exports.ModifyVpnConnectionOptionsResultFilterSensitiveLog = ModifyVpnConnectionOptionsResultFilterSensitiveLog;
exports.ModifyVpnConnectionResultFilterSensitiveLog = ModifyVpnConnectionResultFilterSensitiveLog;
exports.ModifyVpnTunnelCertificateCommand = ModifyVpnTunnelCertificateCommand;
exports.ModifyVpnTunnelCertificateResultFilterSensitiveLog = ModifyVpnTunnelCertificateResultFilterSensitiveLog;
exports.ModifyVpnTunnelOptionsCommand = ModifyVpnTunnelOptionsCommand;
exports.ModifyVpnTunnelOptionsRequestFilterSensitiveLog = ModifyVpnTunnelOptionsRequestFilterSensitiveLog;
exports.ModifyVpnTunnelOptionsResultFilterSensitiveLog = ModifyVpnTunnelOptionsResultFilterSensitiveLog;
exports.ModifyVpnTunnelOptionsSpecificationFilterSensitiveLog = ModifyVpnTunnelOptionsSpecificationFilterSensitiveLog;
exports.MonitorInstancesCommand = MonitorInstancesCommand;
exports.MonitoringState = MonitoringState;
exports.MoveAddressToVpcCommand = MoveAddressToVpcCommand;
exports.MoveByoipCidrToIpamCommand = MoveByoipCidrToIpamCommand;
exports.MoveCapacityReservationInstancesCommand = MoveCapacityReservationInstancesCommand;
exports.MoveStatus = MoveStatus;
exports.MulticastSupportValue = MulticastSupportValue;
exports.NatGatewayAddressStatus = NatGatewayAddressStatus;
exports.NatGatewayState = NatGatewayState;
exports.NetworkInterfaceAttribute = NetworkInterfaceAttribute;
exports.NetworkInterfaceCreationType = NetworkInterfaceCreationType;
exports.NetworkInterfacePermissionStateCode = NetworkInterfacePermissionStateCode;
exports.NetworkInterfaceStatus = NetworkInterfaceStatus;
exports.NetworkInterfaceType = NetworkInterfaceType;
exports.NitroEnclavesSupport = NitroEnclavesSupport;
exports.NitroTpmSupport = NitroTpmSupport;
exports.OfferingClassType = OfferingClassType;
exports.OfferingTypeValues = OfferingTypeValues;
exports.OidcOptionsFilterSensitiveLog = OidcOptionsFilterSensitiveLog;
exports.OnDemandAllocationStrategy = OnDemandAllocationStrategy;
exports.OperationType = OperationType;
exports.PartitionLoadFrequency = PartitionLoadFrequency;
exports.PayerResponsibility = PayerResponsibility;
exports.PaymentOption = PaymentOption;
exports.PeriodType = PeriodType;
exports.PermissionGroup = PermissionGroup;
exports.PhcSupport = PhcSupport;
exports.PlacementGroupState = PlacementGroupState;
exports.PlacementGroupStrategy = PlacementGroupStrategy;
exports.PlacementStrategy = PlacementStrategy;
exports.PlatformValues = PlatformValues;
exports.PrefixListState = PrefixListState;
exports.PrincipalType = PrincipalType;
exports.ProductCodeValues = ProductCodeValues;
exports.Protocol = Protocol;
exports.ProtocolValue = ProtocolValue;
exports.ProvisionByoipCidrCommand = ProvisionByoipCidrCommand;
exports.ProvisionIpamByoasnCommand = ProvisionIpamByoasnCommand;
exports.ProvisionIpamPoolCidrCommand = ProvisionIpamPoolCidrCommand;
exports.ProvisionPublicIpv4PoolCidrCommand = ProvisionPublicIpv4PoolCidrCommand;
exports.PublicIpDnsOption = PublicIpDnsOption;
exports.PurchaseCapacityBlockCommand = PurchaseCapacityBlockCommand;
exports.PurchaseCapacityBlockExtensionCommand = PurchaseCapacityBlockExtensionCommand;
exports.PurchaseHostReservationCommand = PurchaseHostReservationCommand;
exports.PurchaseReservedInstancesOfferingCommand = PurchaseReservedInstancesOfferingCommand;
exports.PurchaseScheduledInstancesCommand = PurchaseScheduledInstancesCommand;
exports.RIProductDescription = RIProductDescription;
exports.RebootInstancesCommand = RebootInstancesCommand;
exports.RebootMigrationSupport = RebootMigrationSupport;
exports.RecurringChargeFrequency = RecurringChargeFrequency;
exports.RegisterImageCommand = RegisterImageCommand;
exports.RegisterInstanceEventNotificationAttributesCommand = RegisterInstanceEventNotificationAttributesCommand;
exports.RegisterTransitGatewayMulticastGroupMembersCommand = RegisterTransitGatewayMulticastGroupMembersCommand;
exports.RegisterTransitGatewayMulticastGroupSourcesCommand = RegisterTransitGatewayMulticastGroupSourcesCommand;
exports.RejectCapacityReservationBillingOwnershipCommand = RejectCapacityReservationBillingOwnershipCommand;
exports.RejectTransitGatewayMulticastDomainAssociationsCommand = RejectTransitGatewayMulticastDomainAssociationsCommand;
exports.RejectTransitGatewayPeeringAttachmentCommand = RejectTransitGatewayPeeringAttachmentCommand;
exports.RejectTransitGatewayVpcAttachmentCommand = RejectTransitGatewayVpcAttachmentCommand;
exports.RejectVpcEndpointConnectionsCommand = RejectVpcEndpointConnectionsCommand;
exports.RejectVpcPeeringConnectionCommand = RejectVpcPeeringConnectionCommand;
exports.ReleaseAddressCommand = ReleaseAddressCommand;
exports.ReleaseHostsCommand = ReleaseHostsCommand;
exports.ReleaseIpamPoolAllocationCommand = ReleaseIpamPoolAllocationCommand;
exports.ReplaceIamInstanceProfileAssociationCommand = ReplaceIamInstanceProfileAssociationCommand;
exports.ReplaceImageCriteriaInAllowedImagesSettingsCommand = ReplaceImageCriteriaInAllowedImagesSettingsCommand;
exports.ReplaceNetworkAclAssociationCommand = ReplaceNetworkAclAssociationCommand;
exports.ReplaceNetworkAclEntryCommand = ReplaceNetworkAclEntryCommand;
exports.ReplaceRootVolumeTaskState = ReplaceRootVolumeTaskState;
exports.ReplaceRouteCommand = ReplaceRouteCommand;
exports.ReplaceRouteTableAssociationCommand = ReplaceRouteTableAssociationCommand;
exports.ReplaceTransitGatewayRouteCommand = ReplaceTransitGatewayRouteCommand;
exports.ReplaceVpnTunnelCommand = ReplaceVpnTunnelCommand;
exports.ReplacementStrategy = ReplacementStrategy;
exports.ReportInstanceReasonCodes = ReportInstanceReasonCodes;
exports.ReportInstanceStatusCommand = ReportInstanceStatusCommand;
exports.ReportInstanceStatusRequestFilterSensitiveLog = ReportInstanceStatusRequestFilterSensitiveLog;
exports.ReportState = ReportState;
exports.ReportStatusType = ReportStatusType;
exports.RequestLaunchTemplateDataFilterSensitiveLog = RequestLaunchTemplateDataFilterSensitiveLog;
exports.RequestSpotFleetCommand = RequestSpotFleetCommand;
exports.RequestSpotFleetRequestFilterSensitiveLog = RequestSpotFleetRequestFilterSensitiveLog;
exports.RequestSpotInstancesCommand = RequestSpotInstancesCommand;
exports.RequestSpotInstancesRequestFilterSensitiveLog = RequestSpotInstancesRequestFilterSensitiveLog;
exports.RequestSpotInstancesResultFilterSensitiveLog = RequestSpotInstancesResultFilterSensitiveLog;
exports.RequestSpotLaunchSpecificationFilterSensitiveLog = RequestSpotLaunchSpecificationFilterSensitiveLog;
exports.ReservationState = ReservationState;
exports.ReservedInstanceState = ReservedInstanceState;
exports.ResetAddressAttributeCommand = ResetAddressAttributeCommand;
exports.ResetEbsDefaultKmsKeyIdCommand = ResetEbsDefaultKmsKeyIdCommand;
exports.ResetFpgaImageAttributeCommand = ResetFpgaImageAttributeCommand;
exports.ResetFpgaImageAttributeName = ResetFpgaImageAttributeName;
exports.ResetImageAttributeCommand = ResetImageAttributeCommand;
exports.ResetImageAttributeName = ResetImageAttributeName;
exports.ResetInstanceAttributeCommand = ResetInstanceAttributeCommand;
exports.ResetNetworkInterfaceAttributeCommand = ResetNetworkInterfaceAttributeCommand;
exports.ResetSnapshotAttributeCommand = ResetSnapshotAttributeCommand;
exports.ResourceType = ResourceType;
exports.ResponseLaunchTemplateDataFilterSensitiveLog = ResponseLaunchTemplateDataFilterSensitiveLog;
exports.RestoreAddressToClassicCommand = RestoreAddressToClassicCommand;
exports.RestoreImageFromRecycleBinCommand = RestoreImageFromRecycleBinCommand;
exports.RestoreManagedPrefixListVersionCommand = RestoreManagedPrefixListVersionCommand;
exports.RestoreSnapshotFromRecycleBinCommand = RestoreSnapshotFromRecycleBinCommand;
exports.RestoreSnapshotTierCommand = RestoreSnapshotTierCommand;
exports.RevokeClientVpnIngressCommand = RevokeClientVpnIngressCommand;
exports.RevokeSecurityGroupEgressCommand = RevokeSecurityGroupEgressCommand;
exports.RevokeSecurityGroupIngressCommand = RevokeSecurityGroupIngressCommand;
exports.RootDeviceType = RootDeviceType;
exports.RouteOrigin = RouteOrigin;
exports.RouteServerAssociationState = RouteServerAssociationState;
exports.RouteServerBfdState = RouteServerBfdState;
exports.RouteServerBgpState = RouteServerBgpState;
exports.RouteServerEndpointState = RouteServerEndpointState;
exports.RouteServerPeerLivenessMode = RouteServerPeerLivenessMode;
exports.RouteServerPeerState = RouteServerPeerState;
exports.RouteServerPersistRoutesAction = RouteServerPersistRoutesAction;
exports.RouteServerPersistRoutesState = RouteServerPersistRoutesState;
exports.RouteServerPropagationState = RouteServerPropagationState;
exports.RouteServerRouteInstallationStatus = RouteServerRouteInstallationStatus;
exports.RouteServerRouteStatus = RouteServerRouteStatus;
exports.RouteServerState = RouteServerState;
exports.RouteState = RouteState;
exports.RouteTableAssociationStateCode = RouteTableAssociationStateCode;
exports.RuleAction = RuleAction;
exports.RunInstancesCommand = RunInstancesCommand;
exports.RunInstancesRequestFilterSensitiveLog = RunInstancesRequestFilterSensitiveLog;
exports.RunScheduledInstancesCommand = RunScheduledInstancesCommand;
exports.RunScheduledInstancesRequestFilterSensitiveLog = RunScheduledInstancesRequestFilterSensitiveLog;
exports.S3StorageFilterSensitiveLog = S3StorageFilterSensitiveLog;
exports.SSEType = SSEType;
exports.ScheduledInstancesLaunchSpecificationFilterSensitiveLog = ScheduledInstancesLaunchSpecificationFilterSensitiveLog;
exports.Scope = Scope;
exports.SearchLocalGatewayRoutesCommand = SearchLocalGatewayRoutesCommand;
exports.SearchTransitGatewayMulticastGroupsCommand = SearchTransitGatewayMulticastGroupsCommand;
exports.SearchTransitGatewayRoutesCommand = SearchTransitGatewayRoutesCommand;
exports.SecurityGroupReferencingSupportValue = SecurityGroupReferencingSupportValue;
exports.SecurityGroupVpcAssociationState = SecurityGroupVpcAssociationState;
exports.SelfServicePortal = SelfServicePortal;
exports.SendDiagnosticInterruptCommand = SendDiagnosticInterruptCommand;
exports.ServiceConnectivityType = ServiceConnectivityType;
exports.ServiceLinkVirtualInterfaceConfigurationState = ServiceLinkVirtualInterfaceConfigurationState;
exports.ServiceManaged = ServiceManaged;
exports.ServiceState = ServiceState;
exports.ServiceType = ServiceType;
exports.ShutdownBehavior = ShutdownBehavior;
exports.SnapshotAttributeName = SnapshotAttributeName;
exports.SnapshotBlockPublicAccessState = SnapshotBlockPublicAccessState;
exports.SnapshotDetailFilterSensitiveLog = SnapshotDetailFilterSensitiveLog;
exports.SnapshotDiskContainerFilterSensitiveLog = SnapshotDiskContainerFilterSensitiveLog;
exports.SnapshotLocationEnum = SnapshotLocationEnum;
exports.SnapshotReturnCodes = SnapshotReturnCodes;
exports.SnapshotState = SnapshotState;
exports.SnapshotTaskDetailFilterSensitiveLog = SnapshotTaskDetailFilterSensitiveLog;
exports.SpotAllocationStrategy = SpotAllocationStrategy;
exports.SpotFleetLaunchSpecificationFilterSensitiveLog = SpotFleetLaunchSpecificationFilterSensitiveLog;
exports.SpotFleetRequestConfigDataFilterSensitiveLog = SpotFleetRequestConfigDataFilterSensitiveLog;
exports.SpotFleetRequestConfigFilterSensitiveLog = SpotFleetRequestConfigFilterSensitiveLog;
exports.SpotInstanceInterruptionBehavior = SpotInstanceInterruptionBehavior;
exports.SpotInstanceRequestFilterSensitiveLog = SpotInstanceRequestFilterSensitiveLog;
exports.SpotInstanceState = SpotInstanceState;
exports.SpotInstanceType = SpotInstanceType;
exports.SpreadLevel = SpreadLevel;
exports.StartDeclarativePoliciesReportCommand = StartDeclarativePoliciesReportCommand;
exports.StartInstancesCommand = StartInstancesCommand;
exports.StartNetworkInsightsAccessScopeAnalysisCommand = StartNetworkInsightsAccessScopeAnalysisCommand;
exports.StartNetworkInsightsAnalysisCommand = StartNetworkInsightsAnalysisCommand;
exports.StartVpcEndpointServicePrivateDnsVerificationCommand = StartVpcEndpointServicePrivateDnsVerificationCommand;
exports.State = State;
exports.StaticSourcesSupportValue = StaticSourcesSupportValue;
exports.StatisticType = StatisticType;
exports.Status = Status;
exports.StatusName = StatusName;
exports.StatusType = StatusType;
exports.StopInstancesCommand = StopInstancesCommand;
exports.StorageFilterSensitiveLog = StorageFilterSensitiveLog;
exports.StorageTier = StorageTier;
exports.SubnetCidrBlockStateCode = SubnetCidrBlockStateCode;
exports.SubnetCidrReservationType = SubnetCidrReservationType;
exports.SubnetState = SubnetState;
exports.SummaryStatus = SummaryStatus;
exports.SupportedAdditionalProcessorFeature = SupportedAdditionalProcessorFeature;
exports.TargetCapacityUnitType = TargetCapacityUnitType;
exports.TargetStorageTier = TargetStorageTier;
exports.TelemetryStatus = TelemetryStatus;
exports.Tenancy = Tenancy;
exports.TerminateClientVpnConnectionsCommand = TerminateClientVpnConnectionsCommand;
exports.TerminateInstancesCommand = TerminateInstancesCommand;
exports.TieringOperationStatus = TieringOperationStatus;
exports.TokenState = TokenState;
exports.TpmSupportValues = TpmSupportValues;
exports.TrafficDirection = TrafficDirection;
exports.TrafficIpAddressType = TrafficIpAddressType;
exports.TrafficMirrorFilterRuleField = TrafficMirrorFilterRuleField;
exports.TrafficMirrorNetworkService = TrafficMirrorNetworkService;
exports.TrafficMirrorRuleAction = TrafficMirrorRuleAction;
exports.TrafficMirrorSessionField = TrafficMirrorSessionField;
exports.TrafficMirrorTargetType = TrafficMirrorTargetType;
exports.TrafficType = TrafficType;
exports.TransferType = TransferType;
exports.TransitGatewayAssociationState = TransitGatewayAssociationState;
exports.TransitGatewayAttachmentResourceType = TransitGatewayAttachmentResourceType;
exports.TransitGatewayAttachmentState = TransitGatewayAttachmentState;
exports.TransitGatewayConnectPeerState = TransitGatewayConnectPeerState;
exports.TransitGatewayMulitcastDomainAssociationState = TransitGatewayMulitcastDomainAssociationState;
exports.TransitGatewayMulticastDomainState = TransitGatewayMulticastDomainState;
exports.TransitGatewayPolicyTableState = TransitGatewayPolicyTableState;
exports.TransitGatewayPrefixListReferenceState = TransitGatewayPrefixListReferenceState;
exports.TransitGatewayPropagationState = TransitGatewayPropagationState;
exports.TransitGatewayRouteState = TransitGatewayRouteState;
exports.TransitGatewayRouteTableAnnouncementDirection = TransitGatewayRouteTableAnnouncementDirection;
exports.TransitGatewayRouteTableAnnouncementState = TransitGatewayRouteTableAnnouncementState;
exports.TransitGatewayRouteTableState = TransitGatewayRouteTableState;
exports.TransitGatewayRouteType = TransitGatewayRouteType;
exports.TransitGatewayState = TransitGatewayState;
exports.TransportProtocol = TransportProtocol;
exports.TrustProviderType = TrustProviderType;
exports.TunnelInsideIpVersion = TunnelInsideIpVersion;
exports.TunnelOptionFilterSensitiveLog = TunnelOptionFilterSensitiveLog;
exports.UnassignIpv6AddressesCommand = UnassignIpv6AddressesCommand;
exports.UnassignPrivateIpAddressesCommand = UnassignPrivateIpAddressesCommand;
exports.UnassignPrivateNatGatewayAddressCommand = UnassignPrivateNatGatewayAddressCommand;
exports.UnlimitedSupportedInstanceFamily = UnlimitedSupportedInstanceFamily;
exports.UnlockSnapshotCommand = UnlockSnapshotCommand;
exports.UnmonitorInstancesCommand = UnmonitorInstancesCommand;
exports.UnsuccessfulInstanceCreditSpecificationErrorCode = UnsuccessfulInstanceCreditSpecificationErrorCode;
exports.UpdateSecurityGroupRuleDescriptionsEgressCommand = UpdateSecurityGroupRuleDescriptionsEgressCommand;
exports.UpdateSecurityGroupRuleDescriptionsIngressCommand = UpdateSecurityGroupRuleDescriptionsIngressCommand;
exports.UsageClassType = UsageClassType;
exports.UserDataFilterSensitiveLog = UserDataFilterSensitiveLog;
exports.UserTrustProviderType = UserTrustProviderType;
exports.VerificationMethod = VerificationMethod;
exports.VerifiedAccessEndpointAttachmentType = VerifiedAccessEndpointAttachmentType;
exports.VerifiedAccessEndpointProtocol = VerifiedAccessEndpointProtocol;
exports.VerifiedAccessEndpointStatusCode = VerifiedAccessEndpointStatusCode;
exports.VerifiedAccessEndpointType = VerifiedAccessEndpointType;
exports.VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog = VerifiedAccessInstanceUserTrustProviderClientConfigurationFilterSensitiveLog;
exports.VerifiedAccessLogDeliveryStatusCode = VerifiedAccessLogDeliveryStatusCode;
exports.VerifiedAccessTrustProviderFilterSensitiveLog = VerifiedAccessTrustProviderFilterSensitiveLog;
exports.VirtualizationType = VirtualizationType;
exports.VolumeAttachmentState = VolumeAttachmentState;
exports.VolumeAttributeName = VolumeAttributeName;
exports.VolumeModificationState = VolumeModificationState;
exports.VolumeState = VolumeState;
exports.VolumeStatusInfoStatus = VolumeStatusInfoStatus;
exports.VolumeStatusName = VolumeStatusName;
exports.VolumeType = VolumeType;
exports.VpcAttributeName = VpcAttributeName;
exports.VpcBlockPublicAccessExclusionState = VpcBlockPublicAccessExclusionState;
exports.VpcBlockPublicAccessExclusionsAllowed = VpcBlockPublicAccessExclusionsAllowed;
exports.VpcBlockPublicAccessState = VpcBlockPublicAccessState;
exports.VpcCidrBlockStateCode = VpcCidrBlockStateCode;
exports.VpcEncryptionControlExclusionState = VpcEncryptionControlExclusionState;
exports.VpcEncryptionControlMode = VpcEncryptionControlMode;
exports.VpcEncryptionControlState = VpcEncryptionControlState;
exports.VpcEndpointType = VpcEndpointType;
exports.VpcPeeringConnectionStateReasonCode = VpcPeeringConnectionStateReasonCode;
exports.VpcState = VpcState;
exports.VpcTenancy = VpcTenancy;
exports.VpnConnectionFilterSensitiveLog = VpnConnectionFilterSensitiveLog;
exports.VpnConnectionOptionsFilterSensitiveLog = VpnConnectionOptionsFilterSensitiveLog;
exports.VpnConnectionOptionsSpecificationFilterSensitiveLog = VpnConnectionOptionsSpecificationFilterSensitiveLog;
exports.VpnEcmpSupportValue = VpnEcmpSupportValue;
exports.VpnProtocol = VpnProtocol;
exports.VpnState = VpnState;
exports.VpnStaticRouteSource = VpnStaticRouteSource;
exports.VpnTunnelOptionsSpecificationFilterSensitiveLog = VpnTunnelOptionsSpecificationFilterSensitiveLog;
exports.VpnTunnelProvisioningStatus = VpnTunnelProvisioningStatus;
exports.WeekDay = WeekDay;
exports.WithdrawByoipCidrCommand = WithdrawByoipCidrCommand;
exports._InstanceType = _InstanceType;
exports.paginateDescribeAddressTransfers = paginateDescribeAddressTransfers;
exports.paginateDescribeAddressesAttribute = paginateDescribeAddressesAttribute;
exports.paginateDescribeAwsNetworkPerformanceMetricSubscriptions = paginateDescribeAwsNetworkPerformanceMetricSubscriptions;
exports.paginateDescribeByoipCidrs = paginateDescribeByoipCidrs;
exports.paginateDescribeCapacityBlockExtensionHistory = paginateDescribeCapacityBlockExtensionHistory;
exports.paginateDescribeCapacityBlockExtensionOfferings = paginateDescribeCapacityBlockExtensionOfferings;
exports.paginateDescribeCapacityBlockOfferings = paginateDescribeCapacityBlockOfferings;
exports.paginateDescribeCapacityBlockStatus = paginateDescribeCapacityBlockStatus;
exports.paginateDescribeCapacityBlocks = paginateDescribeCapacityBlocks;
exports.paginateDescribeCapacityReservationBillingRequests = paginateDescribeCapacityReservationBillingRequests;
exports.paginateDescribeCapacityReservationFleets = paginateDescribeCapacityReservationFleets;
exports.paginateDescribeCapacityReservations = paginateDescribeCapacityReservations;
exports.paginateDescribeCarrierGateways = paginateDescribeCarrierGateways;
exports.paginateDescribeClassicLinkInstances = paginateDescribeClassicLinkInstances;
exports.paginateDescribeClientVpnAuthorizationRules = paginateDescribeClientVpnAuthorizationRules;
exports.paginateDescribeClientVpnConnections = paginateDescribeClientVpnConnections;
exports.paginateDescribeClientVpnEndpoints = paginateDescribeClientVpnEndpoints;
exports.paginateDescribeClientVpnRoutes = paginateDescribeClientVpnRoutes;
exports.paginateDescribeClientVpnTargetNetworks = paginateDescribeClientVpnTargetNetworks;
exports.paginateDescribeCoipPools = paginateDescribeCoipPools;
exports.paginateDescribeDhcpOptions = paginateDescribeDhcpOptions;
exports.paginateDescribeEgressOnlyInternetGateways = paginateDescribeEgressOnlyInternetGateways;
exports.paginateDescribeExportImageTasks = paginateDescribeExportImageTasks;
exports.paginateDescribeFastLaunchImages = paginateDescribeFastLaunchImages;
exports.paginateDescribeFastSnapshotRestores = paginateDescribeFastSnapshotRestores;
exports.paginateDescribeFleets = paginateDescribeFleets;
exports.paginateDescribeFlowLogs = paginateDescribeFlowLogs;
exports.paginateDescribeFpgaImages = paginateDescribeFpgaImages;
exports.paginateDescribeHostReservationOfferings = paginateDescribeHostReservationOfferings;
exports.paginateDescribeHostReservations = paginateDescribeHostReservations;
exports.paginateDescribeHosts = paginateDescribeHosts;
exports.paginateDescribeIamInstanceProfileAssociations = paginateDescribeIamInstanceProfileAssociations;
exports.paginateDescribeImageReferences = paginateDescribeImageReferences;
exports.paginateDescribeImageUsageReportEntries = paginateDescribeImageUsageReportEntries;
exports.paginateDescribeImageUsageReports = paginateDescribeImageUsageReports;
exports.paginateDescribeImages = paginateDescribeImages;
exports.paginateDescribeImportImageTasks = paginateDescribeImportImageTasks;
exports.paginateDescribeImportSnapshotTasks = paginateDescribeImportSnapshotTasks;
exports.paginateDescribeInstanceConnectEndpoints = paginateDescribeInstanceConnectEndpoints;
exports.paginateDescribeInstanceCreditSpecifications = paginateDescribeInstanceCreditSpecifications;
exports.paginateDescribeInstanceEventWindows = paginateDescribeInstanceEventWindows;
exports.paginateDescribeInstanceImageMetadata = paginateDescribeInstanceImageMetadata;
exports.paginateDescribeInstanceStatus = paginateDescribeInstanceStatus;
exports.paginateDescribeInstanceTopology = paginateDescribeInstanceTopology;
exports.paginateDescribeInstanceTypeOfferings = paginateDescribeInstanceTypeOfferings;
exports.paginateDescribeInstanceTypes = paginateDescribeInstanceTypes;
exports.paginateDescribeInstances = paginateDescribeInstances;
exports.paginateDescribeInternetGateways = paginateDescribeInternetGateways;
exports.paginateDescribeIpamPools = paginateDescribeIpamPools;
exports.paginateDescribeIpamResourceDiscoveries = paginateDescribeIpamResourceDiscoveries;
exports.paginateDescribeIpamResourceDiscoveryAssociations = paginateDescribeIpamResourceDiscoveryAssociations;
exports.paginateDescribeIpamScopes = paginateDescribeIpamScopes;
exports.paginateDescribeIpams = paginateDescribeIpams;
exports.paginateDescribeIpv6Pools = paginateDescribeIpv6Pools;
exports.paginateDescribeLaunchTemplateVersions = paginateDescribeLaunchTemplateVersions;
exports.paginateDescribeLaunchTemplates = paginateDescribeLaunchTemplates;
exports.paginateDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations = paginateDescribeLocalGatewayRouteTableVirtualInterfaceGroupAssociations;
exports.paginateDescribeLocalGatewayRouteTableVpcAssociations = paginateDescribeLocalGatewayRouteTableVpcAssociations;
exports.paginateDescribeLocalGatewayRouteTables = paginateDescribeLocalGatewayRouteTables;
exports.paginateDescribeLocalGatewayVirtualInterfaceGroups = paginateDescribeLocalGatewayVirtualInterfaceGroups;
exports.paginateDescribeLocalGatewayVirtualInterfaces = paginateDescribeLocalGatewayVirtualInterfaces;
exports.paginateDescribeLocalGateways = paginateDescribeLocalGateways;
exports.paginateDescribeMacHosts = paginateDescribeMacHosts;
exports.paginateDescribeMacModificationTasks = paginateDescribeMacModificationTasks;
exports.paginateDescribeManagedPrefixLists = paginateDescribeManagedPrefixLists;
exports.paginateDescribeMovingAddresses = paginateDescribeMovingAddresses;
exports.paginateDescribeNatGateways = paginateDescribeNatGateways;
exports.paginateDescribeNetworkAcls = paginateDescribeNetworkAcls;
exports.paginateDescribeNetworkInsightsAccessScopeAnalyses = paginateDescribeNetworkInsightsAccessScopeAnalyses;
exports.paginateDescribeNetworkInsightsAccessScopes = paginateDescribeNetworkInsightsAccessScopes;
exports.paginateDescribeNetworkInsightsAnalyses = paginateDescribeNetworkInsightsAnalyses;
exports.paginateDescribeNetworkInsightsPaths = paginateDescribeNetworkInsightsPaths;
exports.paginateDescribeNetworkInterfacePermissions = paginateDescribeNetworkInterfacePermissions;
exports.paginateDescribeNetworkInterfaces = paginateDescribeNetworkInterfaces;
exports.paginateDescribePrefixLists = paginateDescribePrefixLists;
exports.paginateDescribePrincipalIdFormat = paginateDescribePrincipalIdFormat;
exports.paginateDescribePublicIpv4Pools = paginateDescribePublicIpv4Pools;
exports.paginateDescribeReplaceRootVolumeTasks = paginateDescribeReplaceRootVolumeTasks;
exports.paginateDescribeReservedInstancesModifications = paginateDescribeReservedInstancesModifications;
exports.paginateDescribeReservedInstancesOfferings = paginateDescribeReservedInstancesOfferings;
exports.paginateDescribeRouteServerEndpoints = paginateDescribeRouteServerEndpoints;
exports.paginateDescribeRouteServerPeers = paginateDescribeRouteServerPeers;
exports.paginateDescribeRouteServers = paginateDescribeRouteServers;
exports.paginateDescribeRouteTables = paginateDescribeRouteTables;
exports.paginateDescribeScheduledInstanceAvailability = paginateDescribeScheduledInstanceAvailability;
exports.paginateDescribeScheduledInstances = paginateDescribeScheduledInstances;
exports.paginateDescribeSecurityGroupRules = paginateDescribeSecurityGroupRules;
exports.paginateDescribeSecurityGroupVpcAssociations = paginateDescribeSecurityGroupVpcAssociations;
exports.paginateDescribeSecurityGroups = paginateDescribeSecurityGroups;
exports.paginateDescribeSnapshotTierStatus = paginateDescribeSnapshotTierStatus;
exports.paginateDescribeSnapshots = paginateDescribeSnapshots;
exports.paginateDescribeSpotFleetRequests = paginateDescribeSpotFleetRequests;
exports.paginateDescribeSpotInstanceRequests = paginateDescribeSpotInstanceRequests;
exports.paginateDescribeSpotPriceHistory = paginateDescribeSpotPriceHistory;
exports.paginateDescribeStaleSecurityGroups = paginateDescribeStaleSecurityGroups;
exports.paginateDescribeStoreImageTasks = paginateDescribeStoreImageTasks;
exports.paginateDescribeSubnets = paginateDescribeSubnets;
exports.paginateDescribeTags = paginateDescribeTags;
exports.paginateDescribeTrafficMirrorFilters = paginateDescribeTrafficMirrorFilters;
exports.paginateDescribeTrafficMirrorSessions = paginateDescribeTrafficMirrorSessions;
exports.paginateDescribeTrafficMirrorTargets = paginateDescribeTrafficMirrorTargets;
exports.paginateDescribeTransitGatewayAttachments = paginateDescribeTransitGatewayAttachments;
exports.paginateDescribeTransitGatewayConnectPeers = paginateDescribeTransitGatewayConnectPeers;
exports.paginateDescribeTransitGatewayConnects = paginateDescribeTransitGatewayConnects;
exports.paginateDescribeTransitGatewayMulticastDomains = paginateDescribeTransitGatewayMulticastDomains;
exports.paginateDescribeTransitGatewayPeeringAttachments = paginateDescribeTransitGatewayPeeringAttachments;
exports.paginateDescribeTransitGatewayPolicyTables = paginateDescribeTransitGatewayPolicyTables;
exports.paginateDescribeTransitGatewayRouteTableAnnouncements = paginateDescribeTransitGatewayRouteTableAnnouncements;
exports.paginateDescribeTransitGatewayRouteTables = paginateDescribeTransitGatewayRouteTables;
exports.paginateDescribeTransitGatewayVpcAttachments = paginateDescribeTransitGatewayVpcAttachments;
exports.paginateDescribeTransitGateways = paginateDescribeTransitGateways;
exports.paginateDescribeTrunkInterfaceAssociations = paginateDescribeTrunkInterfaceAssociations;
exports.paginateDescribeVerifiedAccessEndpoints = paginateDescribeVerifiedAccessEndpoints;
exports.paginateDescribeVerifiedAccessGroups = paginateDescribeVerifiedAccessGroups;
exports.paginateDescribeVerifiedAccessInstanceLoggingConfigurations = paginateDescribeVerifiedAccessInstanceLoggingConfigurations;
exports.paginateDescribeVerifiedAccessInstances = paginateDescribeVerifiedAccessInstances;
exports.paginateDescribeVerifiedAccessTrustProviders = paginateDescribeVerifiedAccessTrustProviders;
exports.paginateDescribeVolumeStatus = paginateDescribeVolumeStatus;
exports.paginateDescribeVolumes = paginateDescribeVolumes;
exports.paginateDescribeVolumesModifications = paginateDescribeVolumesModifications;
exports.paginateDescribeVpcClassicLinkDnsSupport = paginateDescribeVpcClassicLinkDnsSupport;
exports.paginateDescribeVpcEndpointConnectionNotifications = paginateDescribeVpcEndpointConnectionNotifications;
exports.paginateDescribeVpcEndpointConnections = paginateDescribeVpcEndpointConnections;
exports.paginateDescribeVpcEndpointServiceConfigurations = paginateDescribeVpcEndpointServiceConfigurations;
exports.paginateDescribeVpcEndpointServicePermissions = paginateDescribeVpcEndpointServicePermissions;
exports.paginateDescribeVpcEndpoints = paginateDescribeVpcEndpoints;
exports.paginateDescribeVpcPeeringConnections = paginateDescribeVpcPeeringConnections;
exports.paginateDescribeVpcs = paginateDescribeVpcs;
exports.paginateGetAssociatedIpv6PoolCidrs = paginateGetAssociatedIpv6PoolCidrs;
exports.paginateGetAwsNetworkPerformanceData = paginateGetAwsNetworkPerformanceData;
exports.paginateGetGroupsForCapacityReservation = paginateGetGroupsForCapacityReservation;
exports.paginateGetInstanceTypesFromInstanceRequirements = paginateGetInstanceTypesFromInstanceRequirements;
exports.paginateGetIpamAddressHistory = paginateGetIpamAddressHistory;
exports.paginateGetIpamDiscoveredAccounts = paginateGetIpamDiscoveredAccounts;
exports.paginateGetIpamDiscoveredResourceCidrs = paginateGetIpamDiscoveredResourceCidrs;
exports.paginateGetIpamPoolAllocations = paginateGetIpamPoolAllocations;
exports.paginateGetIpamPoolCidrs = paginateGetIpamPoolCidrs;
exports.paginateGetIpamResourceCidrs = paginateGetIpamResourceCidrs;
exports.paginateGetManagedPrefixListAssociations = paginateGetManagedPrefixListAssociations;
exports.paginateGetManagedPrefixListEntries = paginateGetManagedPrefixListEntries;
exports.paginateGetNetworkInsightsAccessScopeAnalysisFindings = paginateGetNetworkInsightsAccessScopeAnalysisFindings;
exports.paginateGetSecurityGroupsForVpc = paginateGetSecurityGroupsForVpc;
exports.paginateGetSpotPlacementScores = paginateGetSpotPlacementScores;
exports.paginateGetTransitGatewayAttachmentPropagations = paginateGetTransitGatewayAttachmentPropagations;
exports.paginateGetTransitGatewayMulticastDomainAssociations = paginateGetTransitGatewayMulticastDomainAssociations;
exports.paginateGetTransitGatewayPolicyTableAssociations = paginateGetTransitGatewayPolicyTableAssociations;
exports.paginateGetTransitGatewayPrefixListReferences = paginateGetTransitGatewayPrefixListReferences;
exports.paginateGetTransitGatewayRouteTableAssociations = paginateGetTransitGatewayRouteTableAssociations;
exports.paginateGetTransitGatewayRouteTablePropagations = paginateGetTransitGatewayRouteTablePropagations;
exports.paginateGetVpnConnectionDeviceTypes = paginateGetVpnConnectionDeviceTypes;
exports.paginateListImagesInRecycleBin = paginateListImagesInRecycleBin;
exports.paginateListSnapshotsInRecycleBin = paginateListSnapshotsInRecycleBin;
exports.paginateSearchLocalGatewayRoutes = paginateSearchLocalGatewayRoutes;
exports.paginateSearchTransitGatewayMulticastGroups = paginateSearchTransitGatewayMulticastGroups;
exports.waitForBundleTaskComplete = waitForBundleTaskComplete;
exports.waitForConversionTaskCancelled = waitForConversionTaskCancelled;
exports.waitForConversionTaskCompleted = waitForConversionTaskCompleted;
exports.waitForConversionTaskDeleted = waitForConversionTaskDeleted;
exports.waitForCustomerGatewayAvailable = waitForCustomerGatewayAvailable;
exports.waitForExportTaskCancelled = waitForExportTaskCancelled;
exports.waitForExportTaskCompleted = waitForExportTaskCompleted;
exports.waitForImageAvailable = waitForImageAvailable;
exports.waitForImageExists = waitForImageExists;
exports.waitForImageUsageReportAvailable = waitForImageUsageReportAvailable;
exports.waitForInstanceExists = waitForInstanceExists;
exports.waitForInstanceRunning = waitForInstanceRunning;
exports.waitForInstanceStatusOk = waitForInstanceStatusOk;
exports.waitForInstanceStopped = waitForInstanceStopped;
exports.waitForInstanceTerminated = waitForInstanceTerminated;
exports.waitForInternetGatewayExists = waitForInternetGatewayExists;
exports.waitForKeyPairExists = waitForKeyPairExists;
exports.waitForNatGatewayAvailable = waitForNatGatewayAvailable;
exports.waitForNatGatewayDeleted = waitForNatGatewayDeleted;
exports.waitForNetworkInterfaceAvailable = waitForNetworkInterfaceAvailable;
exports.waitForPasswordDataAvailable = waitForPasswordDataAvailable;
exports.waitForSecurityGroupExists = waitForSecurityGroupExists;
exports.waitForSecurityGroupVpcAssociationAssociated = waitForSecurityGroupVpcAssociationAssociated;
exports.waitForSecurityGroupVpcAssociationDisassociated = waitForSecurityGroupVpcAssociationDisassociated;
exports.waitForSnapshotCompleted = waitForSnapshotCompleted;
exports.waitForSnapshotImported = waitForSnapshotImported;
exports.waitForSpotInstanceRequestFulfilled = waitForSpotInstanceRequestFulfilled;
exports.waitForStoreImageTaskComplete = waitForStoreImageTaskComplete;
exports.waitForSubnetAvailable = waitForSubnetAvailable;
exports.waitForSystemStatusOk = waitForSystemStatusOk;
exports.waitForVolumeAvailable = waitForVolumeAvailable;
exports.waitForVolumeDeleted = waitForVolumeDeleted;
exports.waitForVolumeInUse = waitForVolumeInUse;
exports.waitForVpcAvailable = waitForVpcAvailable;
exports.waitForVpcExists = waitForVpcExists;
exports.waitForVpcPeeringConnectionDeleted = waitForVpcPeeringConnectionDeleted;
exports.waitForVpcPeeringConnectionExists = waitForVpcPeeringConnectionExists;
exports.waitForVpnConnectionAvailable = waitForVpnConnectionAvailable;
exports.waitForVpnConnectionDeleted = waitForVpnConnectionDeleted;
exports.waitUntilBundleTaskComplete = waitUntilBundleTaskComplete;
exports.waitUntilConversionTaskCancelled = waitUntilConversionTaskCancelled;
exports.waitUntilConversionTaskCompleted = waitUntilConversionTaskCompleted;
exports.waitUntilConversionTaskDeleted = waitUntilConversionTaskDeleted;
exports.waitUntilCustomerGatewayAvailable = waitUntilCustomerGatewayAvailable;
exports.waitUntilExportTaskCancelled = waitUntilExportTaskCancelled;
exports.waitUntilExportTaskCompleted = waitUntilExportTaskCompleted;
exports.waitUntilImageAvailable = waitUntilImageAvailable;
exports.waitUntilImageExists = waitUntilImageExists;
exports.waitUntilImageUsageReportAvailable = waitUntilImageUsageReportAvailable;
exports.waitUntilInstanceExists = waitUntilInstanceExists;
exports.waitUntilInstanceRunning = waitUntilInstanceRunning;
exports.waitUntilInstanceStatusOk = waitUntilInstanceStatusOk;
exports.waitUntilInstanceStopped = waitUntilInstanceStopped;
exports.waitUntilInstanceTerminated = waitUntilInstanceTerminated;
exports.waitUntilInternetGatewayExists = waitUntilInternetGatewayExists;
exports.waitUntilKeyPairExists = waitUntilKeyPairExists;
exports.waitUntilNatGatewayAvailable = waitUntilNatGatewayAvailable;
exports.waitUntilNatGatewayDeleted = waitUntilNatGatewayDeleted;
exports.waitUntilNetworkInterfaceAvailable = waitUntilNetworkInterfaceAvailable;
exports.waitUntilPasswordDataAvailable = waitUntilPasswordDataAvailable;
exports.waitUntilSecurityGroupExists = waitUntilSecurityGroupExists;
exports.waitUntilSecurityGroupVpcAssociationAssociated = waitUntilSecurityGroupVpcAssociationAssociated;
exports.waitUntilSecurityGroupVpcAssociationDisassociated = waitUntilSecurityGroupVpcAssociationDisassociated;
exports.waitUntilSnapshotCompleted = waitUntilSnapshotCompleted;
exports.waitUntilSnapshotImported = waitUntilSnapshotImported;
exports.waitUntilSpotInstanceRequestFulfilled = waitUntilSpotInstanceRequestFulfilled;
exports.waitUntilStoreImageTaskComplete = waitUntilStoreImageTaskComplete;
exports.waitUntilSubnetAvailable = waitUntilSubnetAvailable;
exports.waitUntilSystemStatusOk = waitUntilSystemStatusOk;
exports.waitUntilVolumeAvailable = waitUntilVolumeAvailable;
exports.waitUntilVolumeDeleted = waitUntilVolumeDeleted;
exports.waitUntilVolumeInUse = waitUntilVolumeInUse;
exports.waitUntilVpcAvailable = waitUntilVpcAvailable;
exports.waitUntilVpcExists = waitUntilVpcExists;
exports.waitUntilVpcPeeringConnectionDeleted = waitUntilVpcPeeringConnectionDeleted;
exports.waitUntilVpcPeeringConnectionExists = waitUntilVpcPeeringConnectionExists;
exports.waitUntilVpnConnectionAvailable = waitUntilVpnConnectionAvailable;
exports.waitUntilVpnConnectionDeleted = waitUntilVpnConnectionDeleted;
